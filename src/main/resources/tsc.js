var ts =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation. All rights reserved. 
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0  
	 
	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, 
	MERCHANTABLITY OR NON-INFRINGEMENT. 
	 
	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */

	var ts;
	(function (ts) {
	    var OperationCanceledException = (function () {
	        function OperationCanceledException() {
	        }
	        return OperationCanceledException;
	    })();
	    ts.OperationCanceledException = OperationCanceledException;
	    (function (ExitStatus) {
	        ExitStatus[ExitStatus["Success"] = 0] = "Success";
	        ExitStatus[ExitStatus["DiagnosticsPresent_OutputsSkipped"] = 1] = "DiagnosticsPresent_OutputsSkipped";
	        ExitStatus[ExitStatus["DiagnosticsPresent_OutputsGenerated"] = 2] = "DiagnosticsPresent_OutputsGenerated";
	    })(ts.ExitStatus || (ts.ExitStatus = {}));
	    var ExitStatus = ts.ExitStatus;
	    (function (TypeReferenceSerializationKind) {
	        TypeReferenceSerializationKind[TypeReferenceSerializationKind["Unknown"] = 0] = "Unknown";
	        TypeReferenceSerializationKind[TypeReferenceSerializationKind["TypeWithConstructSignatureAndValue"] = 1] = "TypeWithConstructSignatureAndValue";
	        TypeReferenceSerializationKind[TypeReferenceSerializationKind["VoidType"] = 2] = "VoidType";
	        TypeReferenceSerializationKind[TypeReferenceSerializationKind["NumberLikeType"] = 3] = "NumberLikeType";
	        TypeReferenceSerializationKind[TypeReferenceSerializationKind["StringLikeType"] = 4] = "StringLikeType";
	        TypeReferenceSerializationKind[TypeReferenceSerializationKind["BooleanType"] = 5] = "BooleanType";
	        TypeReferenceSerializationKind[TypeReferenceSerializationKind["ArrayLikeType"] = 6] = "ArrayLikeType";
	        TypeReferenceSerializationKind[TypeReferenceSerializationKind["ESSymbolType"] = 7] = "ESSymbolType";
	        TypeReferenceSerializationKind[TypeReferenceSerializationKind["TypeWithCallSignature"] = 8] = "TypeWithCallSignature";
	        TypeReferenceSerializationKind[TypeReferenceSerializationKind["ObjectType"] = 9] = "ObjectType";
	    })(ts.TypeReferenceSerializationKind || (ts.TypeReferenceSerializationKind = {}));
	    var TypeReferenceSerializationKind = ts.TypeReferenceSerializationKind;
	    (function (DiagnosticCategory) {
	        DiagnosticCategory[DiagnosticCategory["Warning"] = 0] = "Warning";
	        DiagnosticCategory[DiagnosticCategory["Error"] = 1] = "Error";
	        DiagnosticCategory[DiagnosticCategory["Message"] = 2] = "Message";
	    })(ts.DiagnosticCategory || (ts.DiagnosticCategory = {}));
	    var DiagnosticCategory = ts.DiagnosticCategory;
	})(ts || (ts = {}));
	/// <reference path="types.ts"/>
	var ts;
	(function (ts) {
	    function createFileMap(getCanonicalFileName) {
	        var files = {};
	        return {
	            get: get,
	            set: set,
	            contains: contains,
	            remove: remove,
	            clear: clear,
	            forEachValue: forEachValueInMap
	        };
	        function set(fileName, value) {
	            files[normalizeKey(fileName)] = value;
	        }
	        function get(fileName) {
	            return files[normalizeKey(fileName)];
	        }
	        function contains(fileName) {
	            return hasProperty(files, normalizeKey(fileName));
	        }
	        function remove(fileName) {
	            var key = normalizeKey(fileName);
	            delete files[key];
	        }
	        function forEachValueInMap(f) {
	            forEachValue(files, f);
	        }
	        function normalizeKey(key) {
	            return getCanonicalFileName(normalizeSlashes(key));
	        }
	        function clear() {
	            files = {};
	        }
	    }
	    ts.createFileMap = createFileMap;
	    function forEach(array, callback) {
	        if (array) {
	            for (var i = 0, len = array.length; i < len; i++) {
	                var result = callback(array[i], i);
	                if (result) {
	                    return result;
	                }
	            }
	        }
	        return undefined;
	    }
	    ts.forEach = forEach;
	    function contains(array, value) {
	        if (array) {
	            for (var _i = 0; _i < array.length; _i++) {
	                var v = array[_i];
	                if (v === value) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }
	    ts.contains = contains;
	    function indexOf(array, value) {
	        if (array) {
	            for (var i = 0, len = array.length; i < len; i++) {
	                if (array[i] === value) {
	                    return i;
	                }
	            }
	        }
	        return -1;
	    }
	    ts.indexOf = indexOf;
	    function countWhere(array, predicate) {
	        var count = 0;
	        if (array) {
	            for (var _i = 0; _i < array.length; _i++) {
	                var v = array[_i];
	                if (predicate(v)) {
	                    count++;
	                }
	            }
	        }
	        return count;
	    }
	    ts.countWhere = countWhere;
	    function filter(array, f) {
	        var result;
	        if (array) {
	            result = [];
	            for (var _i = 0; _i < array.length; _i++) {
	                var item = array[_i];
	                if (f(item)) {
	                    result.push(item);
	                }
	            }
	        }
	        return result;
	    }
	    ts.filter = filter;
	    function map(array, f) {
	        var result;
	        if (array) {
	            result = [];
	            for (var _i = 0; _i < array.length; _i++) {
	                var v = array[_i];
	                result.push(f(v));
	            }
	        }
	        return result;
	    }
	    ts.map = map;
	    function concatenate(array1, array2) {
	        if (!array2 || !array2.length)
	            return array1;
	        if (!array1 || !array1.length)
	            return array2;
	        return array1.concat(array2);
	    }
	    ts.concatenate = concatenate;
	    function deduplicate(array) {
	        var result;
	        if (array) {
	            result = [];
	            for (var _i = 0; _i < array.length; _i++) {
	                var item = array[_i];
	                if (!contains(result, item)) {
	                    result.push(item);
	                }
	            }
	        }
	        return result;
	    }
	    ts.deduplicate = deduplicate;
	    function sum(array, prop) {
	        var result = 0;
	        for (var _i = 0; _i < array.length; _i++) {
	            var v = array[_i];
	            result += v[prop];
	        }
	        return result;
	    }
	    ts.sum = sum;
	    function addRange(to, from) {
	        if (to && from) {
	            for (var _i = 0; _i < from.length; _i++) {
	                var v = from[_i];
	                to.push(v);
	            }
	        }
	    }
	    ts.addRange = addRange;
	    function rangeEquals(array1, array2, pos, end) {
	        while (pos < end) {
	            if (array1[pos] !== array2[pos]) {
	                return false;
	            }
	            pos++;
	        }
	        return true;
	    }
	    ts.rangeEquals = rangeEquals;
	    function lastOrUndefined(array) {
	        if (array.length === 0) {
	            return undefined;
	        }
	        return array[array.length - 1];
	    }
	    ts.lastOrUndefined = lastOrUndefined;
	    function binarySearch(array, value) {
	        var low = 0;
	        var high = array.length - 1;
	        while (low <= high) {
	            var middle = low + ((high - low) >> 1);
	            var midValue = array[middle];
	            if (midValue === value) {
	                return middle;
	            }
	            else if (midValue > value) {
	                high = middle - 1;
	            }
	            else {
	                low = middle + 1;
	            }
	        }
	        return ~low;
	    }
	    ts.binarySearch = binarySearch;
	    function reduceLeft(array, f, initial) {
	        if (array) {
	            var count = array.length;
	            if (count > 0) {
	                var pos = 0;
	                var result = arguments.length <= 2 ? array[pos++] : initial;
	                while (pos < count) {
	                    result = f(result, array[pos++]);
	                }
	                return result;
	            }
	        }
	        return initial;
	    }
	    ts.reduceLeft = reduceLeft;
	    function reduceRight(array, f, initial) {
	        if (array) {
	            var pos = array.length - 1;
	            if (pos >= 0) {
	                var result = arguments.length <= 2 ? array[pos--] : initial;
	                while (pos >= 0) {
	                    result = f(result, array[pos--]);
	                }
	                return result;
	            }
	        }
	        return initial;
	    }
	    ts.reduceRight = reduceRight;
	    var hasOwnProperty = Object.prototype.hasOwnProperty;
	    function hasProperty(map, key) {
	        return hasOwnProperty.call(map, key);
	    }
	    ts.hasProperty = hasProperty;
	    function getProperty(map, key) {
	        return hasOwnProperty.call(map, key) ? map[key] : undefined;
	    }
	    ts.getProperty = getProperty;
	    function isEmpty(map) {
	        for (var id in map) {
	            if (hasProperty(map, id)) {
	                return false;
	            }
	        }
	        return true;
	    }
	    ts.isEmpty = isEmpty;
	    function clone(object) {
	        var result = {};
	        for (var id in object) {
	            result[id] = object[id];
	        }
	        return result;
	    }
	    ts.clone = clone;
	    function extend(first, second) {
	        var result = {};
	        for (var id in first) {
	            result[id] = first[id];
	        }
	        for (var id in second) {
	            if (!hasProperty(result, id)) {
	                result[id] = second[id];
	            }
	        }
	        return result;
	    }
	    ts.extend = extend;
	    function forEachValue(map, callback) {
	        var result;
	        for (var id in map) {
	            if (result = callback(map[id]))
	                break;
	        }
	        return result;
	    }
	    ts.forEachValue = forEachValue;
	    function forEachKey(map, callback) {
	        var result;
	        for (var id in map) {
	            if (result = callback(id))
	                break;
	        }
	        return result;
	    }
	    ts.forEachKey = forEachKey;
	    function lookUp(map, key) {
	        return hasProperty(map, key) ? map[key] : undefined;
	    }
	    ts.lookUp = lookUp;
	    function copyMap(source, target) {
	        for (var p in source) {
	            target[p] = source[p];
	        }
	    }
	    ts.copyMap = copyMap;
	    function arrayToMap(array, makeKey) {
	        var result = {};
	        forEach(array, function (value) {
	            result[makeKey(value)] = value;
	        });
	        return result;
	    }
	    ts.arrayToMap = arrayToMap;
	    function memoize(callback) {
	        var value;
	        return function () {
	            if (callback) {
	                value = callback();
	                callback = undefined;
	            }
	            return value;
	        };
	    }
	    ts.memoize = memoize;
	    function formatStringFromArgs(text, args, baseIndex) {
	        baseIndex = baseIndex || 0;
	        return text.replace(/{(\d+)}/g, function (match, index) { return args[+index + baseIndex]; });
	    }
	    ts.localizedDiagnosticMessages = undefined;
	    function getLocaleSpecificMessage(message) {
	        return ts.localizedDiagnosticMessages && ts.localizedDiagnosticMessages[message]
	            ? ts.localizedDiagnosticMessages[message]
	            : message;
	    }
	    ts.getLocaleSpecificMessage = getLocaleSpecificMessage;
	    function createFileDiagnostic(file, start, length, message) {
	        var end = start + length;
	        Debug.assert(start >= 0, "start must be non-negative, is " + start);
	        Debug.assert(length >= 0, "length must be non-negative, is " + length);
	        if (file) {
	            Debug.assert(start <= file.text.length, "start must be within the bounds of the file. " + start + " > " + file.text.length);
	            Debug.assert(end <= file.text.length, "end must be the bounds of the file. " + end + " > " + file.text.length);
	        }
	        var text = getLocaleSpecificMessage(message.key);
	        if (arguments.length > 4) {
	            text = formatStringFromArgs(text, arguments, 4);
	        }
	        return {
	            file: file,
	            start: start,
	            length: length,
	            messageText: text,
	            category: message.category,
	            code: message.code
	        };
	    }
	    ts.createFileDiagnostic = createFileDiagnostic;
	    function createCompilerDiagnostic(message) {
	        var text = getLocaleSpecificMessage(message.key);
	        if (arguments.length > 1) {
	            text = formatStringFromArgs(text, arguments, 1);
	        }
	        return {
	            file: undefined,
	            start: undefined,
	            length: undefined,
	            messageText: text,
	            category: message.category,
	            code: message.code
	        };
	    }
	    ts.createCompilerDiagnostic = createCompilerDiagnostic;
	    function chainDiagnosticMessages(details, message) {
	        var text = getLocaleSpecificMessage(message.key);
	        if (arguments.length > 2) {
	            text = formatStringFromArgs(text, arguments, 2);
	        }
	        return {
	            messageText: text,
	            category: message.category,
	            code: message.code,
	            next: details
	        };
	    }
	    ts.chainDiagnosticMessages = chainDiagnosticMessages;
	    function concatenateDiagnosticMessageChains(headChain, tailChain) {
	        Debug.assert(!headChain.next);
	        headChain.next = tailChain;
	        return headChain;
	    }
	    ts.concatenateDiagnosticMessageChains = concatenateDiagnosticMessageChains;
	    function compareValues(a, b) {
	        if (a === b)
	            return 0;
	        if (a === undefined)
	            return -1;
	        if (b === undefined)
	            return 1;
	        return a < b ? -1 : 1;
	    }
	    ts.compareValues = compareValues;
	    function getDiagnosticFileName(diagnostic) {
	        return diagnostic.file ? diagnostic.file.fileName : undefined;
	    }
	    function compareDiagnostics(d1, d2) {
	        return compareValues(getDiagnosticFileName(d1), getDiagnosticFileName(d2)) ||
	            compareValues(d1.start, d2.start) ||
	            compareValues(d1.length, d2.length) ||
	            compareValues(d1.code, d2.code) ||
	            compareMessageText(d1.messageText, d2.messageText) ||
	            0;
	    }
	    ts.compareDiagnostics = compareDiagnostics;
	    function compareMessageText(text1, text2) {
	        while (text1 && text2) {
	            var string1 = typeof text1 === "string" ? text1 : text1.messageText;
	            var string2 = typeof text2 === "string" ? text2 : text2.messageText;
	            var res = compareValues(string1, string2);
	            if (res) {
	                return res;
	            }
	            text1 = typeof text1 === "string" ? undefined : text1.next;
	            text2 = typeof text2 === "string" ? undefined : text2.next;
	        }
	        if (!text1 && !text2) {
	            return 0;
	        }
	        return text1 ? 1 : -1;
	    }
	    function sortAndDeduplicateDiagnostics(diagnostics) {
	        return deduplicateSortedDiagnostics(diagnostics.sort(compareDiagnostics));
	    }
	    ts.sortAndDeduplicateDiagnostics = sortAndDeduplicateDiagnostics;
	    function deduplicateSortedDiagnostics(diagnostics) {
	        if (diagnostics.length < 2) {
	            return diagnostics;
	        }
	        var newDiagnostics = [diagnostics[0]];
	        var previousDiagnostic = diagnostics[0];
	        for (var i = 1; i < diagnostics.length; i++) {
	            var currentDiagnostic = diagnostics[i];
	            var isDupe = compareDiagnostics(currentDiagnostic, previousDiagnostic) === 0;
	            if (!isDupe) {
	                newDiagnostics.push(currentDiagnostic);
	                previousDiagnostic = currentDiagnostic;
	            }
	        }
	        return newDiagnostics;
	    }
	    ts.deduplicateSortedDiagnostics = deduplicateSortedDiagnostics;
	    function normalizeSlashes(path) {
	        return path.replace(/\\/g, "/");
	    }
	    ts.normalizeSlashes = normalizeSlashes;
	    function getRootLength(path) {
	        if (path.charCodeAt(0) === 47) {
	            if (path.charCodeAt(1) !== 47)
	                return 1;
	            var p1 = path.indexOf("/", 2);
	            if (p1 < 0)
	                return 2;
	            var p2 = path.indexOf("/", p1 + 1);
	            if (p2 < 0)
	                return p1 + 1;
	            return p2 + 1;
	        }
	        if (path.charCodeAt(1) === 58) {
	            if (path.charCodeAt(2) === 47)
	                return 3;
	            return 2;
	        }
	        if (path.lastIndexOf("file:///", 0) === 0) {
	            return "file:///".length;
	        }
	        var idx = path.indexOf("://");
	        if (idx !== -1) {
	            return idx + "://".length;
	        }
	        return 0;
	    }
	    ts.getRootLength = getRootLength;
	    ts.directorySeparator = "/";
	    function getNormalizedParts(normalizedSlashedPath, rootLength) {
	        var parts = normalizedSlashedPath.substr(rootLength).split(ts.directorySeparator);
	        var normalized = [];
	        for (var _i = 0; _i < parts.length; _i++) {
	            var part = parts[_i];
	            if (part !== ".") {
	                if (part === ".." && normalized.length > 0 && lastOrUndefined(normalized) !== "..") {
	                    normalized.pop();
	                }
	                else {
	                    if (part) {
	                        normalized.push(part);
	                    }
	                }
	            }
	        }
	        return normalized;
	    }
	    function normalizePath(path) {
	        path = normalizeSlashes(path);
	        var rootLength = getRootLength(path);
	        var normalized = getNormalizedParts(path, rootLength);
	        return path.substr(0, rootLength) + normalized.join(ts.directorySeparator);
	    }
	    ts.normalizePath = normalizePath;
	    function getDirectoryPath(path) {
	        return path.substr(0, Math.max(getRootLength(path), path.lastIndexOf(ts.directorySeparator)));
	    }
	    ts.getDirectoryPath = getDirectoryPath;
	    function isUrl(path) {
	        return path && !isRootedDiskPath(path) && path.indexOf("://") !== -1;
	    }
	    ts.isUrl = isUrl;
	    function isRootedDiskPath(path) {
	        return getRootLength(path) !== 0;
	    }
	    ts.isRootedDiskPath = isRootedDiskPath;
	    function normalizedPathComponents(path, rootLength) {
	        var normalizedParts = getNormalizedParts(path, rootLength);
	        return [path.substr(0, rootLength)].concat(normalizedParts);
	    }
	    function getNormalizedPathComponents(path, currentDirectory) {
	        path = normalizeSlashes(path);
	        var rootLength = getRootLength(path);
	        if (rootLength === 0) {
	            path = combinePaths(normalizeSlashes(currentDirectory), path);
	            rootLength = getRootLength(path);
	        }
	        return normalizedPathComponents(path, rootLength);
	    }
	    ts.getNormalizedPathComponents = getNormalizedPathComponents;
	    function getNormalizedAbsolutePath(fileName, currentDirectory) {
	        return getNormalizedPathFromPathComponents(getNormalizedPathComponents(fileName, currentDirectory));
	    }
	    ts.getNormalizedAbsolutePath = getNormalizedAbsolutePath;
	    function getNormalizedPathFromPathComponents(pathComponents) {
	        if (pathComponents && pathComponents.length) {
	            return pathComponents[0] + pathComponents.slice(1).join(ts.directorySeparator);
	        }
	    }
	    ts.getNormalizedPathFromPathComponents = getNormalizedPathFromPathComponents;
	    function getNormalizedPathComponentsOfUrl(url) {
	        // Get root length of http://www.website.com/folder1/foler2/
	        // In this example the root is:  http://www.website.com/
	        // normalized path components should be ["http://www.website.com/", "folder1", "folder2"]
	        var urlLength = url.length;
	        var rootLength = url.indexOf("://") + "://".length;
	        while (rootLength < urlLength) {
	            if (url.charCodeAt(rootLength) === 47) {
	                rootLength++;
	            }
	            else {
	                break;
	            }
	        }
	        if (rootLength === urlLength) {
	            return [url];
	        }
	        var indexOfNextSlash = url.indexOf(ts.directorySeparator, rootLength);
	        if (indexOfNextSlash !== -1) {
	            rootLength = indexOfNextSlash + 1;
	            return normalizedPathComponents(url, rootLength);
	        }
	        else {
	            return [url + ts.directorySeparator];
	        }
	    }
	    function getNormalizedPathOrUrlComponents(pathOrUrl, currentDirectory) {
	        if (isUrl(pathOrUrl)) {
	            return getNormalizedPathComponentsOfUrl(pathOrUrl);
	        }
	        else {
	            return getNormalizedPathComponents(pathOrUrl, currentDirectory);
	        }
	    }
	    function getRelativePathToDirectoryOrUrl(directoryPathOrUrl, relativeOrAbsolutePath, currentDirectory, getCanonicalFileName, isAbsolutePathAnUrl) {
	        var pathComponents = getNormalizedPathOrUrlComponents(relativeOrAbsolutePath, currentDirectory);
	        var directoryComponents = getNormalizedPathOrUrlComponents(directoryPathOrUrl, currentDirectory);
	        if (directoryComponents.length > 1 && lastOrUndefined(directoryComponents) === "") {
	            directoryComponents.length--;
	        }
	        for (var joinStartIndex = 0; joinStartIndex < pathComponents.length && joinStartIndex < directoryComponents.length; joinStartIndex++) {
	            if (getCanonicalFileName(directoryComponents[joinStartIndex]) !== getCanonicalFileName(pathComponents[joinStartIndex])) {
	                break;
	            }
	        }
	        if (joinStartIndex) {
	            var relativePath = "";
	            var relativePathComponents = pathComponents.slice(joinStartIndex, pathComponents.length);
	            for (; joinStartIndex < directoryComponents.length; joinStartIndex++) {
	                if (directoryComponents[joinStartIndex] !== "") {
	                    relativePath = relativePath + ".." + ts.directorySeparator;
	                }
	            }
	            return relativePath + relativePathComponents.join(ts.directorySeparator);
	        }
	        var absolutePath = getNormalizedPathFromPathComponents(pathComponents);
	        if (isAbsolutePathAnUrl && isRootedDiskPath(absolutePath)) {
	            absolutePath = "file:///" + absolutePath;
	        }
	        return absolutePath;
	    }
	    ts.getRelativePathToDirectoryOrUrl = getRelativePathToDirectoryOrUrl;
	    function getBaseFileName(path) {
	        var i = path.lastIndexOf(ts.directorySeparator);
	        return i < 0 ? path : path.substring(i + 1);
	    }
	    ts.getBaseFileName = getBaseFileName;
	    function combinePaths(path1, path2) {
	        if (!(path1 && path1.length))
	            return path2;
	        if (!(path2 && path2.length))
	            return path1;
	        if (getRootLength(path2) !== 0)
	            return path2;
	        if (path1.charAt(path1.length - 1) === ts.directorySeparator)
	            return path1 + path2;
	        return path1 + ts.directorySeparator + path2;
	    }
	    ts.combinePaths = combinePaths;
	    function fileExtensionIs(path, extension) {
	        var pathLen = path.length;
	        var extLen = extension.length;
	        return pathLen > extLen && path.substr(pathLen - extLen, extLen) === extension;
	    }
	    ts.fileExtensionIs = fileExtensionIs;
	    ts.supportedExtensions = [".ts", ".tsx", ".d.ts"];
	    var extensionsToRemove = [".d.ts", ".ts", ".js", ".tsx", ".jsx"];
	    function removeFileExtension(path) {
	        for (var _i = 0; _i < extensionsToRemove.length; _i++) {
	            var ext = extensionsToRemove[_i];
	            if (fileExtensionIs(path, ext)) {
	                return path.substr(0, path.length - ext.length);
	            }
	        }
	        return path;
	    }
	    ts.removeFileExtension = removeFileExtension;
	    var backslashOrDoubleQuote = /[\"\\]/g;
	    var escapedCharsRegExp = /[\u0000-\u001f\t\v\f\b\r\n\u2028\u2029\u0085]/g;
	    var escapedCharsMap = {
	        "\0": "\\0",
	        "\t": "\\t",
	        "\v": "\\v",
	        "\f": "\\f",
	        "\b": "\\b",
	        "\r": "\\r",
	        "\n": "\\n",
	        "\\": "\\\\",
	        "\"": "\\\"",
	        "\u2028": "\\u2028",
	        "\u2029": "\\u2029",
	        "\u0085": "\\u0085"
	    };
	    function Symbol(flags, name) {
	        this.flags = flags;
	        this.name = name;
	        this.declarations = undefined;
	    }
	    function Type(checker, flags) {
	        this.flags = flags;
	    }
	    function Signature(checker) {
	    }
	    ts.objectAllocator = {
	        getNodeConstructor: function (kind) {
	            function Node() {
	            }
	            Node.prototype = {
	                kind: kind,
	                pos: -1,
	                end: -1,
	                flags: 0,
	                parent: undefined
	            };
	            return Node;
	        },
	        getSymbolConstructor: function () { return Symbol; },
	        getTypeConstructor: function () { return Type; },
	        getSignatureConstructor: function () { return Signature; }
	    };
	    var Debug;
	    (function (Debug) {
	        var currentAssertionLevel = 0;
	        function shouldAssert(level) {
	            return currentAssertionLevel >= level;
	        }
	        Debug.shouldAssert = shouldAssert;
	        function assert(expression, message, verboseDebugInfo) {
	            if (!expression) {
	                var verboseDebugString = "";
	                if (verboseDebugInfo) {
	                    verboseDebugString = "\r\nVerbose Debug Information: " + verboseDebugInfo();
	                }
	                throw new Error("Debug Failure. False expression: " + (message || "") + verboseDebugString);
	            }
	        }
	        Debug.assert = assert;
	        function fail(message) {
	            Debug.assert(false, message);
	        }
	        Debug.fail = fail;
	    })(Debug = ts.Debug || (ts.Debug = {}));
	})(ts || (ts = {}));
	/// <reference path="core.ts"/>
	var ts;
	(function (ts) {
	    ts.sys = __webpack_require__(1);
	})(ts || (ts = {}));
	/// <reference path="types.ts" />
	var ts;
	(function (ts) {
	    ts.Diagnostics = {
	        Unterminated_string_literal: { code: 1002, category: ts.DiagnosticCategory.Error, key: "Unterminated string literal." },
	        Identifier_expected: { code: 1003, category: ts.DiagnosticCategory.Error, key: "Identifier expected." },
	        _0_expected: { code: 1005, category: ts.DiagnosticCategory.Error, key: "'{0}' expected." },
	        A_file_cannot_have_a_reference_to_itself: { code: 1006, category: ts.DiagnosticCategory.Error, key: "A file cannot have a reference to itself." },
	        Trailing_comma_not_allowed: { code: 1009, category: ts.DiagnosticCategory.Error, key: "Trailing comma not allowed." },
	        Asterisk_Slash_expected: { code: 1010, category: ts.DiagnosticCategory.Error, key: "'*/' expected." },
	        Unexpected_token: { code: 1012, category: ts.DiagnosticCategory.Error, key: "Unexpected token." },
	        A_rest_parameter_must_be_last_in_a_parameter_list: { code: 1014, category: ts.DiagnosticCategory.Error, key: "A rest parameter must be last in a parameter list." },
	        Parameter_cannot_have_question_mark_and_initializer: { code: 1015, category: ts.DiagnosticCategory.Error, key: "Parameter cannot have question mark and initializer." },
	        A_required_parameter_cannot_follow_an_optional_parameter: { code: 1016, category: ts.DiagnosticCategory.Error, key: "A required parameter cannot follow an optional parameter." },
	        An_index_signature_cannot_have_a_rest_parameter: { code: 1017, category: ts.DiagnosticCategory.Error, key: "An index signature cannot have a rest parameter." },
	        An_index_signature_parameter_cannot_have_an_accessibility_modifier: { code: 1018, category: ts.DiagnosticCategory.Error, key: "An index signature parameter cannot have an accessibility modifier." },
	        An_index_signature_parameter_cannot_have_a_question_mark: { code: 1019, category: ts.DiagnosticCategory.Error, key: "An index signature parameter cannot have a question mark." },
	        An_index_signature_parameter_cannot_have_an_initializer: { code: 1020, category: ts.DiagnosticCategory.Error, key: "An index signature parameter cannot have an initializer." },
	        An_index_signature_must_have_a_type_annotation: { code: 1021, category: ts.DiagnosticCategory.Error, key: "An index signature must have a type annotation." },
	        An_index_signature_parameter_must_have_a_type_annotation: { code: 1022, category: ts.DiagnosticCategory.Error, key: "An index signature parameter must have a type annotation." },
	        An_index_signature_parameter_type_must_be_string_or_number: { code: 1023, category: ts.DiagnosticCategory.Error, key: "An index signature parameter type must be 'string' or 'number'." },
	        Accessibility_modifier_already_seen: { code: 1028, category: ts.DiagnosticCategory.Error, key: "Accessibility modifier already seen." },
	        _0_modifier_must_precede_1_modifier: { code: 1029, category: ts.DiagnosticCategory.Error, key: "'{0}' modifier must precede '{1}' modifier." },
	        _0_modifier_already_seen: { code: 1030, category: ts.DiagnosticCategory.Error, key: "'{0}' modifier already seen." },
	        _0_modifier_cannot_appear_on_a_class_element: { code: 1031, category: ts.DiagnosticCategory.Error, key: "'{0}' modifier cannot appear on a class element." },
	        super_must_be_followed_by_an_argument_list_or_member_access: { code: 1034, category: ts.DiagnosticCategory.Error, key: "'super' must be followed by an argument list or member access." },
	        Only_ambient_modules_can_use_quoted_names: { code: 1035, category: ts.DiagnosticCategory.Error, key: "Only ambient modules can use quoted names." },
	        Statements_are_not_allowed_in_ambient_contexts: { code: 1036, category: ts.DiagnosticCategory.Error, key: "Statements are not allowed in ambient contexts." },
	        A_declare_modifier_cannot_be_used_in_an_already_ambient_context: { code: 1038, category: ts.DiagnosticCategory.Error, key: "A 'declare' modifier cannot be used in an already ambient context." },
	        Initializers_are_not_allowed_in_ambient_contexts: { code: 1039, category: ts.DiagnosticCategory.Error, key: "Initializers are not allowed in ambient contexts." },
	        _0_modifier_cannot_be_used_in_an_ambient_context: { code: 1040, category: ts.DiagnosticCategory.Error, key: "'{0}' modifier cannot be used in an ambient context." },
	        _0_modifier_cannot_be_used_with_a_class_declaration: { code: 1041, category: ts.DiagnosticCategory.Error, key: "'{0}' modifier cannot be used with a class declaration." },
	        _0_modifier_cannot_be_used_here: { code: 1042, category: ts.DiagnosticCategory.Error, key: "'{0}' modifier cannot be used here." },
	        _0_modifier_cannot_appear_on_a_data_property: { code: 1043, category: ts.DiagnosticCategory.Error, key: "'{0}' modifier cannot appear on a data property." },
	        _0_modifier_cannot_appear_on_a_module_element: { code: 1044, category: ts.DiagnosticCategory.Error, key: "'{0}' modifier cannot appear on a module element." },
	        A_0_modifier_cannot_be_used_with_an_interface_declaration: { code: 1045, category: ts.DiagnosticCategory.Error, key: "A '{0}' modifier cannot be used with an interface declaration." },
	        A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file: { code: 1046, category: ts.DiagnosticCategory.Error, key: "A 'declare' modifier is required for a top level declaration in a .d.ts file." },
	        A_rest_parameter_cannot_be_optional: { code: 1047, category: ts.DiagnosticCategory.Error, key: "A rest parameter cannot be optional." },
	        A_rest_parameter_cannot_have_an_initializer: { code: 1048, category: ts.DiagnosticCategory.Error, key: "A rest parameter cannot have an initializer." },
	        A_set_accessor_must_have_exactly_one_parameter: { code: 1049, category: ts.DiagnosticCategory.Error, key: "A 'set' accessor must have exactly one parameter." },
	        A_set_accessor_cannot_have_an_optional_parameter: { code: 1051, category: ts.DiagnosticCategory.Error, key: "A 'set' accessor cannot have an optional parameter." },
	        A_set_accessor_parameter_cannot_have_an_initializer: { code: 1052, category: ts.DiagnosticCategory.Error, key: "A 'set' accessor parameter cannot have an initializer." },
	        A_set_accessor_cannot_have_rest_parameter: { code: 1053, category: ts.DiagnosticCategory.Error, key: "A 'set' accessor cannot have rest parameter." },
	        A_get_accessor_cannot_have_parameters: { code: 1054, category: ts.DiagnosticCategory.Error, key: "A 'get' accessor cannot have parameters." },
	        Type_0_is_not_a_valid_async_function_return_type: { code: 1055, category: ts.DiagnosticCategory.Error, key: "Type '{0}' is not a valid async function return type." },
	        Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher: { code: 1056, category: ts.DiagnosticCategory.Error, key: "Accessors are only available when targeting ECMAScript 5 and higher." },
	        An_async_function_or_method_must_have_a_valid_awaitable_return_type: { code: 1057, category: ts.DiagnosticCategory.Error, key: "An async function or method must have a valid awaitable return type." },
	        Operand_for_await_does_not_have_a_valid_callable_then_member: { code: 1058, category: ts.DiagnosticCategory.Error, key: "Operand for 'await' does not have a valid callable 'then' member." },
	        Return_expression_in_async_function_does_not_have_a_valid_callable_then_member: { code: 1059, category: ts.DiagnosticCategory.Error, key: "Return expression in async function does not have a valid callable 'then' member." },
	        Expression_body_for_async_arrow_function_does_not_have_a_valid_callable_then_member: { code: 1060, category: ts.DiagnosticCategory.Error, key: "Expression body for async arrow function does not have a valid callable 'then' member." },
	        Enum_member_must_have_initializer: { code: 1061, category: ts.DiagnosticCategory.Error, key: "Enum member must have initializer." },
	        _0_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method: { code: 1062, category: ts.DiagnosticCategory.Error, key: "{0} is referenced directly or indirectly in the fulfillment callback of its own 'then' method." },
	        An_export_assignment_cannot_be_used_in_a_namespace: { code: 1063, category: ts.DiagnosticCategory.Error, key: "An export assignment cannot be used in a namespace." },
	        Ambient_enum_elements_can_only_have_integer_literal_initializers: { code: 1066, category: ts.DiagnosticCategory.Error, key: "Ambient enum elements can only have integer literal initializers." },
	        Unexpected_token_A_constructor_method_accessor_or_property_was_expected: { code: 1068, category: ts.DiagnosticCategory.Error, key: "Unexpected token. A constructor, method, accessor, or property was expected." },
	        A_0_modifier_cannot_be_used_with_an_import_declaration: { code: 1079, category: ts.DiagnosticCategory.Error, key: "A '{0}' modifier cannot be used with an import declaration." },
	        Invalid_reference_directive_syntax: { code: 1084, category: ts.DiagnosticCategory.Error, key: "Invalid 'reference' directive syntax." },
	        Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher: { code: 1085, category: ts.DiagnosticCategory.Error, key: "Octal literals are not available when targeting ECMAScript 5 and higher." },
	        An_accessor_cannot_be_declared_in_an_ambient_context: { code: 1086, category: ts.DiagnosticCategory.Error, key: "An accessor cannot be declared in an ambient context." },
	        _0_modifier_cannot_appear_on_a_constructor_declaration: { code: 1089, category: ts.DiagnosticCategory.Error, key: "'{0}' modifier cannot appear on a constructor declaration." },
	        _0_modifier_cannot_appear_on_a_parameter: { code: 1090, category: ts.DiagnosticCategory.Error, key: "'{0}' modifier cannot appear on a parameter." },
	        Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement: { code: 1091, category: ts.DiagnosticCategory.Error, key: "Only a single variable declaration is allowed in a 'for...in' statement." },
	        Type_parameters_cannot_appear_on_a_constructor_declaration: { code: 1092, category: ts.DiagnosticCategory.Error, key: "Type parameters cannot appear on a constructor declaration." },
	        Type_annotation_cannot_appear_on_a_constructor_declaration: { code: 1093, category: ts.DiagnosticCategory.Error, key: "Type annotation cannot appear on a constructor declaration." },
	        An_accessor_cannot_have_type_parameters: { code: 1094, category: ts.DiagnosticCategory.Error, key: "An accessor cannot have type parameters." },
	        A_set_accessor_cannot_have_a_return_type_annotation: { code: 1095, category: ts.DiagnosticCategory.Error, key: "A 'set' accessor cannot have a return type annotation." },
	        An_index_signature_must_have_exactly_one_parameter: { code: 1096, category: ts.DiagnosticCategory.Error, key: "An index signature must have exactly one parameter." },
	        _0_list_cannot_be_empty: { code: 1097, category: ts.DiagnosticCategory.Error, key: "'{0}' list cannot be empty." },
	        Type_parameter_list_cannot_be_empty: { code: 1098, category: ts.DiagnosticCategory.Error, key: "Type parameter list cannot be empty." },
	        Type_argument_list_cannot_be_empty: { code: 1099, category: ts.DiagnosticCategory.Error, key: "Type argument list cannot be empty." },
	        Invalid_use_of_0_in_strict_mode: { code: 1100, category: ts.DiagnosticCategory.Error, key: "Invalid use of '{0}' in strict mode." },
	        with_statements_are_not_allowed_in_strict_mode: { code: 1101, category: ts.DiagnosticCategory.Error, key: "'with' statements are not allowed in strict mode." },
	        delete_cannot_be_called_on_an_identifier_in_strict_mode: { code: 1102, category: ts.DiagnosticCategory.Error, key: "'delete' cannot be called on an identifier in strict mode." },
	        A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement: { code: 1104, category: ts.DiagnosticCategory.Error, key: "A 'continue' statement can only be used within an enclosing iteration statement." },
	        A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement: { code: 1105, category: ts.DiagnosticCategory.Error, key: "A 'break' statement can only be used within an enclosing iteration or switch statement." },
	        Jump_target_cannot_cross_function_boundary: { code: 1107, category: ts.DiagnosticCategory.Error, key: "Jump target cannot cross function boundary." },
	        A_return_statement_can_only_be_used_within_a_function_body: { code: 1108, category: ts.DiagnosticCategory.Error, key: "A 'return' statement can only be used within a function body." },
	        Expression_expected: { code: 1109, category: ts.DiagnosticCategory.Error, key: "Expression expected." },
	        Type_expected: { code: 1110, category: ts.DiagnosticCategory.Error, key: "Type expected." },
	        A_class_member_cannot_be_declared_optional: { code: 1112, category: ts.DiagnosticCategory.Error, key: "A class member cannot be declared optional." },
	        A_default_clause_cannot_appear_more_than_once_in_a_switch_statement: { code: 1113, category: ts.DiagnosticCategory.Error, key: "A 'default' clause cannot appear more than once in a 'switch' statement." },
	        Duplicate_label_0: { code: 1114, category: ts.DiagnosticCategory.Error, key: "Duplicate label '{0}'" },
	        A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement: { code: 1115, category: ts.DiagnosticCategory.Error, key: "A 'continue' statement can only jump to a label of an enclosing iteration statement." },
	        A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement: { code: 1116, category: ts.DiagnosticCategory.Error, key: "A 'break' statement can only jump to a label of an enclosing statement." },
	        An_object_literal_cannot_have_multiple_properties_with_the_same_name_in_strict_mode: { code: 1117, category: ts.DiagnosticCategory.Error, key: "An object literal cannot have multiple properties with the same name in strict mode." },
	        An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name: { code: 1118, category: ts.DiagnosticCategory.Error, key: "An object literal cannot have multiple get/set accessors with the same name." },
	        An_object_literal_cannot_have_property_and_accessor_with_the_same_name: { code: 1119, category: ts.DiagnosticCategory.Error, key: "An object literal cannot have property and accessor with the same name." },
	        An_export_assignment_cannot_have_modifiers: { code: 1120, category: ts.DiagnosticCategory.Error, key: "An export assignment cannot have modifiers." },
	        Octal_literals_are_not_allowed_in_strict_mode: { code: 1121, category: ts.DiagnosticCategory.Error, key: "Octal literals are not allowed in strict mode." },
	        A_tuple_type_element_list_cannot_be_empty: { code: 1122, category: ts.DiagnosticCategory.Error, key: "A tuple type element list cannot be empty." },
	        Variable_declaration_list_cannot_be_empty: { code: 1123, category: ts.DiagnosticCategory.Error, key: "Variable declaration list cannot be empty." },
	        Digit_expected: { code: 1124, category: ts.DiagnosticCategory.Error, key: "Digit expected." },
	        Hexadecimal_digit_expected: { code: 1125, category: ts.DiagnosticCategory.Error, key: "Hexadecimal digit expected." },
	        Unexpected_end_of_text: { code: 1126, category: ts.DiagnosticCategory.Error, key: "Unexpected end of text." },
	        Invalid_character: { code: 1127, category: ts.DiagnosticCategory.Error, key: "Invalid character." },
	        Declaration_or_statement_expected: { code: 1128, category: ts.DiagnosticCategory.Error, key: "Declaration or statement expected." },
	        Statement_expected: { code: 1129, category: ts.DiagnosticCategory.Error, key: "Statement expected." },
	        case_or_default_expected: { code: 1130, category: ts.DiagnosticCategory.Error, key: "'case' or 'default' expected." },
	        Property_or_signature_expected: { code: 1131, category: ts.DiagnosticCategory.Error, key: "Property or signature expected." },
	        Enum_member_expected: { code: 1132, category: ts.DiagnosticCategory.Error, key: "Enum member expected." },
	        Variable_declaration_expected: { code: 1134, category: ts.DiagnosticCategory.Error, key: "Variable declaration expected." },
	        Argument_expression_expected: { code: 1135, category: ts.DiagnosticCategory.Error, key: "Argument expression expected." },
	        Property_assignment_expected: { code: 1136, category: ts.DiagnosticCategory.Error, key: "Property assignment expected." },
	        Expression_or_comma_expected: { code: 1137, category: ts.DiagnosticCategory.Error, key: "Expression or comma expected." },
	        Parameter_declaration_expected: { code: 1138, category: ts.DiagnosticCategory.Error, key: "Parameter declaration expected." },
	        Type_parameter_declaration_expected: { code: 1139, category: ts.DiagnosticCategory.Error, key: "Type parameter declaration expected." },
	        Type_argument_expected: { code: 1140, category: ts.DiagnosticCategory.Error, key: "Type argument expected." },
	        String_literal_expected: { code: 1141, category: ts.DiagnosticCategory.Error, key: "String literal expected." },
	        Line_break_not_permitted_here: { code: 1142, category: ts.DiagnosticCategory.Error, key: "Line break not permitted here." },
	        or_expected: { code: 1144, category: ts.DiagnosticCategory.Error, key: "'{' or ';' expected." },
	        Modifiers_not_permitted_on_index_signature_members: { code: 1145, category: ts.DiagnosticCategory.Error, key: "Modifiers not permitted on index signature members." },
	        Declaration_expected: { code: 1146, category: ts.DiagnosticCategory.Error, key: "Declaration expected." },
	        Import_declarations_in_a_namespace_cannot_reference_a_module: { code: 1147, category: ts.DiagnosticCategory.Error, key: "Import declarations in a namespace cannot reference a module." },
	        Cannot_compile_modules_unless_the_module_flag_is_provided: { code: 1148, category: ts.DiagnosticCategory.Error, key: "Cannot compile modules unless the '--module' flag is provided." },
	        File_name_0_differs_from_already_included_file_name_1_only_in_casing: { code: 1149, category: ts.DiagnosticCategory.Error, key: "File name '{0}' differs from already included file name '{1}' only in casing" },
	        new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead: { code: 1150, category: ts.DiagnosticCategory.Error, key: "'new T[]' cannot be used to create an array. Use 'new Array<T>()' instead." },
	        const_declarations_must_be_initialized: { code: 1155, category: ts.DiagnosticCategory.Error, key: "'const' declarations must be initialized" },
	        const_declarations_can_only_be_declared_inside_a_block: { code: 1156, category: ts.DiagnosticCategory.Error, key: "'const' declarations can only be declared inside a block." },
	        let_declarations_can_only_be_declared_inside_a_block: { code: 1157, category: ts.DiagnosticCategory.Error, key: "'let' declarations can only be declared inside a block." },
	        Unterminated_template_literal: { code: 1160, category: ts.DiagnosticCategory.Error, key: "Unterminated template literal." },
	        Unterminated_regular_expression_literal: { code: 1161, category: ts.DiagnosticCategory.Error, key: "Unterminated regular expression literal." },
	        An_object_member_cannot_be_declared_optional: { code: 1162, category: ts.DiagnosticCategory.Error, key: "An object member cannot be declared optional." },
	        A_yield_expression_is_only_allowed_in_a_generator_body: { code: 1163, category: ts.DiagnosticCategory.Error, key: "A 'yield' expression is only allowed in a generator body." },
	        Computed_property_names_are_not_allowed_in_enums: { code: 1164, category: ts.DiagnosticCategory.Error, key: "Computed property names are not allowed in enums." },
	        A_computed_property_name_in_an_ambient_context_must_directly_refer_to_a_built_in_symbol: { code: 1165, category: ts.DiagnosticCategory.Error, key: "A computed property name in an ambient context must directly refer to a built-in symbol." },
	        A_computed_property_name_in_a_class_property_declaration_must_directly_refer_to_a_built_in_symbol: { code: 1166, category: ts.DiagnosticCategory.Error, key: "A computed property name in a class property declaration must directly refer to a built-in symbol." },
	        A_computed_property_name_in_a_method_overload_must_directly_refer_to_a_built_in_symbol: { code: 1168, category: ts.DiagnosticCategory.Error, key: "A computed property name in a method overload must directly refer to a built-in symbol." },
	        A_computed_property_name_in_an_interface_must_directly_refer_to_a_built_in_symbol: { code: 1169, category: ts.DiagnosticCategory.Error, key: "A computed property name in an interface must directly refer to a built-in symbol." },
	        A_computed_property_name_in_a_type_literal_must_directly_refer_to_a_built_in_symbol: { code: 1170, category: ts.DiagnosticCategory.Error, key: "A computed property name in a type literal must directly refer to a built-in symbol." },
	        A_comma_expression_is_not_allowed_in_a_computed_property_name: { code: 1171, category: ts.DiagnosticCategory.Error, key: "A comma expression is not allowed in a computed property name." },
	        extends_clause_already_seen: { code: 1172, category: ts.DiagnosticCategory.Error, key: "'extends' clause already seen." },
	        extends_clause_must_precede_implements_clause: { code: 1173, category: ts.DiagnosticCategory.Error, key: "'extends' clause must precede 'implements' clause." },
	        Classes_can_only_extend_a_single_class: { code: 1174, category: ts.DiagnosticCategory.Error, key: "Classes can only extend a single class." },
	        implements_clause_already_seen: { code: 1175, category: ts.DiagnosticCategory.Error, key: "'implements' clause already seen." },
	        Interface_declaration_cannot_have_implements_clause: { code: 1176, category: ts.DiagnosticCategory.Error, key: "Interface declaration cannot have 'implements' clause." },
	        Binary_digit_expected: { code: 1177, category: ts.DiagnosticCategory.Error, key: "Binary digit expected." },
	        Octal_digit_expected: { code: 1178, category: ts.DiagnosticCategory.Error, key: "Octal digit expected." },
	        Unexpected_token_expected: { code: 1179, category: ts.DiagnosticCategory.Error, key: "Unexpected token. '{' expected." },
	        Property_destructuring_pattern_expected: { code: 1180, category: ts.DiagnosticCategory.Error, key: "Property destructuring pattern expected." },
	        Array_element_destructuring_pattern_expected: { code: 1181, category: ts.DiagnosticCategory.Error, key: "Array element destructuring pattern expected." },
	        A_destructuring_declaration_must_have_an_initializer: { code: 1182, category: ts.DiagnosticCategory.Error, key: "A destructuring declaration must have an initializer." },
	        An_implementation_cannot_be_declared_in_ambient_contexts: { code: 1184, category: ts.DiagnosticCategory.Error, key: "An implementation cannot be declared in ambient contexts." },
	        Modifiers_cannot_appear_here: { code: 1184, category: ts.DiagnosticCategory.Error, key: "Modifiers cannot appear here." },
	        Merge_conflict_marker_encountered: { code: 1185, category: ts.DiagnosticCategory.Error, key: "Merge conflict marker encountered." },
	        A_rest_element_cannot_have_an_initializer: { code: 1186, category: ts.DiagnosticCategory.Error, key: "A rest element cannot have an initializer." },
	        A_parameter_property_may_not_be_a_binding_pattern: { code: 1187, category: ts.DiagnosticCategory.Error, key: "A parameter property may not be a binding pattern." },
	        Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement: { code: 1188, category: ts.DiagnosticCategory.Error, key: "Only a single variable declaration is allowed in a 'for...of' statement." },
	        The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer: { code: 1189, category: ts.DiagnosticCategory.Error, key: "The variable declaration of a 'for...in' statement cannot have an initializer." },
	        The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer: { code: 1190, category: ts.DiagnosticCategory.Error, key: "The variable declaration of a 'for...of' statement cannot have an initializer." },
	        An_import_declaration_cannot_have_modifiers: { code: 1191, category: ts.DiagnosticCategory.Error, key: "An import declaration cannot have modifiers." },
	        Module_0_has_no_default_export: { code: 1192, category: ts.DiagnosticCategory.Error, key: "Module '{0}' has no default export." },
	        An_export_declaration_cannot_have_modifiers: { code: 1193, category: ts.DiagnosticCategory.Error, key: "An export declaration cannot have modifiers." },
	        Export_declarations_are_not_permitted_in_a_namespace: { code: 1194, category: ts.DiagnosticCategory.Error, key: "Export declarations are not permitted in a namespace." },
	        Catch_clause_variable_name_must_be_an_identifier: { code: 1195, category: ts.DiagnosticCategory.Error, key: "Catch clause variable name must be an identifier." },
	        Catch_clause_variable_cannot_have_a_type_annotation: { code: 1196, category: ts.DiagnosticCategory.Error, key: "Catch clause variable cannot have a type annotation." },
	        Catch_clause_variable_cannot_have_an_initializer: { code: 1197, category: ts.DiagnosticCategory.Error, key: "Catch clause variable cannot have an initializer." },
	        An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive: { code: 1198, category: ts.DiagnosticCategory.Error, key: "An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive." },
	        Unterminated_Unicode_escape_sequence: { code: 1199, category: ts.DiagnosticCategory.Error, key: "Unterminated Unicode escape sequence." },
	        Line_terminator_not_permitted_before_arrow: { code: 1200, category: ts.DiagnosticCategory.Error, key: "Line terminator not permitted before arrow." },
	        Import_assignment_cannot_be_used_when_targeting_ECMAScript_6_or_higher_Consider_using_import_Asterisk_as_ns_from_mod_import_a_from_mod_or_import_d_from_mod_instead: { code: 1202, category: ts.DiagnosticCategory.Error, key: "Import assignment cannot be used when targeting ECMAScript 6 or higher. Consider using 'import * as ns from \"mod\"', 'import {a} from \"mod\"' or 'import d from \"mod\"' instead." },
	        Export_assignment_cannot_be_used_when_targeting_ECMAScript_6_or_higher_Consider_using_export_default_instead: { code: 1203, category: ts.DiagnosticCategory.Error, key: "Export assignment cannot be used when targeting ECMAScript 6 or higher. Consider using 'export default' instead." },
	        Cannot_compile_modules_into_commonjs_amd_system_or_umd_when_targeting_ES6_or_higher: { code: 1204, category: ts.DiagnosticCategory.Error, key: "Cannot compile modules into 'commonjs', 'amd', 'system' or 'umd' when targeting 'ES6' or higher." },
	        Decorators_are_only_available_when_targeting_ECMAScript_5_and_higher: { code: 1205, category: ts.DiagnosticCategory.Error, key: "Decorators are only available when targeting ECMAScript 5 and higher." },
	        Decorators_are_not_valid_here: { code: 1206, category: ts.DiagnosticCategory.Error, key: "Decorators are not valid here." },
	        Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name: { code: 1207, category: ts.DiagnosticCategory.Error, key: "Decorators cannot be applied to multiple get/set accessors of the same name." },
	        Cannot_compile_namespaces_when_the_isolatedModules_flag_is_provided: { code: 1208, category: ts.DiagnosticCategory.Error, key: "Cannot compile namespaces when the '--isolatedModules' flag is provided." },
	        Ambient_const_enums_are_not_allowed_when_the_isolatedModules_flag_is_provided: { code: 1209, category: ts.DiagnosticCategory.Error, key: "Ambient const enums are not allowed when the '--isolatedModules' flag is provided." },
	        Invalid_use_of_0_Class_definitions_are_automatically_in_strict_mode: { code: 1210, category: ts.DiagnosticCategory.Error, key: "Invalid use of '{0}'. Class definitions are automatically in strict mode." },
	        A_class_declaration_without_the_default_modifier_must_have_a_name: { code: 1211, category: ts.DiagnosticCategory.Error, key: "A class declaration without the 'default' modifier must have a name" },
	        Identifier_expected_0_is_a_reserved_word_in_strict_mode: { code: 1212, category: ts.DiagnosticCategory.Error, key: "Identifier expected. '{0}' is a reserved word in strict mode" },
	        Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode: { code: 1213, category: ts.DiagnosticCategory.Error, key: "Identifier expected. '{0}' is a reserved word in strict mode. Class definitions are automatically in strict mode." },
	        Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode: { code: 1214, category: ts.DiagnosticCategory.Error, key: "Identifier expected. '{0}' is a reserved word in strict mode. Modules are automatically in strict mode." },
	        Invalid_use_of_0_Modules_are_automatically_in_strict_mode: { code: 1215, category: ts.DiagnosticCategory.Error, key: "Invalid use of '{0}'. Modules are automatically in strict mode." },
	        Export_assignment_is_not_supported_when_module_flag_is_system: { code: 1218, category: ts.DiagnosticCategory.Error, key: "Export assignment is not supported when '--module' flag is 'system'." },
	        Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Specify_experimentalDecorators_to_remove_this_warning: { code: 1219, category: ts.DiagnosticCategory.Error, key: "Experimental support for decorators is a feature that is subject to change in a future release. Specify '--experimentalDecorators' to remove this warning." },
	        Generators_are_only_available_when_targeting_ECMAScript_6_or_higher: { code: 1220, category: ts.DiagnosticCategory.Error, key: "Generators are only available when targeting ECMAScript 6 or higher." },
	        Generators_are_not_allowed_in_an_ambient_context: { code: 1221, category: ts.DiagnosticCategory.Error, key: "Generators are not allowed in an ambient context." },
	        An_overload_signature_cannot_be_declared_as_a_generator: { code: 1222, category: ts.DiagnosticCategory.Error, key: "An overload signature cannot be declared as a generator." },
	        _0_tag_already_specified: { code: 1223, category: ts.DiagnosticCategory.Error, key: "'{0}' tag already specified." },
	        Signature_0_must_have_a_type_predicate: { code: 1224, category: ts.DiagnosticCategory.Error, key: "Signature '{0}' must have a type predicate." },
	        Cannot_find_parameter_0: { code: 1225, category: ts.DiagnosticCategory.Error, key: "Cannot find parameter '{0}'." },
	        Type_predicate_0_is_not_assignable_to_1: { code: 1226, category: ts.DiagnosticCategory.Error, key: "Type predicate '{0}' is not assignable to '{1}'." },
	        Parameter_0_is_not_in_the_same_position_as_parameter_1: { code: 1227, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' is not in the same position as parameter '{1}'." },
	        A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods: { code: 1228, category: ts.DiagnosticCategory.Error, key: "A type predicate is only allowed in return type position for functions and methods." },
	        A_type_predicate_cannot_reference_a_rest_parameter: { code: 1229, category: ts.DiagnosticCategory.Error, key: "A type predicate cannot reference a rest parameter." },
	        A_type_predicate_cannot_reference_element_0_in_a_binding_pattern: { code: 1230, category: ts.DiagnosticCategory.Error, key: "A type predicate cannot reference element '{0}' in a binding pattern." },
	        An_export_assignment_can_only_be_used_in_a_module: { code: 1231, category: ts.DiagnosticCategory.Error, key: "An export assignment can only be used in a module." },
	        An_import_declaration_can_only_be_used_in_a_namespace_or_module: { code: 1232, category: ts.DiagnosticCategory.Error, key: "An import declaration can only be used in a namespace or module." },
	        An_export_declaration_can_only_be_used_in_a_module: { code: 1233, category: ts.DiagnosticCategory.Error, key: "An export declaration can only be used in a module." },
	        An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file: { code: 1234, category: ts.DiagnosticCategory.Error, key: "An ambient module declaration is only allowed at the top level in a file." },
	        A_namespace_declaration_is_only_allowed_in_a_namespace_or_module: { code: 1235, category: ts.DiagnosticCategory.Error, key: "A namespace declaration is only allowed in a namespace or module." },
	        Experimental_support_for_async_functions_is_a_feature_that_is_subject_to_change_in_a_future_release_Specify_experimentalAsyncFunctions_to_remove_this_warning: { code: 1236, category: ts.DiagnosticCategory.Error, key: "Experimental support for async functions is a feature that is subject to change in a future release. Specify '--experimentalAsyncFunctions' to remove this warning." },
	        with_statements_are_not_allowed_in_an_async_function_block: { code: 1300, category: ts.DiagnosticCategory.Error, key: "'with' statements are not allowed in an async function block." },
	        await_expression_is_only_allowed_within_an_async_function: { code: 1308, category: ts.DiagnosticCategory.Error, key: "'await' expression is only allowed within an async function." },
	        Async_functions_are_only_available_when_targeting_ECMAScript_6_and_higher: { code: 1311, category: ts.DiagnosticCategory.Error, key: "Async functions are only available when targeting ECMAScript 6 and higher." },
	        The_return_type_of_a_property_decorator_function_must_be_either_void_or_any: { code: 1236, category: ts.DiagnosticCategory.Error, key: "The return type of a property decorator function must be either 'void' or 'any'." },
	        The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any: { code: 1237, category: ts.DiagnosticCategory.Error, key: "The return type of a parameter decorator function must be either 'void' or 'any'." },
	        Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression: { code: 1238, category: ts.DiagnosticCategory.Error, key: "Unable to resolve signature of class decorator when called as an expression." },
	        Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression: { code: 1239, category: ts.DiagnosticCategory.Error, key: "Unable to resolve signature of parameter decorator when called as an expression." },
	        Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression: { code: 1240, category: ts.DiagnosticCategory.Error, key: "Unable to resolve signature of property decorator when called as an expression." },
	        Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression: { code: 1241, category: ts.DiagnosticCategory.Error, key: "Unable to resolve signature of method decorator when called as an expression." },
	        abstract_modifier_can_only_appear_on_a_class_or_method_declaration: { code: 1242, category: ts.DiagnosticCategory.Error, key: "'abstract' modifier can only appear on a class or method declaration." },
	        _0_modifier_cannot_be_used_with_1_modifier: { code: 1243, category: ts.DiagnosticCategory.Error, key: "'{0}' modifier cannot be used with '{1}' modifier." },
	        Abstract_methods_can_only_appear_within_an_abstract_class: { code: 1244, category: ts.DiagnosticCategory.Error, key: "Abstract methods can only appear within an abstract class." },
	        Method_0_cannot_have_an_implementation_because_it_is_marked_abstract: { code: 1245, category: ts.DiagnosticCategory.Error, key: "Method '{0}' cannot have an implementation because it is marked abstract." },
	        Duplicate_identifier_0: { code: 2300, category: ts.DiagnosticCategory.Error, key: "Duplicate identifier '{0}'." },
	        Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor: { code: 2301, category: ts.DiagnosticCategory.Error, key: "Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor." },
	        Static_members_cannot_reference_class_type_parameters: { code: 2302, category: ts.DiagnosticCategory.Error, key: "Static members cannot reference class type parameters." },
	        Circular_definition_of_import_alias_0: { code: 2303, category: ts.DiagnosticCategory.Error, key: "Circular definition of import alias '{0}'." },
	        Cannot_find_name_0: { code: 2304, category: ts.DiagnosticCategory.Error, key: "Cannot find name '{0}'." },
	        Module_0_has_no_exported_member_1: { code: 2305, category: ts.DiagnosticCategory.Error, key: "Module '{0}' has no exported member '{1}'." },
	        File_0_is_not_a_module: { code: 2306, category: ts.DiagnosticCategory.Error, key: "File '{0}' is not a module." },
	        Cannot_find_module_0: { code: 2307, category: ts.DiagnosticCategory.Error, key: "Cannot find module '{0}'." },
	        An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements: { code: 2309, category: ts.DiagnosticCategory.Error, key: "An export assignment cannot be used in a module with other exported elements." },
	        Type_0_recursively_references_itself_as_a_base_type: { code: 2310, category: ts.DiagnosticCategory.Error, key: "Type '{0}' recursively references itself as a base type." },
	        A_class_may_only_extend_another_class: { code: 2311, category: ts.DiagnosticCategory.Error, key: "A class may only extend another class." },
	        An_interface_may_only_extend_a_class_or_another_interface: { code: 2312, category: ts.DiagnosticCategory.Error, key: "An interface may only extend a class or another interface." },
	        Constraint_of_a_type_parameter_cannot_reference_any_type_parameter_from_the_same_type_parameter_list: { code: 2313, category: ts.DiagnosticCategory.Error, key: "Constraint of a type parameter cannot reference any type parameter from the same type parameter list." },
	        Generic_type_0_requires_1_type_argument_s: { code: 2314, category: ts.DiagnosticCategory.Error, key: "Generic type '{0}' requires {1} type argument(s)." },
	        Type_0_is_not_generic: { code: 2315, category: ts.DiagnosticCategory.Error, key: "Type '{0}' is not generic." },
	        Global_type_0_must_be_a_class_or_interface_type: { code: 2316, category: ts.DiagnosticCategory.Error, key: "Global type '{0}' must be a class or interface type." },
	        Global_type_0_must_have_1_type_parameter_s: { code: 2317, category: ts.DiagnosticCategory.Error, key: "Global type '{0}' must have {1} type parameter(s)." },
	        Cannot_find_global_type_0: { code: 2318, category: ts.DiagnosticCategory.Error, key: "Cannot find global type '{0}'." },
	        Named_property_0_of_types_1_and_2_are_not_identical: { code: 2319, category: ts.DiagnosticCategory.Error, key: "Named property '{0}' of types '{1}' and '{2}' are not identical." },
	        Interface_0_cannot_simultaneously_extend_types_1_and_2: { code: 2320, category: ts.DiagnosticCategory.Error, key: "Interface '{0}' cannot simultaneously extend types '{1}' and '{2}'." },
	        Excessive_stack_depth_comparing_types_0_and_1: { code: 2321, category: ts.DiagnosticCategory.Error, key: "Excessive stack depth comparing types '{0}' and '{1}'." },
	        Type_0_is_not_assignable_to_type_1: { code: 2322, category: ts.DiagnosticCategory.Error, key: "Type '{0}' is not assignable to type '{1}'." },
	        Property_0_is_missing_in_type_1: { code: 2324, category: ts.DiagnosticCategory.Error, key: "Property '{0}' is missing in type '{1}'." },
	        Property_0_is_private_in_type_1_but_not_in_type_2: { code: 2325, category: ts.DiagnosticCategory.Error, key: "Property '{0}' is private in type '{1}' but not in type '{2}'." },
	        Types_of_property_0_are_incompatible: { code: 2326, category: ts.DiagnosticCategory.Error, key: "Types of property '{0}' are incompatible." },
	        Property_0_is_optional_in_type_1_but_required_in_type_2: { code: 2327, category: ts.DiagnosticCategory.Error, key: "Property '{0}' is optional in type '{1}' but required in type '{2}'." },
	        Types_of_parameters_0_and_1_are_incompatible: { code: 2328, category: ts.DiagnosticCategory.Error, key: "Types of parameters '{0}' and '{1}' are incompatible." },
	        Index_signature_is_missing_in_type_0: { code: 2329, category: ts.DiagnosticCategory.Error, key: "Index signature is missing in type '{0}'." },
	        Index_signatures_are_incompatible: { code: 2330, category: ts.DiagnosticCategory.Error, key: "Index signatures are incompatible." },
	        this_cannot_be_referenced_in_a_module_or_namespace_body: { code: 2331, category: ts.DiagnosticCategory.Error, key: "'this' cannot be referenced in a module or namespace body." },
	        this_cannot_be_referenced_in_current_location: { code: 2332, category: ts.DiagnosticCategory.Error, key: "'this' cannot be referenced in current location." },
	        this_cannot_be_referenced_in_constructor_arguments: { code: 2333, category: ts.DiagnosticCategory.Error, key: "'this' cannot be referenced in constructor arguments." },
	        this_cannot_be_referenced_in_a_static_property_initializer: { code: 2334, category: ts.DiagnosticCategory.Error, key: "'this' cannot be referenced in a static property initializer." },
	        super_can_only_be_referenced_in_a_derived_class: { code: 2335, category: ts.DiagnosticCategory.Error, key: "'super' can only be referenced in a derived class." },
	        super_cannot_be_referenced_in_constructor_arguments: { code: 2336, category: ts.DiagnosticCategory.Error, key: "'super' cannot be referenced in constructor arguments." },
	        Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors: { code: 2337, category: ts.DiagnosticCategory.Error, key: "Super calls are not permitted outside constructors or in nested functions inside constructors." },
	        super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class: { code: 2338, category: ts.DiagnosticCategory.Error, key: "'super' property access is permitted only in a constructor, member function, or member accessor of a derived class." },
	        Property_0_does_not_exist_on_type_1: { code: 2339, category: ts.DiagnosticCategory.Error, key: "Property '{0}' does not exist on type '{1}'." },
	        Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword: { code: 2340, category: ts.DiagnosticCategory.Error, key: "Only public and protected methods of the base class are accessible via the 'super' keyword." },
	        Property_0_is_private_and_only_accessible_within_class_1: { code: 2341, category: ts.DiagnosticCategory.Error, key: "Property '{0}' is private and only accessible within class '{1}'." },
	        An_index_expression_argument_must_be_of_type_string_number_symbol_or_any: { code: 2342, category: ts.DiagnosticCategory.Error, key: "An index expression argument must be of type 'string', 'number', 'symbol, or 'any'." },
	        Type_0_does_not_satisfy_the_constraint_1: { code: 2344, category: ts.DiagnosticCategory.Error, key: "Type '{0}' does not satisfy the constraint '{1}'." },
	        Argument_of_type_0_is_not_assignable_to_parameter_of_type_1: { code: 2345, category: ts.DiagnosticCategory.Error, key: "Argument of type '{0}' is not assignable to parameter of type '{1}'." },
	        Supplied_parameters_do_not_match_any_signature_of_call_target: { code: 2346, category: ts.DiagnosticCategory.Error, key: "Supplied parameters do not match any signature of call target." },
	        Untyped_function_calls_may_not_accept_type_arguments: { code: 2347, category: ts.DiagnosticCategory.Error, key: "Untyped function calls may not accept type arguments." },
	        Value_of_type_0_is_not_callable_Did_you_mean_to_include_new: { code: 2348, category: ts.DiagnosticCategory.Error, key: "Value of type '{0}' is not callable. Did you mean to include 'new'?" },
	        Cannot_invoke_an_expression_whose_type_lacks_a_call_signature: { code: 2349, category: ts.DiagnosticCategory.Error, key: "Cannot invoke an expression whose type lacks a call signature." },
	        Only_a_void_function_can_be_called_with_the_new_keyword: { code: 2350, category: ts.DiagnosticCategory.Error, key: "Only a void function can be called with the 'new' keyword." },
	        Cannot_use_new_with_an_expression_whose_type_lacks_a_call_or_construct_signature: { code: 2351, category: ts.DiagnosticCategory.Error, key: "Cannot use 'new' with an expression whose type lacks a call or construct signature." },
	        Neither_type_0_nor_type_1_is_assignable_to_the_other: { code: 2352, category: ts.DiagnosticCategory.Error, key: "Neither type '{0}' nor type '{1}' is assignable to the other." },
	        Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1: { code: 2353, category: ts.DiagnosticCategory.Error, key: "Object literal may only specify known properties, and '{0}' does not exist in type '{1}'." },
	        No_best_common_type_exists_among_return_expressions: { code: 2354, category: ts.DiagnosticCategory.Error, key: "No best common type exists among return expressions." },
	        A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value_or_consist_of_a_single_throw_statement: { code: 2355, category: ts.DiagnosticCategory.Error, key: "A function whose declared type is neither 'void' nor 'any' must return a value or consist of a single 'throw' statement." },
	        An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type: { code: 2356, category: ts.DiagnosticCategory.Error, key: "An arithmetic operand must be of type 'any', 'number' or an enum type." },
	        The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer: { code: 2357, category: ts.DiagnosticCategory.Error, key: "The operand of an increment or decrement operator must be a variable, property or indexer." },
	        The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: { code: 2358, category: ts.DiagnosticCategory.Error, key: "The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter." },
	        The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type: { code: 2359, category: ts.DiagnosticCategory.Error, key: "The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type." },
	        The_left_hand_side_of_an_in_expression_must_be_of_type_any_string_number_or_symbol: { code: 2360, category: ts.DiagnosticCategory.Error, key: "The left-hand side of an 'in' expression must be of type 'any', 'string', 'number', or 'symbol'." },
	        The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: { code: 2361, category: ts.DiagnosticCategory.Error, key: "The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter" },
	        The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type: { code: 2362, category: ts.DiagnosticCategory.Error, key: "The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type." },
	        The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type: { code: 2363, category: ts.DiagnosticCategory.Error, key: "The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type." },
	        Invalid_left_hand_side_of_assignment_expression: { code: 2364, category: ts.DiagnosticCategory.Error, key: "Invalid left-hand side of assignment expression." },
	        Operator_0_cannot_be_applied_to_types_1_and_2: { code: 2365, category: ts.DiagnosticCategory.Error, key: "Operator '{0}' cannot be applied to types '{1}' and '{2}'." },
	        Type_parameter_name_cannot_be_0: { code: 2368, category: ts.DiagnosticCategory.Error, key: "Type parameter name cannot be '{0}'" },
	        A_parameter_property_is_only_allowed_in_a_constructor_implementation: { code: 2369, category: ts.DiagnosticCategory.Error, key: "A parameter property is only allowed in a constructor implementation." },
	        A_rest_parameter_must_be_of_an_array_type: { code: 2370, category: ts.DiagnosticCategory.Error, key: "A rest parameter must be of an array type." },
	        A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation: { code: 2371, category: ts.DiagnosticCategory.Error, key: "A parameter initializer is only allowed in a function or constructor implementation." },
	        Parameter_0_cannot_be_referenced_in_its_initializer: { code: 2372, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' cannot be referenced in its initializer." },
	        Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it: { code: 2373, category: ts.DiagnosticCategory.Error, key: "Initializer of parameter '{0}' cannot reference identifier '{1}' declared after it." },
	        Duplicate_string_index_signature: { code: 2374, category: ts.DiagnosticCategory.Error, key: "Duplicate string index signature." },
	        Duplicate_number_index_signature: { code: 2375, category: ts.DiagnosticCategory.Error, key: "Duplicate number index signature." },
	        A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties: { code: 2376, category: ts.DiagnosticCategory.Error, key: "A 'super' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties." },
	        Constructors_for_derived_classes_must_contain_a_super_call: { code: 2377, category: ts.DiagnosticCategory.Error, key: "Constructors for derived classes must contain a 'super' call." },
	        A_get_accessor_must_return_a_value_or_consist_of_a_single_throw_statement: { code: 2378, category: ts.DiagnosticCategory.Error, key: "A 'get' accessor must return a value or consist of a single 'throw' statement." },
	        Getter_and_setter_accessors_do_not_agree_in_visibility: { code: 2379, category: ts.DiagnosticCategory.Error, key: "Getter and setter accessors do not agree in visibility." },
	        get_and_set_accessor_must_have_the_same_type: { code: 2380, category: ts.DiagnosticCategory.Error, key: "'get' and 'set' accessor must have the same type." },
	        A_signature_with_an_implementation_cannot_use_a_string_literal_type: { code: 2381, category: ts.DiagnosticCategory.Error, key: "A signature with an implementation cannot use a string literal type." },
	        Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature: { code: 2382, category: ts.DiagnosticCategory.Error, key: "Specialized overload signature is not assignable to any non-specialized signature." },
	        Overload_signatures_must_all_be_exported_or_not_exported: { code: 2383, category: ts.DiagnosticCategory.Error, key: "Overload signatures must all be exported or not exported." },
	        Overload_signatures_must_all_be_ambient_or_non_ambient: { code: 2384, category: ts.DiagnosticCategory.Error, key: "Overload signatures must all be ambient or non-ambient." },
	        Overload_signatures_must_all_be_public_private_or_protected: { code: 2385, category: ts.DiagnosticCategory.Error, key: "Overload signatures must all be public, private or protected." },
	        Overload_signatures_must_all_be_optional_or_required: { code: 2386, category: ts.DiagnosticCategory.Error, key: "Overload signatures must all be optional or required." },
	        Function_overload_must_be_static: { code: 2387, category: ts.DiagnosticCategory.Error, key: "Function overload must be static." },
	        Function_overload_must_not_be_static: { code: 2388, category: ts.DiagnosticCategory.Error, key: "Function overload must not be static." },
	        Function_implementation_name_must_be_0: { code: 2389, category: ts.DiagnosticCategory.Error, key: "Function implementation name must be '{0}'." },
	        Constructor_implementation_is_missing: { code: 2390, category: ts.DiagnosticCategory.Error, key: "Constructor implementation is missing." },
	        Function_implementation_is_missing_or_not_immediately_following_the_declaration: { code: 2391, category: ts.DiagnosticCategory.Error, key: "Function implementation is missing or not immediately following the declaration." },
	        Multiple_constructor_implementations_are_not_allowed: { code: 2392, category: ts.DiagnosticCategory.Error, key: "Multiple constructor implementations are not allowed." },
	        Duplicate_function_implementation: { code: 2393, category: ts.DiagnosticCategory.Error, key: "Duplicate function implementation." },
	        Overload_signature_is_not_compatible_with_function_implementation: { code: 2394, category: ts.DiagnosticCategory.Error, key: "Overload signature is not compatible with function implementation." },
	        Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local: { code: 2395, category: ts.DiagnosticCategory.Error, key: "Individual declarations in merged declaration '{0}' must be all exported or all local." },
	        Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters: { code: 2396, category: ts.DiagnosticCategory.Error, key: "Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters." },
	        Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference: { code: 2399, category: ts.DiagnosticCategory.Error, key: "Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference." },
	        Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference: { code: 2400, category: ts.DiagnosticCategory.Error, key: "Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference." },
	        Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference: { code: 2401, category: ts.DiagnosticCategory.Error, key: "Duplicate identifier '_super'. Compiler uses '_super' to capture base class reference." },
	        Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference: { code: 2402, category: ts.DiagnosticCategory.Error, key: "Expression resolves to '_super' that compiler uses to capture base class reference." },
	        Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2: { code: 2403, category: ts.DiagnosticCategory.Error, key: "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'." },
	        The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation: { code: 2404, category: ts.DiagnosticCategory.Error, key: "The left-hand side of a 'for...in' statement cannot use a type annotation." },
	        The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any: { code: 2405, category: ts.DiagnosticCategory.Error, key: "The left-hand side of a 'for...in' statement must be of type 'string' or 'any'." },
	        Invalid_left_hand_side_in_for_in_statement: { code: 2406, category: ts.DiagnosticCategory.Error, key: "Invalid left-hand side in 'for...in' statement." },
	        The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter: { code: 2407, category: ts.DiagnosticCategory.Error, key: "The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter." },
	        Setters_cannot_return_a_value: { code: 2408, category: ts.DiagnosticCategory.Error, key: "Setters cannot return a value." },
	        Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class: { code: 2409, category: ts.DiagnosticCategory.Error, key: "Return type of constructor signature must be assignable to the instance type of the class" },
	        All_symbols_within_a_with_block_will_be_resolved_to_any: { code: 2410, category: ts.DiagnosticCategory.Error, key: "All symbols within a 'with' block will be resolved to 'any'." },
	        Property_0_of_type_1_is_not_assignable_to_string_index_type_2: { code: 2411, category: ts.DiagnosticCategory.Error, key: "Property '{0}' of type '{1}' is not assignable to string index type '{2}'." },
	        Property_0_of_type_1_is_not_assignable_to_numeric_index_type_2: { code: 2412, category: ts.DiagnosticCategory.Error, key: "Property '{0}' of type '{1}' is not assignable to numeric index type '{2}'." },
	        Numeric_index_type_0_is_not_assignable_to_string_index_type_1: { code: 2413, category: ts.DiagnosticCategory.Error, key: "Numeric index type '{0}' is not assignable to string index type '{1}'." },
	        Class_name_cannot_be_0: { code: 2414, category: ts.DiagnosticCategory.Error, key: "Class name cannot be '{0}'" },
	        Class_0_incorrectly_extends_base_class_1: { code: 2415, category: ts.DiagnosticCategory.Error, key: "Class '{0}' incorrectly extends base class '{1}'." },
	        Class_static_side_0_incorrectly_extends_base_class_static_side_1: { code: 2417, category: ts.DiagnosticCategory.Error, key: "Class static side '{0}' incorrectly extends base class static side '{1}'." },
	        Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_0: { code: 2419, category: ts.DiagnosticCategory.Error, key: "Type name '{0}' in extends clause does not reference constructor function for '{0}'." },
	        Class_0_incorrectly_implements_interface_1: { code: 2420, category: ts.DiagnosticCategory.Error, key: "Class '{0}' incorrectly implements interface '{1}'." },
	        A_class_may_only_implement_another_class_or_interface: { code: 2422, category: ts.DiagnosticCategory.Error, key: "A class may only implement another class or interface." },
	        Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor: { code: 2423, category: ts.DiagnosticCategory.Error, key: "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor." },
	        Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property: { code: 2424, category: ts.DiagnosticCategory.Error, key: "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member property." },
	        Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function: { code: 2425, category: ts.DiagnosticCategory.Error, key: "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function." },
	        Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function: { code: 2426, category: ts.DiagnosticCategory.Error, key: "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function." },
	        Interface_name_cannot_be_0: { code: 2427, category: ts.DiagnosticCategory.Error, key: "Interface name cannot be '{0}'" },
	        All_declarations_of_an_interface_must_have_identical_type_parameters: { code: 2428, category: ts.DiagnosticCategory.Error, key: "All declarations of an interface must have identical type parameters." },
	        Interface_0_incorrectly_extends_interface_1: { code: 2430, category: ts.DiagnosticCategory.Error, key: "Interface '{0}' incorrectly extends interface '{1}'." },
	        Enum_name_cannot_be_0: { code: 2431, category: ts.DiagnosticCategory.Error, key: "Enum name cannot be '{0}'" },
	        In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element: { code: 2432, category: ts.DiagnosticCategory.Error, key: "In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element." },
	        A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged: { code: 2433, category: ts.DiagnosticCategory.Error, key: "A namespace declaration cannot be in a different file from a class or function with which it is merged" },
	        A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged: { code: 2434, category: ts.DiagnosticCategory.Error, key: "A namespace declaration cannot be located prior to a class or function with which it is merged" },
	        Ambient_modules_cannot_be_nested_in_other_modules: { code: 2435, category: ts.DiagnosticCategory.Error, key: "Ambient modules cannot be nested in other modules." },
	        Ambient_module_declaration_cannot_specify_relative_module_name: { code: 2436, category: ts.DiagnosticCategory.Error, key: "Ambient module declaration cannot specify relative module name." },
	        Module_0_is_hidden_by_a_local_declaration_with_the_same_name: { code: 2437, category: ts.DiagnosticCategory.Error, key: "Module '{0}' is hidden by a local declaration with the same name" },
	        Import_name_cannot_be_0: { code: 2438, category: ts.DiagnosticCategory.Error, key: "Import name cannot be '{0}'" },
	        Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relative_module_name: { code: 2439, category: ts.DiagnosticCategory.Error, key: "Import or export declaration in an ambient module declaration cannot reference module through relative module name." },
	        Import_declaration_conflicts_with_local_declaration_of_0: { code: 2440, category: ts.DiagnosticCategory.Error, key: "Import declaration conflicts with local declaration of '{0}'" },
	        Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module: { code: 2441, category: ts.DiagnosticCategory.Error, key: "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module." },
	        Types_have_separate_declarations_of_a_private_property_0: { code: 2442, category: ts.DiagnosticCategory.Error, key: "Types have separate declarations of a private property '{0}'." },
	        Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2: { code: 2443, category: ts.DiagnosticCategory.Error, key: "Property '{0}' is protected but type '{1}' is not a class derived from '{2}'." },
	        Property_0_is_protected_in_type_1_but_public_in_type_2: { code: 2444, category: ts.DiagnosticCategory.Error, key: "Property '{0}' is protected in type '{1}' but public in type '{2}'." },
	        Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses: { code: 2445, category: ts.DiagnosticCategory.Error, key: "Property '{0}' is protected and only accessible within class '{1}' and its subclasses." },
	        Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1: { code: 2446, category: ts.DiagnosticCategory.Error, key: "Property '{0}' is protected and only accessible through an instance of class '{1}'." },
	        The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead: { code: 2447, category: ts.DiagnosticCategory.Error, key: "The '{0}' operator is not allowed for boolean types. Consider using '{1}' instead." },
	        Block_scoped_variable_0_used_before_its_declaration: { code: 2448, category: ts.DiagnosticCategory.Error, key: "Block-scoped variable '{0}' used before its declaration." },
	        The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant: { code: 2449, category: ts.DiagnosticCategory.Error, key: "The operand of an increment or decrement operator cannot be a constant." },
	        Left_hand_side_of_assignment_expression_cannot_be_a_constant: { code: 2450, category: ts.DiagnosticCategory.Error, key: "Left-hand side of assignment expression cannot be a constant." },
	        Cannot_redeclare_block_scoped_variable_0: { code: 2451, category: ts.DiagnosticCategory.Error, key: "Cannot redeclare block-scoped variable '{0}'." },
	        An_enum_member_cannot_have_a_numeric_name: { code: 2452, category: ts.DiagnosticCategory.Error, key: "An enum member cannot have a numeric name." },
	        The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly: { code: 2453, category: ts.DiagnosticCategory.Error, key: "The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly." },
	        Type_argument_candidate_1_is_not_a_valid_type_argument_because_it_is_not_a_supertype_of_candidate_0: { code: 2455, category: ts.DiagnosticCategory.Error, key: "Type argument candidate '{1}' is not a valid type argument because it is not a supertype of candidate '{0}'." },
	        Type_alias_0_circularly_references_itself: { code: 2456, category: ts.DiagnosticCategory.Error, key: "Type alias '{0}' circularly references itself." },
	        Type_alias_name_cannot_be_0: { code: 2457, category: ts.DiagnosticCategory.Error, key: "Type alias name cannot be '{0}'" },
	        An_AMD_module_cannot_have_multiple_name_assignments: { code: 2458, category: ts.DiagnosticCategory.Error, key: "An AMD module cannot have multiple name assignments." },
	        Type_0_has_no_property_1_and_no_string_index_signature: { code: 2459, category: ts.DiagnosticCategory.Error, key: "Type '{0}' has no property '{1}' and no string index signature." },
	        Type_0_has_no_property_1: { code: 2460, category: ts.DiagnosticCategory.Error, key: "Type '{0}' has no property '{1}'." },
	        Type_0_is_not_an_array_type: { code: 2461, category: ts.DiagnosticCategory.Error, key: "Type '{0}' is not an array type." },
	        A_rest_element_must_be_last_in_an_array_destructuring_pattern: { code: 2462, category: ts.DiagnosticCategory.Error, key: "A rest element must be last in an array destructuring pattern" },
	        A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature: { code: 2463, category: ts.DiagnosticCategory.Error, key: "A binding pattern parameter cannot be optional in an implementation signature." },
	        A_computed_property_name_must_be_of_type_string_number_symbol_or_any: { code: 2464, category: ts.DiagnosticCategory.Error, key: "A computed property name must be of type 'string', 'number', 'symbol', or 'any'." },
	        this_cannot_be_referenced_in_a_computed_property_name: { code: 2465, category: ts.DiagnosticCategory.Error, key: "'this' cannot be referenced in a computed property name." },
	        super_cannot_be_referenced_in_a_computed_property_name: { code: 2466, category: ts.DiagnosticCategory.Error, key: "'super' cannot be referenced in a computed property name." },
	        A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type: { code: 2467, category: ts.DiagnosticCategory.Error, key: "A computed property name cannot reference a type parameter from its containing type." },
	        Cannot_find_global_value_0: { code: 2468, category: ts.DiagnosticCategory.Error, key: "Cannot find global value '{0}'." },
	        The_0_operator_cannot_be_applied_to_type_symbol: { code: 2469, category: ts.DiagnosticCategory.Error, key: "The '{0}' operator cannot be applied to type 'symbol'." },
	        Symbol_reference_does_not_refer_to_the_global_Symbol_constructor_object: { code: 2470, category: ts.DiagnosticCategory.Error, key: "'Symbol' reference does not refer to the global Symbol constructor object." },
	        A_computed_property_name_of_the_form_0_must_be_of_type_symbol: { code: 2471, category: ts.DiagnosticCategory.Error, key: "A computed property name of the form '{0}' must be of type 'symbol'." },
	        Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher: { code: 2472, category: ts.DiagnosticCategory.Error, key: "Spread operator in 'new' expressions is only available when targeting ECMAScript 5 and higher." },
	        Enum_declarations_must_all_be_const_or_non_const: { code: 2473, category: ts.DiagnosticCategory.Error, key: "Enum declarations must all be const or non-const." },
	        In_const_enum_declarations_member_initializer_must_be_constant_expression: { code: 2474, category: ts.DiagnosticCategory.Error, key: "In 'const' enum declarations member initializer must be constant expression." },
	        const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment: { code: 2475, category: ts.DiagnosticCategory.Error, key: "'const' enums can only be used in property or index access expressions or the right hand side of an import declaration or export assignment." },
	        A_const_enum_member_can_only_be_accessed_using_a_string_literal: { code: 2476, category: ts.DiagnosticCategory.Error, key: "A const enum member can only be accessed using a string literal." },
	        const_enum_member_initializer_was_evaluated_to_a_non_finite_value: { code: 2477, category: ts.DiagnosticCategory.Error, key: "'const' enum member initializer was evaluated to a non-finite value." },
	        const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN: { code: 2478, category: ts.DiagnosticCategory.Error, key: "'const' enum member initializer was evaluated to disallowed value 'NaN'." },
	        Property_0_does_not_exist_on_const_enum_1: { code: 2479, category: ts.DiagnosticCategory.Error, key: "Property '{0}' does not exist on 'const' enum '{1}'." },
	        let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations: { code: 2480, category: ts.DiagnosticCategory.Error, key: "'let' is not allowed to be used as a name in 'let' or 'const' declarations." },
	        Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1: { code: 2481, category: ts.DiagnosticCategory.Error, key: "Cannot initialize outer scoped variable '{0}' in the same scope as block scoped declaration '{1}'." },
	        The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation: { code: 2483, category: ts.DiagnosticCategory.Error, key: "The left-hand side of a 'for...of' statement cannot use a type annotation." },
	        Export_declaration_conflicts_with_exported_declaration_of_0: { code: 2484, category: ts.DiagnosticCategory.Error, key: "Export declaration conflicts with exported declaration of '{0}'" },
	        The_left_hand_side_of_a_for_of_statement_cannot_be_a_previously_defined_constant: { code: 2485, category: ts.DiagnosticCategory.Error, key: "The left-hand side of a 'for...of' statement cannot be a previously defined constant." },
	        The_left_hand_side_of_a_for_in_statement_cannot_be_a_previously_defined_constant: { code: 2486, category: ts.DiagnosticCategory.Error, key: "The left-hand side of a 'for...in' statement cannot be a previously defined constant." },
	        Invalid_left_hand_side_in_for_of_statement: { code: 2487, category: ts.DiagnosticCategory.Error, key: "Invalid left-hand side in 'for...of' statement." },
	        Type_must_have_a_Symbol_iterator_method_that_returns_an_iterator: { code: 2488, category: ts.DiagnosticCategory.Error, key: "Type must have a '[Symbol.iterator]()' method that returns an iterator." },
	        An_iterator_must_have_a_next_method: { code: 2489, category: ts.DiagnosticCategory.Error, key: "An iterator must have a 'next()' method." },
	        The_type_returned_by_the_next_method_of_an_iterator_must_have_a_value_property: { code: 2490, category: ts.DiagnosticCategory.Error, key: "The type returned by the 'next()' method of an iterator must have a 'value' property." },
	        The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern: { code: 2491, category: ts.DiagnosticCategory.Error, key: "The left-hand side of a 'for...in' statement cannot be a destructuring pattern." },
	        Cannot_redeclare_identifier_0_in_catch_clause: { code: 2492, category: ts.DiagnosticCategory.Error, key: "Cannot redeclare identifier '{0}' in catch clause" },
	        Tuple_type_0_with_length_1_cannot_be_assigned_to_tuple_with_length_2: { code: 2493, category: ts.DiagnosticCategory.Error, key: "Tuple type '{0}' with length '{1}' cannot be assigned to tuple with length '{2}'." },
	        Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher: { code: 2494, category: ts.DiagnosticCategory.Error, key: "Using a string in a 'for...of' statement is only supported in ECMAScript 5 and higher." },
	        Type_0_is_not_an_array_type_or_a_string_type: { code: 2495, category: ts.DiagnosticCategory.Error, key: "Type '{0}' is not an array type or a string type." },
	        The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_standard_function_expression: { code: 2496, category: ts.DiagnosticCategory.Error, key: "The 'arguments' object cannot be referenced in an arrow function in ES3 and ES5. Consider using a standard function expression." },
	        Module_0_resolves_to_a_non_module_entity_and_cannot_be_imported_using_this_construct: { code: 2497, category: ts.DiagnosticCategory.Error, key: "Module '{0}' resolves to a non-module entity and cannot be imported using this construct." },
	        Module_0_uses_export_and_cannot_be_used_with_export_Asterisk: { code: 2498, category: ts.DiagnosticCategory.Error, key: "Module '{0}' uses 'export =' and cannot be used with 'export *'." },
	        An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments: { code: 2499, category: ts.DiagnosticCategory.Error, key: "An interface can only extend an identifier/qualified-name with optional type arguments." },
	        A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments: { code: 2500, category: ts.DiagnosticCategory.Error, key: "A class can only implement an identifier/qualified-name with optional type arguments." },
	        A_rest_element_cannot_contain_a_binding_pattern: { code: 2501, category: ts.DiagnosticCategory.Error, key: "A rest element cannot contain a binding pattern." },
	        _0_is_referenced_directly_or_indirectly_in_its_own_type_annotation: { code: 2502, category: ts.DiagnosticCategory.Error, key: "'{0}' is referenced directly or indirectly in its own type annotation." },
	        Cannot_find_namespace_0: { code: 2503, category: ts.DiagnosticCategory.Error, key: "Cannot find namespace '{0}'." },
	        No_best_common_type_exists_among_yield_expressions: { code: 2504, category: ts.DiagnosticCategory.Error, key: "No best common type exists among yield expressions." },
	        A_generator_cannot_have_a_void_type_annotation: { code: 2505, category: ts.DiagnosticCategory.Error, key: "A generator cannot have a 'void' type annotation." },
	        _0_is_referenced_directly_or_indirectly_in_its_own_base_expression: { code: 2506, category: ts.DiagnosticCategory.Error, key: "'{0}' is referenced directly or indirectly in its own base expression." },
	        Type_0_is_not_a_constructor_function_type: { code: 2507, category: ts.DiagnosticCategory.Error, key: "Type '{0}' is not a constructor function type." },
	        No_base_constructor_has_the_specified_number_of_type_arguments: { code: 2508, category: ts.DiagnosticCategory.Error, key: "No base constructor has the specified number of type arguments." },
	        Base_constructor_return_type_0_is_not_a_class_or_interface_type: { code: 2509, category: ts.DiagnosticCategory.Error, key: "Base constructor return type '{0}' is not a class or interface type." },
	        Base_constructors_must_all_have_the_same_return_type: { code: 2510, category: ts.DiagnosticCategory.Error, key: "Base constructors must all have the same return type." },
	        Cannot_create_an_instance_of_the_abstract_class_0: { code: 2511, category: ts.DiagnosticCategory.Error, key: "Cannot create an instance of the abstract class '{0}'." },
	        Overload_signatures_must_all_be_abstract_or_not_abstract: { code: 2512, category: ts.DiagnosticCategory.Error, key: "Overload signatures must all be abstract or not abstract." },
	        Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression: { code: 2513, category: ts.DiagnosticCategory.Error, key: "Abstract method '{0}' in class '{1}' cannot be accessed via super expression." },
	        Classes_containing_abstract_methods_must_be_marked_abstract: { code: 2514, category: ts.DiagnosticCategory.Error, key: "Classes containing abstract methods must be marked abstract." },
	        Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2: { code: 2515, category: ts.DiagnosticCategory.Error, key: "Non-abstract class '{0}' does not implement inherited abstract member '{1}' from class '{2}'." },
	        All_declarations_of_an_abstract_method_must_be_consecutive: { code: 2516, category: ts.DiagnosticCategory.Error, key: "All declarations of an abstract method must be consecutive." },
	        Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type: { code: 2517, category: ts.DiagnosticCategory.Error, key: "Cannot assign an abstract constructor type to a non-abstract constructor type." },
	        Only_an_ambient_class_can_be_merged_with_an_interface: { code: 2518, category: ts.DiagnosticCategory.Error, key: "Only an ambient class can be merged with an interface." },
	        Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions: { code: 2520, category: ts.DiagnosticCategory.Error, key: "Duplicate identifier '{0}'. Compiler uses declaration '{1}' to support async functions." },
	        Expression_resolves_to_variable_declaration_0_that_compiler_uses_to_support_async_functions: { code: 2521, category: ts.DiagnosticCategory.Error, key: "Expression resolves to variable declaration '{0}' that compiler uses to support async functions." },
	        The_arguments_object_cannot_be_referenced_in_an_async_arrow_function_Consider_using_a_standard_async_function_expression: { code: 2522, category: ts.DiagnosticCategory.Error, key: "The 'arguments' object cannot be referenced in an async arrow function. Consider using a standard async function expression." },
	        yield_expressions_cannot_be_used_in_a_parameter_initializer: { code: 2523, category: ts.DiagnosticCategory.Error, key: "'yield' expressions cannot be used in a parameter initializer." },
	        await_expressions_cannot_be_used_in_a_parameter_initializer: { code: 2524, category: ts.DiagnosticCategory.Error, key: "'await' expressions cannot be used in a parameter initializer." },
	        JSX_element_attributes_type_0_must_be_an_object_type: { code: 2600, category: ts.DiagnosticCategory.Error, key: "JSX element attributes type '{0}' must be an object type." },
	        The_return_type_of_a_JSX_element_constructor_must_return_an_object_type: { code: 2601, category: ts.DiagnosticCategory.Error, key: "The return type of a JSX element constructor must return an object type." },
	        JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist: { code: 2602, category: ts.DiagnosticCategory.Error, key: "JSX element implicitly has type 'any' because the global type 'JSX.Element' does not exist." },
	        Property_0_in_type_1_is_not_assignable_to_type_2: { code: 2603, category: ts.DiagnosticCategory.Error, key: "Property '{0}' in type '{1}' is not assignable to type '{2}'" },
	        JSX_element_type_0_does_not_have_any_construct_or_call_signatures: { code: 2604, category: ts.DiagnosticCategory.Error, key: "JSX element type '{0}' does not have any construct or call signatures." },
	        JSX_element_type_0_is_not_a_constructor_function_for_JSX_elements: { code: 2605, category: ts.DiagnosticCategory.Error, key: "JSX element type '{0}' is not a constructor function for JSX elements." },
	        Property_0_of_JSX_spread_attribute_is_not_assignable_to_target_property: { code: 2606, category: ts.DiagnosticCategory.Error, key: "Property '{0}' of JSX spread attribute is not assignable to target property." },
	        JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property: { code: 2607, category: ts.DiagnosticCategory.Error, key: "JSX element class does not support attributes because it does not have a '{0}' property" },
	        The_global_type_JSX_0_may_not_have_more_than_one_property: { code: 2608, category: ts.DiagnosticCategory.Error, key: "The global type 'JSX.{0}' may not have more than one property" },
	        Cannot_emit_namespaced_JSX_elements_in_React: { code: 2650, category: ts.DiagnosticCategory.Error, key: "Cannot emit namespaced JSX elements in React" },
	        A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums: { code: 2651, category: ts.DiagnosticCategory.Error, key: "A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums." },
	        Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_default_0_declaration_instead: { code: 2652, category: ts.DiagnosticCategory.Error, key: "Merged declaration '{0}' cannot include a default export declaration. Consider adding a separate 'export default {0}' declaration instead." },
	        Import_declaration_0_is_using_private_name_1: { code: 4000, category: ts.DiagnosticCategory.Error, key: "Import declaration '{0}' is using private name '{1}'." },
	        Type_parameter_0_of_exported_class_has_or_is_using_private_name_1: { code: 4002, category: ts.DiagnosticCategory.Error, key: "Type parameter '{0}' of exported class has or is using private name '{1}'." },
	        Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1: { code: 4004, category: ts.DiagnosticCategory.Error, key: "Type parameter '{0}' of exported interface has or is using private name '{1}'." },
	        Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: { code: 4006, category: ts.DiagnosticCategory.Error, key: "Type parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'." },
	        Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: { code: 4008, category: ts.DiagnosticCategory.Error, key: "Type parameter '{0}' of call signature from exported interface has or is using private name '{1}'." },
	        Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: { code: 4010, category: ts.DiagnosticCategory.Error, key: "Type parameter '{0}' of public static method from exported class has or is using private name '{1}'." },
	        Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: { code: 4012, category: ts.DiagnosticCategory.Error, key: "Type parameter '{0}' of public method from exported class has or is using private name '{1}'." },
	        Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: { code: 4014, category: ts.DiagnosticCategory.Error, key: "Type parameter '{0}' of method from exported interface has or is using private name '{1}'." },
	        Type_parameter_0_of_exported_function_has_or_is_using_private_name_1: { code: 4016, category: ts.DiagnosticCategory.Error, key: "Type parameter '{0}' of exported function has or is using private name '{1}'." },
	        Implements_clause_of_exported_class_0_has_or_is_using_private_name_1: { code: 4019, category: ts.DiagnosticCategory.Error, key: "Implements clause of exported class '{0}' has or is using private name '{1}'." },
	        Extends_clause_of_exported_class_0_has_or_is_using_private_name_1: { code: 4020, category: ts.DiagnosticCategory.Error, key: "Extends clause of exported class '{0}' has or is using private name '{1}'." },
	        Extends_clause_of_exported_interface_0_has_or_is_using_private_name_1: { code: 4022, category: ts.DiagnosticCategory.Error, key: "Extends clause of exported interface '{0}' has or is using private name '{1}'." },
	        Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4023, category: ts.DiagnosticCategory.Error, key: "Exported variable '{0}' has or is using name '{1}' from external module {2} but cannot be named." },
	        Exported_variable_0_has_or_is_using_name_1_from_private_module_2: { code: 4024, category: ts.DiagnosticCategory.Error, key: "Exported variable '{0}' has or is using name '{1}' from private module '{2}'." },
	        Exported_variable_0_has_or_is_using_private_name_1: { code: 4025, category: ts.DiagnosticCategory.Error, key: "Exported variable '{0}' has or is using private name '{1}'." },
	        Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4026, category: ts.DiagnosticCategory.Error, key: "Public static property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named." },
	        Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4027, category: ts.DiagnosticCategory.Error, key: "Public static property '{0}' of exported class has or is using name '{1}' from private module '{2}'." },
	        Public_static_property_0_of_exported_class_has_or_is_using_private_name_1: { code: 4028, category: ts.DiagnosticCategory.Error, key: "Public static property '{0}' of exported class has or is using private name '{1}'." },
	        Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4029, category: ts.DiagnosticCategory.Error, key: "Public property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named." },
	        Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4030, category: ts.DiagnosticCategory.Error, key: "Public property '{0}' of exported class has or is using name '{1}' from private module '{2}'." },
	        Public_property_0_of_exported_class_has_or_is_using_private_name_1: { code: 4031, category: ts.DiagnosticCategory.Error, key: "Public property '{0}' of exported class has or is using private name '{1}'." },
	        Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2: { code: 4032, category: ts.DiagnosticCategory.Error, key: "Property '{0}' of exported interface has or is using name '{1}' from private module '{2}'." },
	        Property_0_of_exported_interface_has_or_is_using_private_name_1: { code: 4033, category: ts.DiagnosticCategory.Error, key: "Property '{0}' of exported interface has or is using private name '{1}'." },
	        Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4034, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of public static property setter from exported class has or is using name '{1}' from private module '{2}'." },
	        Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_name_1: { code: 4035, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of public static property setter from exported class has or is using private name '{1}'." },
	        Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4036, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of public property setter from exported class has or is using name '{1}' from private module '{2}'." },
	        Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_name_1: { code: 4037, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of public property setter from exported class has or is using private name '{1}'." },
	        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4038, category: ts.DiagnosticCategory.Error, key: "Return type of public static property getter from exported class has or is using name '{0}' from external module {1} but cannot be named." },
	        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1: { code: 4039, category: ts.DiagnosticCategory.Error, key: "Return type of public static property getter from exported class has or is using name '{0}' from private module '{1}'." },
	        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_name_0: { code: 4040, category: ts.DiagnosticCategory.Error, key: "Return type of public static property getter from exported class has or is using private name '{0}'." },
	        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4041, category: ts.DiagnosticCategory.Error, key: "Return type of public property getter from exported class has or is using name '{0}' from external module {1} but cannot be named." },
	        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1: { code: 4042, category: ts.DiagnosticCategory.Error, key: "Return type of public property getter from exported class has or is using name '{0}' from private module '{1}'." },
	        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_name_0: { code: 4043, category: ts.DiagnosticCategory.Error, key: "Return type of public property getter from exported class has or is using private name '{0}'." },
	        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: { code: 4044, category: ts.DiagnosticCategory.Error, key: "Return type of constructor signature from exported interface has or is using name '{0}' from private module '{1}'." },
	        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0: { code: 4045, category: ts.DiagnosticCategory.Error, key: "Return type of constructor signature from exported interface has or is using private name '{0}'." },
	        Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: { code: 4046, category: ts.DiagnosticCategory.Error, key: "Return type of call signature from exported interface has or is using name '{0}' from private module '{1}'." },
	        Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0: { code: 4047, category: ts.DiagnosticCategory.Error, key: "Return type of call signature from exported interface has or is using private name '{0}'." },
	        Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: { code: 4048, category: ts.DiagnosticCategory.Error, key: "Return type of index signature from exported interface has or is using name '{0}' from private module '{1}'." },
	        Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0: { code: 4049, category: ts.DiagnosticCategory.Error, key: "Return type of index signature from exported interface has or is using private name '{0}'." },
	        Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4050, category: ts.DiagnosticCategory.Error, key: "Return type of public static method from exported class has or is using name '{0}' from external module {1} but cannot be named." },
	        Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: { code: 4051, category: ts.DiagnosticCategory.Error, key: "Return type of public static method from exported class has or is using name '{0}' from private module '{1}'." },
	        Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0: { code: 4052, category: ts.DiagnosticCategory.Error, key: "Return type of public static method from exported class has or is using private name '{0}'." },
	        Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4053, category: ts.DiagnosticCategory.Error, key: "Return type of public method from exported class has or is using name '{0}' from external module {1} but cannot be named." },
	        Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: { code: 4054, category: ts.DiagnosticCategory.Error, key: "Return type of public method from exported class has or is using name '{0}' from private module '{1}'." },
	        Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0: { code: 4055, category: ts.DiagnosticCategory.Error, key: "Return type of public method from exported class has or is using private name '{0}'." },
	        Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1: { code: 4056, category: ts.DiagnosticCategory.Error, key: "Return type of method from exported interface has or is using name '{0}' from private module '{1}'." },
	        Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0: { code: 4057, category: ts.DiagnosticCategory.Error, key: "Return type of method from exported interface has or is using private name '{0}'." },
	        Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4058, category: ts.DiagnosticCategory.Error, key: "Return type of exported function has or is using name '{0}' from external module {1} but cannot be named." },
	        Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1: { code: 4059, category: ts.DiagnosticCategory.Error, key: "Return type of exported function has or is using name '{0}' from private module '{1}'." },
	        Return_type_of_exported_function_has_or_is_using_private_name_0: { code: 4060, category: ts.DiagnosticCategory.Error, key: "Return type of exported function has or is using private name '{0}'." },
	        Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4061, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of constructor from exported class has or is using name '{1}' from external module {2} but cannot be named." },
	        Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4062, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of constructor from exported class has or is using name '{1}' from private module '{2}'." },
	        Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1: { code: 4063, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of constructor from exported class has or is using private name '{1}'." },
	        Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: { code: 4064, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of constructor signature from exported interface has or is using name '{1}' from private module '{2}'." },
	        Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: { code: 4065, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'." },
	        Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: { code: 4066, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of call signature from exported interface has or is using name '{1}' from private module '{2}'." },
	        Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: { code: 4067, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of call signature from exported interface has or is using private name '{1}'." },
	        Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4068, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of public static method from exported class has or is using name '{1}' from external module {2} but cannot be named." },
	        Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4069, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of public static method from exported class has or is using name '{1}' from private module '{2}'." },
	        Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: { code: 4070, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of public static method from exported class has or is using private name '{1}'." },
	        Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4071, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of public method from exported class has or is using name '{1}' from external module {2} but cannot be named." },
	        Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4072, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of public method from exported class has or is using name '{1}' from private module '{2}'." },
	        Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: { code: 4073, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of public method from exported class has or is using private name '{1}'." },
	        Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2: { code: 4074, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of method from exported interface has or is using name '{1}' from private module '{2}'." },
	        Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: { code: 4075, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of method from exported interface has or is using private name '{1}'." },
	        Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4076, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of exported function has or is using name '{1}' from external module {2} but cannot be named." },
	        Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2: { code: 4077, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of exported function has or is using name '{1}' from private module '{2}'." },
	        Parameter_0_of_exported_function_has_or_is_using_private_name_1: { code: 4078, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' of exported function has or is using private name '{1}'." },
	        Exported_type_alias_0_has_or_is_using_private_name_1: { code: 4081, category: ts.DiagnosticCategory.Error, key: "Exported type alias '{0}' has or is using private name '{1}'." },
	        Default_export_of_the_module_has_or_is_using_private_name_0: { code: 4082, category: ts.DiagnosticCategory.Error, key: "Default export of the module has or is using private name '{0}'." },
	        Loop_contains_block_scoped_variable_0_referenced_by_a_function_in_the_loop_This_is_only_supported_in_ECMAScript_6_or_higher: { code: 4091, category: ts.DiagnosticCategory.Error, key: "Loop contains block-scoped variable '{0}' referenced by a function in the loop. This is only supported in ECMAScript 6 or higher." },
	        The_current_host_does_not_support_the_0_option: { code: 5001, category: ts.DiagnosticCategory.Error, key: "The current host does not support the '{0}' option." },
	        Cannot_find_the_common_subdirectory_path_for_the_input_files: { code: 5009, category: ts.DiagnosticCategory.Error, key: "Cannot find the common subdirectory path for the input files." },
	        Cannot_read_file_0_Colon_1: { code: 5012, category: ts.DiagnosticCategory.Error, key: "Cannot read file '{0}': {1}" },
	        Unsupported_file_encoding: { code: 5013, category: ts.DiagnosticCategory.Error, key: "Unsupported file encoding." },
	        Failed_to_parse_file_0_Colon_1: { code: 5014, category: ts.DiagnosticCategory.Error, key: "Failed to parse file '{0}': {1}." },
	        Unknown_compiler_option_0: { code: 5023, category: ts.DiagnosticCategory.Error, key: "Unknown compiler option '{0}'." },
	        Compiler_option_0_requires_a_value_of_type_1: { code: 5024, category: ts.DiagnosticCategory.Error, key: "Compiler option '{0}' requires a value of type {1}." },
	        Could_not_write_file_0_Colon_1: { code: 5033, category: ts.DiagnosticCategory.Error, key: "Could not write file '{0}': {1}" },
	        Option_project_cannot_be_mixed_with_source_files_on_a_command_line: { code: 5042, category: ts.DiagnosticCategory.Error, key: "Option 'project' cannot be mixed with source files on a command line." },
	        Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES6_or_higher: { code: 5047, category: ts.DiagnosticCategory.Error, key: "Option 'isolatedModules' can only be used when either option'--module' is provided or option 'target' is 'ES6' or higher." },
	        Option_inlineSources_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided: { code: 5051, category: ts.DiagnosticCategory.Error, key: "Option 'inlineSources' can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided." },
	        Option_0_cannot_be_specified_without_specifying_option_1: { code: 5052, category: ts.DiagnosticCategory.Error, key: "Option '{0}' cannot be specified without specifying option '{1}'." },
	        Option_0_cannot_be_specified_with_option_1: { code: 5053, category: ts.DiagnosticCategory.Error, key: "Option '{0}' cannot be specified with option '{1}'." },
	        A_tsconfig_json_file_is_already_defined_at_Colon_0: { code: 5053, category: ts.DiagnosticCategory.Error, key: "A 'tsconfig.json' file is already defined at: '{0}'." },
	        Concatenate_and_emit_output_to_single_file: { code: 6001, category: ts.DiagnosticCategory.Message, key: "Concatenate and emit output to single file." },
	        Generates_corresponding_d_ts_file: { code: 6002, category: ts.DiagnosticCategory.Message, key: "Generates corresponding '.d.ts' file." },
	        Specifies_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations: { code: 6003, category: ts.DiagnosticCategory.Message, key: "Specifies the location where debugger should locate map files instead of generated locations." },
	        Specifies_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations: { code: 6004, category: ts.DiagnosticCategory.Message, key: "Specifies the location where debugger should locate TypeScript files instead of source locations." },
	        Watch_input_files: { code: 6005, category: ts.DiagnosticCategory.Message, key: "Watch input files." },
	        Redirect_output_structure_to_the_directory: { code: 6006, category: ts.DiagnosticCategory.Message, key: "Redirect output structure to the directory." },
	        Do_not_erase_const_enum_declarations_in_generated_code: { code: 6007, category: ts.DiagnosticCategory.Message, key: "Do not erase const enum declarations in generated code." },
	        Do_not_emit_outputs_if_any_errors_were_reported: { code: 6008, category: ts.DiagnosticCategory.Message, key: "Do not emit outputs if any errors were reported." },
	        Do_not_emit_comments_to_output: { code: 6009, category: ts.DiagnosticCategory.Message, key: "Do not emit comments to output." },
	        Do_not_emit_outputs: { code: 6010, category: ts.DiagnosticCategory.Message, key: "Do not emit outputs." },
	        Specify_ECMAScript_target_version_Colon_ES3_default_ES5_or_ES6_experimental: { code: 6015, category: ts.DiagnosticCategory.Message, key: "Specify ECMAScript target version: 'ES3' (default), 'ES5', or 'ES6' (experimental)" },
	        Specify_module_code_generation_Colon_commonjs_amd_system_or_umd: { code: 6016, category: ts.DiagnosticCategory.Message, key: "Specify module code generation: 'commonjs', 'amd', 'system' or 'umd'" },
	        Print_this_message: { code: 6017, category: ts.DiagnosticCategory.Message, key: "Print this message." },
	        Print_the_compiler_s_version: { code: 6019, category: ts.DiagnosticCategory.Message, key: "Print the compiler's version." },
	        Compile_the_project_in_the_given_directory: { code: 6020, category: ts.DiagnosticCategory.Message, key: "Compile the project in the given directory." },
	        Syntax_Colon_0: { code: 6023, category: ts.DiagnosticCategory.Message, key: "Syntax: {0}" },
	        options: { code: 6024, category: ts.DiagnosticCategory.Message, key: "options" },
	        file: { code: 6025, category: ts.DiagnosticCategory.Message, key: "file" },
	        Examples_Colon_0: { code: 6026, category: ts.DiagnosticCategory.Message, key: "Examples: {0}" },
	        Options_Colon: { code: 6027, category: ts.DiagnosticCategory.Message, key: "Options:" },
	        Version_0: { code: 6029, category: ts.DiagnosticCategory.Message, key: "Version {0}" },
	        Insert_command_line_options_and_files_from_a_file: { code: 6030, category: ts.DiagnosticCategory.Message, key: "Insert command line options and files from a file." },
	        File_change_detected_Starting_incremental_compilation: { code: 6032, category: ts.DiagnosticCategory.Message, key: "File change detected. Starting incremental compilation..." },
	        KIND: { code: 6034, category: ts.DiagnosticCategory.Message, key: "KIND" },
	        FILE: { code: 6035, category: ts.DiagnosticCategory.Message, key: "FILE" },
	        VERSION: { code: 6036, category: ts.DiagnosticCategory.Message, key: "VERSION" },
	        LOCATION: { code: 6037, category: ts.DiagnosticCategory.Message, key: "LOCATION" },
	        DIRECTORY: { code: 6038, category: ts.DiagnosticCategory.Message, key: "DIRECTORY" },
	        Compilation_complete_Watching_for_file_changes: { code: 6042, category: ts.DiagnosticCategory.Message, key: "Compilation complete. Watching for file changes." },
	        Generates_corresponding_map_file: { code: 6043, category: ts.DiagnosticCategory.Message, key: "Generates corresponding '.map' file." },
	        Compiler_option_0_expects_an_argument: { code: 6044, category: ts.DiagnosticCategory.Error, key: "Compiler option '{0}' expects an argument." },
	        Unterminated_quoted_string_in_response_file_0: { code: 6045, category: ts.DiagnosticCategory.Error, key: "Unterminated quoted string in response file '{0}'." },
	        Argument_for_module_option_must_be_commonjs_amd_system_or_umd: { code: 6046, category: ts.DiagnosticCategory.Error, key: "Argument for '--module' option must be 'commonjs', 'amd', 'system' or 'umd'." },
	        Argument_for_target_option_must_be_ES3_ES5_or_ES6: { code: 6047, category: ts.DiagnosticCategory.Error, key: "Argument for '--target' option must be 'ES3', 'ES5', or 'ES6'." },
	        Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1: { code: 6048, category: ts.DiagnosticCategory.Error, key: "Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'." },
	        Unsupported_locale_0: { code: 6049, category: ts.DiagnosticCategory.Error, key: "Unsupported locale '{0}'." },
	        Unable_to_open_file_0: { code: 6050, category: ts.DiagnosticCategory.Error, key: "Unable to open file '{0}'." },
	        Corrupted_locale_file_0: { code: 6051, category: ts.DiagnosticCategory.Error, key: "Corrupted locale file {0}." },
	        Raise_error_on_expressions_and_declarations_with_an_implied_any_type: { code: 6052, category: ts.DiagnosticCategory.Message, key: "Raise error on expressions and declarations with an implied 'any' type." },
	        File_0_not_found: { code: 6053, category: ts.DiagnosticCategory.Error, key: "File '{0}' not found." },
	        File_0_has_unsupported_extension_The_only_supported_extensions_are_1: { code: 6054, category: ts.DiagnosticCategory.Error, key: "File '{0}' has unsupported extension. The only supported extensions are {1}." },
	        Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures: { code: 6055, category: ts.DiagnosticCategory.Message, key: "Suppress noImplicitAny errors for indexing objects lacking index signatures." },
	        Do_not_emit_declarations_for_code_that_has_an_internal_annotation: { code: 6056, category: ts.DiagnosticCategory.Message, key: "Do not emit declarations for code that has an '@internal' annotation." },
	        Specifies_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDir: { code: 6058, category: ts.DiagnosticCategory.Message, key: "Specifies the root directory of input files. Use to control the output directory structure with --outDir." },
	        File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files: { code: 6059, category: ts.DiagnosticCategory.Error, key: "File '{0}' is not under 'rootDir' '{1}'. 'rootDir' is expected to contain all source files." },
	        Specifies_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix: { code: 6060, category: ts.DiagnosticCategory.Message, key: "Specifies the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix)." },
	        NEWLINE: { code: 6061, category: ts.DiagnosticCategory.Message, key: "NEWLINE" },
	        Argument_for_newLine_option_must_be_CRLF_or_LF: { code: 6062, category: ts.DiagnosticCategory.Error, key: "Argument for '--newLine' option must be 'CRLF' or 'LF'." },
	        Specify_JSX_code_generation_Colon_preserve_or_react: { code: 6080, category: ts.DiagnosticCategory.Message, key: "Specify JSX code generation: 'preserve' or 'react'" },
	        Argument_for_jsx_must_be_preserve_or_react: { code: 6081, category: ts.DiagnosticCategory.Message, key: "Argument for '--jsx' must be 'preserve' or 'react'." },
	        Enables_experimental_support_for_ES7_decorators: { code: 6065, category: ts.DiagnosticCategory.Message, key: "Enables experimental support for ES7 decorators." },
	        Enables_experimental_support_for_emitting_type_metadata_for_decorators: { code: 6066, category: ts.DiagnosticCategory.Message, key: "Enables experimental support for emitting type metadata for decorators." },
	        Option_experimentalAsyncFunctions_cannot_be_specified_when_targeting_ES5_or_lower: { code: 6067, category: ts.DiagnosticCategory.Message, key: "Option 'experimentalAsyncFunctions' cannot be specified when targeting ES5 or lower." },
	        Enables_experimental_support_for_ES7_async_functions: { code: 6068, category: ts.DiagnosticCategory.Message, key: "Enables experimental support for ES7 async functions." },
	        Specifies_module_resolution_strategy_Colon_node_Node_or_classic_TypeScript_pre_1_6: { code: 6069, category: ts.DiagnosticCategory.Message, key: "Specifies module resolution strategy: 'node' (Node) or 'classic' (TypeScript pre 1.6) ." },
	        Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file: { code: 6070, category: ts.DiagnosticCategory.Message, key: "Initializes a TypeScript project and creates a tsconfig.json file." },
	        Successfully_created_a_tsconfig_json_file: { code: 6071, category: ts.DiagnosticCategory.Message, key: "Successfully created a tsconfig.json file." },
	        Suppress_excess_property_checks_for_object_literals: { code: 6072, category: ts.DiagnosticCategory.Message, key: "Suppress excess property checks for object literals." },
	        Variable_0_implicitly_has_an_1_type: { code: 7005, category: ts.DiagnosticCategory.Error, key: "Variable '{0}' implicitly has an '{1}' type." },
	        Parameter_0_implicitly_has_an_1_type: { code: 7006, category: ts.DiagnosticCategory.Error, key: "Parameter '{0}' implicitly has an '{1}' type." },
	        Member_0_implicitly_has_an_1_type: { code: 7008, category: ts.DiagnosticCategory.Error, key: "Member '{0}' implicitly has an '{1}' type." },
	        new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type: { code: 7009, category: ts.DiagnosticCategory.Error, key: "'new' expression, whose target lacks a construct signature, implicitly has an 'any' type." },
	        _0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type: { code: 7010, category: ts.DiagnosticCategory.Error, key: "'{0}', which lacks return-type annotation, implicitly has an '{1}' return type." },
	        Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type: { code: 7011, category: ts.DiagnosticCategory.Error, key: "Function expression, which lacks return-type annotation, implicitly has an '{0}' return type." },
	        Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: { code: 7013, category: ts.DiagnosticCategory.Error, key: "Construct signature, which lacks return-type annotation, implicitly has an 'any' return type." },
	        Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_type_annotation: { code: 7016, category: ts.DiagnosticCategory.Error, key: "Property '{0}' implicitly has type 'any', because its 'set' accessor lacks a type annotation." },
	        Index_signature_of_object_type_implicitly_has_an_any_type: { code: 7017, category: ts.DiagnosticCategory.Error, key: "Index signature of object type implicitly has an 'any' type." },
	        Object_literal_s_property_0_implicitly_has_an_1_type: { code: 7018, category: ts.DiagnosticCategory.Error, key: "Object literal's property '{0}' implicitly has an '{1}' type." },
	        Rest_parameter_0_implicitly_has_an_any_type: { code: 7019, category: ts.DiagnosticCategory.Error, key: "Rest parameter '{0}' implicitly has an 'any[]' type." },
	        Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: { code: 7020, category: ts.DiagnosticCategory.Error, key: "Call signature, which lacks return-type annotation, implicitly has an 'any' return type." },
	        _0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer: { code: 7022, category: ts.DiagnosticCategory.Error, key: "'{0}' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer." },
	        _0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: { code: 7023, category: ts.DiagnosticCategory.Error, key: "'{0}' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions." },
	        Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: { code: 7024, category: ts.DiagnosticCategory.Error, key: "Function implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions." },
	        Generator_implicitly_has_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_type: { code: 7025, category: ts.DiagnosticCategory.Error, key: "Generator implicitly has type '{0}' because it does not yield any values. Consider supplying a return type." },
	        JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists: { code: 7026, category: ts.DiagnosticCategory.Error, key: "JSX element implicitly has type 'any' because no interface 'JSX.{0}' exists" },
	        You_cannot_rename_this_element: { code: 8000, category: ts.DiagnosticCategory.Error, key: "You cannot rename this element." },
	        You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library: { code: 8001, category: ts.DiagnosticCategory.Error, key: "You cannot rename elements that are defined in the standard TypeScript library." },
	        import_can_only_be_used_in_a_ts_file: { code: 8002, category: ts.DiagnosticCategory.Error, key: "'import ... =' can only be used in a .ts file." },
	        export_can_only_be_used_in_a_ts_file: { code: 8003, category: ts.DiagnosticCategory.Error, key: "'export=' can only be used in a .ts file." },
	        type_parameter_declarations_can_only_be_used_in_a_ts_file: { code: 8004, category: ts.DiagnosticCategory.Error, key: "'type parameter declarations' can only be used in a .ts file." },
	        implements_clauses_can_only_be_used_in_a_ts_file: { code: 8005, category: ts.DiagnosticCategory.Error, key: "'implements clauses' can only be used in a .ts file." },
	        interface_declarations_can_only_be_used_in_a_ts_file: { code: 8006, category: ts.DiagnosticCategory.Error, key: "'interface declarations' can only be used in a .ts file." },
	        module_declarations_can_only_be_used_in_a_ts_file: { code: 8007, category: ts.DiagnosticCategory.Error, key: "'module declarations' can only be used in a .ts file." },
	        type_aliases_can_only_be_used_in_a_ts_file: { code: 8008, category: ts.DiagnosticCategory.Error, key: "'type aliases' can only be used in a .ts file." },
	        _0_can_only_be_used_in_a_ts_file: { code: 8009, category: ts.DiagnosticCategory.Error, key: "'{0}' can only be used in a .ts file." },
	        types_can_only_be_used_in_a_ts_file: { code: 8010, category: ts.DiagnosticCategory.Error, key: "'types' can only be used in a .ts file." },
	        type_arguments_can_only_be_used_in_a_ts_file: { code: 8011, category: ts.DiagnosticCategory.Error, key: "'type arguments' can only be used in a .ts file." },
	        parameter_modifiers_can_only_be_used_in_a_ts_file: { code: 8012, category: ts.DiagnosticCategory.Error, key: "'parameter modifiers' can only be used in a .ts file." },
	        property_declarations_can_only_be_used_in_a_ts_file: { code: 8014, category: ts.DiagnosticCategory.Error, key: "'property declarations' can only be used in a .ts file." },
	        enum_declarations_can_only_be_used_in_a_ts_file: { code: 8015, category: ts.DiagnosticCategory.Error, key: "'enum declarations' can only be used in a .ts file." },
	        type_assertion_expressions_can_only_be_used_in_a_ts_file: { code: 8016, category: ts.DiagnosticCategory.Error, key: "'type assertion expressions' can only be used in a .ts file." },
	        decorators_can_only_be_used_in_a_ts_file: { code: 8017, category: ts.DiagnosticCategory.Error, key: "'decorators' can only be used in a .ts file." },
	        Only_identifiers_Slashqualified_names_with_optional_type_arguments_are_currently_supported_in_a_class_extends_clauses: { code: 9002, category: ts.DiagnosticCategory.Error, key: "Only identifiers/qualified-names with optional type arguments are currently supported in a class 'extends' clauses." },
	        class_expressions_are_not_currently_supported: { code: 9003, category: ts.DiagnosticCategory.Error, key: "'class' expressions are not currently supported." },
	        JSX_attributes_must_only_be_assigned_a_non_empty_expression: { code: 17000, category: ts.DiagnosticCategory.Error, key: "JSX attributes must only be assigned a non-empty 'expression'." },
	        JSX_elements_cannot_have_multiple_attributes_with_the_same_name: { code: 17001, category: ts.DiagnosticCategory.Error, key: "JSX elements cannot have multiple attributes with the same name." },
	        Expected_corresponding_JSX_closing_tag_for_0: { code: 17002, category: ts.DiagnosticCategory.Error, key: "Expected corresponding JSX closing tag for '{0}'." },
	        JSX_attribute_expected: { code: 17003, category: ts.DiagnosticCategory.Error, key: "JSX attribute expected." },
	        Cannot_use_JSX_unless_the_jsx_flag_is_provided: { code: 17004, category: ts.DiagnosticCategory.Error, key: "Cannot use JSX unless the '--jsx' flag is provided." },
	        A_constructor_cannot_contain_a_super_call_when_its_class_extends_null: { code: 17005, category: ts.DiagnosticCategory.Error, key: "A constructor cannot contain a 'super' call when its class extends 'null'" }
	    };
	})(ts || (ts = {}));
	/// <reference path="core.ts"/>
	/// <reference path="diagnosticInformationMap.generated.ts"/>
	var ts;
	(function (ts) {
	    var textToToken = {
	        "abstract": 113,
	        "any": 115,
	        "as": 114,
	        "boolean": 118,
	        "break": 68,
	        "case": 69,
	        "catch": 70,
	        "class": 71,
	        "continue": 73,
	        "const": 72,
	        "constructor": 119,
	        "debugger": 74,
	        "declare": 120,
	        "default": 75,
	        "delete": 76,
	        "do": 77,
	        "else": 78,
	        "enum": 79,
	        "export": 80,
	        "extends": 81,
	        "false": 82,
	        "finally": 83,
	        "for": 84,
	        "from": 131,
	        "function": 85,
	        "get": 121,
	        "if": 86,
	        "implements": 104,
	        "import": 87,
	        "in": 88,
	        "instanceof": 89,
	        "interface": 105,
	        "is": 122,
	        "let": 106,
	        "module": 123,
	        "namespace": 124,
	        "new": 90,
	        "null": 91,
	        "number": 126,
	        "package": 107,
	        "private": 108,
	        "protected": 109,
	        "public": 110,
	        "require": 125,
	        "return": 92,
	        "set": 127,
	        "static": 111,
	        "string": 128,
	        "super": 93,
	        "switch": 94,
	        "symbol": 129,
	        "this": 95,
	        "throw": 96,
	        "true": 97,
	        "try": 98,
	        "type": 130,
	        "typeof": 99,
	        "var": 100,
	        "void": 101,
	        "while": 102,
	        "with": 103,
	        "yield": 112,
	        "async": 116,
	        "await": 117,
	        "of": 132,
	        "{": 15,
	        "}": 16,
	        "(": 17,
	        ")": 18,
	        "[": 19,
	        "]": 20,
	        ".": 21,
	        "...": 22,
	        ";": 23,
	        ",": 24,
	        "<": 25,
	        ">": 27,
	        "<=": 28,
	        ">=": 29,
	        "==": 30,
	        "!=": 31,
	        "===": 32,
	        "!==": 33,
	        "=>": 34,
	        "+": 35,
	        "-": 36,
	        "*": 37,
	        "/": 38,
	        "%": 39,
	        "++": 40,
	        "--": 41,
	        "<<": 42,
	        "</": 26,
	        ">>": 43,
	        ">>>": 44,
	        "&": 45,
	        "|": 46,
	        "^": 47,
	        "!": 48,
	        "~": 49,
	        "&&": 50,
	        "||": 51,
	        "?": 52,
	        ":": 53,
	        "=": 55,
	        "+=": 56,
	        "-=": 57,
	        "*=": 58,
	        "/=": 59,
	        "%=": 60,
	        "<<=": 61,
	        ">>=": 62,
	        ">>>=": 63,
	        "&=": 64,
	        "|=": 65,
	        "^=": 66,
	        "@": 54
	    };
	    var unicodeES3IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
	    var unicodeES3IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 768, 846, 864, 866, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1155, 1158, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1621, 1632, 1641, 1648, 1747, 1749, 1756, 1759, 1768, 1770, 1773, 1776, 1788, 1808, 1836, 1840, 1866, 1920, 1968, 2305, 2307, 2309, 2361, 2364, 2381, 2384, 2388, 2392, 2403, 2406, 2415, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2562, 2562, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2649, 2652, 2654, 2654, 2662, 2676, 2689, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2784, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2876, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2913, 2918, 2927, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3805, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3946, 3953, 3972, 3974, 3979, 3984, 3991, 3993, 4028, 4038, 4038, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4146, 4150, 4153, 4160, 4169, 4176, 4185, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4969, 4977, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6099, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6313, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8319, 8319, 8400, 8412, 8417, 8417, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12346, 12353, 12436, 12441, 12442, 12445, 12446, 12449, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65056, 65059, 65075, 65076, 65101, 65103, 65136, 65138, 65140, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65381, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
	    var unicodeES5IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
	    var unicodeES5IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072, 43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
	    function lookupInUnicodeMap(code, map) {
	        if (code < map[0]) {
	            return false;
	        }
	        var lo = 0;
	        var hi = map.length;
	        var mid;
	        while (lo + 1 < hi) {
	            mid = lo + (hi - lo) / 2;
	            mid -= mid % 2;
	            if (map[mid] <= code && code <= map[mid + 1]) {
	                return true;
	            }
	            if (code < map[mid]) {
	                hi = mid;
	            }
	            else {
	                lo = mid + 2;
	            }
	        }
	        return false;
	    }
	    function isUnicodeIdentifierStart(code, languageVersion) {
	        return languageVersion >= 1 ?
	            lookupInUnicodeMap(code, unicodeES5IdentifierStart) :
	            lookupInUnicodeMap(code, unicodeES3IdentifierStart);
	    }
	    ts.isUnicodeIdentifierStart = isUnicodeIdentifierStart;
	    function isUnicodeIdentifierPart(code, languageVersion) {
	        return languageVersion >= 1 ?
	            lookupInUnicodeMap(code, unicodeES5IdentifierPart) :
	            lookupInUnicodeMap(code, unicodeES3IdentifierPart);
	    }
	    function makeReverseMap(source) {
	        var result = [];
	        for (var name_4 in source) {
	            if (source.hasOwnProperty(name_4)) {
	                result[source[name_4]] = name_4;
	            }
	        }
	        return result;
	    }
	    var tokenStrings = makeReverseMap(textToToken);
	    function tokenToString(t) {
	        return tokenStrings[t];
	    }
	    ts.tokenToString = tokenToString;
	    function stringToToken(s) {
	        return textToToken[s];
	    }
	    ts.stringToToken = stringToToken;
	    function computeLineStarts(text) {
	        var result = new Array();
	        var pos = 0;
	        var lineStart = 0;
	        while (pos < text.length) {
	            var ch = text.charCodeAt(pos++);
	            switch (ch) {
	                case 13:
	                    if (text.charCodeAt(pos) === 10) {
	                        pos++;
	                    }
	                case 10:
	                    result.push(lineStart);
	                    lineStart = pos;
	                    break;
	                default:
	                    if (ch > 127 && isLineBreak(ch)) {
	                        result.push(lineStart);
	                        lineStart = pos;
	                    }
	                    break;
	            }
	        }
	        result.push(lineStart);
	        return result;
	    }
	    ts.computeLineStarts = computeLineStarts;
	    function getPositionOfLineAndCharacter(sourceFile, line, character) {
	        return computePositionOfLineAndCharacter(getLineStarts(sourceFile), line, character);
	    }
	    ts.getPositionOfLineAndCharacter = getPositionOfLineAndCharacter;
	    function computePositionOfLineAndCharacter(lineStarts, line, character) {
	        ts.Debug.assert(line >= 0 && line < lineStarts.length);
	        return lineStarts[line] + character;
	    }
	    ts.computePositionOfLineAndCharacter = computePositionOfLineAndCharacter;
	    function getLineStarts(sourceFile) {
	        return sourceFile.lineMap || (sourceFile.lineMap = computeLineStarts(sourceFile.text));
	    }
	    ts.getLineStarts = getLineStarts;
	    function computeLineAndCharacterOfPosition(lineStarts, position) {
	        var lineNumber = ts.binarySearch(lineStarts, position);
	        if (lineNumber < 0) {
	            lineNumber = ~lineNumber - 1;
	            ts.Debug.assert(lineNumber !== -1, "position cannot precede the beginning of the file");
	        }
	        return {
	            line: lineNumber,
	            character: position - lineStarts[lineNumber]
	        };
	    }
	    ts.computeLineAndCharacterOfPosition = computeLineAndCharacterOfPosition;
	    function getLineAndCharacterOfPosition(sourceFile, position) {
	        return computeLineAndCharacterOfPosition(getLineStarts(sourceFile), position);
	    }
	    ts.getLineAndCharacterOfPosition = getLineAndCharacterOfPosition;
	    var hasOwnProperty = Object.prototype.hasOwnProperty;
	    function isWhiteSpace(ch) {
	        return ch === 32 ||
	            ch === 9 ||
	            ch === 11 ||
	            ch === 12 ||
	            ch === 160 ||
	            ch === 133 ||
	            ch === 5760 ||
	            ch >= 8192 && ch <= 8203 ||
	            ch === 8239 ||
	            ch === 8287 ||
	            ch === 12288 ||
	            ch === 65279;
	    }
	    ts.isWhiteSpace = isWhiteSpace;
	    function isLineBreak(ch) {
	        // ES5 7.3:
	        // The ECMAScript line terminator characters are listed in Table 3.
	        //     Table 3: Line Terminator Characters
	        //     Code Unit Value     Name                    Formal Name
	        //     \u000A              Line Feed               <LF>
	        //     \u000D              Carriage Return         <CR>
	        //     \u2028              Line separator          <LS>
	        //     \u2029              Paragraph separator     <PS>
	        // Only the characters in Table 3 are treated as line terminators. Other new line or line
	        // breaking characters are treated as white space but not as line terminators.
	        return ch === 10 ||
	            ch === 13 ||
	            ch === 8232 ||
	            ch === 8233;
	    }
	    ts.isLineBreak = isLineBreak;
	    function isDigit(ch) {
	        return ch >= 48 && ch <= 57;
	    }
	    function isOctalDigit(ch) {
	        return ch >= 48 && ch <= 55;
	    }
	    ts.isOctalDigit = isOctalDigit;
	    function couldStartTrivia(text, pos) {
	        var ch = text.charCodeAt(pos);
	        switch (ch) {
	            case 13:
	            case 10:
	            case 9:
	            case 11:
	            case 12:
	            case 32:
	            case 47:
	            case 60:
	            case 61:
	            case 62:
	                return true;
	            case 35:
	                return pos === 0;
	            default:
	                return ch > 127;
	        }
	    }
	    ts.couldStartTrivia = couldStartTrivia;
	    function skipTrivia(text, pos, stopAfterLineBreak) {
	        while (true) {
	            var ch = text.charCodeAt(pos);
	            switch (ch) {
	                case 13:
	                    if (text.charCodeAt(pos + 1) === 10) {
	                        pos++;
	                    }
	                case 10:
	                    pos++;
	                    if (stopAfterLineBreak) {
	                        return pos;
	                    }
	                    continue;
	                case 9:
	                case 11:
	                case 12:
	                case 32:
	                    pos++;
	                    continue;
	                case 47:
	                    if (text.charCodeAt(pos + 1) === 47) {
	                        pos += 2;
	                        while (pos < text.length) {
	                            if (isLineBreak(text.charCodeAt(pos))) {
	                                break;
	                            }
	                            pos++;
	                        }
	                        continue;
	                    }
	                    if (text.charCodeAt(pos + 1) === 42) {
	                        pos += 2;
	                        while (pos < text.length) {
	                            if (text.charCodeAt(pos) === 42 && text.charCodeAt(pos + 1) === 47) {
	                                pos += 2;
	                                break;
	                            }
	                            pos++;
	                        }
	                        continue;
	                    }
	                    break;
	                case 60:
	                case 61:
	                case 62:
	                    if (isConflictMarkerTrivia(text, pos)) {
	                        pos = scanConflictMarkerTrivia(text, pos);
	                        continue;
	                    }
	                    break;
	                case 35:
	                    if (pos === 0 && isShebangTrivia(text, pos)) {
	                        pos = scanShebangTrivia(text, pos);
	                        continue;
	                    }
	                    break;
	                default:
	                    if (ch > 127 && (isWhiteSpace(ch) || isLineBreak(ch))) {
	                        pos++;
	                        continue;
	                    }
	                    break;
	            }
	            return pos;
	        }
	    }
	    ts.skipTrivia = skipTrivia;
	    var mergeConflictMarkerLength = "<<<<<<<".length;
	    function isConflictMarkerTrivia(text, pos) {
	        ts.Debug.assert(pos >= 0);
	        if (pos === 0 || isLineBreak(text.charCodeAt(pos - 1))) {
	            var ch = text.charCodeAt(pos);
	            if ((pos + mergeConflictMarkerLength) < text.length) {
	                for (var i = 0, n = mergeConflictMarkerLength; i < n; i++) {
	                    if (text.charCodeAt(pos + i) !== ch) {
	                        return false;
	                    }
	                }
	                return ch === 61 ||
	                    text.charCodeAt(pos + mergeConflictMarkerLength) === 32;
	            }
	        }
	        return false;
	    }
	    function scanConflictMarkerTrivia(text, pos, error) {
	        if (error) {
	            error(ts.Diagnostics.Merge_conflict_marker_encountered, mergeConflictMarkerLength);
	        }
	        var ch = text.charCodeAt(pos);
	        var len = text.length;
	        if (ch === 60 || ch === 62) {
	            while (pos < len && !isLineBreak(text.charCodeAt(pos))) {
	                pos++;
	            }
	        }
	        else {
	            ts.Debug.assert(ch === 61);
	            while (pos < len) {
	                var ch_1 = text.charCodeAt(pos);
	                if (ch_1 === 62 && isConflictMarkerTrivia(text, pos)) {
	                    break;
	                }
	                pos++;
	            }
	        }
	        return pos;
	    }
	    var shebangTriviaRegex = /^#!.*/;
	    function isShebangTrivia(text, pos) {
	        ts.Debug.assert(pos === 0);
	        return shebangTriviaRegex.test(text);
	    }
	    function scanShebangTrivia(text, pos) {
	        var shebang = shebangTriviaRegex.exec(text)[0];
	        pos = pos + shebang.length;
	        return pos;
	    }
	    function getCommentRanges(text, pos, trailing) {
	        var result;
	        var collecting = trailing || pos === 0;
	        while (true) {
	            var ch = text.charCodeAt(pos);
	            switch (ch) {
	                case 13:
	                    if (text.charCodeAt(pos + 1) === 10) {
	                        pos++;
	                    }
	                case 10:
	                    pos++;
	                    if (trailing) {
	                        return result;
	                    }
	                    collecting = true;
	                    if (result && result.length) {
	                        ts.lastOrUndefined(result).hasTrailingNewLine = true;
	                    }
	                    continue;
	                case 9:
	                case 11:
	                case 12:
	                case 32:
	                    pos++;
	                    continue;
	                case 47:
	                    var nextChar = text.charCodeAt(pos + 1);
	                    var hasTrailingNewLine = false;
	                    if (nextChar === 47 || nextChar === 42) {
	                        var kind = nextChar === 47 ? 2 : 3;
	                        var startPos = pos;
	                        pos += 2;
	                        if (nextChar === 47) {
	                            while (pos < text.length) {
	                                if (isLineBreak(text.charCodeAt(pos))) {
	                                    hasTrailingNewLine = true;
	                                    break;
	                                }
	                                pos++;
	                            }
	                        }
	                        else {
	                            while (pos < text.length) {
	                                if (text.charCodeAt(pos) === 42 && text.charCodeAt(pos + 1) === 47) {
	                                    pos += 2;
	                                    break;
	                                }
	                                pos++;
	                            }
	                        }
	                        if (collecting) {
	                            if (!result) {
	                                result = [];
	                            }
	                            result.push({ pos: startPos, end: pos, hasTrailingNewLine: hasTrailingNewLine, kind: kind });
	                        }
	                        continue;
	                    }
	                    break;
	                default:
	                    if (ch > 127 && (isWhiteSpace(ch) || isLineBreak(ch))) {
	                        if (result && result.length && isLineBreak(ch)) {
	                            ts.lastOrUndefined(result).hasTrailingNewLine = true;
	                        }
	                        pos++;
	                        continue;
	                    }
	                    break;
	            }
	            return result;
	        }
	    }
	    function getLeadingCommentRanges(text, pos) {
	        return getCommentRanges(text, pos, false);
	    }
	    ts.getLeadingCommentRanges = getLeadingCommentRanges;
	    function getTrailingCommentRanges(text, pos) {
	        return getCommentRanges(text, pos, true);
	    }
	    ts.getTrailingCommentRanges = getTrailingCommentRanges;
	    function getShebang(text) {
	        return shebangTriviaRegex.test(text)
	            ? shebangTriviaRegex.exec(text)[0]
	            : undefined;
	    }
	    ts.getShebang = getShebang;
	    function isIdentifierStart(ch, languageVersion) {
	        return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 ||
	            ch === 36 || ch === 95 ||
	            ch > 127 && isUnicodeIdentifierStart(ch, languageVersion);
	    }
	    ts.isIdentifierStart = isIdentifierStart;
	    function isIdentifierPart(ch, languageVersion) {
	        return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 ||
	            ch >= 48 && ch <= 57 || ch === 36 || ch === 95 ||
	            ch > 127 && isUnicodeIdentifierPart(ch, languageVersion);
	    }
	    ts.isIdentifierPart = isIdentifierPart;
	    function createScanner(languageVersion, skipTrivia, languageVariant, text, onError, start, length) {
	        if (languageVariant === void 0) { languageVariant = 0; }
	        var pos;
	        var end;
	        var startPos;
	        var tokenPos;
	        var token;
	        var tokenValue;
	        var precedingLineBreak;
	        var hasExtendedUnicodeEscape;
	        var tokenIsUnterminated;
	        setText(text, start, length);
	        return {
	            getStartPos: function () { return startPos; },
	            getTextPos: function () { return pos; },
	            getToken: function () { return token; },
	            getTokenPos: function () { return tokenPos; },
	            getTokenText: function () { return text.substring(tokenPos, pos); },
	            getTokenValue: function () { return tokenValue; },
	            hasExtendedUnicodeEscape: function () { return hasExtendedUnicodeEscape; },
	            hasPrecedingLineBreak: function () { return precedingLineBreak; },
	            isIdentifier: function () { return token === 67 || token > 103; },
	            isReservedWord: function () { return token >= 68 && token <= 103; },
	            isUnterminated: function () { return tokenIsUnterminated; },
	            reScanGreaterToken: reScanGreaterToken,
	            reScanSlashToken: reScanSlashToken,
	            reScanTemplateToken: reScanTemplateToken,
	            scanJsxIdentifier: scanJsxIdentifier,
	            reScanJsxToken: reScanJsxToken,
	            scanJsxToken: scanJsxToken,
	            scan: scan,
	            setText: setText,
	            setScriptTarget: setScriptTarget,
	            setLanguageVariant: setLanguageVariant,
	            setOnError: setOnError,
	            setTextPos: setTextPos,
	            tryScan: tryScan,
	            lookAhead: lookAhead
	        };
	        function error(message, length) {
	            if (onError) {
	                onError(message, length || 0);
	            }
	        }
	        function isIdentifierStart(ch) {
	            return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 ||
	                ch === 36 || ch === 95 ||
	                ch > 127 && isUnicodeIdentifierStart(ch, languageVersion);
	        }
	        function isIdentifierPart(ch) {
	            return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 ||
	                ch >= 48 && ch <= 57 || ch === 36 || ch === 95 ||
	                ch > 127 && isUnicodeIdentifierPart(ch, languageVersion);
	        }
	        function scanNumber() {
	            var start = pos;
	            while (isDigit(text.charCodeAt(pos)))
	                pos++;
	            if (text.charCodeAt(pos) === 46) {
	                pos++;
	                while (isDigit(text.charCodeAt(pos)))
	                    pos++;
	            }
	            var end = pos;
	            if (text.charCodeAt(pos) === 69 || text.charCodeAt(pos) === 101) {
	                pos++;
	                if (text.charCodeAt(pos) === 43 || text.charCodeAt(pos) === 45)
	                    pos++;
	                if (isDigit(text.charCodeAt(pos))) {
	                    pos++;
	                    while (isDigit(text.charCodeAt(pos)))
	                        pos++;
	                    end = pos;
	                }
	                else {
	                    error(ts.Diagnostics.Digit_expected);
	                }
	            }
	            return +(text.substring(start, end));
	        }
	        function scanOctalDigits() {
	            var start = pos;
	            while (isOctalDigit(text.charCodeAt(pos))) {
	                pos++;
	            }
	            return +(text.substring(start, pos));
	        }
	        function scanExactNumberOfHexDigits(count) {
	            return scanHexDigits(count, false);
	        }
	        function scanMinimumNumberOfHexDigits(count) {
	            return scanHexDigits(count, true);
	        }
	        function scanHexDigits(minCount, scanAsManyAsPossible) {
	            var digits = 0;
	            var value = 0;
	            while (digits < minCount || scanAsManyAsPossible) {
	                var ch = text.charCodeAt(pos);
	                if (ch >= 48 && ch <= 57) {
	                    value = value * 16 + ch - 48;
	                }
	                else if (ch >= 65 && ch <= 70) {
	                    value = value * 16 + ch - 65 + 10;
	                }
	                else if (ch >= 97 && ch <= 102) {
	                    value = value * 16 + ch - 97 + 10;
	                }
	                else {
	                    break;
	                }
	                pos++;
	                digits++;
	            }
	            if (digits < minCount) {
	                value = -1;
	            }
	            return value;
	        }
	        function scanString() {
	            var quote = text.charCodeAt(pos++);
	            var result = "";
	            var start = pos;
	            while (true) {
	                if (pos >= end) {
	                    result += text.substring(start, pos);
	                    tokenIsUnterminated = true;
	                    error(ts.Diagnostics.Unterminated_string_literal);
	                    break;
	                }
	                var ch = text.charCodeAt(pos);
	                if (ch === quote) {
	                    result += text.substring(start, pos);
	                    pos++;
	                    break;
	                }
	                if (ch === 92) {
	                    result += text.substring(start, pos);
	                    result += scanEscapeSequence();
	                    start = pos;
	                    continue;
	                }
	                if (isLineBreak(ch)) {
	                    result += text.substring(start, pos);
	                    tokenIsUnterminated = true;
	                    error(ts.Diagnostics.Unterminated_string_literal);
	                    break;
	                }
	                pos++;
	            }
	            return result;
	        }
	        function scanTemplateAndSetTokenValue() {
	            var startedWithBacktick = text.charCodeAt(pos) === 96;
	            pos++;
	            var start = pos;
	            var contents = "";
	            var resultingToken;
	            while (true) {
	                if (pos >= end) {
	                    contents += text.substring(start, pos);
	                    tokenIsUnterminated = true;
	                    error(ts.Diagnostics.Unterminated_template_literal);
	                    resultingToken = startedWithBacktick ? 11 : 14;
	                    break;
	                }
	                var currChar = text.charCodeAt(pos);
	                if (currChar === 96) {
	                    contents += text.substring(start, pos);
	                    pos++;
	                    resultingToken = startedWithBacktick ? 11 : 14;
	                    break;
	                }
	                if (currChar === 36 && pos + 1 < end && text.charCodeAt(pos + 1) === 123) {
	                    contents += text.substring(start, pos);
	                    pos += 2;
	                    resultingToken = startedWithBacktick ? 12 : 13;
	                    break;
	                }
	                if (currChar === 92) {
	                    contents += text.substring(start, pos);
	                    contents += scanEscapeSequence();
	                    start = pos;
	                    continue;
	                }
	                if (currChar === 13) {
	                    contents += text.substring(start, pos);
	                    pos++;
	                    if (pos < end && text.charCodeAt(pos) === 10) {
	                        pos++;
	                    }
	                    contents += "\n";
	                    start = pos;
	                    continue;
	                }
	                pos++;
	            }
	            ts.Debug.assert(resultingToken !== undefined);
	            tokenValue = contents;
	            return resultingToken;
	        }
	        function scanEscapeSequence() {
	            pos++;
	            if (pos >= end) {
	                error(ts.Diagnostics.Unexpected_end_of_text);
	                return "";
	            }
	            var ch = text.charCodeAt(pos++);
	            switch (ch) {
	                case 48:
	                    return "\0";
	                case 98:
	                    return "\b";
	                case 116:
	                    return "\t";
	                case 110:
	                    return "\n";
	                case 118:
	                    return "\v";
	                case 102:
	                    return "\f";
	                case 114:
	                    return "\r";
	                case 39:
	                    return "\'";
	                case 34:
	                    return "\"";
	                case 117:
	                    if (pos < end && text.charCodeAt(pos) === 123) {
	                        hasExtendedUnicodeEscape = true;
	                        pos++;
	                        return scanExtendedUnicodeEscape();
	                    }
	                    return scanHexadecimalEscape(4);
	                case 120:
	                    return scanHexadecimalEscape(2);
	                case 13:
	                    if (pos < end && text.charCodeAt(pos) === 10) {
	                        pos++;
	                    }
	                case 10:
	                case 8232:
	                case 8233:
	                    return "";
	                default:
	                    return String.fromCharCode(ch);
	            }
	        }
	        function scanHexadecimalEscape(numDigits) {
	            var escapedValue = scanExactNumberOfHexDigits(numDigits);
	            if (escapedValue >= 0) {
	                return String.fromCharCode(escapedValue);
	            }
	            else {
	                error(ts.Diagnostics.Hexadecimal_digit_expected);
	                return "";
	            }
	        }
	        function scanExtendedUnicodeEscape() {
	            var escapedValue = scanMinimumNumberOfHexDigits(1);
	            var isInvalidExtendedEscape = false;
	            if (escapedValue < 0) {
	                error(ts.Diagnostics.Hexadecimal_digit_expected);
	                isInvalidExtendedEscape = true;
	            }
	            else if (escapedValue > 0x10FFFF) {
	                error(ts.Diagnostics.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive);
	                isInvalidExtendedEscape = true;
	            }
	            if (pos >= end) {
	                error(ts.Diagnostics.Unexpected_end_of_text);
	                isInvalidExtendedEscape = true;
	            }
	            else if (text.charCodeAt(pos) === 125) {
	                pos++;
	            }
	            else {
	                error(ts.Diagnostics.Unterminated_Unicode_escape_sequence);
	                isInvalidExtendedEscape = true;
	            }
	            if (isInvalidExtendedEscape) {
	                return "";
	            }
	            return utf16EncodeAsString(escapedValue);
	        }
	        function utf16EncodeAsString(codePoint) {
	            ts.Debug.assert(0x0 <= codePoint && codePoint <= 0x10FFFF);
	            if (codePoint <= 65535) {
	                return String.fromCharCode(codePoint);
	            }
	            var codeUnit1 = Math.floor((codePoint - 65536) / 1024) + 0xD800;
	            var codeUnit2 = ((codePoint - 65536) % 1024) + 0xDC00;
	            return String.fromCharCode(codeUnit1, codeUnit2);
	        }
	        function peekUnicodeEscape() {
	            if (pos + 5 < end && text.charCodeAt(pos + 1) === 117) {
	                var start_1 = pos;
	                pos += 2;
	                var value = scanExactNumberOfHexDigits(4);
	                pos = start_1;
	                return value;
	            }
	            return -1;
	        }
	        function scanIdentifierParts() {
	            var result = "";
	            var start = pos;
	            while (pos < end) {
	                var ch = text.charCodeAt(pos);
	                if (isIdentifierPart(ch)) {
	                    pos++;
	                }
	                else if (ch === 92) {
	                    ch = peekUnicodeEscape();
	                    if (!(ch >= 0 && isIdentifierPart(ch))) {
	                        break;
	                    }
	                    result += text.substring(start, pos);
	                    result += String.fromCharCode(ch);
	                    pos += 6;
	                    start = pos;
	                }
	                else {
	                    break;
	                }
	            }
	            result += text.substring(start, pos);
	            return result;
	        }
	        function getIdentifierToken() {
	            var len = tokenValue.length;
	            if (len >= 2 && len <= 11) {
	                var ch = tokenValue.charCodeAt(0);
	                if (ch >= 97 && ch <= 122 && hasOwnProperty.call(textToToken, tokenValue)) {
	                    return token = textToToken[tokenValue];
	                }
	            }
	            return token = 67;
	        }
	        function scanBinaryOrOctalDigits(base) {
	            ts.Debug.assert(base !== 2 || base !== 8, "Expected either base 2 or base 8");
	            var value = 0;
	            var numberOfDigits = 0;
	            while (true) {
	                var ch = text.charCodeAt(pos);
	                var valueOfCh = ch - 48;
	                if (!isDigit(ch) || valueOfCh >= base) {
	                    break;
	                }
	                value = value * base + valueOfCh;
	                pos++;
	                numberOfDigits++;
	            }
	            if (numberOfDigits === 0) {
	                return -1;
	            }
	            return value;
	        }
	        function scan() {
	            startPos = pos;
	            hasExtendedUnicodeEscape = false;
	            precedingLineBreak = false;
	            tokenIsUnterminated = false;
	            while (true) {
	                tokenPos = pos;
	                if (pos >= end) {
	                    return token = 1;
	                }
	                var ch = text.charCodeAt(pos);
	                if (ch === 35 && pos === 0 && isShebangTrivia(text, pos)) {
	                    pos = scanShebangTrivia(text, pos);
	                    if (skipTrivia) {
	                        continue;
	                    }
	                    else {
	                        return token = 6;
	                    }
	                }
	                switch (ch) {
	                    case 10:
	                    case 13:
	                        precedingLineBreak = true;
	                        if (skipTrivia) {
	                            pos++;
	                            continue;
	                        }
	                        else {
	                            if (ch === 13 && pos + 1 < end && text.charCodeAt(pos + 1) === 10) {
	                                pos += 2;
	                            }
	                            else {
	                                pos++;
	                            }
	                            return token = 4;
	                        }
	                    case 9:
	                    case 11:
	                    case 12:
	                    case 32:
	                        if (skipTrivia) {
	                            pos++;
	                            continue;
	                        }
	                        else {
	                            while (pos < end && isWhiteSpace(text.charCodeAt(pos))) {
	                                pos++;
	                            }
	                            return token = 5;
	                        }
	                    case 33:
	                        if (text.charCodeAt(pos + 1) === 61) {
	                            if (text.charCodeAt(pos + 2) === 61) {
	                                return pos += 3, token = 33;
	                            }
	                            return pos += 2, token = 31;
	                        }
	                        return pos++, token = 48;
	                    case 34:
	                    case 39:
	                        tokenValue = scanString();
	                        return token = 9;
	                    case 96:
	                        return token = scanTemplateAndSetTokenValue();
	                    case 37:
	                        if (text.charCodeAt(pos + 1) === 61) {
	                            return pos += 2, token = 60;
	                        }
	                        return pos++, token = 39;
	                    case 38:
	                        if (text.charCodeAt(pos + 1) === 38) {
	                            return pos += 2, token = 50;
	                        }
	                        if (text.charCodeAt(pos + 1) === 61) {
	                            return pos += 2, token = 64;
	                        }
	                        return pos++, token = 45;
	                    case 40:
	                        return pos++, token = 17;
	                    case 41:
	                        return pos++, token = 18;
	                    case 42:
	                        if (text.charCodeAt(pos + 1) === 61) {
	                            return pos += 2, token = 58;
	                        }
	                        return pos++, token = 37;
	                    case 43:
	                        if (text.charCodeAt(pos + 1) === 43) {
	                            return pos += 2, token = 40;
	                        }
	                        if (text.charCodeAt(pos + 1) === 61) {
	                            return pos += 2, token = 56;
	                        }
	                        return pos++, token = 35;
	                    case 44:
	                        return pos++, token = 24;
	                    case 45:
	                        if (text.charCodeAt(pos + 1) === 45) {
	                            return pos += 2, token = 41;
	                        }
	                        if (text.charCodeAt(pos + 1) === 61) {
	                            return pos += 2, token = 57;
	                        }
	                        return pos++, token = 36;
	                    case 46:
	                        if (isDigit(text.charCodeAt(pos + 1))) {
	                            tokenValue = "" + scanNumber();
	                            return token = 8;
	                        }
	                        if (text.charCodeAt(pos + 1) === 46 && text.charCodeAt(pos + 2) === 46) {
	                            return pos += 3, token = 22;
	                        }
	                        return pos++, token = 21;
	                    case 47:
	                        if (text.charCodeAt(pos + 1) === 47) {
	                            pos += 2;
	                            while (pos < end) {
	                                if (isLineBreak(text.charCodeAt(pos))) {
	                                    break;
	                                }
	                                pos++;
	                            }
	                            if (skipTrivia) {
	                                continue;
	                            }
	                            else {
	                                return token = 2;
	                            }
	                        }
	                        if (text.charCodeAt(pos + 1) === 42) {
	                            pos += 2;
	                            var commentClosed = false;
	                            while (pos < end) {
	                                var ch_2 = text.charCodeAt(pos);
	                                if (ch_2 === 42 && text.charCodeAt(pos + 1) === 47) {
	                                    pos += 2;
	                                    commentClosed = true;
	                                    break;
	                                }
	                                if (isLineBreak(ch_2)) {
	                                    precedingLineBreak = true;
	                                }
	                                pos++;
	                            }
	                            if (!commentClosed) {
	                                error(ts.Diagnostics.Asterisk_Slash_expected);
	                            }
	                            if (skipTrivia) {
	                                continue;
	                            }
	                            else {
	                                tokenIsUnterminated = !commentClosed;
	                                return token = 3;
	                            }
	                        }
	                        if (text.charCodeAt(pos + 1) === 61) {
	                            return pos += 2, token = 59;
	                        }
	                        return pos++, token = 38;
	                    case 48:
	                        if (pos + 2 < end && (text.charCodeAt(pos + 1) === 88 || text.charCodeAt(pos + 1) === 120)) {
	                            pos += 2;
	                            var value = scanMinimumNumberOfHexDigits(1);
	                            if (value < 0) {
	                                error(ts.Diagnostics.Hexadecimal_digit_expected);
	                                value = 0;
	                            }
	                            tokenValue = "" + value;
	                            return token = 8;
	                        }
	                        else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 66 || text.charCodeAt(pos + 1) === 98)) {
	                            pos += 2;
	                            var value = scanBinaryOrOctalDigits(2);
	                            if (value < 0) {
	                                error(ts.Diagnostics.Binary_digit_expected);
	                                value = 0;
	                            }
	                            tokenValue = "" + value;
	                            return token = 8;
	                        }
	                        else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 79 || text.charCodeAt(pos + 1) === 111)) {
	                            pos += 2;
	                            var value = scanBinaryOrOctalDigits(8);
	                            if (value < 0) {
	                                error(ts.Diagnostics.Octal_digit_expected);
	                                value = 0;
	                            }
	                            tokenValue = "" + value;
	                            return token = 8;
	                        }
	                        if (pos + 1 < end && isOctalDigit(text.charCodeAt(pos + 1))) {
	                            tokenValue = "" + scanOctalDigits();
	                            return token = 8;
	                        }
	                    case 49:
	                    case 50:
	                    case 51:
	                    case 52:
	                    case 53:
	                    case 54:
	                    case 55:
	                    case 56:
	                    case 57:
	                        tokenValue = "" + scanNumber();
	                        return token = 8;
	                    case 58:
	                        return pos++, token = 53;
	                    case 59:
	                        return pos++, token = 23;
	                    case 60:
	                        if (isConflictMarkerTrivia(text, pos)) {
	                            pos = scanConflictMarkerTrivia(text, pos, error);
	                            if (skipTrivia) {
	                                continue;
	                            }
	                            else {
	                                return token = 7;
	                            }
	                        }
	                        if (text.charCodeAt(pos + 1) === 60) {
	                            if (text.charCodeAt(pos + 2) === 61) {
	                                return pos += 3, token = 61;
	                            }
	                            return pos += 2, token = 42;
	                        }
	                        if (text.charCodeAt(pos + 1) === 61) {
	                            return pos += 2, token = 28;
	                        }
	                        if (text.charCodeAt(pos + 1) === 47 && languageVariant === 1) {
	                            return pos += 2, token = 26;
	                        }
	                        return pos++, token = 25;
	                    case 61:
	                        if (isConflictMarkerTrivia(text, pos)) {
	                            pos = scanConflictMarkerTrivia(text, pos, error);
	                            if (skipTrivia) {
	                                continue;
	                            }
	                            else {
	                                return token = 7;
	                            }
	                        }
	                        if (text.charCodeAt(pos + 1) === 61) {
	                            if (text.charCodeAt(pos + 2) === 61) {
	                                return pos += 3, token = 32;
	                            }
	                            return pos += 2, token = 30;
	                        }
	                        if (text.charCodeAt(pos + 1) === 62) {
	                            return pos += 2, token = 34;
	                        }
	                        return pos++, token = 55;
	                    case 62:
	                        if (isConflictMarkerTrivia(text, pos)) {
	                            pos = scanConflictMarkerTrivia(text, pos, error);
	                            if (skipTrivia) {
	                                continue;
	                            }
	                            else {
	                                return token = 7;
	                            }
	                        }
	                        return pos++, token = 27;
	                    case 63:
	                        return pos++, token = 52;
	                    case 91:
	                        return pos++, token = 19;
	                    case 93:
	                        return pos++, token = 20;
	                    case 94:
	                        if (text.charCodeAt(pos + 1) === 61) {
	                            return pos += 2, token = 66;
	                        }
	                        return pos++, token = 47;
	                    case 123:
	                        return pos++, token = 15;
	                    case 124:
	                        if (text.charCodeAt(pos + 1) === 124) {
	                            return pos += 2, token = 51;
	                        }
	                        if (text.charCodeAt(pos + 1) === 61) {
	                            return pos += 2, token = 65;
	                        }
	                        return pos++, token = 46;
	                    case 125:
	                        return pos++, token = 16;
	                    case 126:
	                        return pos++, token = 49;
	                    case 64:
	                        return pos++, token = 54;
	                    case 92:
	                        var cookedChar = peekUnicodeEscape();
	                        if (cookedChar >= 0 && isIdentifierStart(cookedChar)) {
	                            pos += 6;
	                            tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();
	                            return token = getIdentifierToken();
	                        }
	                        error(ts.Diagnostics.Invalid_character);
	                        return pos++, token = 0;
	                    default:
	                        if (isIdentifierStart(ch)) {
	                            pos++;
	                            while (pos < end && isIdentifierPart(ch = text.charCodeAt(pos)))
	                                pos++;
	                            tokenValue = text.substring(tokenPos, pos);
	                            if (ch === 92) {
	                                tokenValue += scanIdentifierParts();
	                            }
	                            return token = getIdentifierToken();
	                        }
	                        else if (isWhiteSpace(ch)) {
	                            pos++;
	                            continue;
	                        }
	                        else if (isLineBreak(ch)) {
	                            precedingLineBreak = true;
	                            pos++;
	                            continue;
	                        }
	                        error(ts.Diagnostics.Invalid_character);
	                        return pos++, token = 0;
	                }
	            }
	        }
	        function reScanGreaterToken() {
	            if (token === 27) {
	                if (text.charCodeAt(pos) === 62) {
	                    if (text.charCodeAt(pos + 1) === 62) {
	                        if (text.charCodeAt(pos + 2) === 61) {
	                            return pos += 3, token = 63;
	                        }
	                        return pos += 2, token = 44;
	                    }
	                    if (text.charCodeAt(pos + 1) === 61) {
	                        return pos += 2, token = 62;
	                    }
	                    return pos++, token = 43;
	                }
	                if (text.charCodeAt(pos) === 61) {
	                    return pos++, token = 29;
	                }
	            }
	            return token;
	        }
	        function reScanSlashToken() {
	            if (token === 38 || token === 59) {
	                var p = tokenPos + 1;
	                var inEscape = false;
	                var inCharacterClass = false;
	                while (true) {
	                    if (p >= end) {
	                        tokenIsUnterminated = true;
	                        error(ts.Diagnostics.Unterminated_regular_expression_literal);
	                        break;
	                    }
	                    var ch = text.charCodeAt(p);
	                    if (isLineBreak(ch)) {
	                        tokenIsUnterminated = true;
	                        error(ts.Diagnostics.Unterminated_regular_expression_literal);
	                        break;
	                    }
	                    if (inEscape) {
	                        inEscape = false;
	                    }
	                    else if (ch === 47 && !inCharacterClass) {
	                        p++;
	                        break;
	                    }
	                    else if (ch === 91) {
	                        inCharacterClass = true;
	                    }
	                    else if (ch === 92) {
	                        inEscape = true;
	                    }
	                    else if (ch === 93) {
	                        inCharacterClass = false;
	                    }
	                    p++;
	                }
	                while (p < end && isIdentifierPart(text.charCodeAt(p))) {
	                    p++;
	                }
	                pos = p;
	                tokenValue = text.substring(tokenPos, pos);
	                token = 10;
	            }
	            return token;
	        }
	        function reScanTemplateToken() {
	            ts.Debug.assert(token === 16, "'reScanTemplateToken' should only be called on a '}'");
	            pos = tokenPos;
	            return token = scanTemplateAndSetTokenValue();
	        }
	        function reScanJsxToken() {
	            pos = tokenPos = startPos;
	            return token = scanJsxToken();
	        }
	        function scanJsxToken() {
	            startPos = tokenPos = pos;
	            if (pos >= end) {
	                return token = 1;
	            }
	            var char = text.charCodeAt(pos);
	            if (char === 60) {
	                if (text.charCodeAt(pos + 1) === 47) {
	                    pos += 2;
	                    return token = 26;
	                }
	                pos++;
	                return token = 25;
	            }
	            if (char === 123) {
	                pos++;
	                return token = 15;
	            }
	            while (pos < end) {
	                pos++;
	                char = text.charCodeAt(pos);
	                if ((char === 123) || (char === 60)) {
	                    break;
	                }
	            }
	            return token = 234;
	        }
	        function scanJsxIdentifier() {
	            if (token === 67) {
	                var firstCharPosition = pos;
	                while (pos < end) {
	                    var ch = text.charCodeAt(pos);
	                    if (ch === 45 || ((firstCharPosition === pos) ? isIdentifierStart(ch) : isIdentifierPart(ch))) {
	                        pos++;
	                    }
	                    else {
	                        break;
	                    }
	                }
	                tokenValue += text.substr(firstCharPosition, pos - firstCharPosition);
	            }
	            return token;
	        }
	        function speculationHelper(callback, isLookahead) {
	            var savePos = pos;
	            var saveStartPos = startPos;
	            var saveTokenPos = tokenPos;
	            var saveToken = token;
	            var saveTokenValue = tokenValue;
	            var savePrecedingLineBreak = precedingLineBreak;
	            var result = callback();
	            if (!result || isLookahead) {
	                pos = savePos;
	                startPos = saveStartPos;
	                tokenPos = saveTokenPos;
	                token = saveToken;
	                tokenValue = saveTokenValue;
	                precedingLineBreak = savePrecedingLineBreak;
	            }
	            return result;
	        }
	        function lookAhead(callback) {
	            return speculationHelper(callback, true);
	        }
	        function tryScan(callback) {
	            return speculationHelper(callback, false);
	        }
	        function setText(newText, start, length) {
	            text = newText || "";
	            end = length === undefined ? text.length : start + length;
	            setTextPos(start || 0);
	        }
	        function setOnError(errorCallback) {
	            onError = errorCallback;
	        }
	        function setScriptTarget(scriptTarget) {
	            languageVersion = scriptTarget;
	        }
	        function setLanguageVariant(variant) {
	            languageVariant = variant;
	        }
	        function setTextPos(textPos) {
	            ts.Debug.assert(textPos >= 0);
	            pos = textPos;
	            startPos = textPos;
	            tokenPos = textPos;
	            token = 0;
	            precedingLineBreak = false;
	            tokenValue = undefined;
	            hasExtendedUnicodeEscape = false;
	            tokenIsUnterminated = false;
	        }
	    }
	    ts.createScanner = createScanner;
	})(ts || (ts = {}));
	/// <reference path="parser.ts"/>
	var ts;
	(function (ts) {
	    ts.bindTime = 0;
	    function getModuleInstanceState(node) {
	        if (node.kind === 213 || node.kind === 214) {
	            return 0;
	        }
	        else if (ts.isConstEnumDeclaration(node)) {
	            return 2;
	        }
	        else if ((node.kind === 220 || node.kind === 219) && !(node.flags & 1)) {
	            return 0;
	        }
	        else if (node.kind === 217) {
	            var state = 0;
	            ts.forEachChild(node, function (n) {
	                switch (getModuleInstanceState(n)) {
	                    case 0:
	                        return false;
	                    case 2:
	                        state = 2;
	                        return false;
	                    case 1:
	                        state = 1;
	                        return true;
	                }
	            });
	            return state;
	        }
	        else if (node.kind === 216) {
	            return getModuleInstanceState(node.body);
	        }
	        else {
	            return 1;
	        }
	    }
	    ts.getModuleInstanceState = getModuleInstanceState;
	    function bindSourceFile(file) {
	        var start = new Date().getTime();
	        bindSourceFileWorker(file);
	        ts.bindTime += new Date().getTime() - start;
	    }
	    ts.bindSourceFile = bindSourceFile;
	    function bindSourceFileWorker(file) {
	        var parent;
	        var container;
	        var blockScopeContainer;
	        var lastContainer;
	        var inStrictMode = !!file.externalModuleIndicator;
	        var symbolCount = 0;
	        var Symbol = ts.objectAllocator.getSymbolConstructor();
	        var classifiableNames = {};
	        if (!file.locals) {
	            bind(file);
	            file.symbolCount = symbolCount;
	            file.classifiableNames = classifiableNames;
	        }
	        return;
	        function createSymbol(flags, name) {
	            symbolCount++;
	            return new Symbol(flags, name);
	        }
	        function addDeclarationToSymbol(symbol, node, symbolFlags) {
	            symbol.flags |= symbolFlags;
	            node.symbol = symbol;
	            if (!symbol.declarations) {
	                symbol.declarations = [];
	            }
	            symbol.declarations.push(node);
	            if (symbolFlags & 1952 && !symbol.exports) {
	                symbol.exports = {};
	            }
	            if (symbolFlags & 6240 && !symbol.members) {
	                symbol.members = {};
	            }
	            if (symbolFlags & 107455 && !symbol.valueDeclaration) {
	                symbol.valueDeclaration = node;
	            }
	        }
	        function getDeclarationName(node) {
	            if (node.name) {
	                if (node.kind === 216 && node.name.kind === 9) {
	                    return "\"" + node.name.text + "\"";
	                }
	                if (node.name.kind === 134) {
	                    var nameExpression = node.name.expression;
	                    ts.Debug.assert(ts.isWellKnownSymbolSyntactically(nameExpression));
	                    return ts.getPropertyNameForKnownSymbolName(nameExpression.name.text);
	                }
	                return node.name.text;
	            }
	            switch (node.kind) {
	                case 142:
	                    return "__constructor";
	                case 150:
	                case 145:
	                    return "__call";
	                case 151:
	                case 146:
	                    return "__new";
	                case 147:
	                    return "__index";
	                case 226:
	                    return "__export";
	                case 225:
	                    return node.isExportEquals ? "export=" : "default";
	                case 211:
	                case 212:
	                    return node.flags & 1024 ? "default" : undefined;
	            }
	        }
	        function getDisplayName(node) {
	            return node.name ? ts.declarationNameToString(node.name) : getDeclarationName(node);
	        }
	        function declareSymbol(symbolTable, parent, node, includes, excludes) {
	            ts.Debug.assert(!ts.hasDynamicName(node));
	            var name = node.flags & 1024 && parent ? "default" : getDeclarationName(node);
	            var symbol;
	            if (name !== undefined) {
	                symbol = ts.hasProperty(symbolTable, name)
	                    ? symbolTable[name]
	                    : (symbolTable[name] = createSymbol(0, name));
	                if (name && (includes & 788448)) {
	                    classifiableNames[name] = name;
	                }
	                if (symbol.flags & excludes) {
	                    if (node.name) {
	                        node.name.parent = node;
	                    }
	                    var message = symbol.flags & 2
	                        ? ts.Diagnostics.Cannot_redeclare_block_scoped_variable_0
	                        : ts.Diagnostics.Duplicate_identifier_0;
	                    ts.forEach(symbol.declarations, function (declaration) {
	                        file.bindDiagnostics.push(ts.createDiagnosticForNode(declaration.name || declaration, message, getDisplayName(declaration)));
	                    });
	                    file.bindDiagnostics.push(ts.createDiagnosticForNode(node.name || node, message, getDisplayName(node)));
	                    symbol = createSymbol(0, name);
	                }
	            }
	            else {
	                symbol = createSymbol(0, "__missing");
	            }
	            addDeclarationToSymbol(symbol, node, includes);
	            symbol.parent = parent;
	            return symbol;
	        }
	        function declareModuleMember(node, symbolFlags, symbolExcludes) {
	            var hasExportModifier = ts.getCombinedNodeFlags(node) & 1;
	            if (symbolFlags & 8388608) {
	                if (node.kind === 228 || (node.kind === 219 && hasExportModifier)) {
	                    return declareSymbol(container.symbol.exports, container.symbol, node, symbolFlags, symbolExcludes);
	                }
	                else {
	                    return declareSymbol(container.locals, undefined, node, symbolFlags, symbolExcludes);
	                }
	            }
	            else {
	                if (hasExportModifier || container.flags & 262144) {
	                    var exportKind = (symbolFlags & 107455 ? 1048576 : 0) |
	                        (symbolFlags & 793056 ? 2097152 : 0) |
	                        (symbolFlags & 1536 ? 4194304 : 0);
	                    var local = declareSymbol(container.locals, undefined, node, exportKind, symbolExcludes);
	                    local.exportSymbol = declareSymbol(container.symbol.exports, container.symbol, node, symbolFlags, symbolExcludes);
	                    node.localSymbol = local;
	                    return local;
	                }
	                else {
	                    return declareSymbol(container.locals, undefined, node, symbolFlags, symbolExcludes);
	                }
	            }
	        }
	        function bindChildren(node) {
	            var saveParent = parent;
	            var saveContainer = container;
	            var savedBlockScopeContainer = blockScopeContainer;
	            parent = node;
	            var containerFlags = getContainerFlags(node);
	            if (containerFlags & 1) {
	                container = blockScopeContainer = node;
	                if (containerFlags & 4) {
	                    container.locals = {};
	                }
	                addToContainerChain(container);
	            }
	            else if (containerFlags & 2) {
	                blockScopeContainer = node;
	                blockScopeContainer.locals = undefined;
	            }
	            ts.forEachChild(node, bind);
	            container = saveContainer;
	            parent = saveParent;
	            blockScopeContainer = savedBlockScopeContainer;
	        }
	        function getContainerFlags(node) {
	            switch (node.kind) {
	                case 184:
	                case 212:
	                case 213:
	                case 215:
	                case 153:
	                case 163:
	                    return 1;
	                case 145:
	                case 146:
	                case 147:
	                case 141:
	                case 140:
	                case 211:
	                case 142:
	                case 143:
	                case 144:
	                case 150:
	                case 151:
	                case 171:
	                case 172:
	                case 216:
	                case 246:
	                case 214:
	                    return 5;
	                case 242:
	                case 197:
	                case 198:
	                case 199:
	                case 218:
	                    return 2;
	                case 190:
	                    return ts.isFunctionLike(node.parent) ? 0 : 2;
	            }
	            return 0;
	        }
	        function addToContainerChain(next) {
	            if (lastContainer) {
	                lastContainer.nextContainer = next;
	            }
	            lastContainer = next;
	        }
	        function declareSymbolAndAddToSymbolTable(node, symbolFlags, symbolExcludes) {
	            declareSymbolAndAddToSymbolTableWorker(node, symbolFlags, symbolExcludes);
	        }
	        function declareSymbolAndAddToSymbolTableWorker(node, symbolFlags, symbolExcludes) {
	            switch (container.kind) {
	                case 216:
	                    return declareModuleMember(node, symbolFlags, symbolExcludes);
	                case 246:
	                    return declareSourceFileMember(node, symbolFlags, symbolExcludes);
	                case 184:
	                case 212:
	                    return declareClassMember(node, symbolFlags, symbolExcludes);
	                case 215:
	                    return declareSymbol(container.symbol.exports, container.symbol, node, symbolFlags, symbolExcludes);
	                case 153:
	                case 163:
	                case 213:
	                    return declareSymbol(container.symbol.members, container.symbol, node, symbolFlags, symbolExcludes);
	                case 150:
	                case 151:
	                case 145:
	                case 146:
	                case 147:
	                case 141:
	                case 140:
	                case 142:
	                case 143:
	                case 144:
	                case 211:
	                case 171:
	                case 172:
	                case 214:
	                    return declareSymbol(container.locals, undefined, node, symbolFlags, symbolExcludes);
	            }
	        }
	        function declareClassMember(node, symbolFlags, symbolExcludes) {
	            return node.flags & 128
	                ? declareSymbol(container.symbol.exports, container.symbol, node, symbolFlags, symbolExcludes)
	                : declareSymbol(container.symbol.members, container.symbol, node, symbolFlags, symbolExcludes);
	        }
	        function declareSourceFileMember(node, symbolFlags, symbolExcludes) {
	            return ts.isExternalModule(file)
	                ? declareModuleMember(node, symbolFlags, symbolExcludes)
	                : declareSymbol(file.locals, undefined, node, symbolFlags, symbolExcludes);
	        }
	        function isAmbientContext(node) {
	            while (node) {
	                if (node.flags & 2) {
	                    return true;
	                }
	                node = node.parent;
	            }
	            return false;
	        }
	        function hasExportDeclarations(node) {
	            var body = node.kind === 246 ? node : node.body;
	            if (body.kind === 246 || body.kind === 217) {
	                for (var _i = 0, _a = body.statements; _i < _a.length; _i++) {
	                    var stat = _a[_i];
	                    if (stat.kind === 226 || stat.kind === 225) {
	                        return true;
	                    }
	                }
	            }
	            return false;
	        }
	        function setExportContextFlag(node) {
	            if (isAmbientContext(node) && !hasExportDeclarations(node)) {
	                node.flags |= 262144;
	            }
	            else {
	                node.flags &= ~262144;
	            }
	        }
	        function bindModuleDeclaration(node) {
	            setExportContextFlag(node);
	            if (node.name.kind === 9) {
	                declareSymbolAndAddToSymbolTable(node, 512, 106639);
	            }
	            else {
	                var state = getModuleInstanceState(node);
	                if (state === 0) {
	                    declareSymbolAndAddToSymbolTable(node, 1024, 0);
	                }
	                else {
	                    declareSymbolAndAddToSymbolTable(node, 512, 106639);
	                    if (node.symbol.flags & (16 | 32 | 256)) {
	                        node.symbol.constEnumOnlyModule = false;
	                    }
	                    else {
	                        var currentModuleIsConstEnumOnly = state === 2;
	                        if (node.symbol.constEnumOnlyModule === undefined) {
	                            node.symbol.constEnumOnlyModule = currentModuleIsConstEnumOnly;
	                        }
	                        else {
	                            node.symbol.constEnumOnlyModule = node.symbol.constEnumOnlyModule && currentModuleIsConstEnumOnly;
	                        }
	                    }
	                }
	            }
	        }
	        function bindFunctionOrConstructorType(node) {
	            var symbol = createSymbol(131072, getDeclarationName(node));
	            addDeclarationToSymbol(symbol, node, 131072);
	            var typeLiteralSymbol = createSymbol(2048, "__type");
	            addDeclarationToSymbol(typeLiteralSymbol, node, 2048);
	            typeLiteralSymbol.members = (_a = {}, _a[symbol.name] = symbol, _a);
	            var _a;
	        }
	        function bindObjectLiteralExpression(node) {
	            if (inStrictMode) {
	                var seen = {};
	                for (var _i = 0, _a = node.properties; _i < _a.length; _i++) {
	                    var prop = _a[_i];
	                    if (prop.name.kind !== 67) {
	                        continue;
	                    }
	                    var identifier = prop.name;
	                    var currentKind = prop.kind === 243 || prop.kind === 244 || prop.kind === 141
	                        ? 1
	                        : 2;
	                    var existingKind = seen[identifier.text];
	                    if (!existingKind) {
	                        seen[identifier.text] = currentKind;
	                        continue;
	                    }
	                    if (currentKind === 1 && existingKind === 1) {
	                        var span = ts.getErrorSpanForNode(file, identifier);
	                        file.bindDiagnostics.push(ts.createFileDiagnostic(file, span.start, span.length, ts.Diagnostics.An_object_literal_cannot_have_multiple_properties_with_the_same_name_in_strict_mode));
	                    }
	                }
	            }
	            return bindAnonymousDeclaration(node, 4096, "__object");
	        }
	        function bindAnonymousDeclaration(node, symbolFlags, name) {
	            var symbol = createSymbol(symbolFlags, name);
	            addDeclarationToSymbol(symbol, node, symbolFlags);
	        }
	        function bindBlockScopedDeclaration(node, symbolFlags, symbolExcludes) {
	            switch (blockScopeContainer.kind) {
	                case 216:
	                    declareModuleMember(node, symbolFlags, symbolExcludes);
	                    break;
	                case 246:
	                    if (ts.isExternalModule(container)) {
	                        declareModuleMember(node, symbolFlags, symbolExcludes);
	                        break;
	                    }
	                default:
	                    if (!blockScopeContainer.locals) {
	                        blockScopeContainer.locals = {};
	                        addToContainerChain(blockScopeContainer);
	                    }
	                    declareSymbol(blockScopeContainer.locals, undefined, node, symbolFlags, symbolExcludes);
	            }
	        }
	        function bindBlockScopedVariableDeclaration(node) {
	            bindBlockScopedDeclaration(node, 2, 107455);
	        }
	        function checkStrictModeIdentifier(node) {
	            if (inStrictMode &&
	                node.originalKeywordKind >= 104 &&
	                node.originalKeywordKind <= 112 &&
	                !ts.isIdentifierName(node)) {
	                if (!file.parseDiagnostics.length) {
	                    file.bindDiagnostics.push(ts.createDiagnosticForNode(node, getStrictModeIdentifierMessage(node), ts.declarationNameToString(node)));
	                }
	            }
	        }
	        function getStrictModeIdentifierMessage(node) {
	            if (ts.getContainingClass(node)) {
	                return ts.Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode;
	            }
	            if (file.externalModuleIndicator) {
	                return ts.Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode;
	            }
	            return ts.Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode;
	        }
	        function checkStrictModeBinaryExpression(node) {
	            if (inStrictMode && ts.isLeftHandSideExpression(node.left) && ts.isAssignmentOperator(node.operatorToken.kind)) {
	                checkStrictModeEvalOrArguments(node, node.left);
	            }
	        }
	        function checkStrictModeCatchClause(node) {
	            if (inStrictMode && node.variableDeclaration) {
	                checkStrictModeEvalOrArguments(node, node.variableDeclaration.name);
	            }
	        }
	        function checkStrictModeDeleteExpression(node) {
	            if (inStrictMode && node.expression.kind === 67) {
	                var span = ts.getErrorSpanForNode(file, node.expression);
	                file.bindDiagnostics.push(ts.createFileDiagnostic(file, span.start, span.length, ts.Diagnostics.delete_cannot_be_called_on_an_identifier_in_strict_mode));
	            }
	        }
	        function isEvalOrArgumentsIdentifier(node) {
	            return node.kind === 67 &&
	                (node.text === "eval" || node.text === "arguments");
	        }
	        function checkStrictModeEvalOrArguments(contextNode, name) {
	            if (name && name.kind === 67) {
	                var identifier = name;
	                if (isEvalOrArgumentsIdentifier(identifier)) {
	                    var span = ts.getErrorSpanForNode(file, name);
	                    file.bindDiagnostics.push(ts.createFileDiagnostic(file, span.start, span.length, getStrictModeEvalOrArgumentsMessage(contextNode), identifier.text));
	                }
	            }
	        }
	        function getStrictModeEvalOrArgumentsMessage(node) {
	            if (ts.getContainingClass(node)) {
	                return ts.Diagnostics.Invalid_use_of_0_Class_definitions_are_automatically_in_strict_mode;
	            }
	            if (file.externalModuleIndicator) {
	                return ts.Diagnostics.Invalid_use_of_0_Modules_are_automatically_in_strict_mode;
	            }
	            return ts.Diagnostics.Invalid_use_of_0_in_strict_mode;
	        }
	        function checkStrictModeFunctionName(node) {
	            if (inStrictMode) {
	                checkStrictModeEvalOrArguments(node, node.name);
	            }
	        }
	        function checkStrictModeNumericLiteral(node) {
	            if (inStrictMode && node.flags & 65536) {
	                file.bindDiagnostics.push(ts.createDiagnosticForNode(node, ts.Diagnostics.Octal_literals_are_not_allowed_in_strict_mode));
	            }
	        }
	        function checkStrictModePostfixUnaryExpression(node) {
	            if (inStrictMode) {
	                checkStrictModeEvalOrArguments(node, node.operand);
	            }
	        }
	        function checkStrictModePrefixUnaryExpression(node) {
	            if (inStrictMode) {
	                if (node.operator === 40 || node.operator === 41) {
	                    checkStrictModeEvalOrArguments(node, node.operand);
	                }
	            }
	        }
	        function checkStrictModeWithStatement(node) {
	            if (inStrictMode) {
	                grammarErrorOnFirstToken(node, ts.Diagnostics.with_statements_are_not_allowed_in_strict_mode);
	            }
	        }
	        function grammarErrorOnFirstToken(node, message, arg0, arg1, arg2) {
	            var span = ts.getSpanOfTokenAtPosition(file, node.pos);
	            file.bindDiagnostics.push(ts.createFileDiagnostic(file, span.start, span.length, message, arg0, arg1, arg2));
	        }
	        function getDestructuringParameterName(node) {
	            return "__" + ts.indexOf(node.parent.parameters, node);
	        }
	        function bind(node) {
	            node.parent = parent;
	            var savedInStrictMode = inStrictMode;
	            if (!savedInStrictMode) {
	                updateStrictMode(node);
	            }
	            bindWorker(node);
	            bindChildren(node);
	            inStrictMode = savedInStrictMode;
	        }
	        function updateStrictMode(node) {
	            switch (node.kind) {
	                case 246:
	                case 217:
	                    updateStrictModeStatementList(node.statements);
	                    return;
	                case 190:
	                    if (ts.isFunctionLike(node.parent)) {
	                        updateStrictModeStatementList(node.statements);
	                    }
	                    return;
	                case 212:
	                case 184:
	                    inStrictMode = true;
	                    return;
	            }
	        }
	        function updateStrictModeStatementList(statements) {
	            for (var _i = 0; _i < statements.length; _i++) {
	                var statement = statements[_i];
	                if (!ts.isPrologueDirective(statement)) {
	                    return;
	                }
	                if (isUseStrictPrologueDirective(statement)) {
	                    inStrictMode = true;
	                    return;
	                }
	            }
	        }
	        function isUseStrictPrologueDirective(node) {
	            var nodeText = ts.getTextOfNodeFromSourceText(file.text, node.expression);
	            return nodeText === "\"use strict\"" || nodeText === "'use strict'";
	        }
	        function bindWorker(node) {
	            switch (node.kind) {
	                case 67:
	                    return checkStrictModeIdentifier(node);
	                case 179:
	                    return checkStrictModeBinaryExpression(node);
	                case 242:
	                    return checkStrictModeCatchClause(node);
	                case 173:
	                    return checkStrictModeDeleteExpression(node);
	                case 8:
	                    return checkStrictModeNumericLiteral(node);
	                case 178:
	                    return checkStrictModePostfixUnaryExpression(node);
	                case 177:
	                    return checkStrictModePrefixUnaryExpression(node);
	                case 203:
	                    return checkStrictModeWithStatement(node);
	                case 135:
	                    return declareSymbolAndAddToSymbolTable(node, 262144, 530912);
	                case 136:
	                    return bindParameter(node);
	                case 209:
	                case 161:
	                    return bindVariableDeclarationOrBindingElement(node);
	                case 139:
	                case 138:
	                    return bindPropertyOrMethodOrAccessor(node, 4 | (node.questionToken ? 536870912 : 0), 107455);
	                case 243:
	                case 244:
	                    return bindPropertyOrMethodOrAccessor(node, 4, 107455);
	                case 245:
	                    return bindPropertyOrMethodOrAccessor(node, 8, 107455);
	                case 145:
	                case 146:
	                case 147:
	                    return declareSymbolAndAddToSymbolTable(node, 131072, 0);
	                case 141:
	                case 140:
	                    return bindPropertyOrMethodOrAccessor(node, 8192 | (node.questionToken ? 536870912 : 0), ts.isObjectLiteralMethod(node) ? 107455 : 99263);
	                case 211:
	                    checkStrictModeFunctionName(node);
	                    return declareSymbolAndAddToSymbolTable(node, 16, 106927);
	                case 142:
	                    return declareSymbolAndAddToSymbolTable(node, 16384, 0);
	                case 143:
	                    return bindPropertyOrMethodOrAccessor(node, 32768, 41919);
	                case 144:
	                    return bindPropertyOrMethodOrAccessor(node, 65536, 74687);
	                case 150:
	                case 151:
	                    return bindFunctionOrConstructorType(node);
	                case 153:
	                    return bindAnonymousDeclaration(node, 2048, "__type");
	                case 163:
	                    return bindObjectLiteralExpression(node);
	                case 171:
	                case 172:
	                    checkStrictModeFunctionName(node);
	                    var bindingName = node.name ? node.name.text : "__function";
	                    return bindAnonymousDeclaration(node, 16, bindingName);
	                case 184:
	                case 212:
	                    return bindClassLikeDeclaration(node);
	                case 213:
	                    return bindBlockScopedDeclaration(node, 64, 792960);
	                case 214:
	                    return bindBlockScopedDeclaration(node, 524288, 793056);
	                case 215:
	                    return bindEnumDeclaration(node);
	                case 216:
	                    return bindModuleDeclaration(node);
	                case 219:
	                case 222:
	                case 224:
	                case 228:
	                    return declareSymbolAndAddToSymbolTable(node, 8388608, 8388608);
	                case 221:
	                    return bindImportClause(node);
	                case 226:
	                    return bindExportDeclaration(node);
	                case 225:
	                    return bindExportAssignment(node);
	                case 246:
	                    return bindSourceFileIfExternalModule();
	            }
	        }
	        function bindSourceFileIfExternalModule() {
	            setExportContextFlag(file);
	            if (ts.isExternalModule(file)) {
	                bindAnonymousDeclaration(file, 512, "\"" + ts.removeFileExtension(file.fileName) + "\"");
	            }
	        }
	        function bindExportAssignment(node) {
	            if (!container.symbol || !container.symbol.exports) {
	                bindAnonymousDeclaration(node, 8388608, getDeclarationName(node));
	            }
	            else if (node.expression.kind === 67) {
	                declareSymbol(container.symbol.exports, container.symbol, node, 8388608, 107455 | 8388608);
	            }
	            else {
	                declareSymbol(container.symbol.exports, container.symbol, node, 4, 107455 | 8388608);
	            }
	        }
	        function bindExportDeclaration(node) {
	            if (!container.symbol || !container.symbol.exports) {
	                bindAnonymousDeclaration(node, 1073741824, getDeclarationName(node));
	            }
	            else if (!node.exportClause) {
	                declareSymbol(container.symbol.exports, container.symbol, node, 1073741824, 0);
	            }
	        }
	        function bindImportClause(node) {
	            if (node.name) {
	                declareSymbolAndAddToSymbolTable(node, 8388608, 8388608);
	            }
	        }
	        function bindClassLikeDeclaration(node) {
	            if (node.kind === 212) {
	                bindBlockScopedDeclaration(node, 32, 899519);
	            }
	            else {
	                var bindingName = node.name ? node.name.text : "__class";
	                bindAnonymousDeclaration(node, 32, bindingName);
	                if (node.name) {
	                    classifiableNames[node.name.text] = node.name.text;
	                }
	            }
	            var symbol = node.symbol;
	            var prototypeSymbol = createSymbol(4 | 134217728, "prototype");
	            if (ts.hasProperty(symbol.exports, prototypeSymbol.name)) {
	                if (node.name) {
	                    node.name.parent = node;
	                }
	                file.bindDiagnostics.push(ts.createDiagnosticForNode(symbol.exports[prototypeSymbol.name].declarations[0], ts.Diagnostics.Duplicate_identifier_0, prototypeSymbol.name));
	            }
	            symbol.exports[prototypeSymbol.name] = prototypeSymbol;
	            prototypeSymbol.parent = symbol;
	        }
	        function bindEnumDeclaration(node) {
	            return ts.isConst(node)
	                ? bindBlockScopedDeclaration(node, 128, 899967)
	                : bindBlockScopedDeclaration(node, 256, 899327);
	        }
	        function bindVariableDeclarationOrBindingElement(node) {
	            if (inStrictMode) {
	                checkStrictModeEvalOrArguments(node, node.name);
	            }
	            if (!ts.isBindingPattern(node.name)) {
	                if (ts.isBlockOrCatchScoped(node)) {
	                    bindBlockScopedVariableDeclaration(node);
	                }
	                else if (ts.isParameterDeclaration(node)) {
	                    declareSymbolAndAddToSymbolTable(node, 1, 107455);
	                }
	                else {
	                    declareSymbolAndAddToSymbolTable(node, 1, 107454);
	                }
	            }
	        }
	        function bindParameter(node) {
	            if (inStrictMode) {
	                checkStrictModeEvalOrArguments(node, node.name);
	            }
	            if (ts.isBindingPattern(node.name)) {
	                bindAnonymousDeclaration(node, 1, getDestructuringParameterName(node));
	            }
	            else {
	                declareSymbolAndAddToSymbolTable(node, 1, 107455);
	            }
	            if (node.flags & 112 &&
	                node.parent.kind === 142 &&
	                ts.isClassLike(node.parent.parent)) {
	                var classDeclaration = node.parent.parent;
	                declareSymbol(classDeclaration.symbol.members, classDeclaration.symbol, node, 4, 107455);
	            }
	        }
	        function bindPropertyOrMethodOrAccessor(node, symbolFlags, symbolExcludes) {
	            return ts.hasDynamicName(node)
	                ? bindAnonymousDeclaration(node, symbolFlags, "__computed")
	                : declareSymbolAndAddToSymbolTable(node, symbolFlags, symbolExcludes);
	        }
	    }
	})(ts || (ts = {}));
	/// <reference path="binder.ts" />
	var ts;
	(function (ts) {
	    function getDeclarationOfKind(symbol, kind) {
	        var declarations = symbol.declarations;
	        if (declarations) {
	            for (var _i = 0; _i < declarations.length; _i++) {
	                var declaration = declarations[_i];
	                if (declaration.kind === kind) {
	                    return declaration;
	                }
	            }
	        }
	        return undefined;
	    }
	    ts.getDeclarationOfKind = getDeclarationOfKind;
	    var stringWriters = [];
	    function getSingleLineStringWriter() {
	        if (stringWriters.length === 0) {
	            var str = "";
	            var writeText = function (text) { return str += text; };
	            return {
	                string: function () { return str; },
	                writeKeyword: writeText,
	                writeOperator: writeText,
	                writePunctuation: writeText,
	                writeSpace: writeText,
	                writeStringLiteral: writeText,
	                writeParameter: writeText,
	                writeSymbol: writeText,
	                writeLine: function () { return str += " "; },
	                increaseIndent: function () { },
	                decreaseIndent: function () { },
	                clear: function () { return str = ""; },
	                trackSymbol: function () { }
	            };
	        }
	        return stringWriters.pop();
	    }
	    ts.getSingleLineStringWriter = getSingleLineStringWriter;
	    function releaseStringWriter(writer) {
	        writer.clear();
	        stringWriters.push(writer);
	    }
	    ts.releaseStringWriter = releaseStringWriter;
	    function getFullWidth(node) {
	        return node.end - node.pos;
	    }
	    ts.getFullWidth = getFullWidth;
	    function arrayIsEqualTo(arr1, arr2, comparer) {
	        if (!arr1 || !arr2) {
	            return arr1 === arr2;
	        }
	        if (arr1.length !== arr2.length) {
	            return false;
	        }
	        for (var i = 0; i < arr1.length; ++i) {
	            var equals = comparer ? comparer(arr1[i], arr2[i]) : arr1[i] === arr2[i];
	            if (!equals) {
	                return false;
	            }
	        }
	        return true;
	    }
	    ts.arrayIsEqualTo = arrayIsEqualTo;
	    function hasResolvedModuleName(sourceFile, moduleNameText) {
	        return sourceFile.resolvedModules && ts.hasProperty(sourceFile.resolvedModules, moduleNameText);
	    }
	    ts.hasResolvedModuleName = hasResolvedModuleName;
	    function getResolvedModuleFileName(sourceFile, moduleNameText) {
	        return hasResolvedModuleName(sourceFile, moduleNameText) ? sourceFile.resolvedModules[moduleNameText] : undefined;
	    }
	    ts.getResolvedModuleFileName = getResolvedModuleFileName;
	    function setResolvedModuleName(sourceFile, moduleNameText, resolvedFileName) {
	        if (!sourceFile.resolvedModules) {
	            sourceFile.resolvedModules = {};
	        }
	        sourceFile.resolvedModules[moduleNameText] = resolvedFileName;
	    }
	    ts.setResolvedModuleName = setResolvedModuleName;
	    function containsParseError(node) {
	        aggregateChildData(node);
	        return (node.parserContextFlags & 64) !== 0;
	    }
	    ts.containsParseError = containsParseError;
	    function aggregateChildData(node) {
	        if (!(node.parserContextFlags & 128)) {
	            var thisNodeOrAnySubNodesHasError = ((node.parserContextFlags & 16) !== 0) ||
	                ts.forEachChild(node, containsParseError);
	            if (thisNodeOrAnySubNodesHasError) {
	                node.parserContextFlags |= 64;
	            }
	            node.parserContextFlags |= 128;
	        }
	    }
	    function getSourceFileOfNode(node) {
	        while (node && node.kind !== 246) {
	            node = node.parent;
	        }
	        return node;
	    }
	    ts.getSourceFileOfNode = getSourceFileOfNode;
	    function getStartPositionOfLine(line, sourceFile) {
	        ts.Debug.assert(line >= 0);
	        return ts.getLineStarts(sourceFile)[line];
	    }
	    ts.getStartPositionOfLine = getStartPositionOfLine;
	    function nodePosToString(node) {
	        var file = getSourceFileOfNode(node);
	        var loc = ts.getLineAndCharacterOfPosition(file, node.pos);
	        return file.fileName + "(" + (loc.line + 1) + "," + (loc.character + 1) + ")";
	    }
	    ts.nodePosToString = nodePosToString;
	    function getStartPosOfNode(node) {
	        return node.pos;
	    }
	    ts.getStartPosOfNode = getStartPosOfNode;
	    function nodeIsMissing(node) {
	        if (!node) {
	            return true;
	        }
	        return node.pos === node.end && node.pos >= 0 && node.kind !== 1;
	    }
	    ts.nodeIsMissing = nodeIsMissing;
	    function nodeIsPresent(node) {
	        return !nodeIsMissing(node);
	    }
	    ts.nodeIsPresent = nodeIsPresent;
	    function getTokenPosOfNode(node, sourceFile) {
	        if (nodeIsMissing(node)) {
	            return node.pos;
	        }
	        return ts.skipTrivia((sourceFile || getSourceFileOfNode(node)).text, node.pos);
	    }
	    ts.getTokenPosOfNode = getTokenPosOfNode;
	    function getNonDecoratorTokenPosOfNode(node, sourceFile) {
	        if (nodeIsMissing(node) || !node.decorators) {
	            return getTokenPosOfNode(node, sourceFile);
	        }
	        return ts.skipTrivia((sourceFile || getSourceFileOfNode(node)).text, node.decorators.end);
	    }
	    ts.getNonDecoratorTokenPosOfNode = getNonDecoratorTokenPosOfNode;
	    function getSourceTextOfNodeFromSourceFile(sourceFile, node, includeTrivia) {
	        if (includeTrivia === void 0) { includeTrivia = false; }
	        if (nodeIsMissing(node)) {
	            return "";
	        }
	        var text = sourceFile.text;
	        return text.substring(includeTrivia ? node.pos : ts.skipTrivia(text, node.pos), node.end);
	    }
	    ts.getSourceTextOfNodeFromSourceFile = getSourceTextOfNodeFromSourceFile;
	    function getTextOfNodeFromSourceText(sourceText, node) {
	        if (nodeIsMissing(node)) {
	            return "";
	        }
	        return sourceText.substring(ts.skipTrivia(sourceText, node.pos), node.end);
	    }
	    ts.getTextOfNodeFromSourceText = getTextOfNodeFromSourceText;
	    function getTextOfNode(node, includeTrivia) {
	        if (includeTrivia === void 0) { includeTrivia = false; }
	        return getSourceTextOfNodeFromSourceFile(getSourceFileOfNode(node), node, includeTrivia);
	    }
	    ts.getTextOfNode = getTextOfNode;
	    function escapeIdentifier(identifier) {
	        return identifier.length >= 2 && identifier.charCodeAt(0) === 95 && identifier.charCodeAt(1) === 95 ? "_" + identifier : identifier;
	    }
	    ts.escapeIdentifier = escapeIdentifier;
	    function unescapeIdentifier(identifier) {
	        return identifier.length >= 3 && identifier.charCodeAt(0) === 95 && identifier.charCodeAt(1) === 95 && identifier.charCodeAt(2) === 95 ? identifier.substr(1) : identifier;
	    }
	    ts.unescapeIdentifier = unescapeIdentifier;
	    function makeIdentifierFromModuleName(moduleName) {
	        return ts.getBaseFileName(moduleName).replace(/^(\d)/, "_$1").replace(/\W/g, "_");
	    }
	    ts.makeIdentifierFromModuleName = makeIdentifierFromModuleName;
	    function isBlockOrCatchScoped(declaration) {
	        return (getCombinedNodeFlags(declaration) & 49152) !== 0 ||
	            isCatchClauseVariableDeclaration(declaration);
	    }
	    ts.isBlockOrCatchScoped = isBlockOrCatchScoped;
	    function getEnclosingBlockScopeContainer(node) {
	        var current = node.parent;
	        while (current) {
	            if (isFunctionLike(current)) {
	                return current;
	            }
	            switch (current.kind) {
	                case 246:
	                case 218:
	                case 242:
	                case 216:
	                case 197:
	                case 198:
	                case 199:
	                    return current;
	                case 190:
	                    if (!isFunctionLike(current.parent)) {
	                        return current;
	                    }
	            }
	            current = current.parent;
	        }
	    }
	    ts.getEnclosingBlockScopeContainer = getEnclosingBlockScopeContainer;
	    function isCatchClauseVariableDeclaration(declaration) {
	        return declaration &&
	            declaration.kind === 209 &&
	            declaration.parent &&
	            declaration.parent.kind === 242;
	    }
	    ts.isCatchClauseVariableDeclaration = isCatchClauseVariableDeclaration;
	    function declarationNameToString(name) {
	        return getFullWidth(name) === 0 ? "(Missing)" : getTextOfNode(name);
	    }
	    ts.declarationNameToString = declarationNameToString;
	    function createDiagnosticForNode(node, message, arg0, arg1, arg2) {
	        var sourceFile = getSourceFileOfNode(node);
	        var span = getErrorSpanForNode(sourceFile, node);
	        return ts.createFileDiagnostic(sourceFile, span.start, span.length, message, arg0, arg1, arg2);
	    }
	    ts.createDiagnosticForNode = createDiagnosticForNode;
	    function createDiagnosticForNodeFromMessageChain(node, messageChain) {
	        var sourceFile = getSourceFileOfNode(node);
	        var span = getErrorSpanForNode(sourceFile, node);
	        return {
	            file: sourceFile,
	            start: span.start,
	            length: span.length,
	            code: messageChain.code,
	            category: messageChain.category,
	            messageText: messageChain.next ? messageChain : messageChain.messageText
	        };
	    }
	    ts.createDiagnosticForNodeFromMessageChain = createDiagnosticForNodeFromMessageChain;
	    function getSpanOfTokenAtPosition(sourceFile, pos) {
	        var scanner = ts.createScanner(sourceFile.languageVersion, true, sourceFile.languageVariant, sourceFile.text, undefined, pos);
	        scanner.scan();
	        var start = scanner.getTokenPos();
	        return ts.createTextSpanFromBounds(start, scanner.getTextPos());
	    }
	    ts.getSpanOfTokenAtPosition = getSpanOfTokenAtPosition;
	    function getErrorSpanForNode(sourceFile, node) {
	        var errorNode = node;
	        switch (node.kind) {
	            case 246:
	                var pos_1 = ts.skipTrivia(sourceFile.text, 0, false);
	                if (pos_1 === sourceFile.text.length) {
	                    return ts.createTextSpan(0, 0);
	                }
	                return getSpanOfTokenAtPosition(sourceFile, pos_1);
	            case 209:
	            case 161:
	            case 212:
	            case 184:
	            case 213:
	            case 216:
	            case 215:
	            case 245:
	            case 211:
	            case 171:
	                errorNode = node.name;
	                break;
	        }
	        if (errorNode === undefined) {
	            return getSpanOfTokenAtPosition(sourceFile, node.pos);
	        }
	        var pos = nodeIsMissing(errorNode)
	            ? errorNode.pos
	            : ts.skipTrivia(sourceFile.text, errorNode.pos);
	        return ts.createTextSpanFromBounds(pos, errorNode.end);
	    }
	    ts.getErrorSpanForNode = getErrorSpanForNode;
	    function isExternalModule(file) {
	        return file.externalModuleIndicator !== undefined;
	    }
	    ts.isExternalModule = isExternalModule;
	    function isDeclarationFile(file) {
	        return (file.flags & 8192) !== 0;
	    }
	    ts.isDeclarationFile = isDeclarationFile;
	    function isConstEnumDeclaration(node) {
	        return node.kind === 215 && isConst(node);
	    }
	    ts.isConstEnumDeclaration = isConstEnumDeclaration;
	    function walkUpBindingElementsAndPatterns(node) {
	        while (node && (node.kind === 161 || isBindingPattern(node))) {
	            node = node.parent;
	        }
	        return node;
	    }
	    function getCombinedNodeFlags(node) {
	        node = walkUpBindingElementsAndPatterns(node);
	        var flags = node.flags;
	        if (node.kind === 209) {
	            node = node.parent;
	        }
	        if (node && node.kind === 210) {
	            flags |= node.flags;
	            node = node.parent;
	        }
	        if (node && node.kind === 191) {
	            flags |= node.flags;
	        }
	        return flags;
	    }
	    ts.getCombinedNodeFlags = getCombinedNodeFlags;
	    function isConst(node) {
	        return !!(getCombinedNodeFlags(node) & 32768);
	    }
	    ts.isConst = isConst;
	    function isLet(node) {
	        return !!(getCombinedNodeFlags(node) & 16384);
	    }
	    ts.isLet = isLet;
	    function isPrologueDirective(node) {
	        return node.kind === 193 && node.expression.kind === 9;
	    }
	    ts.isPrologueDirective = isPrologueDirective;
	    function getLeadingCommentRangesOfNode(node, sourceFileOfNode) {
	        return ts.getLeadingCommentRanges(sourceFileOfNode.text, node.pos);
	    }
	    ts.getLeadingCommentRangesOfNode = getLeadingCommentRangesOfNode;
	    function getJsDocComments(node, sourceFileOfNode) {
	        var commentRanges = (node.kind === 136 || node.kind === 135) ?
	            ts.concatenate(ts.getTrailingCommentRanges(sourceFileOfNode.text, node.pos), ts.getLeadingCommentRanges(sourceFileOfNode.text, node.pos)) :
	            getLeadingCommentRangesOfNode(node, sourceFileOfNode);
	        return ts.filter(commentRanges, isJsDocComment);
	        function isJsDocComment(comment) {
	            return sourceFileOfNode.text.charCodeAt(comment.pos + 1) === 42 &&
	                sourceFileOfNode.text.charCodeAt(comment.pos + 2) === 42 &&
	                sourceFileOfNode.text.charCodeAt(comment.pos + 3) !== 47;
	        }
	    }
	    ts.getJsDocComments = getJsDocComments;
	    ts.fullTripleSlashReferencePathRegEx = /^(\/\/\/\s*<reference\s+path\s*=\s*)('|")(.+?)\2.*?\/>/;
	    function isTypeNode(node) {
	        if (149 <= node.kind && node.kind <= 158) {
	            return true;
	        }
	        switch (node.kind) {
	            case 115:
	            case 126:
	            case 128:
	            case 118:
	            case 129:
	                return true;
	            case 101:
	                return node.parent.kind !== 175;
	            case 9:
	                return node.parent.kind === 136;
	            case 186:
	                return !isExpressionWithTypeArgumentsInClassExtendsClause(node);
	            case 67:
	                if (node.parent.kind === 133 && node.parent.right === node) {
	                    node = node.parent;
	                }
	                else if (node.parent.kind === 164 && node.parent.name === node) {
	                    node = node.parent;
	                }
	            case 133:
	            case 164:
	                ts.Debug.assert(node.kind === 67 || node.kind === 133 || node.kind === 164, "'node' was expected to be a qualified name, identifier or property access in 'isTypeNode'.");
	                var parent_1 = node.parent;
	                if (parent_1.kind === 152) {
	                    return false;
	                }
	                if (149 <= parent_1.kind && parent_1.kind <= 158) {
	                    return true;
	                }
	                switch (parent_1.kind) {
	                    case 186:
	                        return !isExpressionWithTypeArgumentsInClassExtendsClause(parent_1);
	                    case 135:
	                        return node === parent_1.constraint;
	                    case 139:
	                    case 138:
	                    case 136:
	                    case 209:
	                        return node === parent_1.type;
	                    case 211:
	                    case 171:
	                    case 172:
	                    case 142:
	                    case 141:
	                    case 140:
	                    case 143:
	                    case 144:
	                        return node === parent_1.type;
	                    case 145:
	                    case 146:
	                    case 147:
	                        return node === parent_1.type;
	                    case 169:
	                        return node === parent_1.type;
	                    case 166:
	                    case 167:
	                        return parent_1.typeArguments && ts.indexOf(parent_1.typeArguments, node) >= 0;
	                    case 168:
	                        return false;
	                }
	        }
	        return false;
	    }
	    ts.isTypeNode = isTypeNode;
	    function forEachReturnStatement(body, visitor) {
	        return traverse(body);
	        function traverse(node) {
	            switch (node.kind) {
	                case 202:
	                    return visitor(node);
	                case 218:
	                case 190:
	                case 194:
	                case 195:
	                case 196:
	                case 197:
	                case 198:
	                case 199:
	                case 203:
	                case 204:
	                case 239:
	                case 240:
	                case 205:
	                case 207:
	                case 242:
	                    return ts.forEachChild(node, traverse);
	            }
	        }
	    }
	    ts.forEachReturnStatement = forEachReturnStatement;
	    function forEachYieldExpression(body, visitor) {
	        return traverse(body);
	        function traverse(node) {
	            switch (node.kind) {
	                case 182:
	                    visitor(node);
	                    var operand = node.expression;
	                    if (operand) {
	                        traverse(operand);
	                    }
	                case 215:
	                case 213:
	                case 216:
	                case 214:
	                case 212:
	                case 184:
	                    return;
	                default:
	                    if (isFunctionLike(node)) {
	                        var name_5 = node.name;
	                        if (name_5 && name_5.kind === 134) {
	                            traverse(name_5.expression);
	                            return;
	                        }
	                    }
	                    else if (!isTypeNode(node)) {
	                        ts.forEachChild(node, traverse);
	                    }
	            }
	        }
	    }
	    ts.forEachYieldExpression = forEachYieldExpression;
	    function isVariableLike(node) {
	        if (node) {
	            switch (node.kind) {
	                case 161:
	                case 245:
	                case 136:
	                case 243:
	                case 139:
	                case 138:
	                case 244:
	                case 209:
	                    return true;
	            }
	        }
	        return false;
	    }
	    ts.isVariableLike = isVariableLike;
	    function isAccessor(node) {
	        return node && (node.kind === 143 || node.kind === 144);
	    }
	    ts.isAccessor = isAccessor;
	    function isClassLike(node) {
	        return node && (node.kind === 212 || node.kind === 184);
	    }
	    ts.isClassLike = isClassLike;
	    function isFunctionLike(node) {
	        if (node) {
	            switch (node.kind) {
	                case 142:
	                case 171:
	                case 211:
	                case 172:
	                case 141:
	                case 140:
	                case 143:
	                case 144:
	                case 145:
	                case 146:
	                case 147:
	                case 150:
	                case 151:
	                    return true;
	            }
	        }
	        return false;
	    }
	    ts.isFunctionLike = isFunctionLike;
	    function introducesArgumentsExoticObject(node) {
	        switch (node.kind) {
	            case 141:
	            case 140:
	            case 142:
	            case 143:
	            case 144:
	            case 211:
	            case 171:
	                return true;
	        }
	        return false;
	    }
	    ts.introducesArgumentsExoticObject = introducesArgumentsExoticObject;
	    function isFunctionBlock(node) {
	        return node && node.kind === 190 && isFunctionLike(node.parent);
	    }
	    ts.isFunctionBlock = isFunctionBlock;
	    function isObjectLiteralMethod(node) {
	        return node && node.kind === 141 && node.parent.kind === 163;
	    }
	    ts.isObjectLiteralMethod = isObjectLiteralMethod;
	    function getContainingFunction(node) {
	        while (true) {
	            node = node.parent;
	            if (!node || isFunctionLike(node)) {
	                return node;
	            }
	        }
	    }
	    ts.getContainingFunction = getContainingFunction;
	    function getContainingClass(node) {
	        while (true) {
	            node = node.parent;
	            if (!node || isClassLike(node)) {
	                return node;
	            }
	        }
	    }
	    ts.getContainingClass = getContainingClass;
	    function getThisContainer(node, includeArrowFunctions) {
	        while (true) {
	            node = node.parent;
	            if (!node) {
	                return undefined;
	            }
	            switch (node.kind) {
	                case 134:
	                    if (isClassLike(node.parent.parent)) {
	                        return node;
	                    }
	                    node = node.parent;
	                    break;
	                case 137:
	                    if (node.parent.kind === 136 && isClassElement(node.parent.parent)) {
	                        node = node.parent.parent;
	                    }
	                    else if (isClassElement(node.parent)) {
	                        node = node.parent;
	                    }
	                    break;
	                case 172:
	                    if (!includeArrowFunctions) {
	                        continue;
	                    }
	                case 211:
	                case 171:
	                case 216:
	                case 139:
	                case 138:
	                case 141:
	                case 140:
	                case 142:
	                case 143:
	                case 144:
	                case 215:
	                case 246:
	                    return node;
	            }
	        }
	    }
	    ts.getThisContainer = getThisContainer;
	    function getSuperContainer(node, includeFunctions) {
	        while (true) {
	            node = node.parent;
	            if (!node)
	                return node;
	            switch (node.kind) {
	                case 134:
	                    if (isClassLike(node.parent.parent)) {
	                        return node;
	                    }
	                    node = node.parent;
	                    break;
	                case 137:
	                    if (node.parent.kind === 136 && isClassElement(node.parent.parent)) {
	                        node = node.parent.parent;
	                    }
	                    else if (isClassElement(node.parent)) {
	                        node = node.parent;
	                    }
	                    break;
	                case 211:
	                case 171:
	                case 172:
	                    if (!includeFunctions) {
	                        continue;
	                    }
	                case 139:
	                case 138:
	                case 141:
	                case 140:
	                case 142:
	                case 143:
	                case 144:
	                    return node;
	            }
	        }
	    }
	    ts.getSuperContainer = getSuperContainer;
	    function getEntityNameFromTypeNode(node) {
	        if (node) {
	            switch (node.kind) {
	                case 149:
	                    return node.typeName;
	                case 186:
	                    return node.expression;
	                case 67:
	                case 133:
	                    return node;
	            }
	        }
	        return undefined;
	    }
	    ts.getEntityNameFromTypeNode = getEntityNameFromTypeNode;
	    function getInvokedExpression(node) {
	        if (node.kind === 168) {
	            return node.tag;
	        }
	        return node.expression;
	    }
	    ts.getInvokedExpression = getInvokedExpression;
	    function nodeCanBeDecorated(node) {
	        switch (node.kind) {
	            case 212:
	                return true;
	            case 139:
	                return node.parent.kind === 212;
	            case 136:
	                return node.parent.body && node.parent.parent.kind === 212;
	            case 143:
	            case 144:
	            case 141:
	                return node.body && node.parent.kind === 212;
	        }
	        return false;
	    }
	    ts.nodeCanBeDecorated = nodeCanBeDecorated;
	    function nodeIsDecorated(node) {
	        switch (node.kind) {
	            case 212:
	                if (node.decorators) {
	                    return true;
	                }
	                return false;
	            case 139:
	            case 136:
	                if (node.decorators) {
	                    return true;
	                }
	                return false;
	            case 143:
	                if (node.body && node.decorators) {
	                    return true;
	                }
	                return false;
	            case 141:
	            case 144:
	                if (node.body && node.decorators) {
	                    return true;
	                }
	                return false;
	        }
	        return false;
	    }
	    ts.nodeIsDecorated = nodeIsDecorated;
	    function childIsDecorated(node) {
	        switch (node.kind) {
	            case 212:
	                return ts.forEach(node.members, nodeOrChildIsDecorated);
	            case 141:
	            case 144:
	                return ts.forEach(node.parameters, nodeIsDecorated);
	        }
	        return false;
	    }
	    ts.childIsDecorated = childIsDecorated;
	    function nodeOrChildIsDecorated(node) {
	        return nodeIsDecorated(node) || childIsDecorated(node);
	    }
	    ts.nodeOrChildIsDecorated = nodeOrChildIsDecorated;
	    function isExpression(node) {
	        switch (node.kind) {
	            case 95:
	            case 93:
	            case 91:
	            case 97:
	            case 82:
	            case 10:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 187:
	            case 169:
	            case 170:
	            case 171:
	            case 184:
	            case 172:
	            case 175:
	            case 173:
	            case 174:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 183:
	            case 181:
	            case 11:
	            case 185:
	            case 231:
	            case 232:
	            case 182:
	                return true;
	            case 133:
	                while (node.parent.kind === 133) {
	                    node = node.parent;
	                }
	                return node.parent.kind === 152;
	            case 67:
	                if (node.parent.kind === 152) {
	                    return true;
	                }
	            case 8:
	            case 9:
	                var parent_2 = node.parent;
	                switch (parent_2.kind) {
	                    case 209:
	                    case 136:
	                    case 139:
	                    case 138:
	                    case 245:
	                    case 243:
	                    case 161:
	                        return parent_2.initializer === node;
	                    case 193:
	                    case 194:
	                    case 195:
	                    case 196:
	                    case 202:
	                    case 203:
	                    case 204:
	                    case 239:
	                    case 206:
	                    case 204:
	                        return parent_2.expression === node;
	                    case 197:
	                        var forStatement = parent_2;
	                        return (forStatement.initializer === node && forStatement.initializer.kind !== 210) ||
	                            forStatement.condition === node ||
	                            forStatement.incrementor === node;
	                    case 198:
	                    case 199:
	                        var forInStatement = parent_2;
	                        return (forInStatement.initializer === node && forInStatement.initializer.kind !== 210) ||
	                            forInStatement.expression === node;
	                    case 169:
	                    case 187:
	                        return node === parent_2.expression;
	                    case 188:
	                        return node === parent_2.expression;
	                    case 134:
	                        return node === parent_2.expression;
	                    case 137:
	                    case 238:
	                        return true;
	                    case 186:
	                        return parent_2.expression === node && isExpressionWithTypeArgumentsInClassExtendsClause(parent_2);
	                    default:
	                        if (isExpression(parent_2)) {
	                            return true;
	                        }
	                }
	        }
	        return false;
	    }
	    ts.isExpression = isExpression;
	    function isInstantiatedModule(node, preserveConstEnums) {
	        var moduleState = ts.getModuleInstanceState(node);
	        return moduleState === 1 ||
	            (preserveConstEnums && moduleState === 2);
	    }
	    ts.isInstantiatedModule = isInstantiatedModule;
	    function isExternalModuleImportEqualsDeclaration(node) {
	        return node.kind === 219 && node.moduleReference.kind === 230;
	    }
	    ts.isExternalModuleImportEqualsDeclaration = isExternalModuleImportEqualsDeclaration;
	    function getExternalModuleImportEqualsDeclarationExpression(node) {
	        ts.Debug.assert(isExternalModuleImportEqualsDeclaration(node));
	        return node.moduleReference.expression;
	    }
	    ts.getExternalModuleImportEqualsDeclarationExpression = getExternalModuleImportEqualsDeclarationExpression;
	    function isInternalModuleImportEqualsDeclaration(node) {
	        return node.kind === 219 && node.moduleReference.kind !== 230;
	    }
	    ts.isInternalModuleImportEqualsDeclaration = isInternalModuleImportEqualsDeclaration;
	    function getExternalModuleName(node) {
	        if (node.kind === 220) {
	            return node.moduleSpecifier;
	        }
	        if (node.kind === 219) {
	            var reference = node.moduleReference;
	            if (reference.kind === 230) {
	                return reference.expression;
	            }
	        }
	        if (node.kind === 226) {
	            return node.moduleSpecifier;
	        }
	    }
	    ts.getExternalModuleName = getExternalModuleName;
	    function hasQuestionToken(node) {
	        if (node) {
	            switch (node.kind) {
	                case 136:
	                case 141:
	                case 140:
	                case 244:
	                case 243:
	                case 139:
	                case 138:
	                    return node.questionToken !== undefined;
	            }
	        }
	        return false;
	    }
	    ts.hasQuestionToken = hasQuestionToken;
	    function isJSDocConstructSignature(node) {
	        return node.kind === 259 &&
	            node.parameters.length > 0 &&
	            node.parameters[0].type.kind === 261;
	    }
	    ts.isJSDocConstructSignature = isJSDocConstructSignature;
	    function getJSDocTag(node, kind) {
	        if (node && node.jsDocComment) {
	            for (var _i = 0, _a = node.jsDocComment.tags; _i < _a.length; _i++) {
	                var tag = _a[_i];
	                if (tag.kind === kind) {
	                    return tag;
	                }
	            }
	        }
	    }
	    function getJSDocTypeTag(node) {
	        return getJSDocTag(node, 267);
	    }
	    ts.getJSDocTypeTag = getJSDocTypeTag;
	    function getJSDocReturnTag(node) {
	        return getJSDocTag(node, 266);
	    }
	    ts.getJSDocReturnTag = getJSDocReturnTag;
	    function getJSDocTemplateTag(node) {
	        return getJSDocTag(node, 268);
	    }
	    ts.getJSDocTemplateTag = getJSDocTemplateTag;
	    function getCorrespondingJSDocParameterTag(parameter) {
	        if (parameter.name && parameter.name.kind === 67) {
	            var parameterName = parameter.name.text;
	            var docComment = parameter.parent.jsDocComment;
	            if (docComment) {
	                return ts.forEach(docComment.tags, function (t) {
	                    if (t.kind === 265) {
	                        var parameterTag = t;
	                        var name_6 = parameterTag.preParameterName || parameterTag.postParameterName;
	                        if (name_6.text === parameterName) {
	                            return t;
	                        }
	                    }
	                });
	            }
	        }
	    }
	    ts.getCorrespondingJSDocParameterTag = getCorrespondingJSDocParameterTag;
	    function hasRestParameter(s) {
	        return isRestParameter(ts.lastOrUndefined(s.parameters));
	    }
	    ts.hasRestParameter = hasRestParameter;
	    function isRestParameter(node) {
	        if (node) {
	            if (node.parserContextFlags & 32) {
	                if (node.type && node.type.kind === 260) {
	                    return true;
	                }
	                var paramTag = getCorrespondingJSDocParameterTag(node);
	                if (paramTag && paramTag.typeExpression) {
	                    return paramTag.typeExpression.type.kind === 260;
	                }
	            }
	            return node.dotDotDotToken !== undefined;
	        }
	        return false;
	    }
	    ts.isRestParameter = isRestParameter;
	    function isLiteralKind(kind) {
	        return 8 <= kind && kind <= 11;
	    }
	    ts.isLiteralKind = isLiteralKind;
	    function isTextualLiteralKind(kind) {
	        return kind === 9 || kind === 11;
	    }
	    ts.isTextualLiteralKind = isTextualLiteralKind;
	    function isTemplateLiteralKind(kind) {
	        return 11 <= kind && kind <= 14;
	    }
	    ts.isTemplateLiteralKind = isTemplateLiteralKind;
	    function isBindingPattern(node) {
	        return !!node && (node.kind === 160 || node.kind === 159);
	    }
	    ts.isBindingPattern = isBindingPattern;
	    function isInAmbientContext(node) {
	        while (node) {
	            if (node.flags & (2 | 8192)) {
	                return true;
	            }
	            node = node.parent;
	        }
	        return false;
	    }
	    ts.isInAmbientContext = isInAmbientContext;
	    function isDeclaration(node) {
	        switch (node.kind) {
	            case 172:
	            case 161:
	            case 212:
	            case 184:
	            case 142:
	            case 215:
	            case 245:
	            case 228:
	            case 211:
	            case 171:
	            case 143:
	            case 221:
	            case 219:
	            case 224:
	            case 213:
	            case 141:
	            case 140:
	            case 216:
	            case 222:
	            case 136:
	            case 243:
	            case 139:
	            case 138:
	            case 144:
	            case 244:
	            case 214:
	            case 135:
	            case 209:
	                return true;
	        }
	        return false;
	    }
	    ts.isDeclaration = isDeclaration;
	    function isStatement(n) {
	        switch (n.kind) {
	            case 201:
	            case 200:
	            case 208:
	            case 195:
	            case 193:
	            case 192:
	            case 198:
	            case 199:
	            case 197:
	            case 194:
	            case 205:
	            case 202:
	            case 204:
	            case 96:
	            case 207:
	            case 191:
	            case 196:
	            case 203:
	            case 225:
	                return true;
	            default:
	                return false;
	        }
	    }
	    ts.isStatement = isStatement;
	    function isClassElement(n) {
	        switch (n.kind) {
	            case 142:
	            case 139:
	            case 141:
	            case 143:
	            case 144:
	            case 140:
	            case 147:
	                return true;
	            default:
	                return false;
	        }
	    }
	    ts.isClassElement = isClassElement;
	    function isDeclarationName(name) {
	        if (name.kind !== 67 && name.kind !== 9 && name.kind !== 8) {
	            return false;
	        }
	        var parent = name.parent;
	        if (parent.kind === 224 || parent.kind === 228) {
	            if (parent.propertyName) {
	                return true;
	            }
	        }
	        if (isDeclaration(parent)) {
	            return parent.name === name;
	        }
	        return false;
	    }
	    ts.isDeclarationName = isDeclarationName;
	    function isIdentifierName(node) {
	        var parent = node.parent;
	        switch (parent.kind) {
	            case 139:
	            case 138:
	            case 141:
	            case 140:
	            case 143:
	            case 144:
	            case 245:
	            case 243:
	            case 164:
	                return parent.name === node;
	            case 133:
	                if (parent.right === node) {
	                    while (parent.kind === 133) {
	                        parent = parent.parent;
	                    }
	                    return parent.kind === 152;
	                }
	                return false;
	            case 161:
	            case 224:
	                return parent.propertyName === node;
	            case 228:
	                return true;
	        }
	        return false;
	    }
	    ts.isIdentifierName = isIdentifierName;
	    function isAliasSymbolDeclaration(node) {
	        return node.kind === 219 ||
	            node.kind === 221 && !!node.name ||
	            node.kind === 222 ||
	            node.kind === 224 ||
	            node.kind === 228 ||
	            node.kind === 225 && node.expression.kind === 67;
	    }
	    ts.isAliasSymbolDeclaration = isAliasSymbolDeclaration;
	    function getClassExtendsHeritageClauseElement(node) {
	        var heritageClause = getHeritageClause(node.heritageClauses, 81);
	        return heritageClause && heritageClause.types.length > 0 ? heritageClause.types[0] : undefined;
	    }
	    ts.getClassExtendsHeritageClauseElement = getClassExtendsHeritageClauseElement;
	    function getClassImplementsHeritageClauseElements(node) {
	        var heritageClause = getHeritageClause(node.heritageClauses, 104);
	        return heritageClause ? heritageClause.types : undefined;
	    }
	    ts.getClassImplementsHeritageClauseElements = getClassImplementsHeritageClauseElements;
	    function getInterfaceBaseTypeNodes(node) {
	        var heritageClause = getHeritageClause(node.heritageClauses, 81);
	        return heritageClause ? heritageClause.types : undefined;
	    }
	    ts.getInterfaceBaseTypeNodes = getInterfaceBaseTypeNodes;
	    function getHeritageClause(clauses, kind) {
	        if (clauses) {
	            for (var _i = 0; _i < clauses.length; _i++) {
	                var clause = clauses[_i];
	                if (clause.token === kind) {
	                    return clause;
	                }
	            }
	        }
	        return undefined;
	    }
	    ts.getHeritageClause = getHeritageClause;
	    function tryResolveScriptReference(host, sourceFile, reference) {
	        if (!host.getCompilerOptions().noResolve) {
	            var referenceFileName = ts.isRootedDiskPath(reference.fileName) ? reference.fileName : ts.combinePaths(ts.getDirectoryPath(sourceFile.fileName), reference.fileName);
	            referenceFileName = ts.getNormalizedAbsolutePath(referenceFileName, host.getCurrentDirectory());
	            return host.getSourceFile(referenceFileName);
	        }
	    }
	    ts.tryResolveScriptReference = tryResolveScriptReference;
	    function getAncestor(node, kind) {
	        while (node) {
	            if (node.kind === kind) {
	                return node;
	            }
	            node = node.parent;
	        }
	        return undefined;
	    }
	    ts.getAncestor = getAncestor;
	    function getFileReferenceFromReferencePath(comment, commentRange) {
	        var simpleReferenceRegEx = /^\/\/\/\s*<reference\s+/gim;
	        var isNoDefaultLibRegEx = /^(\/\/\/\s*<reference\s+no-default-lib\s*=\s*)('|")(.+?)\2\s*\/>/gim;
	        if (simpleReferenceRegEx.exec(comment)) {
	            if (isNoDefaultLibRegEx.exec(comment)) {
	                return {
	                    isNoDefaultLib: true
	                };
	            }
	            else {
	                var matchResult = ts.fullTripleSlashReferencePathRegEx.exec(comment);
	                if (matchResult) {
	                    var start = commentRange.pos;
	                    var end = commentRange.end;
	                    return {
	                        fileReference: {
	                            pos: start,
	                            end: end,
	                            fileName: matchResult[3]
	                        },
	                        isNoDefaultLib: false
	                    };
	                }
	                else {
	                    return {
	                        diagnosticMessage: ts.Diagnostics.Invalid_reference_directive_syntax,
	                        isNoDefaultLib: false
	                    };
	                }
	            }
	        }
	        return undefined;
	    }
	    ts.getFileReferenceFromReferencePath = getFileReferenceFromReferencePath;
	    function isKeyword(token) {
	        return 68 <= token && token <= 132;
	    }
	    ts.isKeyword = isKeyword;
	    function isTrivia(token) {
	        return 2 <= token && token <= 7;
	    }
	    ts.isTrivia = isTrivia;
	    function isAsyncFunctionLike(node) {
	        return isFunctionLike(node) && (node.flags & 512) !== 0 && !isAccessor(node);
	    }
	    ts.isAsyncFunctionLike = isAsyncFunctionLike;
	    function hasDynamicName(declaration) {
	        return declaration.name &&
	            declaration.name.kind === 134 &&
	            !isWellKnownSymbolSyntactically(declaration.name.expression);
	    }
	    ts.hasDynamicName = hasDynamicName;
	    function isWellKnownSymbolSyntactically(node) {
	        return node.kind === 164 && isESSymbolIdentifier(node.expression);
	    }
	    ts.isWellKnownSymbolSyntactically = isWellKnownSymbolSyntactically;
	    function getPropertyNameForPropertyNameNode(name) {
	        if (name.kind === 67 || name.kind === 9 || name.kind === 8) {
	            return name.text;
	        }
	        if (name.kind === 134) {
	            var nameExpression = name.expression;
	            if (isWellKnownSymbolSyntactically(nameExpression)) {
	                var rightHandSideName = nameExpression.name.text;
	                return getPropertyNameForKnownSymbolName(rightHandSideName);
	            }
	        }
	        return undefined;
	    }
	    ts.getPropertyNameForPropertyNameNode = getPropertyNameForPropertyNameNode;
	    function getPropertyNameForKnownSymbolName(symbolName) {
	        return "__@" + symbolName;
	    }
	    ts.getPropertyNameForKnownSymbolName = getPropertyNameForKnownSymbolName;
	    function isESSymbolIdentifier(node) {
	        return node.kind === 67 && node.text === "Symbol";
	    }
	    ts.isESSymbolIdentifier = isESSymbolIdentifier;
	    function isModifier(token) {
	        switch (token) {
	            case 113:
	            case 116:
	            case 72:
	            case 120:
	            case 75:
	            case 80:
	            case 110:
	            case 108:
	            case 109:
	            case 111:
	                return true;
	        }
	        return false;
	    }
	    ts.isModifier = isModifier;
	    function isParameterDeclaration(node) {
	        var root = getRootDeclaration(node);
	        return root.kind === 136;
	    }
	    ts.isParameterDeclaration = isParameterDeclaration;
	    function getRootDeclaration(node) {
	        while (node.kind === 161) {
	            node = node.parent.parent;
	        }
	        return node;
	    }
	    ts.getRootDeclaration = getRootDeclaration;
	    function nodeStartsNewLexicalEnvironment(n) {
	        return isFunctionLike(n) || n.kind === 216 || n.kind === 246;
	    }
	    ts.nodeStartsNewLexicalEnvironment = nodeStartsNewLexicalEnvironment;
	    function cloneEntityName(node) {
	        if (node.kind === 67) {
	            var clone_1 = createSynthesizedNode(67);
	            clone_1.text = node.text;
	            return clone_1;
	        }
	        else {
	            var clone_2 = createSynthesizedNode(133);
	            clone_2.left = cloneEntityName(node.left);
	            clone_2.left.parent = clone_2;
	            clone_2.right = cloneEntityName(node.right);
	            clone_2.right.parent = clone_2;
	            return clone_2;
	        }
	    }
	    ts.cloneEntityName = cloneEntityName;
	    function nodeIsSynthesized(node) {
	        return node.pos === -1;
	    }
	    ts.nodeIsSynthesized = nodeIsSynthesized;
	    function createSynthesizedNode(kind, startsOnNewLine) {
	        var node = ts.createNode(kind);
	        node.startsOnNewLine = startsOnNewLine;
	        return node;
	    }
	    ts.createSynthesizedNode = createSynthesizedNode;
	    function createSynthesizedNodeArray() {
	        var array = [];
	        array.pos = -1;
	        array.end = -1;
	        return array;
	    }
	    ts.createSynthesizedNodeArray = createSynthesizedNodeArray;
	    function createDiagnosticCollection() {
	        var nonFileDiagnostics = [];
	        var fileDiagnostics = {};
	        var diagnosticsModified = false;
	        var modificationCount = 0;
	        return {
	            add: add,
	            getGlobalDiagnostics: getGlobalDiagnostics,
	            getDiagnostics: getDiagnostics,
	            getModificationCount: getModificationCount
	        };
	        function getModificationCount() {
	            return modificationCount;
	        }
	        function add(diagnostic) {
	            var diagnostics;
	            if (diagnostic.file) {
	                diagnostics = fileDiagnostics[diagnostic.file.fileName];
	                if (!diagnostics) {
	                    diagnostics = [];
	                    fileDiagnostics[diagnostic.file.fileName] = diagnostics;
	                }
	            }
	            else {
	                diagnostics = nonFileDiagnostics;
	            }
	            diagnostics.push(diagnostic);
	            diagnosticsModified = true;
	            modificationCount++;
	        }
	        function getGlobalDiagnostics() {
	            sortAndDeduplicate();
	            return nonFileDiagnostics;
	        }
	        function getDiagnostics(fileName) {
	            sortAndDeduplicate();
	            if (fileName) {
	                return fileDiagnostics[fileName] || [];
	            }
	            var allDiagnostics = [];
	            function pushDiagnostic(d) {
	                allDiagnostics.push(d);
	            }
	            ts.forEach(nonFileDiagnostics, pushDiagnostic);
	            for (var key in fileDiagnostics) {
	                if (ts.hasProperty(fileDiagnostics, key)) {
	                    ts.forEach(fileDiagnostics[key], pushDiagnostic);
	                }
	            }
	            return ts.sortAndDeduplicateDiagnostics(allDiagnostics);
	        }
	        function sortAndDeduplicate() {
	            if (!diagnosticsModified) {
	                return;
	            }
	            diagnosticsModified = false;
	            nonFileDiagnostics = ts.sortAndDeduplicateDiagnostics(nonFileDiagnostics);
	            for (var key in fileDiagnostics) {
	                if (ts.hasProperty(fileDiagnostics, key)) {
	                    fileDiagnostics[key] = ts.sortAndDeduplicateDiagnostics(fileDiagnostics[key]);
	                }
	            }
	        }
	    }
	    ts.createDiagnosticCollection = createDiagnosticCollection;
	    var escapedCharsRegExp = /[\\\"\u0000-\u001f\t\v\f\b\r\n\u2028\u2029\u0085]/g;
	    var escapedCharsMap = {
	        "\0": "\\0",
	        "\t": "\\t",
	        "\v": "\\v",
	        "\f": "\\f",
	        "\b": "\\b",
	        "\r": "\\r",
	        "\n": "\\n",
	        "\\": "\\\\",
	        "\"": "\\\"",
	        "\u2028": "\\u2028",
	        "\u2029": "\\u2029",
	        "\u0085": "\\u0085"
	    };
	    function escapeString(s) {
	        s = escapedCharsRegExp.test(s) ? s.replace(escapedCharsRegExp, getReplacement) : s;
	        return s;
	        function getReplacement(c) {
	            return escapedCharsMap[c] || get16BitUnicodeEscapeSequence(c.charCodeAt(0));
	        }
	    }
	    ts.escapeString = escapeString;
	    function isIntrinsicJsxName(name) {
	        var ch = name.substr(0, 1);
	        return ch.toLowerCase() === ch;
	    }
	    ts.isIntrinsicJsxName = isIntrinsicJsxName;
	    function get16BitUnicodeEscapeSequence(charCode) {
	        var hexCharCode = charCode.toString(16).toUpperCase();
	        var paddedHexCode = ("0000" + hexCharCode).slice(-4);
	        return "\\u" + paddedHexCode;
	    }
	    var nonAsciiCharacters = /[^\u0000-\u007F]/g;
	    function escapeNonAsciiCharacters(s) {
	        return nonAsciiCharacters.test(s) ?
	            s.replace(nonAsciiCharacters, function (c) { return get16BitUnicodeEscapeSequence(c.charCodeAt(0)); }) :
	            s;
	    }
	    ts.escapeNonAsciiCharacters = escapeNonAsciiCharacters;
	    var indentStrings = ["", "    "];
	    function getIndentString(level) {
	        if (indentStrings[level] === undefined) {
	            indentStrings[level] = getIndentString(level - 1) + indentStrings[1];
	        }
	        return indentStrings[level];
	    }
	    ts.getIndentString = getIndentString;
	    function getIndentSize() {
	        return indentStrings[1].length;
	    }
	    ts.getIndentSize = getIndentSize;
	    function createTextWriter(newLine) {
	        var output = "";
	        var indent = 0;
	        var lineStart = true;
	        var lineCount = 0;
	        var linePos = 0;
	        function write(s) {
	            if (s && s.length) {
	                if (lineStart) {
	                    output += getIndentString(indent);
	                    lineStart = false;
	                }
	                output += s;
	            }
	        }
	        function rawWrite(s) {
	            if (s !== undefined) {
	                if (lineStart) {
	                    lineStart = false;
	                }
	                output += s;
	            }
	        }
	        function writeLiteral(s) {
	            if (s && s.length) {
	                write(s);
	                var lineStartsOfS = ts.computeLineStarts(s);
	                if (lineStartsOfS.length > 1) {
	                    lineCount = lineCount + lineStartsOfS.length - 1;
	                    linePos = output.length - s.length + ts.lastOrUndefined(lineStartsOfS);
	                }
	            }
	        }
	        function writeLine() {
	            if (!lineStart) {
	                output += newLine;
	                lineCount++;
	                linePos = output.length;
	                lineStart = true;
	            }
	        }
	        function writeTextOfNode(sourceFile, node) {
	            write(getSourceTextOfNodeFromSourceFile(sourceFile, node));
	        }
	        return {
	            write: write,
	            rawWrite: rawWrite,
	            writeTextOfNode: writeTextOfNode,
	            writeLiteral: writeLiteral,
	            writeLine: writeLine,
	            increaseIndent: function () { return indent++; },
	            decreaseIndent: function () { return indent--; },
	            getIndent: function () { return indent; },
	            getTextPos: function () { return output.length; },
	            getLine: function () { return lineCount + 1; },
	            getColumn: function () { return lineStart ? indent * getIndentSize() + 1 : output.length - linePos + 1; },
	            getText: function () { return output; }
	        };
	    }
	    ts.createTextWriter = createTextWriter;
	    function getOwnEmitOutputFilePath(sourceFile, host, extension) {
	        var compilerOptions = host.getCompilerOptions();
	        var emitOutputFilePathWithoutExtension;
	        if (compilerOptions.outDir) {
	            emitOutputFilePathWithoutExtension = ts.removeFileExtension(getSourceFilePathInNewDir(sourceFile, host, compilerOptions.outDir));
	        }
	        else {
	            emitOutputFilePathWithoutExtension = ts.removeFileExtension(sourceFile.fileName);
	        }
	        return emitOutputFilePathWithoutExtension + extension;
	    }
	    ts.getOwnEmitOutputFilePath = getOwnEmitOutputFilePath;
	    function getSourceFilePathInNewDir(sourceFile, host, newDirPath) {
	        var sourceFilePath = ts.getNormalizedAbsolutePath(sourceFile.fileName, host.getCurrentDirectory());
	        sourceFilePath = sourceFilePath.replace(host.getCommonSourceDirectory(), "");
	        return ts.combinePaths(newDirPath, sourceFilePath);
	    }
	    ts.getSourceFilePathInNewDir = getSourceFilePathInNewDir;
	    function writeFile(host, diagnostics, fileName, data, writeByteOrderMark) {
	        host.writeFile(fileName, data, writeByteOrderMark, function (hostErrorMessage) {
	            diagnostics.push(ts.createCompilerDiagnostic(ts.Diagnostics.Could_not_write_file_0_Colon_1, fileName, hostErrorMessage));
	        });
	    }
	    ts.writeFile = writeFile;
	    function getLineOfLocalPosition(currentSourceFile, pos) {
	        return ts.getLineAndCharacterOfPosition(currentSourceFile, pos).line;
	    }
	    ts.getLineOfLocalPosition = getLineOfLocalPosition;
	    function getFirstConstructorWithBody(node) {
	        return ts.forEach(node.members, function (member) {
	            if (member.kind === 142 && nodeIsPresent(member.body)) {
	                return member;
	            }
	        });
	    }
	    ts.getFirstConstructorWithBody = getFirstConstructorWithBody;
	    function getSetAccessorTypeAnnotationNode(accessor) {
	        return accessor && accessor.parameters.length > 0 && accessor.parameters[0].type;
	    }
	    ts.getSetAccessorTypeAnnotationNode = getSetAccessorTypeAnnotationNode;
	    function shouldEmitToOwnFile(sourceFile, compilerOptions) {
	        if (!isDeclarationFile(sourceFile)) {
	            if ((isExternalModule(sourceFile) || !(compilerOptions.outFile || compilerOptions.out))) {
	                return compilerOptions.isolatedModules || !ts.fileExtensionIs(sourceFile.fileName, ".js");
	            }
	            return false;
	        }
	        return false;
	    }
	    ts.shouldEmitToOwnFile = shouldEmitToOwnFile;
	    function getAllAccessorDeclarations(declarations, accessor) {
	        var firstAccessor;
	        var secondAccessor;
	        var getAccessor;
	        var setAccessor;
	        if (hasDynamicName(accessor)) {
	            firstAccessor = accessor;
	            if (accessor.kind === 143) {
	                getAccessor = accessor;
	            }
	            else if (accessor.kind === 144) {
	                setAccessor = accessor;
	            }
	            else {
	                ts.Debug.fail("Accessor has wrong kind");
	            }
	        }
	        else {
	            ts.forEach(declarations, function (member) {
	                if ((member.kind === 143 || member.kind === 144)
	                    && (member.flags & 128) === (accessor.flags & 128)) {
	                    var memberName = getPropertyNameForPropertyNameNode(member.name);
	                    var accessorName = getPropertyNameForPropertyNameNode(accessor.name);
	                    if (memberName === accessorName) {
	                        if (!firstAccessor) {
	                            firstAccessor = member;
	                        }
	                        else if (!secondAccessor) {
	                            secondAccessor = member;
	                        }
	                        if (member.kind === 143 && !getAccessor) {
	                            getAccessor = member;
	                        }
	                        if (member.kind === 144 && !setAccessor) {
	                            setAccessor = member;
	                        }
	                    }
	                }
	            });
	        }
	        return {
	            firstAccessor: firstAccessor,
	            secondAccessor: secondAccessor,
	            getAccessor: getAccessor,
	            setAccessor: setAccessor
	        };
	    }
	    ts.getAllAccessorDeclarations = getAllAccessorDeclarations;
	    function emitNewLineBeforeLeadingComments(currentSourceFile, writer, node, leadingComments) {
	        if (leadingComments && leadingComments.length && node.pos !== leadingComments[0].pos &&
	            getLineOfLocalPosition(currentSourceFile, node.pos) !== getLineOfLocalPosition(currentSourceFile, leadingComments[0].pos)) {
	            writer.writeLine();
	        }
	    }
	    ts.emitNewLineBeforeLeadingComments = emitNewLineBeforeLeadingComments;
	    function emitComments(currentSourceFile, writer, comments, trailingSeparator, newLine, writeComment) {
	        var emitLeadingSpace = !trailingSeparator;
	        ts.forEach(comments, function (comment) {
	            if (emitLeadingSpace) {
	                writer.write(" ");
	                emitLeadingSpace = false;
	            }
	            writeComment(currentSourceFile, writer, comment, newLine);
	            if (comment.hasTrailingNewLine) {
	                writer.writeLine();
	            }
	            else if (trailingSeparator) {
	                writer.write(" ");
	            }
	            else {
	                emitLeadingSpace = true;
	            }
	        });
	    }
	    ts.emitComments = emitComments;
	    function writeCommentRange(currentSourceFile, writer, comment, newLine) {
	        if (currentSourceFile.text.charCodeAt(comment.pos + 1) === 42) {
	            var firstCommentLineAndCharacter = ts.getLineAndCharacterOfPosition(currentSourceFile, comment.pos);
	            var lineCount = ts.getLineStarts(currentSourceFile).length;
	            var firstCommentLineIndent;
	            for (var pos = comment.pos, currentLine = firstCommentLineAndCharacter.line; pos < comment.end; currentLine++) {
	                var nextLineStart = (currentLine + 1) === lineCount
	                    ? currentSourceFile.text.length + 1
	                    : getStartPositionOfLine(currentLine + 1, currentSourceFile);
	                if (pos !== comment.pos) {
	                    if (firstCommentLineIndent === undefined) {
	                        firstCommentLineIndent = calculateIndent(getStartPositionOfLine(firstCommentLineAndCharacter.line, currentSourceFile), comment.pos);
	                    }
	                    var currentWriterIndentSpacing = writer.getIndent() * getIndentSize();
	                    var spacesToEmit = currentWriterIndentSpacing - firstCommentLineIndent + calculateIndent(pos, nextLineStart);
	                    if (spacesToEmit > 0) {
	                        var numberOfSingleSpacesToEmit = spacesToEmit % getIndentSize();
	                        var indentSizeSpaceString = getIndentString((spacesToEmit - numberOfSingleSpacesToEmit) / getIndentSize());
	                        writer.rawWrite(indentSizeSpaceString);
	                        while (numberOfSingleSpacesToEmit) {
	                            writer.rawWrite(" ");
	                            numberOfSingleSpacesToEmit--;
	                        }
	                    }
	                    else {
	                        writer.rawWrite("");
	                    }
	                }
	                writeTrimmedCurrentLine(pos, nextLineStart);
	                pos = nextLineStart;
	            }
	        }
	        else {
	            writer.write(currentSourceFile.text.substring(comment.pos, comment.end));
	        }
	        function writeTrimmedCurrentLine(pos, nextLineStart) {
	            var end = Math.min(comment.end, nextLineStart - 1);
	            var currentLineText = currentSourceFile.text.substring(pos, end).replace(/^\s+|\s+$/g, "");
	            if (currentLineText) {
	                writer.write(currentLineText);
	                if (end !== comment.end) {
	                    writer.writeLine();
	                }
	            }
	            else {
	                writer.writeLiteral(newLine);
	            }
	        }
	        function calculateIndent(pos, end) {
	            var currentLineIndent = 0;
	            for (; pos < end && ts.isWhiteSpace(currentSourceFile.text.charCodeAt(pos)); pos++) {
	                if (currentSourceFile.text.charCodeAt(pos) === 9) {
	                    currentLineIndent += getIndentSize() - (currentLineIndent % getIndentSize());
	                }
	                else {
	                    currentLineIndent++;
	                }
	            }
	            return currentLineIndent;
	        }
	    }
	    ts.writeCommentRange = writeCommentRange;
	    function modifierToFlag(token) {
	        switch (token) {
	            case 111: return 128;
	            case 110: return 16;
	            case 109: return 64;
	            case 108: return 32;
	            case 113: return 256;
	            case 80: return 1;
	            case 120: return 2;
	            case 72: return 32768;
	            case 75: return 1024;
	            case 116: return 512;
	        }
	        return 0;
	    }
	    ts.modifierToFlag = modifierToFlag;
	    function isLeftHandSideExpression(expr) {
	        if (expr) {
	            switch (expr.kind) {
	                case 164:
	                case 165:
	                case 167:
	                case 166:
	                case 231:
	                case 232:
	                case 168:
	                case 162:
	                case 170:
	                case 163:
	                case 184:
	                case 171:
	                case 67:
	                case 10:
	                case 8:
	                case 9:
	                case 11:
	                case 181:
	                case 82:
	                case 91:
	                case 95:
	                case 97:
	                case 93:
	                    return true;
	            }
	        }
	        return false;
	    }
	    ts.isLeftHandSideExpression = isLeftHandSideExpression;
	    function isAssignmentOperator(token) {
	        return token >= 55 && token <= 66;
	    }
	    ts.isAssignmentOperator = isAssignmentOperator;
	    function isExpressionWithTypeArgumentsInClassExtendsClause(node) {
	        return node.kind === 186 &&
	            node.parent.token === 81 &&
	            isClassLike(node.parent.parent);
	    }
	    ts.isExpressionWithTypeArgumentsInClassExtendsClause = isExpressionWithTypeArgumentsInClassExtendsClause;
	    function isSupportedExpressionWithTypeArguments(node) {
	        return isSupportedExpressionWithTypeArgumentsRest(node.expression);
	    }
	    ts.isSupportedExpressionWithTypeArguments = isSupportedExpressionWithTypeArguments;
	    function isSupportedExpressionWithTypeArgumentsRest(node) {
	        if (node.kind === 67) {
	            return true;
	        }
	        else if (node.kind === 164) {
	            return isSupportedExpressionWithTypeArgumentsRest(node.expression);
	        }
	        else {
	            return false;
	        }
	    }
	    function isRightSideOfQualifiedNameOrPropertyAccess(node) {
	        return (node.parent.kind === 133 && node.parent.right === node) ||
	            (node.parent.kind === 164 && node.parent.name === node);
	    }
	    ts.isRightSideOfQualifiedNameOrPropertyAccess = isRightSideOfQualifiedNameOrPropertyAccess;
	    function isEmptyObjectLiteralOrArrayLiteral(expression) {
	        var kind = expression.kind;
	        if (kind === 163) {
	            return expression.properties.length === 0;
	        }
	        if (kind === 162) {
	            return expression.elements.length === 0;
	        }
	        return false;
	    }
	    ts.isEmptyObjectLiteralOrArrayLiteral = isEmptyObjectLiteralOrArrayLiteral;
	    function getLocalSymbolForExportDefault(symbol) {
	        return symbol && symbol.valueDeclaration && (symbol.valueDeclaration.flags & 1024) ? symbol.valueDeclaration.localSymbol : undefined;
	    }
	    ts.getLocalSymbolForExportDefault = getLocalSymbolForExportDefault;
	    function isJavaScript(fileName) {
	        return ts.fileExtensionIs(fileName, ".js");
	    }
	    ts.isJavaScript = isJavaScript;
	    function isTsx(fileName) {
	        return ts.fileExtensionIs(fileName, ".tsx");
	    }
	    ts.isTsx = isTsx;
	    function getExpandedCharCodes(input) {
	        var output = [];
	        var length = input.length;
	        for (var i = 0; i < length; i++) {
	            var charCode = input.charCodeAt(i);
	            if (charCode < 0x80) {
	                output.push(charCode);
	            }
	            else if (charCode < 0x800) {
	                output.push((charCode >> 6) | 192);
	                output.push((charCode & 63) | 128);
	            }
	            else if (charCode < 0x10000) {
	                output.push((charCode >> 12) | 224);
	                output.push(((charCode >> 6) & 63) | 128);
	                output.push((charCode & 63) | 128);
	            }
	            else if (charCode < 0x20000) {
	                output.push((charCode >> 18) | 240);
	                output.push(((charCode >> 12) & 63) | 128);
	                output.push(((charCode >> 6) & 63) | 128);
	                output.push((charCode & 63) | 128);
	            }
	            else {
	                ts.Debug.assert(false, "Unexpected code point");
	            }
	        }
	        return output;
	    }
	    var base64Digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	    function convertToBase64(input) {
	        var result = "";
	        var charCodes = getExpandedCharCodes(input);
	        var i = 0;
	        var length = charCodes.length;
	        var byte1, byte2, byte3, byte4;
	        while (i < length) {
	            byte1 = charCodes[i] >> 2;
	            byte2 = (charCodes[i] & 3) << 4 | charCodes[i + 1] >> 4;
	            byte3 = (charCodes[i + 1] & 15) << 2 | charCodes[i + 2] >> 6;
	            byte4 = charCodes[i + 2] & 63;
	            if (i + 1 >= length) {
	                byte3 = byte4 = 64;
	            }
	            else if (i + 2 >= length) {
	                byte4 = 64;
	            }
	            result += base64Digits.charAt(byte1) + base64Digits.charAt(byte2) + base64Digits.charAt(byte3) + base64Digits.charAt(byte4);
	            i += 3;
	        }
	        return result;
	    }
	    ts.convertToBase64 = convertToBase64;
	    var carriageReturnLineFeed = "\r\n";
	    var lineFeed = "\n";
	    function getNewLineCharacter(options) {
	        if (options.newLine === 0) {
	            return carriageReturnLineFeed;
	        }
	        else if (options.newLine === 1) {
	            return lineFeed;
	        }
	        else if (ts.sys) {
	            return ts.sys.newLine;
	        }
	        return carriageReturnLineFeed;
	    }
	    ts.getNewLineCharacter = getNewLineCharacter;
	})(ts || (ts = {}));
	var ts;
	(function (ts) {
	    function getDefaultLibFileName(options) {
	        return options.target === 2 ? "lib.es6.d.ts" : "lib.d.ts";
	    }
	    ts.getDefaultLibFileName = getDefaultLibFileName;
	    function textSpanEnd(span) {
	        return span.start + span.length;
	    }
	    ts.textSpanEnd = textSpanEnd;
	    function textSpanIsEmpty(span) {
	        return span.length === 0;
	    }
	    ts.textSpanIsEmpty = textSpanIsEmpty;
	    function textSpanContainsPosition(span, position) {
	        return position >= span.start && position < textSpanEnd(span);
	    }
	    ts.textSpanContainsPosition = textSpanContainsPosition;
	    function textSpanContainsTextSpan(span, other) {
	        return other.start >= span.start && textSpanEnd(other) <= textSpanEnd(span);
	    }
	    ts.textSpanContainsTextSpan = textSpanContainsTextSpan;
	    function textSpanOverlapsWith(span, other) {
	        var overlapStart = Math.max(span.start, other.start);
	        var overlapEnd = Math.min(textSpanEnd(span), textSpanEnd(other));
	        return overlapStart < overlapEnd;
	    }
	    ts.textSpanOverlapsWith = textSpanOverlapsWith;
	    function textSpanOverlap(span1, span2) {
	        var overlapStart = Math.max(span1.start, span2.start);
	        var overlapEnd = Math.min(textSpanEnd(span1), textSpanEnd(span2));
	        if (overlapStart < overlapEnd) {
	            return createTextSpanFromBounds(overlapStart, overlapEnd);
	        }
	        return undefined;
	    }
	    ts.textSpanOverlap = textSpanOverlap;
	    function textSpanIntersectsWithTextSpan(span, other) {
	        return other.start <= textSpanEnd(span) && textSpanEnd(other) >= span.start;
	    }
	    ts.textSpanIntersectsWithTextSpan = textSpanIntersectsWithTextSpan;
	    function textSpanIntersectsWith(span, start, length) {
	        var end = start + length;
	        return start <= textSpanEnd(span) && end >= span.start;
	    }
	    ts.textSpanIntersectsWith = textSpanIntersectsWith;
	    function decodedTextSpanIntersectsWith(start1, length1, start2, length2) {
	        var end1 = start1 + length1;
	        var end2 = start2 + length2;
	        return start2 <= end1 && end2 >= start1;
	    }
	    ts.decodedTextSpanIntersectsWith = decodedTextSpanIntersectsWith;
	    function textSpanIntersectsWithPosition(span, position) {
	        return position <= textSpanEnd(span) && position >= span.start;
	    }
	    ts.textSpanIntersectsWithPosition = textSpanIntersectsWithPosition;
	    function textSpanIntersection(span1, span2) {
	        var intersectStart = Math.max(span1.start, span2.start);
	        var intersectEnd = Math.min(textSpanEnd(span1), textSpanEnd(span2));
	        if (intersectStart <= intersectEnd) {
	            return createTextSpanFromBounds(intersectStart, intersectEnd);
	        }
	        return undefined;
	    }
	    ts.textSpanIntersection = textSpanIntersection;
	    function createTextSpan(start, length) {
	        if (start < 0) {
	            throw new Error("start < 0");
	        }
	        if (length < 0) {
	            throw new Error("length < 0");
	        }
	        return { start: start, length: length };
	    }
	    ts.createTextSpan = createTextSpan;
	    function createTextSpanFromBounds(start, end) {
	        return createTextSpan(start, end - start);
	    }
	    ts.createTextSpanFromBounds = createTextSpanFromBounds;
	    function textChangeRangeNewSpan(range) {
	        return createTextSpan(range.span.start, range.newLength);
	    }
	    ts.textChangeRangeNewSpan = textChangeRangeNewSpan;
	    function textChangeRangeIsUnchanged(range) {
	        return textSpanIsEmpty(range.span) && range.newLength === 0;
	    }
	    ts.textChangeRangeIsUnchanged = textChangeRangeIsUnchanged;
	    function createTextChangeRange(span, newLength) {
	        if (newLength < 0) {
	            throw new Error("newLength < 0");
	        }
	        return { span: span, newLength: newLength };
	    }
	    ts.createTextChangeRange = createTextChangeRange;
	    ts.unchangedTextChangeRange = createTextChangeRange(createTextSpan(0, 0), 0);
	    function collapseTextChangeRangesAcrossMultipleVersions(changes) {
	        if (changes.length === 0) {
	            return ts.unchangedTextChangeRange;
	        }
	        if (changes.length === 1) {
	            return changes[0];
	        }
	        var change0 = changes[0];
	        var oldStartN = change0.span.start;
	        var oldEndN = textSpanEnd(change0.span);
	        var newEndN = oldStartN + change0.newLength;
	        for (var i = 1; i < changes.length; i++) {
	            var nextChange = changes[i];
	            var oldStart1 = oldStartN;
	            var oldEnd1 = oldEndN;
	            var newEnd1 = newEndN;
	            var oldStart2 = nextChange.span.start;
	            var oldEnd2 = textSpanEnd(nextChange.span);
	            var newEnd2 = oldStart2 + nextChange.newLength;
	            oldStartN = Math.min(oldStart1, oldStart2);
	            oldEndN = Math.max(oldEnd1, oldEnd1 + (oldEnd2 - newEnd1));
	            newEndN = Math.max(newEnd2, newEnd2 + (newEnd1 - oldEnd2));
	        }
	        return createTextChangeRange(createTextSpanFromBounds(oldStartN, oldEndN), newEndN - oldStartN);
	    }
	    ts.collapseTextChangeRangesAcrossMultipleVersions = collapseTextChangeRangesAcrossMultipleVersions;
	    function getTypeParameterOwner(d) {
	        if (d && d.kind === 135) {
	            for (var current = d; current; current = current.parent) {
	                if (ts.isFunctionLike(current) || ts.isClassLike(current) || current.kind === 213) {
	                    return current;
	                }
	            }
	        }
	    }
	    ts.getTypeParameterOwner = getTypeParameterOwner;
	})(ts || (ts = {}));
	/// <reference path="scanner.ts"/>
	/// <reference path="utilities.ts"/>
	var ts;
	(function (ts) {
	    var nodeConstructors = new Array(270);
	    ts.parseTime = 0;
	    function getNodeConstructor(kind) {
	        return nodeConstructors[kind] || (nodeConstructors[kind] = ts.objectAllocator.getNodeConstructor(kind));
	    }
	    ts.getNodeConstructor = getNodeConstructor;
	    function createNode(kind) {
	        return new (getNodeConstructor(kind))();
	    }
	    ts.createNode = createNode;
	    function visitNode(cbNode, node) {
	        if (node) {
	            return cbNode(node);
	        }
	    }
	    function visitNodeArray(cbNodes, nodes) {
	        if (nodes) {
	            return cbNodes(nodes);
	        }
	    }
	    function visitEachNode(cbNode, nodes) {
	        if (nodes) {
	            for (var _i = 0; _i < nodes.length; _i++) {
	                var node = nodes[_i];
	                var result = cbNode(node);
	                if (result) {
	                    return result;
	                }
	            }
	        }
	    }
	    function forEachChild(node, cbNode, cbNodeArray) {
	        if (!node) {
	            return;
	        }
	        var visitNodes = cbNodeArray ? visitNodeArray : visitEachNode;
	        var cbNodes = cbNodeArray || cbNode;
	        switch (node.kind) {
	            case 133:
	                return visitNode(cbNode, node.left) ||
	                    visitNode(cbNode, node.right);
	            case 135:
	                return visitNode(cbNode, node.name) ||
	                    visitNode(cbNode, node.constraint) ||
	                    visitNode(cbNode, node.expression);
	            case 136:
	            case 139:
	            case 138:
	            case 243:
	            case 244:
	            case 209:
	            case 161:
	                return visitNodes(cbNodes, node.decorators) ||
	                    visitNodes(cbNodes, node.modifiers) ||
	                    visitNode(cbNode, node.propertyName) ||
	                    visitNode(cbNode, node.dotDotDotToken) ||
	                    visitNode(cbNode, node.name) ||
	                    visitNode(cbNode, node.questionToken) ||
	                    visitNode(cbNode, node.type) ||
	                    visitNode(cbNode, node.initializer);
	            case 150:
	            case 151:
	            case 145:
	            case 146:
	            case 147:
	                return visitNodes(cbNodes, node.decorators) ||
	                    visitNodes(cbNodes, node.modifiers) ||
	                    visitNodes(cbNodes, node.typeParameters) ||
	                    visitNodes(cbNodes, node.parameters) ||
	                    visitNode(cbNode, node.type);
	            case 141:
	            case 140:
	            case 142:
	            case 143:
	            case 144:
	            case 171:
	            case 211:
	            case 172:
	                return visitNodes(cbNodes, node.decorators) ||
	                    visitNodes(cbNodes, node.modifiers) ||
	                    visitNode(cbNode, node.asteriskToken) ||
	                    visitNode(cbNode, node.name) ||
	                    visitNode(cbNode, node.questionToken) ||
	                    visitNodes(cbNodes, node.typeParameters) ||
	                    visitNodes(cbNodes, node.parameters) ||
	                    visitNode(cbNode, node.type) ||
	                    visitNode(cbNode, node.equalsGreaterThanToken) ||
	                    visitNode(cbNode, node.body);
	            case 149:
	                return visitNode(cbNode, node.typeName) ||
	                    visitNodes(cbNodes, node.typeArguments);
	            case 148:
	                return visitNode(cbNode, node.parameterName) ||
	                    visitNode(cbNode, node.type);
	            case 152:
	                return visitNode(cbNode, node.exprName);
	            case 153:
	                return visitNodes(cbNodes, node.members);
	            case 154:
	                return visitNode(cbNode, node.elementType);
	            case 155:
	                return visitNodes(cbNodes, node.elementTypes);
	            case 156:
	            case 157:
	                return visitNodes(cbNodes, node.types);
	            case 158:
	                return visitNode(cbNode, node.type);
	            case 159:
	            case 160:
	                return visitNodes(cbNodes, node.elements);
	            case 162:
	                return visitNodes(cbNodes, node.elements);
	            case 163:
	                return visitNodes(cbNodes, node.properties);
	            case 164:
	                return visitNode(cbNode, node.expression) ||
	                    visitNode(cbNode, node.dotToken) ||
	                    visitNode(cbNode, node.name);
	            case 165:
	                return visitNode(cbNode, node.expression) ||
	                    visitNode(cbNode, node.argumentExpression);
	            case 166:
	            case 167:
	                return visitNode(cbNode, node.expression) ||
	                    visitNodes(cbNodes, node.typeArguments) ||
	                    visitNodes(cbNodes, node.arguments);
	            case 168:
	                return visitNode(cbNode, node.tag) ||
	                    visitNode(cbNode, node.template);
	            case 169:
	                return visitNode(cbNode, node.type) ||
	                    visitNode(cbNode, node.expression);
	            case 170:
	                return visitNode(cbNode, node.expression);
	            case 173:
	                return visitNode(cbNode, node.expression);
	            case 174:
	                return visitNode(cbNode, node.expression);
	            case 175:
	                return visitNode(cbNode, node.expression);
	            case 177:
	                return visitNode(cbNode, node.operand);
	            case 182:
	                return visitNode(cbNode, node.asteriskToken) ||
	                    visitNode(cbNode, node.expression);
	            case 176:
	                return visitNode(cbNode, node.expression);
	            case 178:
	                return visitNode(cbNode, node.operand);
	            case 179:
	                return visitNode(cbNode, node.left) ||
	                    visitNode(cbNode, node.operatorToken) ||
	                    visitNode(cbNode, node.right);
	            case 187:
	                return visitNode(cbNode, node.expression) ||
	                    visitNode(cbNode, node.type);
	            case 180:
	                return visitNode(cbNode, node.condition) ||
	                    visitNode(cbNode, node.questionToken) ||
	                    visitNode(cbNode, node.whenTrue) ||
	                    visitNode(cbNode, node.colonToken) ||
	                    visitNode(cbNode, node.whenFalse);
	            case 183:
	                return visitNode(cbNode, node.expression);
	            case 190:
	            case 217:
	                return visitNodes(cbNodes, node.statements);
	            case 246:
	                return visitNodes(cbNodes, node.statements) ||
	                    visitNode(cbNode, node.endOfFileToken);
	            case 191:
	                return visitNodes(cbNodes, node.decorators) ||
	                    visitNodes(cbNodes, node.modifiers) ||
	                    visitNode(cbNode, node.declarationList);
	            case 210:
	                return visitNodes(cbNodes, node.declarations);
	            case 193:
	                return visitNode(cbNode, node.expression);
	            case 194:
	                return visitNode(cbNode, node.expression) ||
	                    visitNode(cbNode, node.thenStatement) ||
	                    visitNode(cbNode, node.elseStatement);
	            case 195:
	                return visitNode(cbNode, node.statement) ||
	                    visitNode(cbNode, node.expression);
	            case 196:
	                return visitNode(cbNode, node.expression) ||
	                    visitNode(cbNode, node.statement);
	            case 197:
	                return visitNode(cbNode, node.initializer) ||
	                    visitNode(cbNode, node.condition) ||
	                    visitNode(cbNode, node.incrementor) ||
	                    visitNode(cbNode, node.statement);
	            case 198:
	                return visitNode(cbNode, node.initializer) ||
	                    visitNode(cbNode, node.expression) ||
	                    visitNode(cbNode, node.statement);
	            case 199:
	                return visitNode(cbNode, node.initializer) ||
	                    visitNode(cbNode, node.expression) ||
	                    visitNode(cbNode, node.statement);
	            case 200:
	            case 201:
	                return visitNode(cbNode, node.label);
	            case 202:
	                return visitNode(cbNode, node.expression);
	            case 203:
	                return visitNode(cbNode, node.expression) ||
	                    visitNode(cbNode, node.statement);
	            case 204:
	                return visitNode(cbNode, node.expression) ||
	                    visitNode(cbNode, node.caseBlock);
	            case 218:
	                return visitNodes(cbNodes, node.clauses);
	            case 239:
	                return visitNode(cbNode, node.expression) ||
	                    visitNodes(cbNodes, node.statements);
	            case 240:
	                return visitNodes(cbNodes, node.statements);
	            case 205:
	                return visitNode(cbNode, node.label) ||
	                    visitNode(cbNode, node.statement);
	            case 206:
	                return visitNode(cbNode, node.expression);
	            case 207:
	                return visitNode(cbNode, node.tryBlock) ||
	                    visitNode(cbNode, node.catchClause) ||
	                    visitNode(cbNode, node.finallyBlock);
	            case 242:
	                return visitNode(cbNode, node.variableDeclaration) ||
	                    visitNode(cbNode, node.block);
	            case 137:
	                return visitNode(cbNode, node.expression);
	            case 212:
	            case 184:
	                return visitNodes(cbNodes, node.decorators) ||
	                    visitNodes(cbNodes, node.modifiers) ||
	                    visitNode(cbNode, node.name) ||
	                    visitNodes(cbNodes, node.typeParameters) ||
	                    visitNodes(cbNodes, node.heritageClauses) ||
	                    visitNodes(cbNodes, node.members);
	            case 213:
	                return visitNodes(cbNodes, node.decorators) ||
	                    visitNodes(cbNodes, node.modifiers) ||
	                    visitNode(cbNode, node.name) ||
	                    visitNodes(cbNodes, node.typeParameters) ||
	                    visitNodes(cbNodes, node.heritageClauses) ||
	                    visitNodes(cbNodes, node.members);
	            case 214:
	                return visitNodes(cbNodes, node.decorators) ||
	                    visitNodes(cbNodes, node.modifiers) ||
	                    visitNode(cbNode, node.name) ||
	                    visitNodes(cbNodes, node.typeParameters) ||
	                    visitNode(cbNode, node.type);
	            case 215:
	                return visitNodes(cbNodes, node.decorators) ||
	                    visitNodes(cbNodes, node.modifiers) ||
	                    visitNode(cbNode, node.name) ||
	                    visitNodes(cbNodes, node.members);
	            case 245:
	                return visitNode(cbNode, node.name) ||
	                    visitNode(cbNode, node.initializer);
	            case 216:
	                return visitNodes(cbNodes, node.decorators) ||
	                    visitNodes(cbNodes, node.modifiers) ||
	                    visitNode(cbNode, node.name) ||
	                    visitNode(cbNode, node.body);
	            case 219:
	                return visitNodes(cbNodes, node.decorators) ||
	                    visitNodes(cbNodes, node.modifiers) ||
	                    visitNode(cbNode, node.name) ||
	                    visitNode(cbNode, node.moduleReference);
	            case 220:
	                return visitNodes(cbNodes, node.decorators) ||
	                    visitNodes(cbNodes, node.modifiers) ||
	                    visitNode(cbNode, node.importClause) ||
	                    visitNode(cbNode, node.moduleSpecifier);
	            case 221:
	                return visitNode(cbNode, node.name) ||
	                    visitNode(cbNode, node.namedBindings);
	            case 222:
	                return visitNode(cbNode, node.name);
	            case 223:
	            case 227:
	                return visitNodes(cbNodes, node.elements);
	            case 226:
	                return visitNodes(cbNodes, node.decorators) ||
	                    visitNodes(cbNodes, node.modifiers) ||
	                    visitNode(cbNode, node.exportClause) ||
	                    visitNode(cbNode, node.moduleSpecifier);
	            case 224:
	            case 228:
	                return visitNode(cbNode, node.propertyName) ||
	                    visitNode(cbNode, node.name);
	            case 225:
	                return visitNodes(cbNodes, node.decorators) ||
	                    visitNodes(cbNodes, node.modifiers) ||
	                    visitNode(cbNode, node.expression);
	            case 181:
	                return visitNode(cbNode, node.head) || visitNodes(cbNodes, node.templateSpans);
	            case 188:
	                return visitNode(cbNode, node.expression) || visitNode(cbNode, node.literal);
	            case 134:
	                return visitNode(cbNode, node.expression);
	            case 241:
	                return visitNodes(cbNodes, node.types);
	            case 186:
	                return visitNode(cbNode, node.expression) ||
	                    visitNodes(cbNodes, node.typeArguments);
	            case 230:
	                return visitNode(cbNode, node.expression);
	            case 229:
	                return visitNodes(cbNodes, node.decorators);
	            case 231:
	                return visitNode(cbNode, node.openingElement) ||
	                    visitNodes(cbNodes, node.children) ||
	                    visitNode(cbNode, node.closingElement);
	            case 232:
	            case 233:
	                return visitNode(cbNode, node.tagName) ||
	                    visitNodes(cbNodes, node.attributes);
	            case 236:
	                return visitNode(cbNode, node.name) ||
	                    visitNode(cbNode, node.initializer);
	            case 237:
	                return visitNode(cbNode, node.expression);
	            case 238:
	                return visitNode(cbNode, node.expression);
	            case 235:
	                return visitNode(cbNode, node.tagName);
	            case 247:
	                return visitNode(cbNode, node.type);
	            case 251:
	                return visitNodes(cbNodes, node.types);
	            case 252:
	                return visitNodes(cbNodes, node.types);
	            case 250:
	                return visitNode(cbNode, node.elementType);
	            case 254:
	                return visitNode(cbNode, node.type);
	            case 253:
	                return visitNode(cbNode, node.type);
	            case 255:
	                return visitNodes(cbNodes, node.members);
	            case 257:
	                return visitNode(cbNode, node.name) ||
	                    visitNodes(cbNodes, node.typeArguments);
	            case 258:
	                return visitNode(cbNode, node.type);
	            case 259:
	                return visitNodes(cbNodes, node.parameters) ||
	                    visitNode(cbNode, node.type);
	            case 260:
	                return visitNode(cbNode, node.type);
	            case 261:
	                return visitNode(cbNode, node.type);
	            case 262:
	                return visitNode(cbNode, node.type);
	            case 256:
	                return visitNode(cbNode, node.name) ||
	                    visitNode(cbNode, node.type);
	            case 263:
	                return visitNodes(cbNodes, node.tags);
	            case 265:
	                return visitNode(cbNode, node.preParameterName) ||
	                    visitNode(cbNode, node.typeExpression) ||
	                    visitNode(cbNode, node.postParameterName);
	            case 266:
	                return visitNode(cbNode, node.typeExpression);
	            case 267:
	                return visitNode(cbNode, node.typeExpression);
	            case 268:
	                return visitNodes(cbNodes, node.typeParameters);
	        }
	    }
	    ts.forEachChild = forEachChild;
	    function createSourceFile(fileName, sourceText, languageVersion, setParentNodes) {
	        if (setParentNodes === void 0) { setParentNodes = false; }
	        var start = new Date().getTime();
	        var result = Parser.parseSourceFile(fileName, sourceText, languageVersion, undefined, setParentNodes);
	        ts.parseTime += new Date().getTime() - start;
	        return result;
	    }
	    ts.createSourceFile = createSourceFile;
	    function updateSourceFile(sourceFile, newText, textChangeRange, aggressiveChecks) {
	        return IncrementalParser.updateSourceFile(sourceFile, newText, textChangeRange, aggressiveChecks);
	    }
	    ts.updateSourceFile = updateSourceFile;
	    function parseIsolatedJSDocComment(content, start, length) {
	        return Parser.JSDocParser.parseIsolatedJSDocComment(content, start, length);
	    }
	    ts.parseIsolatedJSDocComment = parseIsolatedJSDocComment;
	    function parseJSDocTypeExpressionForTests(content, start, length) {
	        return Parser.JSDocParser.parseJSDocTypeExpressionForTests(content, start, length);
	    }
	    ts.parseJSDocTypeExpressionForTests = parseJSDocTypeExpressionForTests;
	    var Parser;
	    (function (Parser) {
	        var scanner = ts.createScanner(2, true);
	        var disallowInAndDecoratorContext = 1 | 4;
	        var sourceFile;
	        var parseDiagnostics;
	        var syntaxCursor;
	        var token;
	        var sourceText;
	        var nodeCount;
	        var identifiers;
	        var identifierCount;
	        var parsingContext;
	        var contextFlags;
	        var parseErrorBeforeNextFinishedNode = false;
	        function parseSourceFile(fileName, _sourceText, languageVersion, _syntaxCursor, setParentNodes) {
	            initializeState(fileName, _sourceText, languageVersion, _syntaxCursor);
	            var result = parseSourceFileWorker(fileName, languageVersion, setParentNodes);
	            clearState();
	            return result;
	        }
	        Parser.parseSourceFile = parseSourceFile;
	        function initializeState(fileName, _sourceText, languageVersion, _syntaxCursor) {
	            sourceText = _sourceText;
	            syntaxCursor = _syntaxCursor;
	            parseDiagnostics = [];
	            parsingContext = 0;
	            identifiers = {};
	            identifierCount = 0;
	            nodeCount = 0;
	            contextFlags = ts.isJavaScript(fileName) ? 32 : 0;
	            parseErrorBeforeNextFinishedNode = false;
	            scanner.setText(sourceText);
	            scanner.setOnError(scanError);
	            scanner.setScriptTarget(languageVersion);
	            scanner.setLanguageVariant(ts.isTsx(fileName) ? 1 : 0);
	        }
	        function clearState() {
	            scanner.setText("");
	            scanner.setOnError(undefined);
	            parseDiagnostics = undefined;
	            sourceFile = undefined;
	            identifiers = undefined;
	            syntaxCursor = undefined;
	            sourceText = undefined;
	        }
	        function parseSourceFileWorker(fileName, languageVersion, setParentNodes) {
	            sourceFile = createSourceFile(fileName, languageVersion);
	            token = nextToken();
	            processReferenceComments(sourceFile);
	            sourceFile.statements = parseList(0, parseStatement);
	            ts.Debug.assert(token === 1);
	            sourceFile.endOfFileToken = parseTokenNode();
	            setExternalModuleIndicator(sourceFile);
	            sourceFile.nodeCount = nodeCount;
	            sourceFile.identifierCount = identifierCount;
	            sourceFile.identifiers = identifiers;
	            sourceFile.parseDiagnostics = parseDiagnostics;
	            if (setParentNodes) {
	                fixupParentReferences(sourceFile);
	            }
	            if (ts.isJavaScript(fileName)) {
	                addJSDocComments();
	            }
	            return sourceFile;
	        }
	        function addJSDocComments() {
	            forEachChild(sourceFile, visit);
	            return;
	            function visit(node) {
	                switch (node.kind) {
	                    case 191:
	                    case 211:
	                    case 136:
	                        addJSDocComment(node);
	                }
	                forEachChild(node, visit);
	            }
	        }
	        function addJSDocComment(node) {
	            var comments = ts.getLeadingCommentRangesOfNode(node, sourceFile);
	            if (comments) {
	                for (var _i = 0; _i < comments.length; _i++) {
	                    var comment = comments[_i];
	                    var jsDocComment = JSDocParser.parseJSDocComment(node, comment.pos, comment.end - comment.pos);
	                    if (jsDocComment) {
	                        node.jsDocComment = jsDocComment;
	                    }
	                }
	            }
	        }
	        function fixupParentReferences(sourceFile) {
	            // normally parent references are set during binding. However, for clients that only need
	            // a syntax tree, and no semantic features, then the binding process is an unnecessary
	            // overhead.  This functions allows us to set all the parents, without all the expense of
	            // binding.
	            var parent = sourceFile;
	            forEachChild(sourceFile, visitNode);
	            return;
	            function visitNode(n) {
	                if (n.parent !== parent) {
	                    n.parent = parent;
	                    var saveParent = parent;
	                    parent = n;
	                    forEachChild(n, visitNode);
	                    parent = saveParent;
	                }
	            }
	        }
	        Parser.fixupParentReferences = fixupParentReferences;
	        function createSourceFile(fileName, languageVersion) {
	            var sourceFile = createNode(246, 0);
	            sourceFile.pos = 0;
	            sourceFile.end = sourceText.length;
	            sourceFile.text = sourceText;
	            sourceFile.bindDiagnostics = [];
	            sourceFile.languageVersion = languageVersion;
	            sourceFile.fileName = ts.normalizePath(fileName);
	            sourceFile.flags = ts.fileExtensionIs(sourceFile.fileName, ".d.ts") ? 8192 : 0;
	            sourceFile.languageVariant = ts.isTsx(sourceFile.fileName) ? 1 : 0;
	            return sourceFile;
	        }
	        function setContextFlag(val, flag) {
	            if (val) {
	                contextFlags |= flag;
	            }
	            else {
	                contextFlags &= ~flag;
	            }
	        }
	        function setDisallowInContext(val) {
	            setContextFlag(val, 1);
	        }
	        function setYieldContext(val) {
	            setContextFlag(val, 2);
	        }
	        function setDecoratorContext(val) {
	            setContextFlag(val, 4);
	        }
	        function setAwaitContext(val) {
	            setContextFlag(val, 8);
	        }
	        function doOutsideOfContext(context, func) {
	            var contextFlagsToClear = context & contextFlags;
	            if (contextFlagsToClear) {
	                setContextFlag(false, contextFlagsToClear);
	                var result = func();
	                setContextFlag(true, contextFlagsToClear);
	                return result;
	            }
	            return func();
	        }
	        function doInsideOfContext(context, func) {
	            var contextFlagsToSet = context & ~contextFlags;
	            if (contextFlagsToSet) {
	                setContextFlag(true, contextFlagsToSet);
	                var result = func();
	                setContextFlag(false, contextFlagsToSet);
	                return result;
	            }
	            return func();
	        }
	        function allowInAnd(func) {
	            return doOutsideOfContext(1, func);
	        }
	        function disallowInAnd(func) {
	            return doInsideOfContext(1, func);
	        }
	        function doInYieldContext(func) {
	            return doInsideOfContext(2, func);
	        }
	        function doOutsideOfYieldContext(func) {
	            return doOutsideOfContext(2, func);
	        }
	        function doInDecoratorContext(func) {
	            return doInsideOfContext(4, func);
	        }
	        function doInAwaitContext(func) {
	            return doInsideOfContext(8, func);
	        }
	        function doOutsideOfAwaitContext(func) {
	            return doOutsideOfContext(8, func);
	        }
	        function doInYieldAndAwaitContext(func) {
	            return doInsideOfContext(2 | 8, func);
	        }
	        function doOutsideOfYieldAndAwaitContext(func) {
	            return doOutsideOfContext(2 | 8, func);
	        }
	        function inContext(flags) {
	            return (contextFlags & flags) !== 0;
	        }
	        function inYieldContext() {
	            return inContext(2);
	        }
	        function inDisallowInContext() {
	            return inContext(1);
	        }
	        function inDecoratorContext() {
	            return inContext(4);
	        }
	        function inAwaitContext() {
	            return inContext(8);
	        }
	        function parseErrorAtCurrentToken(message, arg0) {
	            var start = scanner.getTokenPos();
	            var length = scanner.getTextPos() - start;
	            parseErrorAtPosition(start, length, message, arg0);
	        }
	        function parseErrorAtPosition(start, length, message, arg0) {
	            var lastError = ts.lastOrUndefined(parseDiagnostics);
	            if (!lastError || start !== lastError.start) {
	                parseDiagnostics.push(ts.createFileDiagnostic(sourceFile, start, length, message, arg0));
	            }
	            parseErrorBeforeNextFinishedNode = true;
	        }
	        function scanError(message, length) {
	            var pos = scanner.getTextPos();
	            parseErrorAtPosition(pos, length || 0, message);
	        }
	        function getNodePos() {
	            return scanner.getStartPos();
	        }
	        function getNodeEnd() {
	            return scanner.getStartPos();
	        }
	        function nextToken() {
	            return token = scanner.scan();
	        }
	        function getTokenPos(pos) {
	            return ts.skipTrivia(sourceText, pos);
	        }
	        function reScanGreaterToken() {
	            return token = scanner.reScanGreaterToken();
	        }
	        function reScanSlashToken() {
	            return token = scanner.reScanSlashToken();
	        }
	        function reScanTemplateToken() {
	            return token = scanner.reScanTemplateToken();
	        }
	        function scanJsxIdentifier() {
	            return token = scanner.scanJsxIdentifier();
	        }
	        function scanJsxText() {
	            return token = scanner.scanJsxToken();
	        }
	        function speculationHelper(callback, isLookAhead) {
	            var saveToken = token;
	            var saveParseDiagnosticsLength = parseDiagnostics.length;
	            var saveParseErrorBeforeNextFinishedNode = parseErrorBeforeNextFinishedNode;
	            var saveContextFlags = contextFlags;
	            var result = isLookAhead
	                ? scanner.lookAhead(callback)
	                : scanner.tryScan(callback);
	            ts.Debug.assert(saveContextFlags === contextFlags);
	            if (!result || isLookAhead) {
	                token = saveToken;
	                parseDiagnostics.length = saveParseDiagnosticsLength;
	                parseErrorBeforeNextFinishedNode = saveParseErrorBeforeNextFinishedNode;
	            }
	            return result;
	        }
	        function lookAhead(callback) {
	            return speculationHelper(callback, true);
	        }
	        function tryParse(callback) {
	            return speculationHelper(callback, false);
	        }
	        function isIdentifier() {
	            if (token === 67) {
	                return true;
	            }
	            if (token === 112 && inYieldContext()) {
	                return false;
	            }
	            if (token === 117 && inAwaitContext()) {
	                return false;
	            }
	            return token > 103;
	        }
	        function parseExpected(kind, diagnosticMessage, shouldAdvance) {
	            if (shouldAdvance === void 0) { shouldAdvance = true; }
	            if (token === kind) {
	                if (shouldAdvance) {
	                    nextToken();
	                }
	                return true;
	            }
	            if (diagnosticMessage) {
	                parseErrorAtCurrentToken(diagnosticMessage);
	            }
	            else {
	                parseErrorAtCurrentToken(ts.Diagnostics._0_expected, ts.tokenToString(kind));
	            }
	            return false;
	        }
	        function parseOptional(t) {
	            if (token === t) {
	                nextToken();
	                return true;
	            }
	            return false;
	        }
	        function parseOptionalToken(t) {
	            if (token === t) {
	                return parseTokenNode();
	            }
	            return undefined;
	        }
	        function parseExpectedToken(t, reportAtCurrentPosition, diagnosticMessage, arg0) {
	            return parseOptionalToken(t) ||
	                createMissingNode(t, reportAtCurrentPosition, diagnosticMessage, arg0);
	        }
	        function parseTokenNode() {
	            var node = createNode(token);
	            nextToken();
	            return finishNode(node);
	        }
	        function canParseSemicolon() {
	            if (token === 23) {
	                return true;
	            }
	            return token === 16 || token === 1 || scanner.hasPrecedingLineBreak();
	        }
	        function parseSemicolon() {
	            if (canParseSemicolon()) {
	                if (token === 23) {
	                    nextToken();
	                }
	                return true;
	            }
	            else {
	                return parseExpected(23);
	            }
	        }
	        function createNode(kind, pos) {
	            nodeCount++;
	            var node = new (nodeConstructors[kind] || (nodeConstructors[kind] = ts.objectAllocator.getNodeConstructor(kind)))();
	            if (!(pos >= 0)) {
	                pos = scanner.getStartPos();
	            }
	            node.pos = pos;
	            node.end = pos;
	            return node;
	        }
	        function finishNode(node, end) {
	            node.end = end === undefined ? scanner.getStartPos() : end;
	            if (contextFlags) {
	                node.parserContextFlags = contextFlags;
	            }
	            if (parseErrorBeforeNextFinishedNode) {
	                parseErrorBeforeNextFinishedNode = false;
	                node.parserContextFlags |= 16;
	            }
	            return node;
	        }
	        function createMissingNode(kind, reportAtCurrentPosition, diagnosticMessage, arg0) {
	            if (reportAtCurrentPosition) {
	                parseErrorAtPosition(scanner.getStartPos(), 0, diagnosticMessage, arg0);
	            }
	            else {
	                parseErrorAtCurrentToken(diagnosticMessage, arg0);
	            }
	            var result = createNode(kind, scanner.getStartPos());
	            result.text = "";
	            return finishNode(result);
	        }
	        function internIdentifier(text) {
	            text = ts.escapeIdentifier(text);
	            return ts.hasProperty(identifiers, text) ? identifiers[text] : (identifiers[text] = text);
	        }
	        function createIdentifier(isIdentifier, diagnosticMessage) {
	            identifierCount++;
	            if (isIdentifier) {
	                var node = createNode(67);
	                if (token !== 67) {
	                    node.originalKeywordKind = token;
	                }
	                node.text = internIdentifier(scanner.getTokenValue());
	                nextToken();
	                return finishNode(node);
	            }
	            return createMissingNode(67, false, diagnosticMessage || ts.Diagnostics.Identifier_expected);
	        }
	        function parseIdentifier(diagnosticMessage) {
	            return createIdentifier(isIdentifier(), diagnosticMessage);
	        }
	        function parseIdentifierName() {
	            return createIdentifier(isIdentifierOrKeyword());
	        }
	        function isLiteralPropertyName() {
	            return isIdentifierOrKeyword() ||
	                token === 9 ||
	                token === 8;
	        }
	        function parsePropertyNameWorker(allowComputedPropertyNames) {
	            if (token === 9 || token === 8) {
	                return parseLiteralNode(true);
	            }
	            if (allowComputedPropertyNames && token === 19) {
	                return parseComputedPropertyName();
	            }
	            return parseIdentifierName();
	        }
	        function parsePropertyName() {
	            return parsePropertyNameWorker(true);
	        }
	        function parseSimplePropertyName() {
	            return parsePropertyNameWorker(false);
	        }
	        function isSimplePropertyName() {
	            return token === 9 || token === 8 || isIdentifierOrKeyword();
	        }
	        function parseComputedPropertyName() {
	            var node = createNode(134);
	            parseExpected(19);
	            node.expression = allowInAnd(parseExpression);
	            parseExpected(20);
	            return finishNode(node);
	        }
	        function parseContextualModifier(t) {
	            return token === t && tryParse(nextTokenCanFollowModifier);
	        }
	        function nextTokenCanFollowModifier() {
	            if (token === 72) {
	                return nextToken() === 79;
	            }
	            if (token === 80) {
	                nextToken();
	                if (token === 75) {
	                    return lookAhead(nextTokenIsClassOrFunction);
	                }
	                return token !== 37 && token !== 15 && canFollowModifier();
	            }
	            if (token === 75) {
	                return nextTokenIsClassOrFunction();
	            }
	            nextToken();
	            return canFollowModifier();
	        }
	        function parseAnyContextualModifier() {
	            return ts.isModifier(token) && tryParse(nextTokenCanFollowModifier);
	        }
	        function canFollowModifier() {
	            return token === 19
	                || token === 15
	                || token === 37
	                || isLiteralPropertyName();
	        }
	        function nextTokenIsClassOrFunction() {
	            nextToken();
	            return token === 71 || token === 85;
	        }
	        function isListElement(parsingContext, inErrorRecovery) {
	            var node = currentNode(parsingContext);
	            if (node) {
	                return true;
	            }
	            switch (parsingContext) {
	                case 0:
	                case 1:
	                case 3:
	                    return !(token === 23 && inErrorRecovery) && isStartOfStatement();
	                case 2:
	                    return token === 69 || token === 75;
	                case 4:
	                    return isStartOfTypeMember();
	                case 5:
	                    return lookAhead(isClassMemberStart) || (token === 23 && !inErrorRecovery);
	                case 6:
	                    return token === 19 || isLiteralPropertyName();
	                case 12:
	                    return token === 19 || token === 37 || isLiteralPropertyName();
	                case 9:
	                    return isLiteralPropertyName();
	                case 7:
	                    if (token === 15) {
	                        return lookAhead(isValidHeritageClauseObjectLiteral);
	                    }
	                    if (!inErrorRecovery) {
	                        return isStartOfLeftHandSideExpression() && !isHeritageClauseExtendsOrImplementsKeyword();
	                    }
	                    else {
	                        return isIdentifier() && !isHeritageClauseExtendsOrImplementsKeyword();
	                    }
	                case 8:
	                    return isIdentifierOrPattern();
	                case 10:
	                    return token === 24 || token === 22 || isIdentifierOrPattern();
	                case 17:
	                    return isIdentifier();
	                case 11:
	                case 15:
	                    return token === 24 || token === 22 || isStartOfExpression();
	                case 16:
	                    return isStartOfParameter();
	                case 18:
	                case 19:
	                    return token === 24 || isStartOfType();
	                case 20:
	                    return isHeritageClause();
	                case 21:
	                    return isIdentifierOrKeyword();
	                case 13:
	                    return isIdentifierOrKeyword() || token === 15;
	                case 14:
	                    return true;
	                case 22:
	                case 23:
	                case 25:
	                    return JSDocParser.isJSDocType();
	                case 24:
	                    return isSimplePropertyName();
	            }
	            ts.Debug.fail("Non-exhaustive case in 'isListElement'.");
	        }
	        function isValidHeritageClauseObjectLiteral() {
	            ts.Debug.assert(token === 15);
	            if (nextToken() === 16) {
	                var next = nextToken();
	                return next === 24 || next === 15 || next === 81 || next === 104;
	            }
	            return true;
	        }
	        function nextTokenIsIdentifier() {
	            nextToken();
	            return isIdentifier();
	        }
	        function nextTokenIsIdentifierOrKeyword() {
	            nextToken();
	            return isIdentifierOrKeyword();
	        }
	        function isHeritageClauseExtendsOrImplementsKeyword() {
	            if (token === 104 ||
	                token === 81) {
	                return lookAhead(nextTokenIsStartOfExpression);
	            }
	            return false;
	        }
	        function nextTokenIsStartOfExpression() {
	            nextToken();
	            return isStartOfExpression();
	        }
	        function isListTerminator(kind) {
	            if (token === 1) {
	                return true;
	            }
	            switch (kind) {
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                case 6:
	                case 12:
	                case 9:
	                case 21:
	                    return token === 16;
	                case 3:
	                    return token === 16 || token === 69 || token === 75;
	                case 7:
	                    return token === 15 || token === 81 || token === 104;
	                case 8:
	                    return isVariableDeclaratorListTerminator();
	                case 17:
	                    return token === 27 || token === 17 || token === 15 || token === 81 || token === 104;
	                case 11:
	                    return token === 18 || token === 23;
	                case 15:
	                case 19:
	                case 10:
	                    return token === 20;
	                case 16:
	                    return token === 18 || token === 20;
	                case 18:
	                    return token === 27 || token === 17;
	                case 20:
	                    return token === 15 || token === 16;
	                case 13:
	                    return token === 27 || token === 38;
	                case 14:
	                    return token === 25 && lookAhead(nextTokenIsSlash);
	                case 22:
	                    return token === 18 || token === 53 || token === 16;
	                case 23:
	                    return token === 27 || token === 16;
	                case 25:
	                    return token === 20 || token === 16;
	                case 24:
	                    return token === 16;
	            }
	        }
	        function isVariableDeclaratorListTerminator() {
	            if (canParseSemicolon()) {
	                return true;
	            }
	            if (isInOrOfKeyword(token)) {
	                return true;
	            }
	            if (token === 34) {
	                return true;
	            }
	            return false;
	        }
	        function isInSomeParsingContext() {
	            for (var kind = 0; kind < 26; kind++) {
	                if (parsingContext & (1 << kind)) {
	                    if (isListElement(kind, true) || isListTerminator(kind)) {
	                        return true;
	                    }
	                }
	            }
	            return false;
	        }
	        function parseList(kind, parseElement) {
	            var saveParsingContext = parsingContext;
	            parsingContext |= 1 << kind;
	            var result = [];
	            result.pos = getNodePos();
	            while (!isListTerminator(kind)) {
	                if (isListElement(kind, false)) {
	                    var element = parseListElement(kind, parseElement);
	                    result.push(element);
	                    continue;
	                }
	                if (abortParsingListOrMoveToNextToken(kind)) {
	                    break;
	                }
	            }
	            result.end = getNodeEnd();
	            parsingContext = saveParsingContext;
	            return result;
	        }
	        function parseListElement(parsingContext, parseElement) {
	            var node = currentNode(parsingContext);
	            if (node) {
	                return consumeNode(node);
	            }
	            return parseElement();
	        }
	        function currentNode(parsingContext) {
	            if (parseErrorBeforeNextFinishedNode) {
	                return undefined;
	            }
	            if (!syntaxCursor) {
	                return undefined;
	            }
	            var node = syntaxCursor.currentNode(scanner.getStartPos());
	            if (ts.nodeIsMissing(node)) {
	                return undefined;
	            }
	            if (node.intersectsChange) {
	                return undefined;
	            }
	            if (ts.containsParseError(node)) {
	                return undefined;
	            }
	            var nodeContextFlags = node.parserContextFlags & 31;
	            if (nodeContextFlags !== contextFlags) {
	                return undefined;
	            }
	            if (!canReuseNode(node, parsingContext)) {
	                return undefined;
	            }
	            return node;
	        }
	        function consumeNode(node) {
	            scanner.setTextPos(node.end);
	            nextToken();
	            return node;
	        }
	        function canReuseNode(node, parsingContext) {
	            switch (parsingContext) {
	                case 5:
	                    return isReusableClassMember(node);
	                case 2:
	                    return isReusableSwitchClause(node);
	                case 0:
	                case 1:
	                case 3:
	                    return isReusableStatement(node);
	                case 6:
	                    return isReusableEnumMember(node);
	                case 4:
	                    return isReusableTypeMember(node);
	                case 8:
	                    return isReusableVariableDeclaration(node);
	                case 16:
	                    return isReusableParameter(node);
	                case 20:
	                case 17:
	                case 19:
	                case 18:
	                case 11:
	                case 12:
	                case 7:
	                case 13:
	                case 14:
	            }
	            return false;
	        }
	        function isReusableClassMember(node) {
	            if (node) {
	                switch (node.kind) {
	                    case 142:
	                    case 147:
	                    case 143:
	                    case 144:
	                    case 139:
	                    case 189:
	                        return true;
	                    case 141:
	                        var methodDeclaration = node;
	                        var nameIsConstructor = methodDeclaration.name.kind === 67 &&
	                            methodDeclaration.name.originalKeywordKind === 119;
	                        return !nameIsConstructor;
	                }
	            }
	            return false;
	        }
	        function isReusableSwitchClause(node) {
	            if (node) {
	                switch (node.kind) {
	                    case 239:
	                    case 240:
	                        return true;
	                }
	            }
	            return false;
	        }
	        function isReusableStatement(node) {
	            if (node) {
	                switch (node.kind) {
	                    case 211:
	                    case 191:
	                    case 190:
	                    case 194:
	                    case 193:
	                    case 206:
	                    case 202:
	                    case 204:
	                    case 201:
	                    case 200:
	                    case 198:
	                    case 199:
	                    case 197:
	                    case 196:
	                    case 203:
	                    case 192:
	                    case 207:
	                    case 205:
	                    case 195:
	                    case 208:
	                    case 220:
	                    case 219:
	                    case 226:
	                    case 225:
	                    case 216:
	                    case 212:
	                    case 213:
	                    case 215:
	                    case 214:
	                        return true;
	                }
	            }
	            return false;
	        }
	        function isReusableEnumMember(node) {
	            return node.kind === 245;
	        }
	        function isReusableTypeMember(node) {
	            if (node) {
	                switch (node.kind) {
	                    case 146:
	                    case 140:
	                    case 147:
	                    case 138:
	                    case 145:
	                        return true;
	                }
	            }
	            return false;
	        }
	        function isReusableVariableDeclaration(node) {
	            if (node.kind !== 209) {
	                return false;
	            }
	            var variableDeclarator = node;
	            return variableDeclarator.initializer === undefined;
	        }
	        function isReusableParameter(node) {
	            if (node.kind !== 136) {
	                return false;
	            }
	            var parameter = node;
	            return parameter.initializer === undefined;
	        }
	        function abortParsingListOrMoveToNextToken(kind) {
	            parseErrorAtCurrentToken(parsingContextErrors(kind));
	            if (isInSomeParsingContext()) {
	                return true;
	            }
	            nextToken();
	            return false;
	        }
	        function parsingContextErrors(context) {
	            switch (context) {
	                case 0: return ts.Diagnostics.Declaration_or_statement_expected;
	                case 1: return ts.Diagnostics.Declaration_or_statement_expected;
	                case 2: return ts.Diagnostics.case_or_default_expected;
	                case 3: return ts.Diagnostics.Statement_expected;
	                case 4: return ts.Diagnostics.Property_or_signature_expected;
	                case 5: return ts.Diagnostics.Unexpected_token_A_constructor_method_accessor_or_property_was_expected;
	                case 6: return ts.Diagnostics.Enum_member_expected;
	                case 7: return ts.Diagnostics.Expression_expected;
	                case 8: return ts.Diagnostics.Variable_declaration_expected;
	                case 9: return ts.Diagnostics.Property_destructuring_pattern_expected;
	                case 10: return ts.Diagnostics.Array_element_destructuring_pattern_expected;
	                case 11: return ts.Diagnostics.Argument_expression_expected;
	                case 12: return ts.Diagnostics.Property_assignment_expected;
	                case 15: return ts.Diagnostics.Expression_or_comma_expected;
	                case 16: return ts.Diagnostics.Parameter_declaration_expected;
	                case 17: return ts.Diagnostics.Type_parameter_declaration_expected;
	                case 18: return ts.Diagnostics.Type_argument_expected;
	                case 19: return ts.Diagnostics.Type_expected;
	                case 20: return ts.Diagnostics.Unexpected_token_expected;
	                case 21: return ts.Diagnostics.Identifier_expected;
	                case 13: return ts.Diagnostics.Identifier_expected;
	                case 14: return ts.Diagnostics.Identifier_expected;
	                case 22: return ts.Diagnostics.Parameter_declaration_expected;
	                case 23: return ts.Diagnostics.Type_argument_expected;
	                case 25: return ts.Diagnostics.Type_expected;
	                case 24: return ts.Diagnostics.Property_assignment_expected;
	            }
	        }
	        ;
	        function parseDelimitedList(kind, parseElement, considerSemicolonAsDelimeter) {
	            var saveParsingContext = parsingContext;
	            parsingContext |= 1 << kind;
	            var result = [];
	            result.pos = getNodePos();
	            var commaStart = -1;
	            while (true) {
	                if (isListElement(kind, false)) {
	                    result.push(parseListElement(kind, parseElement));
	                    commaStart = scanner.getTokenPos();
	                    if (parseOptional(24)) {
	                        continue;
	                    }
	                    commaStart = -1;
	                    if (isListTerminator(kind)) {
	                        break;
	                    }
	                    parseExpected(24);
	                    if (considerSemicolonAsDelimeter && token === 23 && !scanner.hasPrecedingLineBreak()) {
	                        nextToken();
	                    }
	                    continue;
	                }
	                if (isListTerminator(kind)) {
	                    break;
	                }
	                if (abortParsingListOrMoveToNextToken(kind)) {
	                    break;
	                }
	            }
	            if (commaStart >= 0) {
	                result.hasTrailingComma = true;
	            }
	            result.end = getNodeEnd();
	            parsingContext = saveParsingContext;
	            return result;
	        }
	        function createMissingList() {
	            var pos = getNodePos();
	            var result = [];
	            result.pos = pos;
	            result.end = pos;
	            return result;
	        }
	        function parseBracketedList(kind, parseElement, open, close) {
	            if (parseExpected(open)) {
	                var result = parseDelimitedList(kind, parseElement);
	                parseExpected(close);
	                return result;
	            }
	            return createMissingList();
	        }
	        function parseEntityName(allowReservedWords, diagnosticMessage) {
	            var entity = parseIdentifier(diagnosticMessage);
	            while (parseOptional(21)) {
	                var node = createNode(133, entity.pos);
	                node.left = entity;
	                node.right = parseRightSideOfDot(allowReservedWords);
	                entity = finishNode(node);
	            }
	            return entity;
	        }
	        function parseRightSideOfDot(allowIdentifierNames) {
	            if (scanner.hasPrecedingLineBreak() && isIdentifierOrKeyword()) {
	                var matchesPattern = lookAhead(nextTokenIsIdentifierOrKeywordOnSameLine);
	                if (matchesPattern) {
	                    return createMissingNode(67, true, ts.Diagnostics.Identifier_expected);
	                }
	            }
	            return allowIdentifierNames ? parseIdentifierName() : parseIdentifier();
	        }
	        function parseTemplateExpression() {
	            var template = createNode(181);
	            template.head = parseLiteralNode();
	            ts.Debug.assert(template.head.kind === 12, "Template head has wrong token kind");
	            var templateSpans = [];
	            templateSpans.pos = getNodePos();
	            do {
	                templateSpans.push(parseTemplateSpan());
	            } while (ts.lastOrUndefined(templateSpans).literal.kind === 13);
	            templateSpans.end = getNodeEnd();
	            template.templateSpans = templateSpans;
	            return finishNode(template);
	        }
	        function parseTemplateSpan() {
	            var span = createNode(188);
	            span.expression = allowInAnd(parseExpression);
	            var literal;
	            if (token === 16) {
	                reScanTemplateToken();
	                literal = parseLiteralNode();
	            }
	            else {
	                literal = parseExpectedToken(14, false, ts.Diagnostics._0_expected, ts.tokenToString(16));
	            }
	            span.literal = literal;
	            return finishNode(span);
	        }
	        function parseLiteralNode(internName) {
	            var node = createNode(token);
	            var text = scanner.getTokenValue();
	            node.text = internName ? internIdentifier(text) : text;
	            if (scanner.hasExtendedUnicodeEscape()) {
	                node.hasExtendedUnicodeEscape = true;
	            }
	            if (scanner.isUnterminated()) {
	                node.isUnterminated = true;
	            }
	            var tokenPos = scanner.getTokenPos();
	            nextToken();
	            finishNode(node);
	            if (node.kind === 8
	                && sourceText.charCodeAt(tokenPos) === 48
	                && ts.isOctalDigit(sourceText.charCodeAt(tokenPos + 1))) {
	                node.flags |= 65536;
	            }
	            return node;
	        }
	        function parseTypeReferenceOrTypePredicate() {
	            var typeName = parseEntityName(false, ts.Diagnostics.Type_expected);
	            if (typeName.kind === 67 && token === 122 && !scanner.hasPrecedingLineBreak()) {
	                nextToken();
	                var node_1 = createNode(148, typeName.pos);
	                node_1.parameterName = typeName;
	                node_1.type = parseType();
	                return finishNode(node_1);
	            }
	            var node = createNode(149, typeName.pos);
	            node.typeName = typeName;
	            if (!scanner.hasPrecedingLineBreak() && token === 25) {
	                node.typeArguments = parseBracketedList(18, parseType, 25, 27);
	            }
	            return finishNode(node);
	        }
	        function parseTypeQuery() {
	            var node = createNode(152);
	            parseExpected(99);
	            node.exprName = parseEntityName(true);
	            return finishNode(node);
	        }
	        function parseTypeParameter() {
	            var node = createNode(135);
	            node.name = parseIdentifier();
	            if (parseOptional(81)) {
	                if (isStartOfType() || !isStartOfExpression()) {
	                    node.constraint = parseType();
	                }
	                else {
	                    node.expression = parseUnaryExpressionOrHigher();
	                }
	            }
	            return finishNode(node);
	        }
	        function parseTypeParameters() {
	            if (token === 25) {
	                return parseBracketedList(17, parseTypeParameter, 25, 27);
	            }
	        }
	        function parseParameterType() {
	            if (parseOptional(53)) {
	                return token === 9
	                    ? parseLiteralNode(true)
	                    : parseType();
	            }
	            return undefined;
	        }
	        function isStartOfParameter() {
	            return token === 22 || isIdentifierOrPattern() || ts.isModifier(token) || token === 54;
	        }
	        function setModifiers(node, modifiers) {
	            if (modifiers) {
	                node.flags |= modifiers.flags;
	                node.modifiers = modifiers;
	            }
	        }
	        function parseParameter() {
	            var node = createNode(136);
	            node.decorators = parseDecorators();
	            setModifiers(node, parseModifiers());
	            node.dotDotDotToken = parseOptionalToken(22);
	            node.name = parseIdentifierOrPattern();
	            if (ts.getFullWidth(node.name) === 0 && node.flags === 0 && ts.isModifier(token)) {
	                nextToken();
	            }
	            node.questionToken = parseOptionalToken(52);
	            node.type = parseParameterType();
	            node.initializer = parseBindingElementInitializer(true);
	            return finishNode(node);
	        }
	        function parseBindingElementInitializer(inParameter) {
	            return inParameter ? parseParameterInitializer() : parseNonParameterInitializer();
	        }
	        function parseParameterInitializer() {
	            return parseInitializer(true);
	        }
	        function fillSignature(returnToken, yieldContext, awaitContext, requireCompleteParameterList, signature) {
	            var returnTokenRequired = returnToken === 34;
	            signature.typeParameters = parseTypeParameters();
	            signature.parameters = parseParameterList(yieldContext, awaitContext, requireCompleteParameterList);
	            if (returnTokenRequired) {
	                parseExpected(returnToken);
	                signature.type = parseType();
	            }
	            else if (parseOptional(returnToken)) {
	                signature.type = parseType();
	            }
	        }
	        function parseParameterList(yieldContext, awaitContext, requireCompleteParameterList) {
	            if (parseExpected(17)) {
	                var savedYieldContext = inYieldContext();
	                var savedAwaitContext = inAwaitContext();
	                setYieldContext(yieldContext);
	                setAwaitContext(awaitContext);
	                var result = parseDelimitedList(16, parseParameter);
	                setYieldContext(savedYieldContext);
	                setAwaitContext(savedAwaitContext);
	                if (!parseExpected(18) && requireCompleteParameterList) {
	                    return undefined;
	                }
	                return result;
	            }
	            return requireCompleteParameterList ? undefined : createMissingList();
	        }
	        function parseTypeMemberSemicolon() {
	            if (parseOptional(24)) {
	                return;
	            }
	            parseSemicolon();
	        }
	        function parseSignatureMember(kind) {
	            var node = createNode(kind);
	            if (kind === 146) {
	                parseExpected(90);
	            }
	            fillSignature(53, false, false, false, node);
	            parseTypeMemberSemicolon();
	            return finishNode(node);
	        }
	        function isIndexSignature() {
	            if (token !== 19) {
	                return false;
	            }
	            return lookAhead(isUnambiguouslyIndexSignature);
	        }
	        function isUnambiguouslyIndexSignature() {
	            nextToken();
	            if (token === 22 || token === 20) {
	                return true;
	            }
	            if (ts.isModifier(token)) {
	                nextToken();
	                if (isIdentifier()) {
	                    return true;
	                }
	            }
	            else if (!isIdentifier()) {
	                return false;
	            }
	            else {
	                nextToken();
	            }
	            if (token === 53 || token === 24) {
	                return true;
	            }
	            if (token !== 52) {
	                return false;
	            }
	            nextToken();
	            return token === 53 || token === 24 || token === 20;
	        }
	        function parseIndexSignatureDeclaration(fullStart, decorators, modifiers) {
	            var node = createNode(147, fullStart);
	            node.decorators = decorators;
	            setModifiers(node, modifiers);
	            node.parameters = parseBracketedList(16, parseParameter, 19, 20);
	            node.type = parseTypeAnnotation();
	            parseTypeMemberSemicolon();
	            return finishNode(node);
	        }
	        function parsePropertyOrMethodSignature() {
	            var fullStart = scanner.getStartPos();
	            var name = parsePropertyName();
	            var questionToken = parseOptionalToken(52);
	            if (token === 17 || token === 25) {
	                var method = createNode(140, fullStart);
	                method.name = name;
	                method.questionToken = questionToken;
	                fillSignature(53, false, false, false, method);
	                parseTypeMemberSemicolon();
	                return finishNode(method);
	            }
	            else {
	                var property = createNode(138, fullStart);
	                property.name = name;
	                property.questionToken = questionToken;
	                property.type = parseTypeAnnotation();
	                parseTypeMemberSemicolon();
	                return finishNode(property);
	            }
	        }
	        function isStartOfTypeMember() {
	            switch (token) {
	                case 17:
	                case 25:
	                case 19:
	                    return true;
	                default:
	                    if (ts.isModifier(token)) {
	                        var result = lookAhead(isStartOfIndexSignatureDeclaration);
	                        if (result) {
	                            return result;
	                        }
	                    }
	                    return isLiteralPropertyName() && lookAhead(isTypeMemberWithLiteralPropertyName);
	            }
	        }
	        function isStartOfIndexSignatureDeclaration() {
	            while (ts.isModifier(token)) {
	                nextToken();
	            }
	            return isIndexSignature();
	        }
	        function isTypeMemberWithLiteralPropertyName() {
	            nextToken();
	            return token === 17 ||
	                token === 25 ||
	                token === 52 ||
	                token === 53 ||
	                canParseSemicolon();
	        }
	        function parseTypeMember() {
	            switch (token) {
	                case 17:
	                case 25:
	                    return parseSignatureMember(145);
	                case 19:
	                    return isIndexSignature()
	                        ? parseIndexSignatureDeclaration(scanner.getStartPos(), undefined, undefined)
	                        : parsePropertyOrMethodSignature();
	                case 90:
	                    if (lookAhead(isStartOfConstructSignature)) {
	                        return parseSignatureMember(146);
	                    }
	                case 9:
	                case 8:
	                    return parsePropertyOrMethodSignature();
	                default:
	                    if (ts.isModifier(token)) {
	                        var result = tryParse(parseIndexSignatureWithModifiers);
	                        if (result) {
	                            return result;
	                        }
	                    }
	                    if (isIdentifierOrKeyword()) {
	                        return parsePropertyOrMethodSignature();
	                    }
	            }
	        }
	        function parseIndexSignatureWithModifiers() {
	            var fullStart = scanner.getStartPos();
	            var decorators = parseDecorators();
	            var modifiers = parseModifiers();
	            return isIndexSignature()
	                ? parseIndexSignatureDeclaration(fullStart, decorators, modifiers)
	                : undefined;
	        }
	        function isStartOfConstructSignature() {
	            nextToken();
	            return token === 17 || token === 25;
	        }
	        function parseTypeLiteral() {
	            var node = createNode(153);
	            node.members = parseObjectTypeMembers();
	            return finishNode(node);
	        }
	        function parseObjectTypeMembers() {
	            var members;
	            if (parseExpected(15)) {
	                members = parseList(4, parseTypeMember);
	                parseExpected(16);
	            }
	            else {
	                members = createMissingList();
	            }
	            return members;
	        }
	        function parseTupleType() {
	            var node = createNode(155);
	            node.elementTypes = parseBracketedList(19, parseType, 19, 20);
	            return finishNode(node);
	        }
	        function parseParenthesizedType() {
	            var node = createNode(158);
	            parseExpected(17);
	            node.type = parseType();
	            parseExpected(18);
	            return finishNode(node);
	        }
	        function parseFunctionOrConstructorType(kind) {
	            var node = createNode(kind);
	            if (kind === 151) {
	                parseExpected(90);
	            }
	            fillSignature(34, false, false, false, node);
	            return finishNode(node);
	        }
	        function parseKeywordAndNoDot() {
	            var node = parseTokenNode();
	            return token === 21 ? undefined : node;
	        }
	        function parseNonArrayType() {
	            switch (token) {
	                case 115:
	                case 128:
	                case 126:
	                case 118:
	                case 129:
	                    var node = tryParse(parseKeywordAndNoDot);
	                    return node || parseTypeReferenceOrTypePredicate();
	                case 101:
	                    return parseTokenNode();
	                case 99:
	                    return parseTypeQuery();
	                case 15:
	                    return parseTypeLiteral();
	                case 19:
	                    return parseTupleType();
	                case 17:
	                    return parseParenthesizedType();
	                default:
	                    return parseTypeReferenceOrTypePredicate();
	            }
	        }
	        function isStartOfType() {
	            switch (token) {
	                case 115:
	                case 128:
	                case 126:
	                case 118:
	                case 129:
	                case 101:
	                case 99:
	                case 15:
	                case 19:
	                case 25:
	                case 90:
	                    return true;
	                case 17:
	                    return lookAhead(isStartOfParenthesizedOrFunctionType);
	                default:
	                    return isIdentifier();
	            }
	        }
	        function isStartOfParenthesizedOrFunctionType() {
	            nextToken();
	            return token === 18 || isStartOfParameter() || isStartOfType();
	        }
	        function parseArrayTypeOrHigher() {
	            var type = parseNonArrayType();
	            while (!scanner.hasPrecedingLineBreak() && parseOptional(19)) {
	                parseExpected(20);
	                var node = createNode(154, type.pos);
	                node.elementType = type;
	                type = finishNode(node);
	            }
	            return type;
	        }
	        function parseUnionOrIntersectionType(kind, parseConstituentType, operator) {
	            var type = parseConstituentType();
	            if (token === operator) {
	                var types = [type];
	                types.pos = type.pos;
	                while (parseOptional(operator)) {
	                    types.push(parseConstituentType());
	                }
	                types.end = getNodeEnd();
	                var node = createNode(kind, type.pos);
	                node.types = types;
	                type = finishNode(node);
	            }
	            return type;
	        }
	        function parseIntersectionTypeOrHigher() {
	            return parseUnionOrIntersectionType(157, parseArrayTypeOrHigher, 45);
	        }
	        function parseUnionTypeOrHigher() {
	            return parseUnionOrIntersectionType(156, parseIntersectionTypeOrHigher, 46);
	        }
	        function isStartOfFunctionType() {
	            if (token === 25) {
	                return true;
	            }
	            return token === 17 && lookAhead(isUnambiguouslyStartOfFunctionType);
	        }
	        function isUnambiguouslyStartOfFunctionType() {
	            nextToken();
	            if (token === 18 || token === 22) {
	                return true;
	            }
	            if (isIdentifier() || ts.isModifier(token)) {
	                nextToken();
	                if (token === 53 || token === 24 ||
	                    token === 52 || token === 55 ||
	                    isIdentifier() || ts.isModifier(token)) {
	                    return true;
	                }
	                if (token === 18) {
	                    nextToken();
	                    if (token === 34) {
	                        return true;
	                    }
	                }
	            }
	            return false;
	        }
	        function parseType() {
	            return doOutsideOfContext(10, parseTypeWorker);
	        }
	        function parseTypeWorker() {
	            if (isStartOfFunctionType()) {
	                return parseFunctionOrConstructorType(150);
	            }
	            if (token === 90) {
	                return parseFunctionOrConstructorType(151);
	            }
	            return parseUnionTypeOrHigher();
	        }
	        function parseTypeAnnotation() {
	            return parseOptional(53) ? parseType() : undefined;
	        }
	        function isStartOfLeftHandSideExpression() {
	            switch (token) {
	                case 95:
	                case 93:
	                case 91:
	                case 97:
	                case 82:
	                case 8:
	                case 9:
	                case 11:
	                case 12:
	                case 17:
	                case 19:
	                case 15:
	                case 85:
	                case 71:
	                case 90:
	                case 38:
	                case 59:
	                case 67:
	                    return true;
	                default:
	                    return isIdentifier();
	            }
	        }
	        function isStartOfExpression() {
	            if (isStartOfLeftHandSideExpression()) {
	                return true;
	            }
	            switch (token) {
	                case 35:
	                case 36:
	                case 49:
	                case 48:
	                case 76:
	                case 99:
	                case 101:
	                case 40:
	                case 41:
	                case 25:
	                case 117:
	                case 112:
	                    return true;
	                default:
	                    if (isBinaryOperator()) {
	                        return true;
	                    }
	                    return isIdentifier();
	            }
	        }
	        function isStartOfExpressionStatement() {
	            return token !== 15 &&
	                token !== 85 &&
	                token !== 71 &&
	                token !== 54 &&
	                isStartOfExpression();
	        }
	        function allowInAndParseExpression() {
	            return allowInAnd(parseExpression);
	        }
	        function parseExpression() {
	            // Expression[in]:
	            //      AssignmentExpression[in]
	            //      Expression[in] , AssignmentExpression[in]
	            var saveDecoratorContext = inDecoratorContext();
	            if (saveDecoratorContext) {
	                setDecoratorContext(false);
	            }
	            var expr = parseAssignmentExpressionOrHigher();
	            var operatorToken;
	            while ((operatorToken = parseOptionalToken(24))) {
	                expr = makeBinaryExpression(expr, operatorToken, parseAssignmentExpressionOrHigher());
	            }
	            if (saveDecoratorContext) {
	                setDecoratorContext(true);
	            }
	            return expr;
	        }
	        function parseInitializer(inParameter) {
	            if (token !== 55) {
	                if (scanner.hasPrecedingLineBreak() || (inParameter && token === 15) || !isStartOfExpression()) {
	                    return undefined;
	                }
	            }
	            parseExpected(55);
	            return parseAssignmentExpressionOrHigher();
	        }
	        function parseAssignmentExpressionOrHigher() {
	            //  AssignmentExpression[in,yield]:
	            //      1) ConditionalExpression[?in,?yield]
	            //      2) LeftHandSideExpression = AssignmentExpression[?in,?yield]
	            //      3) LeftHandSideExpression AssignmentOperator AssignmentExpression[?in,?yield]
	            //      4) ArrowFunctionExpression[?in,?yield]
	            //      5) [+Yield] YieldExpression[?In]
	            //
	            // Note: for ease of implementation we treat productions '2' and '3' as the same thing.
	            // (i.e. they're both BinaryExpressions with an assignment operator in it).
	            if (isYieldExpression()) {
	                return parseYieldExpression();
	            }
	            var arrowExpression = tryParseParenthesizedArrowFunctionExpression();
	            if (arrowExpression) {
	                return arrowExpression;
	            }
	            var expr = parseBinaryExpressionOrHigher(0);
	            if (expr.kind === 67 && token === 34) {
	                return parseSimpleArrowFunctionExpression(expr);
	            }
	            if (ts.isLeftHandSideExpression(expr) && ts.isAssignmentOperator(reScanGreaterToken())) {
	                return makeBinaryExpression(expr, parseTokenNode(), parseAssignmentExpressionOrHigher());
	            }
	            return parseConditionalExpressionRest(expr);
	        }
	        function isYieldExpression() {
	            if (token === 112) {
	                if (inYieldContext()) {
	                    return true;
	                }
	                return lookAhead(nextTokenIsIdentifierOrKeywordOrNumberOnSameLine);
	            }
	            return false;
	        }
	        function nextTokenIsIdentifierOnSameLine() {
	            nextToken();
	            return !scanner.hasPrecedingLineBreak() && isIdentifier();
	        }
	        function parseYieldExpression() {
	            var node = createNode(182);
	            nextToken();
	            if (!scanner.hasPrecedingLineBreak() &&
	                (token === 37 || isStartOfExpression())) {
	                node.asteriskToken = parseOptionalToken(37);
	                node.expression = parseAssignmentExpressionOrHigher();
	                return finishNode(node);
	            }
	            else {
	                return finishNode(node);
	            }
	        }
	        function parseSimpleArrowFunctionExpression(identifier) {
	            ts.Debug.assert(token === 34, "parseSimpleArrowFunctionExpression should only have been called if we had a =>");
	            var node = createNode(172, identifier.pos);
	            var parameter = createNode(136, identifier.pos);
	            parameter.name = identifier;
	            finishNode(parameter);
	            node.parameters = [parameter];
	            node.parameters.pos = parameter.pos;
	            node.parameters.end = parameter.end;
	            node.equalsGreaterThanToken = parseExpectedToken(34, false, ts.Diagnostics._0_expected, "=>");
	            node.body = parseArrowFunctionExpressionBody(false);
	            return finishNode(node);
	        }
	        function tryParseParenthesizedArrowFunctionExpression() {
	            var triState = isParenthesizedArrowFunctionExpression();
	            if (triState === 0) {
	                return undefined;
	            }
	            var arrowFunction = triState === 1
	                ? parseParenthesizedArrowFunctionExpressionHead(true)
	                : tryParse(parsePossibleParenthesizedArrowFunctionExpressionHead);
	            if (!arrowFunction) {
	                return undefined;
	            }
	            var isAsync = !!(arrowFunction.flags & 512);
	            var lastToken = token;
	            arrowFunction.equalsGreaterThanToken = parseExpectedToken(34, false, ts.Diagnostics._0_expected, "=>");
	            arrowFunction.body = (lastToken === 34 || lastToken === 15)
	                ? parseArrowFunctionExpressionBody(isAsync)
	                : parseIdentifier();
	            return finishNode(arrowFunction);
	        }
	        function isParenthesizedArrowFunctionExpression() {
	            if (token === 17 || token === 25 || token === 116) {
	                return lookAhead(isParenthesizedArrowFunctionExpressionWorker);
	            }
	            if (token === 34) {
	                return 1;
	            }
	            return 0;
	        }
	        function isParenthesizedArrowFunctionExpressionWorker() {
	            if (token === 116) {
	                nextToken();
	                if (scanner.hasPrecedingLineBreak()) {
	                    return 0;
	                }
	                if (token !== 17 && token !== 25) {
	                    return 0;
	                }
	            }
	            var first = token;
	            var second = nextToken();
	            if (first === 17) {
	                if (second === 18) {
	                    var third = nextToken();
	                    switch (third) {
	                        case 34:
	                        case 53:
	                        case 15:
	                            return 1;
	                        default:
	                            return 0;
	                    }
	                }
	                if (second === 19 || second === 15) {
	                    return 2;
	                }
	                if (second === 22) {
	                    return 1;
	                }
	                if (!isIdentifier()) {
	                    return 0;
	                }
	                if (nextToken() === 53) {
	                    return 1;
	                }
	                return 2;
	            }
	            else {
	                ts.Debug.assert(first === 25);
	                if (!isIdentifier()) {
	                    return 0;
	                }
	                if (sourceFile.languageVariant === 1) {
	                    var isArrowFunctionInJsx = lookAhead(function () {
	                        var third = nextToken();
	                        if (third === 81) {
	                            var fourth = nextToken();
	                            switch (fourth) {
	                                case 55:
	                                case 27:
	                                    return false;
	                                default:
	                                    return true;
	                            }
	                        }
	                        else if (third === 24) {
	                            return true;
	                        }
	                        return false;
	                    });
	                    if (isArrowFunctionInJsx) {
	                        return 1;
	                    }
	                    return 0;
	                }
	                return 2;
	            }
	        }
	        function parsePossibleParenthesizedArrowFunctionExpressionHead() {
	            return parseParenthesizedArrowFunctionExpressionHead(false);
	        }
	        function parseParenthesizedArrowFunctionExpressionHead(allowAmbiguity) {
	            var node = createNode(172);
	            setModifiers(node, parseModifiersForArrowFunction());
	            var isAsync = !!(node.flags & 512);
	            fillSignature(53, false, isAsync, !allowAmbiguity, node);
	            if (!node.parameters) {
	                return undefined;
	            }
	            if (!allowAmbiguity && token !== 34 && token !== 15) {
	                return undefined;
	            }
	            return node;
	        }
	        function parseArrowFunctionExpressionBody(isAsync) {
	            if (token === 15) {
	                return parseFunctionBlock(false, isAsync, false);
	            }
	            if (token !== 23 &&
	                token !== 85 &&
	                token !== 71 &&
	                isStartOfStatement() &&
	                !isStartOfExpressionStatement()) {
	                return parseFunctionBlock(false, isAsync, true);
	            }
	            return isAsync
	                ? doInAwaitContext(parseAssignmentExpressionOrHigher)
	                : doOutsideOfAwaitContext(parseAssignmentExpressionOrHigher);
	        }
	        function parseConditionalExpressionRest(leftOperand) {
	            var questionToken = parseOptionalToken(52);
	            if (!questionToken) {
	                return leftOperand;
	            }
	            var node = createNode(180, leftOperand.pos);
	            node.condition = leftOperand;
	            node.questionToken = questionToken;
	            node.whenTrue = doOutsideOfContext(disallowInAndDecoratorContext, parseAssignmentExpressionOrHigher);
	            node.colonToken = parseExpectedToken(53, false, ts.Diagnostics._0_expected, ts.tokenToString(53));
	            node.whenFalse = parseAssignmentExpressionOrHigher();
	            return finishNode(node);
	        }
	        function parseBinaryExpressionOrHigher(precedence) {
	            var leftOperand = parseUnaryExpressionOrHigher();
	            return parseBinaryExpressionRest(precedence, leftOperand);
	        }
	        function isInOrOfKeyword(t) {
	            return t === 88 || t === 132;
	        }
	        function parseBinaryExpressionRest(precedence, leftOperand) {
	            while (true) {
	                reScanGreaterToken();
	                var newPrecedence = getBinaryOperatorPrecedence();
	                if (newPrecedence <= precedence) {
	                    break;
	                }
	                if (token === 88 && inDisallowInContext()) {
	                    break;
	                }
	                if (token === 114) {
	                    if (scanner.hasPrecedingLineBreak()) {
	                        break;
	                    }
	                    else {
	                        nextToken();
	                        leftOperand = makeAsExpression(leftOperand, parseType());
	                    }
	                }
	                else {
	                    leftOperand = makeBinaryExpression(leftOperand, parseTokenNode(), parseBinaryExpressionOrHigher(newPrecedence));
	                }
	            }
	            return leftOperand;
	        }
	        function isBinaryOperator() {
	            if (inDisallowInContext() && token === 88) {
	                return false;
	            }
	            return getBinaryOperatorPrecedence() > 0;
	        }
	        function getBinaryOperatorPrecedence() {
	            switch (token) {
	                case 51:
	                    return 1;
	                case 50:
	                    return 2;
	                case 46:
	                    return 3;
	                case 47:
	                    return 4;
	                case 45:
	                    return 5;
	                case 30:
	                case 31:
	                case 32:
	                case 33:
	                    return 6;
	                case 25:
	                case 27:
	                case 28:
	                case 29:
	                case 89:
	                case 88:
	                case 114:
	                    return 7;
	                case 42:
	                case 43:
	                case 44:
	                    return 8;
	                case 35:
	                case 36:
	                    return 9;
	                case 37:
	                case 38:
	                case 39:
	                    return 10;
	            }
	            return -1;
	        }
	        function makeBinaryExpression(left, operatorToken, right) {
	            var node = createNode(179, left.pos);
	            node.left = left;
	            node.operatorToken = operatorToken;
	            node.right = right;
	            return finishNode(node);
	        }
	        function makeAsExpression(left, right) {
	            var node = createNode(187, left.pos);
	            node.expression = left;
	            node.type = right;
	            return finishNode(node);
	        }
	        function parsePrefixUnaryExpression() {
	            var node = createNode(177);
	            node.operator = token;
	            nextToken();
	            node.operand = parseUnaryExpressionOrHigher();
	            return finishNode(node);
	        }
	        function parseDeleteExpression() {
	            var node = createNode(173);
	            nextToken();
	            node.expression = parseUnaryExpressionOrHigher();
	            return finishNode(node);
	        }
	        function parseTypeOfExpression() {
	            var node = createNode(174);
	            nextToken();
	            node.expression = parseUnaryExpressionOrHigher();
	            return finishNode(node);
	        }
	        function parseVoidExpression() {
	            var node = createNode(175);
	            nextToken();
	            node.expression = parseUnaryExpressionOrHigher();
	            return finishNode(node);
	        }
	        function isAwaitExpression() {
	            if (token === 117) {
	                if (inAwaitContext()) {
	                    return true;
	                }
	                return lookAhead(nextTokenIsIdentifierOnSameLine);
	            }
	            return false;
	        }
	        function parseAwaitExpression() {
	            var node = createNode(176);
	            nextToken();
	            node.expression = parseUnaryExpressionOrHigher();
	            return finishNode(node);
	        }
	        function parseUnaryExpressionOrHigher() {
	            if (isAwaitExpression()) {
	                return parseAwaitExpression();
	            }
	            switch (token) {
	                case 35:
	                case 36:
	                case 49:
	                case 48:
	                case 40:
	                case 41:
	                    return parsePrefixUnaryExpression();
	                case 76:
	                    return parseDeleteExpression();
	                case 99:
	                    return parseTypeOfExpression();
	                case 101:
	                    return parseVoidExpression();
	                case 25:
	                    if (sourceFile.languageVariant !== 1) {
	                        return parseTypeAssertion();
	                    }
	                    if (lookAhead(nextTokenIsIdentifierOrKeyword)) {
	                        return parseJsxElementOrSelfClosingElement(true);
	                    }
	                default:
	                    return parsePostfixExpressionOrHigher();
	            }
	        }
	        function parsePostfixExpressionOrHigher() {
	            var expression = parseLeftHandSideExpressionOrHigher();
	            ts.Debug.assert(ts.isLeftHandSideExpression(expression));
	            if ((token === 40 || token === 41) && !scanner.hasPrecedingLineBreak()) {
	                var node = createNode(178, expression.pos);
	                node.operand = expression;
	                node.operator = token;
	                nextToken();
	                return finishNode(node);
	            }
	            return expression;
	        }
	        function parseLeftHandSideExpressionOrHigher() {
	            var expression = token === 93
	                ? parseSuperExpression()
	                : parseMemberExpressionOrHigher();
	            return parseCallExpressionRest(expression);
	        }
	        function parseMemberExpressionOrHigher() {
	            var expression = parsePrimaryExpression();
	            return parseMemberExpressionRest(expression);
	        }
	        function parseSuperExpression() {
	            var expression = parseTokenNode();
	            if (token === 17 || token === 21 || token === 19) {
	                return expression;
	            }
	            var node = createNode(164, expression.pos);
	            node.expression = expression;
	            node.dotToken = parseExpectedToken(21, false, ts.Diagnostics.super_must_be_followed_by_an_argument_list_or_member_access);
	            node.name = parseRightSideOfDot(true);
	            return finishNode(node);
	        }
	        function parseJsxElementOrSelfClosingElement(inExpressionContext) {
	            var opening = parseJsxOpeningOrSelfClosingElement(inExpressionContext);
	            if (opening.kind === 233) {
	                var node = createNode(231, opening.pos);
	                node.openingElement = opening;
	                node.children = parseJsxChildren(node.openingElement.tagName);
	                node.closingElement = parseJsxClosingElement(inExpressionContext);
	                return finishNode(node);
	            }
	            else {
	                ts.Debug.assert(opening.kind === 232);
	                return opening;
	            }
	        }
	        function parseJsxText() {
	            var node = createNode(234, scanner.getStartPos());
	            token = scanner.scanJsxToken();
	            return finishNode(node);
	        }
	        function parseJsxChild() {
	            switch (token) {
	                case 234:
	                    return parseJsxText();
	                case 15:
	                    return parseJsxExpression(false);
	                case 25:
	                    return parseJsxElementOrSelfClosingElement(false);
	            }
	            ts.Debug.fail("Unknown JSX child kind " + token);
	        }
	        function parseJsxChildren(openingTagName) {
	            var result = [];
	            result.pos = scanner.getStartPos();
	            var saveParsingContext = parsingContext;
	            parsingContext |= 1 << 14;
	            while (true) {
	                token = scanner.reScanJsxToken();
	                if (token === 26) {
	                    break;
	                }
	                else if (token === 1) {
	                    parseErrorAtCurrentToken(ts.Diagnostics.Expected_corresponding_JSX_closing_tag_for_0, ts.getTextOfNodeFromSourceText(sourceText, openingTagName));
	                    break;
	                }
	                result.push(parseJsxChild());
	            }
	            result.end = scanner.getTokenPos();
	            parsingContext = saveParsingContext;
	            return result;
	        }
	        function parseJsxOpeningOrSelfClosingElement(inExpressionContext) {
	            var fullStart = scanner.getStartPos();
	            parseExpected(25);
	            var tagName = parseJsxElementName();
	            var attributes = parseList(13, parseJsxAttribute);
	            var node;
	            if (token === 27) {
	                node = createNode(233, fullStart);
	                scanJsxText();
	            }
	            else {
	                parseExpected(38);
	                if (inExpressionContext) {
	                    parseExpected(27);
	                }
	                else {
	                    parseExpected(27, undefined, false);
	                    scanJsxText();
	                }
	                node = createNode(232, fullStart);
	            }
	            node.tagName = tagName;
	            node.attributes = attributes;
	            return finishNode(node);
	        }
	        function parseJsxElementName() {
	            scanJsxIdentifier();
	            var elementName = parseIdentifierName();
	            while (parseOptional(21)) {
	                scanJsxIdentifier();
	                var node = createNode(133, elementName.pos);
	                node.left = elementName;
	                node.right = parseIdentifierName();
	                elementName = finishNode(node);
	            }
	            return elementName;
	        }
	        function parseJsxExpression(inExpressionContext) {
	            var node = createNode(238);
	            parseExpected(15);
	            if (token !== 16) {
	                node.expression = parseExpression();
	            }
	            if (inExpressionContext) {
	                parseExpected(16);
	            }
	            else {
	                parseExpected(16, undefined, false);
	                scanJsxText();
	            }
	            return finishNode(node);
	        }
	        function parseJsxAttribute() {
	            if (token === 15) {
	                return parseJsxSpreadAttribute();
	            }
	            scanJsxIdentifier();
	            var node = createNode(236);
	            node.name = parseIdentifierName();
	            if (parseOptional(55)) {
	                switch (token) {
	                    case 9:
	                        node.initializer = parseLiteralNode();
	                        break;
	                    default:
	                        node.initializer = parseJsxExpression(true);
	                        break;
	                }
	            }
	            return finishNode(node);
	        }
	        function parseJsxSpreadAttribute() {
	            var node = createNode(237);
	            parseExpected(15);
	            parseExpected(22);
	            node.expression = parseExpression();
	            parseExpected(16);
	            return finishNode(node);
	        }
	        function parseJsxClosingElement(inExpressionContext) {
	            var node = createNode(235);
	            parseExpected(26);
	            node.tagName = parseJsxElementName();
	            if (inExpressionContext) {
	                parseExpected(27);
	            }
	            else {
	                parseExpected(27, undefined, false);
	                scanJsxText();
	            }
	            return finishNode(node);
	        }
	        function parseTypeAssertion() {
	            var node = createNode(169);
	            parseExpected(25);
	            node.type = parseType();
	            parseExpected(27);
	            node.expression = parseUnaryExpressionOrHigher();
	            return finishNode(node);
	        }
	        function parseMemberExpressionRest(expression) {
	            while (true) {
	                var dotToken = parseOptionalToken(21);
	                if (dotToken) {
	                    var propertyAccess = createNode(164, expression.pos);
	                    propertyAccess.expression = expression;
	                    propertyAccess.dotToken = dotToken;
	                    propertyAccess.name = parseRightSideOfDot(true);
	                    expression = finishNode(propertyAccess);
	                    continue;
	                }
	                if (!inDecoratorContext() && parseOptional(19)) {
	                    var indexedAccess = createNode(165, expression.pos);
	                    indexedAccess.expression = expression;
	                    if (token !== 20) {
	                        indexedAccess.argumentExpression = allowInAnd(parseExpression);
	                        if (indexedAccess.argumentExpression.kind === 9 || indexedAccess.argumentExpression.kind === 8) {
	                            var literal = indexedAccess.argumentExpression;
	                            literal.text = internIdentifier(literal.text);
	                        }
	                    }
	                    parseExpected(20);
	                    expression = finishNode(indexedAccess);
	                    continue;
	                }
	                if (token === 11 || token === 12) {
	                    var tagExpression = createNode(168, expression.pos);
	                    tagExpression.tag = expression;
	                    tagExpression.template = token === 11
	                        ? parseLiteralNode()
	                        : parseTemplateExpression();
	                    expression = finishNode(tagExpression);
	                    continue;
	                }
	                return expression;
	            }
	        }
	        function parseCallExpressionRest(expression) {
	            while (true) {
	                expression = parseMemberExpressionRest(expression);
	                if (token === 25) {
	                    var typeArguments = tryParse(parseTypeArgumentsInExpression);
	                    if (!typeArguments) {
	                        return expression;
	                    }
	                    var callExpr = createNode(166, expression.pos);
	                    callExpr.expression = expression;
	                    callExpr.typeArguments = typeArguments;
	                    callExpr.arguments = parseArgumentList();
	                    expression = finishNode(callExpr);
	                    continue;
	                }
	                else if (token === 17) {
	                    var callExpr = createNode(166, expression.pos);
	                    callExpr.expression = expression;
	                    callExpr.arguments = parseArgumentList();
	                    expression = finishNode(callExpr);
	                    continue;
	                }
	                return expression;
	            }
	        }
	        function parseArgumentList() {
	            parseExpected(17);
	            var result = parseDelimitedList(11, parseArgumentExpression);
	            parseExpected(18);
	            return result;
	        }
	        function parseTypeArgumentsInExpression() {
	            if (!parseOptional(25)) {
	                return undefined;
	            }
	            var typeArguments = parseDelimitedList(18, parseType);
	            if (!parseExpected(27)) {
	                return undefined;
	            }
	            return typeArguments && canFollowTypeArgumentsInExpression()
	                ? typeArguments
	                : undefined;
	        }
	        function canFollowTypeArgumentsInExpression() {
	            switch (token) {
	                case 17:
	                case 21:
	                case 18:
	                case 20:
	                case 53:
	                case 23:
	                case 52:
	                case 30:
	                case 32:
	                case 31:
	                case 33:
	                case 50:
	                case 51:
	                case 47:
	                case 45:
	                case 46:
	                case 16:
	                case 1:
	                    return true;
	                case 24:
	                case 15:
	                default:
	                    return false;
	            }
	        }
	        function parsePrimaryExpression() {
	            switch (token) {
	                case 8:
	                case 9:
	                case 11:
	                    return parseLiteralNode();
	                case 95:
	                case 93:
	                case 91:
	                case 97:
	                case 82:
	                    return parseTokenNode();
	                case 17:
	                    return parseParenthesizedExpression();
	                case 19:
	                    return parseArrayLiteralExpression();
	                case 15:
	                    return parseObjectLiteralExpression();
	                case 116:
	                    if (!lookAhead(nextTokenIsFunctionKeywordOnSameLine)) {
	                        break;
	                    }
	                    return parseFunctionExpression();
	                case 71:
	                    return parseClassExpression();
	                case 85:
	                    return parseFunctionExpression();
	                case 90:
	                    return parseNewExpression();
	                case 38:
	                case 59:
	                    if (reScanSlashToken() === 10) {
	                        return parseLiteralNode();
	                    }
	                    break;
	                case 12:
	                    return parseTemplateExpression();
	            }
	            return parseIdentifier(ts.Diagnostics.Expression_expected);
	        }
	        function parseParenthesizedExpression() {
	            var node = createNode(170);
	            parseExpected(17);
	            node.expression = allowInAnd(parseExpression);
	            parseExpected(18);
	            return finishNode(node);
	        }
	        function parseSpreadElement() {
	            var node = createNode(183);
	            parseExpected(22);
	            node.expression = parseAssignmentExpressionOrHigher();
	            return finishNode(node);
	        }
	        function parseArgumentOrArrayLiteralElement() {
	            return token === 22 ? parseSpreadElement() :
	                token === 24 ? createNode(185) :
	                    parseAssignmentExpressionOrHigher();
	        }
	        function parseArgumentExpression() {
	            return doOutsideOfContext(disallowInAndDecoratorContext, parseArgumentOrArrayLiteralElement);
	        }
	        function parseArrayLiteralExpression() {
	            var node = createNode(162);
	            parseExpected(19);
	            if (scanner.hasPrecedingLineBreak())
	                node.flags |= 2048;
	            node.elements = parseDelimitedList(15, parseArgumentOrArrayLiteralElement);
	            parseExpected(20);
	            return finishNode(node);
	        }
	        function tryParseAccessorDeclaration(fullStart, decorators, modifiers) {
	            if (parseContextualModifier(121)) {
	                return parseAccessorDeclaration(143, fullStart, decorators, modifiers);
	            }
	            else if (parseContextualModifier(127)) {
	                return parseAccessorDeclaration(144, fullStart, decorators, modifiers);
	            }
	            return undefined;
	        }
	        function parseObjectLiteralElement() {
	            var fullStart = scanner.getStartPos();
	            var decorators = parseDecorators();
	            var modifiers = parseModifiers();
	            var accessor = tryParseAccessorDeclaration(fullStart, decorators, modifiers);
	            if (accessor) {
	                return accessor;
	            }
	            var asteriskToken = parseOptionalToken(37);
	            var tokenIsIdentifier = isIdentifier();
	            var nameToken = token;
	            var propertyName = parsePropertyName();
	            var questionToken = parseOptionalToken(52);
	            if (asteriskToken || token === 17 || token === 25) {
	                return parseMethodDeclaration(fullStart, decorators, modifiers, asteriskToken, propertyName, questionToken);
	            }
	            if ((token === 24 || token === 16) && tokenIsIdentifier) {
	                var shorthandDeclaration = createNode(244, fullStart);
	                shorthandDeclaration.name = propertyName;
	                shorthandDeclaration.questionToken = questionToken;
	                return finishNode(shorthandDeclaration);
	            }
	            else {
	                var propertyAssignment = createNode(243, fullStart);
	                propertyAssignment.name = propertyName;
	                propertyAssignment.questionToken = questionToken;
	                parseExpected(53);
	                propertyAssignment.initializer = allowInAnd(parseAssignmentExpressionOrHigher);
	                return finishNode(propertyAssignment);
	            }
	        }
	        function parseObjectLiteralExpression() {
	            var node = createNode(163);
	            parseExpected(15);
	            if (scanner.hasPrecedingLineBreak()) {
	                node.flags |= 2048;
	            }
	            node.properties = parseDelimitedList(12, parseObjectLiteralElement, true);
	            parseExpected(16);
	            return finishNode(node);
	        }
	        function parseFunctionExpression() {
	            var saveDecoratorContext = inDecoratorContext();
	            if (saveDecoratorContext) {
	                setDecoratorContext(false);
	            }
	            var node = createNode(171);
	            setModifiers(node, parseModifiers());
	            parseExpected(85);
	            node.asteriskToken = parseOptionalToken(37);
	            var isGenerator = !!node.asteriskToken;
	            var isAsync = !!(node.flags & 512);
	            node.name =
	                isGenerator && isAsync ? doInYieldAndAwaitContext(parseOptionalIdentifier) :
	                    isGenerator ? doInYieldContext(parseOptionalIdentifier) :
	                        isAsync ? doInAwaitContext(parseOptionalIdentifier) :
	                            parseOptionalIdentifier();
	            fillSignature(53, isGenerator, isAsync, false, node);
	            node.body = parseFunctionBlock(isGenerator, isAsync, false);
	            if (saveDecoratorContext) {
	                setDecoratorContext(true);
	            }
	            return finishNode(node);
	        }
	        function parseOptionalIdentifier() {
	            return isIdentifier() ? parseIdentifier() : undefined;
	        }
	        function parseNewExpression() {
	            var node = createNode(167);
	            parseExpected(90);
	            node.expression = parseMemberExpressionOrHigher();
	            node.typeArguments = tryParse(parseTypeArgumentsInExpression);
	            if (node.typeArguments || token === 17) {
	                node.arguments = parseArgumentList();
	            }
	            return finishNode(node);
	        }
	        function parseBlock(ignoreMissingOpenBrace, diagnosticMessage) {
	            var node = createNode(190);
	            if (parseExpected(15, diagnosticMessage) || ignoreMissingOpenBrace) {
	                node.statements = parseList(1, parseStatement);
	                parseExpected(16);
	            }
	            else {
	                node.statements = createMissingList();
	            }
	            return finishNode(node);
	        }
	        function parseFunctionBlock(allowYield, allowAwait, ignoreMissingOpenBrace, diagnosticMessage) {
	            var savedYieldContext = inYieldContext();
	            setYieldContext(allowYield);
	            var savedAwaitContext = inAwaitContext();
	            setAwaitContext(allowAwait);
	            var saveDecoratorContext = inDecoratorContext();
	            if (saveDecoratorContext) {
	                setDecoratorContext(false);
	            }
	            var block = parseBlock(ignoreMissingOpenBrace, diagnosticMessage);
	            if (saveDecoratorContext) {
	                setDecoratorContext(true);
	            }
	            setYieldContext(savedYieldContext);
	            setAwaitContext(savedAwaitContext);
	            return block;
	        }
	        function parseEmptyStatement() {
	            var node = createNode(192);
	            parseExpected(23);
	            return finishNode(node);
	        }
	        function parseIfStatement() {
	            var node = createNode(194);
	            parseExpected(86);
	            parseExpected(17);
	            node.expression = allowInAnd(parseExpression);
	            parseExpected(18);
	            node.thenStatement = parseStatement();
	            node.elseStatement = parseOptional(78) ? parseStatement() : undefined;
	            return finishNode(node);
	        }
	        function parseDoStatement() {
	            var node = createNode(195);
	            parseExpected(77);
	            node.statement = parseStatement();
	            parseExpected(102);
	            parseExpected(17);
	            node.expression = allowInAnd(parseExpression);
	            parseExpected(18);
	            parseOptional(23);
	            return finishNode(node);
	        }
	        function parseWhileStatement() {
	            var node = createNode(196);
	            parseExpected(102);
	            parseExpected(17);
	            node.expression = allowInAnd(parseExpression);
	            parseExpected(18);
	            node.statement = parseStatement();
	            return finishNode(node);
	        }
	        function parseForOrForInOrForOfStatement() {
	            var pos = getNodePos();
	            parseExpected(84);
	            parseExpected(17);
	            var initializer = undefined;
	            if (token !== 23) {
	                if (token === 100 || token === 106 || token === 72) {
	                    initializer = parseVariableDeclarationList(true);
	                }
	                else {
	                    initializer = disallowInAnd(parseExpression);
	                }
	            }
	            var forOrForInOrForOfStatement;
	            if (parseOptional(88)) {
	                var forInStatement = createNode(198, pos);
	                forInStatement.initializer = initializer;
	                forInStatement.expression = allowInAnd(parseExpression);
	                parseExpected(18);
	                forOrForInOrForOfStatement = forInStatement;
	            }
	            else if (parseOptional(132)) {
	                var forOfStatement = createNode(199, pos);
	                forOfStatement.initializer = initializer;
	                forOfStatement.expression = allowInAnd(parseAssignmentExpressionOrHigher);
	                parseExpected(18);
	                forOrForInOrForOfStatement = forOfStatement;
	            }
	            else {
	                var forStatement = createNode(197, pos);
	                forStatement.initializer = initializer;
	                parseExpected(23);
	                if (token !== 23 && token !== 18) {
	                    forStatement.condition = allowInAnd(parseExpression);
	                }
	                parseExpected(23);
	                if (token !== 18) {
	                    forStatement.incrementor = allowInAnd(parseExpression);
	                }
	                parseExpected(18);
	                forOrForInOrForOfStatement = forStatement;
	            }
	            forOrForInOrForOfStatement.statement = parseStatement();
	            return finishNode(forOrForInOrForOfStatement);
	        }
	        function parseBreakOrContinueStatement(kind) {
	            var node = createNode(kind);
	            parseExpected(kind === 201 ? 68 : 73);
	            if (!canParseSemicolon()) {
	                node.label = parseIdentifier();
	            }
	            parseSemicolon();
	            return finishNode(node);
	        }
	        function parseReturnStatement() {
	            var node = createNode(202);
	            parseExpected(92);
	            if (!canParseSemicolon()) {
	                node.expression = allowInAnd(parseExpression);
	            }
	            parseSemicolon();
	            return finishNode(node);
	        }
	        function parseWithStatement() {
	            var node = createNode(203);
	            parseExpected(103);
	            parseExpected(17);
	            node.expression = allowInAnd(parseExpression);
	            parseExpected(18);
	            node.statement = parseStatement();
	            return finishNode(node);
	        }
	        function parseCaseClause() {
	            var node = createNode(239);
	            parseExpected(69);
	            node.expression = allowInAnd(parseExpression);
	            parseExpected(53);
	            node.statements = parseList(3, parseStatement);
	            return finishNode(node);
	        }
	        function parseDefaultClause() {
	            var node = createNode(240);
	            parseExpected(75);
	            parseExpected(53);
	            node.statements = parseList(3, parseStatement);
	            return finishNode(node);
	        }
	        function parseCaseOrDefaultClause() {
	            return token === 69 ? parseCaseClause() : parseDefaultClause();
	        }
	        function parseSwitchStatement() {
	            var node = createNode(204);
	            parseExpected(94);
	            parseExpected(17);
	            node.expression = allowInAnd(parseExpression);
	            parseExpected(18);
	            var caseBlock = createNode(218, scanner.getStartPos());
	            parseExpected(15);
	            caseBlock.clauses = parseList(2, parseCaseOrDefaultClause);
	            parseExpected(16);
	            node.caseBlock = finishNode(caseBlock);
	            return finishNode(node);
	        }
	        function parseThrowStatement() {
	            // ThrowStatement[Yield] :
	            //      throw [no LineTerminator here]Expression[In, ?Yield];
	            var node = createNode(206);
	            parseExpected(96);
	            node.expression = scanner.hasPrecedingLineBreak() ? undefined : allowInAnd(parseExpression);
	            parseSemicolon();
	            return finishNode(node);
	        }
	        function parseTryStatement() {
	            var node = createNode(207);
	            parseExpected(98);
	            node.tryBlock = parseBlock(false);
	            node.catchClause = token === 70 ? parseCatchClause() : undefined;
	            if (!node.catchClause || token === 83) {
	                parseExpected(83);
	                node.finallyBlock = parseBlock(false);
	            }
	            return finishNode(node);
	        }
	        function parseCatchClause() {
	            var result = createNode(242);
	            parseExpected(70);
	            if (parseExpected(17)) {
	                result.variableDeclaration = parseVariableDeclaration();
	            }
	            parseExpected(18);
	            result.block = parseBlock(false);
	            return finishNode(result);
	        }
	        function parseDebuggerStatement() {
	            var node = createNode(208);
	            parseExpected(74);
	            parseSemicolon();
	            return finishNode(node);
	        }
	        function parseExpressionOrLabeledStatement() {
	            var fullStart = scanner.getStartPos();
	            var expression = allowInAnd(parseExpression);
	            if (expression.kind === 67 && parseOptional(53)) {
	                var labeledStatement = createNode(205, fullStart);
	                labeledStatement.label = expression;
	                labeledStatement.statement = parseStatement();
	                return finishNode(labeledStatement);
	            }
	            else {
	                var expressionStatement = createNode(193, fullStart);
	                expressionStatement.expression = expression;
	                parseSemicolon();
	                return finishNode(expressionStatement);
	            }
	        }
	        function isIdentifierOrKeyword() {
	            return token >= 67;
	        }
	        function nextTokenIsIdentifierOrKeywordOnSameLine() {
	            nextToken();
	            return isIdentifierOrKeyword() && !scanner.hasPrecedingLineBreak();
	        }
	        function nextTokenIsFunctionKeywordOnSameLine() {
	            nextToken();
	            return token === 85 && !scanner.hasPrecedingLineBreak();
	        }
	        function nextTokenIsIdentifierOrKeywordOrNumberOnSameLine() {
	            nextToken();
	            return (isIdentifierOrKeyword() || token === 8) && !scanner.hasPrecedingLineBreak();
	        }
	        function isDeclaration() {
	            while (true) {
	                switch (token) {
	                    case 100:
	                    case 106:
	                    case 72:
	                    case 85:
	                    case 71:
	                    case 79:
	                        return true;
	                    case 105:
	                    case 130:
	                        return nextTokenIsIdentifierOnSameLine();
	                    case 123:
	                    case 124:
	                        return nextTokenIsIdentifierOrStringLiteralOnSameLine();
	                    case 116:
	                    case 120:
	                        nextToken();
	                        if (scanner.hasPrecedingLineBreak()) {
	                            return false;
	                        }
	                        continue;
	                    case 87:
	                        nextToken();
	                        return token === 9 || token === 37 ||
	                            token === 15 || isIdentifierOrKeyword();
	                    case 80:
	                        nextToken();
	                        if (token === 55 || token === 37 ||
	                            token === 15 || token === 75) {
	                            return true;
	                        }
	                        continue;
	                    case 110:
	                    case 108:
	                    case 109:
	                    case 111:
	                    case 113:
	                        nextToken();
	                        continue;
	                    default:
	                        return false;
	                }
	            }
	        }
	        function isStartOfDeclaration() {
	            return lookAhead(isDeclaration);
	        }
	        function isStartOfStatement() {
	            switch (token) {
	                case 54:
	                case 23:
	                case 15:
	                case 100:
	                case 106:
	                case 85:
	                case 71:
	                case 79:
	                case 86:
	                case 77:
	                case 102:
	                case 84:
	                case 73:
	                case 68:
	                case 92:
	                case 103:
	                case 94:
	                case 96:
	                case 98:
	                case 74:
	                case 70:
	                case 83:
	                    return true;
	                case 72:
	                case 80:
	                case 87:
	                    return isStartOfDeclaration();
	                case 116:
	                case 120:
	                case 105:
	                case 123:
	                case 124:
	                case 130:
	                    return true;
	                case 110:
	                case 108:
	                case 109:
	                case 111:
	                    return isStartOfDeclaration() || !lookAhead(nextTokenIsIdentifierOrKeywordOnSameLine);
	                default:
	                    return isStartOfExpression();
	            }
	        }
	        function nextTokenIsIdentifierOrStartOfDestructuring() {
	            nextToken();
	            return isIdentifier() || token === 15 || token === 19;
	        }
	        function isLetDeclaration() {
	            return lookAhead(nextTokenIsIdentifierOrStartOfDestructuring);
	        }
	        function parseStatement() {
	            switch (token) {
	                case 23:
	                    return parseEmptyStatement();
	                case 15:
	                    return parseBlock(false);
	                case 100:
	                    return parseVariableStatement(scanner.getStartPos(), undefined, undefined);
	                case 106:
	                    if (isLetDeclaration()) {
	                        return parseVariableStatement(scanner.getStartPos(), undefined, undefined);
	                    }
	                    break;
	                case 85:
	                    return parseFunctionDeclaration(scanner.getStartPos(), undefined, undefined);
	                case 71:
	                    return parseClassDeclaration(scanner.getStartPos(), undefined, undefined);
	                case 86:
	                    return parseIfStatement();
	                case 77:
	                    return parseDoStatement();
	                case 102:
	                    return parseWhileStatement();
	                case 84:
	                    return parseForOrForInOrForOfStatement();
	                case 73:
	                    return parseBreakOrContinueStatement(200);
	                case 68:
	                    return parseBreakOrContinueStatement(201);
	                case 92:
	                    return parseReturnStatement();
	                case 103:
	                    return parseWithStatement();
	                case 94:
	                    return parseSwitchStatement();
	                case 96:
	                    return parseThrowStatement();
	                case 98:
	                case 70:
	                case 83:
	                    return parseTryStatement();
	                case 74:
	                    return parseDebuggerStatement();
	                case 54:
	                    return parseDeclaration();
	                case 116:
	                case 105:
	                case 130:
	                case 123:
	                case 124:
	                case 120:
	                case 72:
	                case 79:
	                case 80:
	                case 87:
	                case 108:
	                case 109:
	                case 110:
	                case 113:
	                case 111:
	                    if (isStartOfDeclaration()) {
	                        return parseDeclaration();
	                    }
	                    break;
	            }
	            return parseExpressionOrLabeledStatement();
	        }
	        function parseDeclaration() {
	            var fullStart = getNodePos();
	            var decorators = parseDecorators();
	            var modifiers = parseModifiers();
	            switch (token) {
	                case 100:
	                case 106:
	                case 72:
	                    return parseVariableStatement(fullStart, decorators, modifiers);
	                case 85:
	                    return parseFunctionDeclaration(fullStart, decorators, modifiers);
	                case 71:
	                    return parseClassDeclaration(fullStart, decorators, modifiers);
	                case 105:
	                    return parseInterfaceDeclaration(fullStart, decorators, modifiers);
	                case 130:
	                    return parseTypeAliasDeclaration(fullStart, decorators, modifiers);
	                case 79:
	                    return parseEnumDeclaration(fullStart, decorators, modifiers);
	                case 123:
	                case 124:
	                    return parseModuleDeclaration(fullStart, decorators, modifiers);
	                case 87:
	                    return parseImportDeclarationOrImportEqualsDeclaration(fullStart, decorators, modifiers);
	                case 80:
	                    nextToken();
	                    return token === 75 || token === 55 ?
	                        parseExportAssignment(fullStart, decorators, modifiers) :
	                        parseExportDeclaration(fullStart, decorators, modifiers);
	                default:
	                    if (decorators || modifiers) {
	                        var node = createMissingNode(229, true, ts.Diagnostics.Declaration_expected);
	                        node.pos = fullStart;
	                        node.decorators = decorators;
	                        setModifiers(node, modifiers);
	                        return finishNode(node);
	                    }
	            }
	        }
	        function nextTokenIsIdentifierOrStringLiteralOnSameLine() {
	            nextToken();
	            return !scanner.hasPrecedingLineBreak() && (isIdentifier() || token === 9);
	        }
	        function parseFunctionBlockOrSemicolon(isGenerator, isAsync, diagnosticMessage) {
	            if (token !== 15 && canParseSemicolon()) {
	                parseSemicolon();
	                return;
	            }
	            return parseFunctionBlock(isGenerator, isAsync, false, diagnosticMessage);
	        }
	        function parseArrayBindingElement() {
	            if (token === 24) {
	                return createNode(185);
	            }
	            var node = createNode(161);
	            node.dotDotDotToken = parseOptionalToken(22);
	            node.name = parseIdentifierOrPattern();
	            node.initializer = parseBindingElementInitializer(false);
	            return finishNode(node);
	        }
	        function parseObjectBindingElement() {
	            var node = createNode(161);
	            var tokenIsIdentifier = isIdentifier();
	            var propertyName = parsePropertyName();
	            if (tokenIsIdentifier && token !== 53) {
	                node.name = propertyName;
	            }
	            else {
	                parseExpected(53);
	                node.propertyName = propertyName;
	                node.name = parseIdentifierOrPattern();
	            }
	            node.initializer = parseBindingElementInitializer(false);
	            return finishNode(node);
	        }
	        function parseObjectBindingPattern() {
	            var node = createNode(159);
	            parseExpected(15);
	            node.elements = parseDelimitedList(9, parseObjectBindingElement);
	            parseExpected(16);
	            return finishNode(node);
	        }
	        function parseArrayBindingPattern() {
	            var node = createNode(160);
	            parseExpected(19);
	            node.elements = parseDelimitedList(10, parseArrayBindingElement);
	            parseExpected(20);
	            return finishNode(node);
	        }
	        function isIdentifierOrPattern() {
	            return token === 15 || token === 19 || isIdentifier();
	        }
	        function parseIdentifierOrPattern() {
	            if (token === 19) {
	                return parseArrayBindingPattern();
	            }
	            if (token === 15) {
	                return parseObjectBindingPattern();
	            }
	            return parseIdentifier();
	        }
	        function parseVariableDeclaration() {
	            var node = createNode(209);
	            node.name = parseIdentifierOrPattern();
	            node.type = parseTypeAnnotation();
	            if (!isInOrOfKeyword(token)) {
	                node.initializer = parseInitializer(false);
	            }
	            return finishNode(node);
	        }
	        function parseVariableDeclarationList(inForStatementInitializer) {
	            var node = createNode(210);
	            switch (token) {
	                case 100:
	                    break;
	                case 106:
	                    node.flags |= 16384;
	                    break;
	                case 72:
	                    node.flags |= 32768;
	                    break;
	                default:
	                    ts.Debug.fail();
	            }
	            nextToken();
	            if (token === 132 && lookAhead(canFollowContextualOfKeyword)) {
	                node.declarations = createMissingList();
	            }
	            else {
	                var savedDisallowIn = inDisallowInContext();
	                setDisallowInContext(inForStatementInitializer);
	                node.declarations = parseDelimitedList(8, parseVariableDeclaration);
	                setDisallowInContext(savedDisallowIn);
	            }
	            return finishNode(node);
	        }
	        function canFollowContextualOfKeyword() {
	            return nextTokenIsIdentifier() && nextToken() === 18;
	        }
	        function parseVariableStatement(fullStart, decorators, modifiers) {
	            var node = createNode(191, fullStart);
	            node.decorators = decorators;
	            setModifiers(node, modifiers);
	            node.declarationList = parseVariableDeclarationList(false);
	            parseSemicolon();
	            return finishNode(node);
	        }
	        function parseFunctionDeclaration(fullStart, decorators, modifiers) {
	            var node = createNode(211, fullStart);
	            node.decorators = decorators;
	            setModifiers(node, modifiers);
	            parseExpected(85);
	            node.asteriskToken = parseOptionalToken(37);
	            node.name = node.flags & 1024 ? parseOptionalIdentifier() : parseIdentifier();
	            var isGenerator = !!node.asteriskToken;
	            var isAsync = !!(node.flags & 512);
	            fillSignature(53, isGenerator, isAsync, false, node);
	            node.body = parseFunctionBlockOrSemicolon(isGenerator, isAsync, ts.Diagnostics.or_expected);
	            return finishNode(node);
	        }
	        function parseConstructorDeclaration(pos, decorators, modifiers) {
	            var node = createNode(142, pos);
	            node.decorators = decorators;
	            setModifiers(node, modifiers);
	            parseExpected(119);
	            fillSignature(53, false, false, false, node);
	            node.body = parseFunctionBlockOrSemicolon(false, false, ts.Diagnostics.or_expected);
	            return finishNode(node);
	        }
	        function parseMethodDeclaration(fullStart, decorators, modifiers, asteriskToken, name, questionToken, diagnosticMessage) {
	            var method = createNode(141, fullStart);
	            method.decorators = decorators;
	            setModifiers(method, modifiers);
	            method.asteriskToken = asteriskToken;
	            method.name = name;
	            method.questionToken = questionToken;
	            var isGenerator = !!asteriskToken;
	            var isAsync = !!(method.flags & 512);
	            fillSignature(53, isGenerator, isAsync, false, method);
	            method.body = parseFunctionBlockOrSemicolon(isGenerator, isAsync, diagnosticMessage);
	            return finishNode(method);
	        }
	        function parsePropertyDeclaration(fullStart, decorators, modifiers, name, questionToken) {
	            var property = createNode(139, fullStart);
	            property.decorators = decorators;
	            setModifiers(property, modifiers);
	            property.name = name;
	            property.questionToken = questionToken;
	            property.type = parseTypeAnnotation();
	            property.initializer = modifiers && modifiers.flags & 128
	                ? allowInAnd(parseNonParameterInitializer)
	                : doOutsideOfContext(2 | 1, parseNonParameterInitializer);
	            parseSemicolon();
	            return finishNode(property);
	        }
	        function parsePropertyOrMethodDeclaration(fullStart, decorators, modifiers) {
	            var asteriskToken = parseOptionalToken(37);
	            var name = parsePropertyName();
	            var questionToken = parseOptionalToken(52);
	            if (asteriskToken || token === 17 || token === 25) {
	                return parseMethodDeclaration(fullStart, decorators, modifiers, asteriskToken, name, questionToken, ts.Diagnostics.or_expected);
	            }
	            else {
	                return parsePropertyDeclaration(fullStart, decorators, modifiers, name, questionToken);
	            }
	        }
	        function parseNonParameterInitializer() {
	            return parseInitializer(false);
	        }
	        function parseAccessorDeclaration(kind, fullStart, decorators, modifiers) {
	            var node = createNode(kind, fullStart);
	            node.decorators = decorators;
	            setModifiers(node, modifiers);
	            node.name = parsePropertyName();
	            fillSignature(53, false, false, false, node);
	            node.body = parseFunctionBlockOrSemicolon(false, false);
	            return finishNode(node);
	        }
	        function isClassMemberModifier(idToken) {
	            switch (idToken) {
	                case 110:
	                case 108:
	                case 109:
	                case 111:
	                    return true;
	                default:
	                    return false;
	            }
	        }
	        function isClassMemberStart() {
	            var idToken;
	            if (token === 54) {
	                return true;
	            }
	            while (ts.isModifier(token)) {
	                idToken = token;
	                if (isClassMemberModifier(idToken)) {
	                    return true;
	                }
	                nextToken();
	            }
	            if (token === 37) {
	                return true;
	            }
	            if (isLiteralPropertyName()) {
	                idToken = token;
	                nextToken();
	            }
	            if (token === 19) {
	                return true;
	            }
	            if (idToken !== undefined) {
	                if (!ts.isKeyword(idToken) || idToken === 127 || idToken === 121) {
	                    return true;
	                }
	                switch (token) {
	                    case 17:
	                    case 25:
	                    case 53:
	                    case 55:
	                    case 52:
	                        return true;
	                    default:
	                        return canParseSemicolon();
	                }
	            }
	            return false;
	        }
	        function parseDecorators() {
	            var decorators;
	            while (true) {
	                var decoratorStart = getNodePos();
	                if (!parseOptional(54)) {
	                    break;
	                }
	                if (!decorators) {
	                    decorators = [];
	                    decorators.pos = scanner.getStartPos();
	                }
	                var decorator = createNode(137, decoratorStart);
	                decorator.expression = doInDecoratorContext(parseLeftHandSideExpressionOrHigher);
	                decorators.push(finishNode(decorator));
	            }
	            if (decorators) {
	                decorators.end = getNodeEnd();
	            }
	            return decorators;
	        }
	        function parseModifiers() {
	            var flags = 0;
	            var modifiers;
	            while (true) {
	                var modifierStart = scanner.getStartPos();
	                var modifierKind = token;
	                if (!parseAnyContextualModifier()) {
	                    break;
	                }
	                if (!modifiers) {
	                    modifiers = [];
	                    modifiers.pos = modifierStart;
	                }
	                flags |= ts.modifierToFlag(modifierKind);
	                modifiers.push(finishNode(createNode(modifierKind, modifierStart)));
	            }
	            if (modifiers) {
	                modifiers.flags = flags;
	                modifiers.end = scanner.getStartPos();
	            }
	            return modifiers;
	        }
	        function parseModifiersForArrowFunction() {
	            var flags = 0;
	            var modifiers;
	            if (token === 116) {
	                var modifierStart = scanner.getStartPos();
	                var modifierKind = token;
	                nextToken();
	                modifiers = [];
	                modifiers.pos = modifierStart;
	                flags |= ts.modifierToFlag(modifierKind);
	                modifiers.push(finishNode(createNode(modifierKind, modifierStart)));
	                modifiers.flags = flags;
	                modifiers.end = scanner.getStartPos();
	            }
	            return modifiers;
	        }
	        function parseClassElement() {
	            if (token === 23) {
	                var result = createNode(189);
	                nextToken();
	                return finishNode(result);
	            }
	            var fullStart = getNodePos();
	            var decorators = parseDecorators();
	            var modifiers = parseModifiers();
	            var accessor = tryParseAccessorDeclaration(fullStart, decorators, modifiers);
	            if (accessor) {
	                return accessor;
	            }
	            if (token === 119) {
	                return parseConstructorDeclaration(fullStart, decorators, modifiers);
	            }
	            if (isIndexSignature()) {
	                return parseIndexSignatureDeclaration(fullStart, decorators, modifiers);
	            }
	            if (isIdentifierOrKeyword() ||
	                token === 9 ||
	                token === 8 ||
	                token === 37 ||
	                token === 19) {
	                return parsePropertyOrMethodDeclaration(fullStart, decorators, modifiers);
	            }
	            if (decorators || modifiers) {
	                var name_7 = createMissingNode(67, true, ts.Diagnostics.Declaration_expected);
	                return parsePropertyDeclaration(fullStart, decorators, modifiers, name_7, undefined);
	            }
	            ts.Debug.fail("Should not have attempted to parse class member declaration.");
	        }
	        function parseClassExpression() {
	            return parseClassDeclarationOrExpression(scanner.getStartPos(), undefined, undefined, 184);
	        }
	        function parseClassDeclaration(fullStart, decorators, modifiers) {
	            return parseClassDeclarationOrExpression(fullStart, decorators, modifiers, 212);
	        }
	        function parseClassDeclarationOrExpression(fullStart, decorators, modifiers, kind) {
	            var node = createNode(kind, fullStart);
	            node.decorators = decorators;
	            setModifiers(node, modifiers);
	            parseExpected(71);
	            node.name = parseOptionalIdentifier();
	            node.typeParameters = parseTypeParameters();
	            node.heritageClauses = parseHeritageClauses(true);
	            if (parseExpected(15)) {
	                node.members = parseClassMembers();
	                parseExpected(16);
	            }
	            else {
	                node.members = createMissingList();
	            }
	            return finishNode(node);
	        }
	        function parseHeritageClauses(isClassHeritageClause) {
	            // ClassTail[Yield,Await] : (Modified) See 14.5
	            //      ClassHeritage[?Yield,?Await]opt { ClassBody[?Yield,?Await]opt }
	            if (isHeritageClause()) {
	                return parseList(20, parseHeritageClause);
	            }
	            return undefined;
	        }
	        function parseHeritageClausesWorker() {
	            return parseList(20, parseHeritageClause);
	        }
	        function parseHeritageClause() {
	            if (token === 81 || token === 104) {
	                var node = createNode(241);
	                node.token = token;
	                nextToken();
	                node.types = parseDelimitedList(7, parseExpressionWithTypeArguments);
	                return finishNode(node);
	            }
	            return undefined;
	        }
	        function parseExpressionWithTypeArguments() {
	            var node = createNode(186);
	            node.expression = parseLeftHandSideExpressionOrHigher();
	            if (token === 25) {
	                node.typeArguments = parseBracketedList(18, parseType, 25, 27);
	            }
	            return finishNode(node);
	        }
	        function isHeritageClause() {
	            return token === 81 || token === 104;
	        }
	        function parseClassMembers() {
	            return parseList(5, parseClassElement);
	        }
	        function parseInterfaceDeclaration(fullStart, decorators, modifiers) {
	            var node = createNode(213, fullStart);
	            node.decorators = decorators;
	            setModifiers(node, modifiers);
	            parseExpected(105);
	            node.name = parseIdentifier();
	            node.typeParameters = parseTypeParameters();
	            node.heritageClauses = parseHeritageClauses(false);
	            node.members = parseObjectTypeMembers();
	            return finishNode(node);
	        }
	        function parseTypeAliasDeclaration(fullStart, decorators, modifiers) {
	            var node = createNode(214, fullStart);
	            node.decorators = decorators;
	            setModifiers(node, modifiers);
	            parseExpected(130);
	            node.name = parseIdentifier();
	            node.typeParameters = parseTypeParameters();
	            parseExpected(55);
	            node.type = parseType();
	            parseSemicolon();
	            return finishNode(node);
	        }
	        function parseEnumMember() {
	            var node = createNode(245, scanner.getStartPos());
	            node.name = parsePropertyName();
	            node.initializer = allowInAnd(parseNonParameterInitializer);
	            return finishNode(node);
	        }
	        function parseEnumDeclaration(fullStart, decorators, modifiers) {
	            var node = createNode(215, fullStart);
	            node.decorators = decorators;
	            setModifiers(node, modifiers);
	            parseExpected(79);
	            node.name = parseIdentifier();
	            if (parseExpected(15)) {
	                node.members = parseDelimitedList(6, parseEnumMember);
	                parseExpected(16);
	            }
	            else {
	                node.members = createMissingList();
	            }
	            return finishNode(node);
	        }
	        function parseModuleBlock() {
	            var node = createNode(217, scanner.getStartPos());
	            if (parseExpected(15)) {
	                node.statements = parseList(1, parseStatement);
	                parseExpected(16);
	            }
	            else {
	                node.statements = createMissingList();
	            }
	            return finishNode(node);
	        }
	        function parseModuleOrNamespaceDeclaration(fullStart, decorators, modifiers, flags) {
	            var node = createNode(216, fullStart);
	            node.decorators = decorators;
	            setModifiers(node, modifiers);
	            node.flags |= flags;
	            node.name = parseIdentifier();
	            node.body = parseOptional(21)
	                ? parseModuleOrNamespaceDeclaration(getNodePos(), undefined, undefined, 1)
	                : parseModuleBlock();
	            return finishNode(node);
	        }
	        function parseAmbientExternalModuleDeclaration(fullStart, decorators, modifiers) {
	            var node = createNode(216, fullStart);
	            node.decorators = decorators;
	            setModifiers(node, modifiers);
	            node.name = parseLiteralNode(true);
	            node.body = parseModuleBlock();
	            return finishNode(node);
	        }
	        function parseModuleDeclaration(fullStart, decorators, modifiers) {
	            var flags = modifiers ? modifiers.flags : 0;
	            if (parseOptional(124)) {
	                flags |= 131072;
	            }
	            else {
	                parseExpected(123);
	                if (token === 9) {
	                    return parseAmbientExternalModuleDeclaration(fullStart, decorators, modifiers);
	                }
	            }
	            return parseModuleOrNamespaceDeclaration(fullStart, decorators, modifiers, flags);
	        }
	        function isExternalModuleReference() {
	            return token === 125 &&
	                lookAhead(nextTokenIsOpenParen);
	        }
	        function nextTokenIsOpenParen() {
	            return nextToken() === 17;
	        }
	        function nextTokenIsSlash() {
	            return nextToken() === 38;
	        }
	        function nextTokenIsCommaOrFromKeyword() {
	            nextToken();
	            return token === 24 ||
	                token === 131;
	        }
	        function parseImportDeclarationOrImportEqualsDeclaration(fullStart, decorators, modifiers) {
	            parseExpected(87);
	            var afterImportPos = scanner.getStartPos();
	            var identifier;
	            if (isIdentifier()) {
	                identifier = parseIdentifier();
	                if (token !== 24 && token !== 131) {
	                    var importEqualsDeclaration = createNode(219, fullStart);
	                    importEqualsDeclaration.decorators = decorators;
	                    setModifiers(importEqualsDeclaration, modifiers);
	                    importEqualsDeclaration.name = identifier;
	                    parseExpected(55);
	                    importEqualsDeclaration.moduleReference = parseModuleReference();
	                    parseSemicolon();
	                    return finishNode(importEqualsDeclaration);
	                }
	            }
	            var importDeclaration = createNode(220, fullStart);
	            importDeclaration.decorators = decorators;
	            setModifiers(importDeclaration, modifiers);
	            if (identifier ||
	                token === 37 ||
	                token === 15) {
	                importDeclaration.importClause = parseImportClause(identifier, afterImportPos);
	                parseExpected(131);
	            }
	            importDeclaration.moduleSpecifier = parseModuleSpecifier();
	            parseSemicolon();
	            return finishNode(importDeclaration);
	        }
	        function parseImportClause(identifier, fullStart) {
	            // ImportClause:
	            //  ImportedDefaultBinding
	            //  NameSpaceImport
	            //  NamedImports
	            //  ImportedDefaultBinding, NameSpaceImport
	            //  ImportedDefaultBinding, NamedImports
	            var importClause = createNode(221, fullStart);
	            if (identifier) {
	                importClause.name = identifier;
	            }
	            if (!importClause.name ||
	                parseOptional(24)) {
	                importClause.namedBindings = token === 37 ? parseNamespaceImport() : parseNamedImportsOrExports(223);
	            }
	            return finishNode(importClause);
	        }
	        function parseModuleReference() {
	            return isExternalModuleReference()
	                ? parseExternalModuleReference()
	                : parseEntityName(false);
	        }
	        function parseExternalModuleReference() {
	            var node = createNode(230);
	            parseExpected(125);
	            parseExpected(17);
	            node.expression = parseModuleSpecifier();
	            parseExpected(18);
	            return finishNode(node);
	        }
	        function parseModuleSpecifier() {
	            var result = parseExpression();
	            if (result.kind === 9) {
	                internIdentifier(result.text);
	            }
	            return result;
	        }
	        function parseNamespaceImport() {
	            var namespaceImport = createNode(222);
	            parseExpected(37);
	            parseExpected(114);
	            namespaceImport.name = parseIdentifier();
	            return finishNode(namespaceImport);
	        }
	        function parseNamedImportsOrExports(kind) {
	            var node = createNode(kind);
	            node.elements = parseBracketedList(21, kind === 223 ? parseImportSpecifier : parseExportSpecifier, 15, 16);
	            return finishNode(node);
	        }
	        function parseExportSpecifier() {
	            return parseImportOrExportSpecifier(228);
	        }
	        function parseImportSpecifier() {
	            return parseImportOrExportSpecifier(224);
	        }
	        function parseImportOrExportSpecifier(kind) {
	            var node = createNode(kind);
	            var checkIdentifierIsKeyword = ts.isKeyword(token) && !isIdentifier();
	            var checkIdentifierStart = scanner.getTokenPos();
	            var checkIdentifierEnd = scanner.getTextPos();
	            var identifierName = parseIdentifierName();
	            if (token === 114) {
	                node.propertyName = identifierName;
	                parseExpected(114);
	                checkIdentifierIsKeyword = ts.isKeyword(token) && !isIdentifier();
	                checkIdentifierStart = scanner.getTokenPos();
	                checkIdentifierEnd = scanner.getTextPos();
	                node.name = parseIdentifierName();
	            }
	            else {
	                node.name = identifierName;
	            }
	            if (kind === 224 && checkIdentifierIsKeyword) {
	                parseErrorAtPosition(checkIdentifierStart, checkIdentifierEnd - checkIdentifierStart, ts.Diagnostics.Identifier_expected);
	            }
	            return finishNode(node);
	        }
	        function parseExportDeclaration(fullStart, decorators, modifiers) {
	            var node = createNode(226, fullStart);
	            node.decorators = decorators;
	            setModifiers(node, modifiers);
	            if (parseOptional(37)) {
	                parseExpected(131);
	                node.moduleSpecifier = parseModuleSpecifier();
	            }
	            else {
	                node.exportClause = parseNamedImportsOrExports(227);
	                if (token === 131 || (token === 9 && !scanner.hasPrecedingLineBreak())) {
	                    parseExpected(131);
	                    node.moduleSpecifier = parseModuleSpecifier();
	                }
	            }
	            parseSemicolon();
	            return finishNode(node);
	        }
	        function parseExportAssignment(fullStart, decorators, modifiers) {
	            var node = createNode(225, fullStart);
	            node.decorators = decorators;
	            setModifiers(node, modifiers);
	            if (parseOptional(55)) {
	                node.isExportEquals = true;
	            }
	            else {
	                parseExpected(75);
	            }
	            node.expression = parseAssignmentExpressionOrHigher();
	            parseSemicolon();
	            return finishNode(node);
	        }
	        function processReferenceComments(sourceFile) {
	            var triviaScanner = ts.createScanner(sourceFile.languageVersion, false, 0, sourceText);
	            var referencedFiles = [];
	            var amdDependencies = [];
	            var amdModuleName;
	            while (true) {
	                var kind = triviaScanner.scan();
	                if (kind === 5 || kind === 4 || kind === 3) {
	                    continue;
	                }
	                if (kind !== 2) {
	                    break;
	                }
	                var range = { pos: triviaScanner.getTokenPos(), end: triviaScanner.getTextPos(), kind: triviaScanner.getToken() };
	                var comment = sourceText.substring(range.pos, range.end);
	                var referencePathMatchResult = ts.getFileReferenceFromReferencePath(comment, range);
	                if (referencePathMatchResult) {
	                    var fileReference = referencePathMatchResult.fileReference;
	                    sourceFile.hasNoDefaultLib = referencePathMatchResult.isNoDefaultLib;
	                    var diagnosticMessage = referencePathMatchResult.diagnosticMessage;
	                    if (fileReference) {
	                        referencedFiles.push(fileReference);
	                    }
	                    if (diagnosticMessage) {
	                        parseDiagnostics.push(ts.createFileDiagnostic(sourceFile, range.pos, range.end - range.pos, diagnosticMessage));
	                    }
	                }
	                else {
	                    var amdModuleNameRegEx = /^\/\/\/\s*<amd-module\s+name\s*=\s*('|")(.+?)\1/gim;
	                    var amdModuleNameMatchResult = amdModuleNameRegEx.exec(comment);
	                    if (amdModuleNameMatchResult) {
	                        if (amdModuleName) {
	                            parseDiagnostics.push(ts.createFileDiagnostic(sourceFile, range.pos, range.end - range.pos, ts.Diagnostics.An_AMD_module_cannot_have_multiple_name_assignments));
	                        }
	                        amdModuleName = amdModuleNameMatchResult[2];
	                    }
	                    var amdDependencyRegEx = /^\/\/\/\s*<amd-dependency\s/gim;
	                    var pathRegex = /\spath\s*=\s*('|")(.+?)\1/gim;
	                    var nameRegex = /\sname\s*=\s*('|")(.+?)\1/gim;
	                    var amdDependencyMatchResult = amdDependencyRegEx.exec(comment);
	                    if (amdDependencyMatchResult) {
	                        var pathMatchResult = pathRegex.exec(comment);
	                        var nameMatchResult = nameRegex.exec(comment);
	                        if (pathMatchResult) {
	                            var amdDependency = { path: pathMatchResult[2], name: nameMatchResult ? nameMatchResult[2] : undefined };
	                            amdDependencies.push(amdDependency);
	                        }
	                    }
	                }
	            }
	            sourceFile.referencedFiles = referencedFiles;
	            sourceFile.amdDependencies = amdDependencies;
	            sourceFile.moduleName = amdModuleName;
	        }
	        function setExternalModuleIndicator(sourceFile) {
	            sourceFile.externalModuleIndicator = ts.forEach(sourceFile.statements, function (node) {
	                return node.flags & 1
	                    || node.kind === 219 && node.moduleReference.kind === 230
	                    || node.kind === 220
	                    || node.kind === 225
	                    || node.kind === 226
	                    ? node
	                    : undefined;
	            });
	        }
	        var JSDocParser;
	        (function (JSDocParser) {
	            function isJSDocType() {
	                switch (token) {
	                    case 37:
	                    case 52:
	                    case 17:
	                    case 19:
	                    case 48:
	                    case 15:
	                    case 85:
	                    case 22:
	                    case 90:
	                    case 95:
	                        return true;
	                }
	                return isIdentifierOrKeyword();
	            }
	            JSDocParser.isJSDocType = isJSDocType;
	            function parseJSDocTypeExpressionForTests(content, start, length) {
	                initializeState("file.js", content, 2, undefined);
	                var jsDocTypeExpression = parseJSDocTypeExpression(start, length);
	                var diagnostics = parseDiagnostics;
	                clearState();
	                return jsDocTypeExpression ? { jsDocTypeExpression: jsDocTypeExpression, diagnostics: diagnostics } : undefined;
	            }
	            JSDocParser.parseJSDocTypeExpressionForTests = parseJSDocTypeExpressionForTests;
	            function parseJSDocTypeExpression(start, length) {
	                scanner.setText(sourceText, start, length);
	                token = nextToken();
	                var result = createNode(247);
	                parseExpected(15);
	                result.type = parseJSDocTopLevelType();
	                parseExpected(16);
	                fixupParentReferences(result);
	                return finishNode(result);
	            }
	            JSDocParser.parseJSDocTypeExpression = parseJSDocTypeExpression;
	            function parseJSDocTopLevelType() {
	                var type = parseJSDocType();
	                if (token === 46) {
	                    var unionType = createNode(251, type.pos);
	                    unionType.types = parseJSDocTypeList(type);
	                    type = finishNode(unionType);
	                }
	                if (token === 55) {
	                    var optionalType = createNode(258, type.pos);
	                    nextToken();
	                    optionalType.type = type;
	                    type = finishNode(optionalType);
	                }
	                return type;
	            }
	            function parseJSDocType() {
	                var type = parseBasicTypeExpression();
	                while (true) {
	                    if (token === 19) {
	                        var arrayType = createNode(250, type.pos);
	                        arrayType.elementType = type;
	                        nextToken();
	                        parseExpected(20);
	                        type = finishNode(arrayType);
	                    }
	                    else if (token === 52) {
	                        var nullableType = createNode(253, type.pos);
	                        nullableType.type = type;
	                        nextToken();
	                        type = finishNode(nullableType);
	                    }
	                    else if (token === 48) {
	                        var nonNullableType = createNode(254, type.pos);
	                        nonNullableType.type = type;
	                        nextToken();
	                        type = finishNode(nonNullableType);
	                    }
	                    else {
	                        break;
	                    }
	                }
	                return type;
	            }
	            function parseBasicTypeExpression() {
	                switch (token) {
	                    case 37:
	                        return parseJSDocAllType();
	                    case 52:
	                        return parseJSDocUnknownOrNullableType();
	                    case 17:
	                        return parseJSDocUnionType();
	                    case 19:
	                        return parseJSDocTupleType();
	                    case 48:
	                        return parseJSDocNonNullableType();
	                    case 15:
	                        return parseJSDocRecordType();
	                    case 85:
	                        return parseJSDocFunctionType();
	                    case 22:
	                        return parseJSDocVariadicType();
	                    case 90:
	                        return parseJSDocConstructorType();
	                    case 95:
	                        return parseJSDocThisType();
	                    case 115:
	                    case 128:
	                    case 126:
	                    case 118:
	                    case 129:
	                    case 101:
	                        return parseTokenNode();
	                }
	                return parseJSDocTypeReference();
	            }
	            function parseJSDocThisType() {
	                var result = createNode(262);
	                nextToken();
	                parseExpected(53);
	                result.type = parseJSDocType();
	                return finishNode(result);
	            }
	            function parseJSDocConstructorType() {
	                var result = createNode(261);
	                nextToken();
	                parseExpected(53);
	                result.type = parseJSDocType();
	                return finishNode(result);
	            }
	            function parseJSDocVariadicType() {
	                var result = createNode(260);
	                nextToken();
	                result.type = parseJSDocType();
	                return finishNode(result);
	            }
	            function parseJSDocFunctionType() {
	                var result = createNode(259);
	                nextToken();
	                parseExpected(17);
	                result.parameters = parseDelimitedList(22, parseJSDocParameter);
	                checkForTrailingComma(result.parameters);
	                parseExpected(18);
	                if (token === 53) {
	                    nextToken();
	                    result.type = parseJSDocType();
	                }
	                return finishNode(result);
	            }
	            function parseJSDocParameter() {
	                var parameter = createNode(136);
	                parameter.type = parseJSDocType();
	                return finishNode(parameter);
	            }
	            function parseJSDocOptionalType(type) {
	                var result = createNode(258, type.pos);
	                nextToken();
	                result.type = type;
	                return finishNode(result);
	            }
	            function parseJSDocTypeReference() {
	                var result = createNode(257);
	                result.name = parseSimplePropertyName();
	                while (parseOptional(21)) {
	                    if (token === 25) {
	                        result.typeArguments = parseTypeArguments();
	                        break;
	                    }
	                    else {
	                        result.name = parseQualifiedName(result.name);
	                    }
	                }
	                return finishNode(result);
	            }
	            function parseTypeArguments() {
	                nextToken();
	                var typeArguments = parseDelimitedList(23, parseJSDocType);
	                checkForTrailingComma(typeArguments);
	                checkForEmptyTypeArgumentList(typeArguments);
	                parseExpected(27);
	                return typeArguments;
	            }
	            function checkForEmptyTypeArgumentList(typeArguments) {
	                if (parseDiagnostics.length === 0 && typeArguments && typeArguments.length === 0) {
	                    var start = typeArguments.pos - "<".length;
	                    var end = ts.skipTrivia(sourceText, typeArguments.end) + ">".length;
	                    return parseErrorAtPosition(start, end - start, ts.Diagnostics.Type_argument_list_cannot_be_empty);
	                }
	            }
	            function parseQualifiedName(left) {
	                var result = createNode(133, left.pos);
	                result.left = left;
	                result.right = parseIdentifierName();
	                return finishNode(result);
	            }
	            function parseJSDocRecordType() {
	                var result = createNode(255);
	                nextToken();
	                result.members = parseDelimitedList(24, parseJSDocRecordMember);
	                checkForTrailingComma(result.members);
	                parseExpected(16);
	                return finishNode(result);
	            }
	            function parseJSDocRecordMember() {
	                var result = createNode(256);
	                result.name = parseSimplePropertyName();
	                if (token === 53) {
	                    nextToken();
	                    result.type = parseJSDocType();
	                }
	                return finishNode(result);
	            }
	            function parseJSDocNonNullableType() {
	                var result = createNode(254);
	                nextToken();
	                result.type = parseJSDocType();
	                return finishNode(result);
	            }
	            function parseJSDocTupleType() {
	                var result = createNode(252);
	                nextToken();
	                result.types = parseDelimitedList(25, parseJSDocType);
	                checkForTrailingComma(result.types);
	                parseExpected(20);
	                return finishNode(result);
	            }
	            function checkForTrailingComma(list) {
	                if (parseDiagnostics.length === 0 && list.hasTrailingComma) {
	                    var start = list.end - ",".length;
	                    parseErrorAtPosition(start, ",".length, ts.Diagnostics.Trailing_comma_not_allowed);
	                }
	            }
	            function parseJSDocUnionType() {
	                var result = createNode(251);
	                nextToken();
	                result.types = parseJSDocTypeList(parseJSDocType());
	                parseExpected(18);
	                return finishNode(result);
	            }
	            function parseJSDocTypeList(firstType) {
	                ts.Debug.assert(!!firstType);
	                var types = [];
	                types.pos = firstType.pos;
	                types.push(firstType);
	                while (parseOptional(46)) {
	                    types.push(parseJSDocType());
	                }
	                types.end = scanner.getStartPos();
	                return types;
	            }
	            function parseJSDocAllType() {
	                var result = createNode(248);
	                nextToken();
	                return finishNode(result);
	            }
	            function parseJSDocUnknownOrNullableType() {
	                var pos = scanner.getStartPos();
	                nextToken();
	                if (token === 24 ||
	                    token === 16 ||
	                    token === 18 ||
	                    token === 27 ||
	                    token === 55 ||
	                    token === 46) {
	                    var result = createNode(249, pos);
	                    return finishNode(result);
	                }
	                else {
	                    var result = createNode(253, pos);
	                    result.type = parseJSDocType();
	                    return finishNode(result);
	                }
	            }
	            function parseIsolatedJSDocComment(content, start, length) {
	                initializeState("file.js", content, 2, undefined);
	                var jsDocComment = parseJSDocComment(undefined, start, length);
	                var diagnostics = parseDiagnostics;
	                clearState();
	                return jsDocComment ? { jsDocComment: jsDocComment, diagnostics: diagnostics } : undefined;
	            }
	            JSDocParser.parseIsolatedJSDocComment = parseIsolatedJSDocComment;
	            function parseJSDocComment(parent, start, length) {
	                var comment = parseJSDocCommentWorker(start, length);
	                if (comment) {
	                    fixupParentReferences(comment);
	                    comment.parent = parent;
	                }
	                return comment;
	            }
	            JSDocParser.parseJSDocComment = parseJSDocComment;
	            function parseJSDocCommentWorker(start, length) {
	                var content = sourceText;
	                start = start || 0;
	                var end = length === undefined ? content.length : start + length;
	                length = end - start;
	                ts.Debug.assert(start >= 0);
	                ts.Debug.assert(start <= end);
	                ts.Debug.assert(end <= content.length);
	                var tags;
	                var pos;
	                if (length >= "/** */".length) {
	                    if (content.charCodeAt(start) === 47 &&
	                        content.charCodeAt(start + 1) === 42 &&
	                        content.charCodeAt(start + 2) === 42 &&
	                        content.charCodeAt(start + 3) !== 42) {
	                        var canParseTag = true;
	                        var seenAsterisk = true;
	                        for (pos = start + "/**".length; pos < end;) {
	                            var ch = content.charCodeAt(pos);
	                            pos++;
	                            if (ch === 64 && canParseTag) {
	                                parseTag();
	                                canParseTag = false;
	                                continue;
	                            }
	                            if (ts.isLineBreak(ch)) {
	                                canParseTag = true;
	                                seenAsterisk = false;
	                                continue;
	                            }
	                            if (ts.isWhiteSpace(ch)) {
	                                continue;
	                            }
	                            if (ch === 42) {
	                                if (seenAsterisk) {
	                                    canParseTag = false;
	                                }
	                                seenAsterisk = true;
	                                continue;
	                            }
	                            canParseTag = false;
	                        }
	                    }
	                }
	                return createJSDocComment();
	                function createJSDocComment() {
	                    if (!tags) {
	                        return undefined;
	                    }
	                    var result = createNode(263, start);
	                    result.tags = tags;
	                    return finishNode(result, end);
	                }
	                function skipWhitespace() {
	                    while (pos < end && ts.isWhiteSpace(content.charCodeAt(pos))) {
	                        pos++;
	                    }
	                }
	                function parseTag() {
	                    ts.Debug.assert(content.charCodeAt(pos - 1) === 64);
	                    var atToken = createNode(54, pos - 1);
	                    atToken.end = pos;
	                    var tagName = scanIdentifier();
	                    if (!tagName) {
	                        return;
	                    }
	                    var tag = handleTag(atToken, tagName) || handleUnknownTag(atToken, tagName);
	                    addTag(tag);
	                }
	                function handleTag(atToken, tagName) {
	                    if (tagName) {
	                        switch (tagName.text) {
	                            case "param":
	                                return handleParamTag(atToken, tagName);
	                            case "return":
	                            case "returns":
	                                return handleReturnTag(atToken, tagName);
	                            case "template":
	                                return handleTemplateTag(atToken, tagName);
	                            case "type":
	                                return handleTypeTag(atToken, tagName);
	                        }
	                    }
	                    return undefined;
	                }
	                function handleUnknownTag(atToken, tagName) {
	                    var result = createNode(264, atToken.pos);
	                    result.atToken = atToken;
	                    result.tagName = tagName;
	                    return finishNode(result, pos);
	                }
	                function addTag(tag) {
	                    if (tag) {
	                        if (!tags) {
	                            tags = [];
	                            tags.pos = tag.pos;
	                        }
	                        tags.push(tag);
	                        tags.end = tag.end;
	                    }
	                }
	                function tryParseTypeExpression() {
	                    skipWhitespace();
	                    if (content.charCodeAt(pos) !== 123) {
	                        return undefined;
	                    }
	                    var typeExpression = parseJSDocTypeExpression(pos, end - pos);
	                    pos = typeExpression.end;
	                    return typeExpression;
	                }
	                function handleParamTag(atToken, tagName) {
	                    var typeExpression = tryParseTypeExpression();
	                    skipWhitespace();
	                    var name;
	                    var isBracketed;
	                    if (content.charCodeAt(pos) === 91) {
	                        pos++;
	                        skipWhitespace();
	                        name = scanIdentifier();
	                        isBracketed = true;
	                    }
	                    else {
	                        name = scanIdentifier();
	                    }
	                    if (!name) {
	                        parseErrorAtPosition(pos, 0, ts.Diagnostics.Identifier_expected);
	                    }
	                    var preName, postName;
	                    if (typeExpression) {
	                        postName = name;
	                    }
	                    else {
	                        preName = name;
	                    }
	                    if (!typeExpression) {
	                        typeExpression = tryParseTypeExpression();
	                    }
	                    var result = createNode(265, atToken.pos);
	                    result.atToken = atToken;
	                    result.tagName = tagName;
	                    result.preParameterName = preName;
	                    result.typeExpression = typeExpression;
	                    result.postParameterName = postName;
	                    result.isBracketed = isBracketed;
	                    return finishNode(result, pos);
	                }
	                function handleReturnTag(atToken, tagName) {
	                    if (ts.forEach(tags, function (t) { return t.kind === 266; })) {
	                        parseErrorAtPosition(tagName.pos, pos - tagName.pos, ts.Diagnostics._0_tag_already_specified, tagName.text);
	                    }
	                    var result = createNode(266, atToken.pos);
	                    result.atToken = atToken;
	                    result.tagName = tagName;
	                    result.typeExpression = tryParseTypeExpression();
	                    return finishNode(result, pos);
	                }
	                function handleTypeTag(atToken, tagName) {
	                    if (ts.forEach(tags, function (t) { return t.kind === 267; })) {
	                        parseErrorAtPosition(tagName.pos, pos - tagName.pos, ts.Diagnostics._0_tag_already_specified, tagName.text);
	                    }
	                    var result = createNode(267, atToken.pos);
	                    result.atToken = atToken;
	                    result.tagName = tagName;
	                    result.typeExpression = tryParseTypeExpression();
	                    return finishNode(result, pos);
	                }
	                function handleTemplateTag(atToken, tagName) {
	                    if (ts.forEach(tags, function (t) { return t.kind === 268; })) {
	                        parseErrorAtPosition(tagName.pos, pos - tagName.pos, ts.Diagnostics._0_tag_already_specified, tagName.text);
	                    }
	                    var typeParameters = [];
	                    typeParameters.pos = pos;
	                    while (true) {
	                        skipWhitespace();
	                        var startPos = pos;
	                        var name_8 = scanIdentifier();
	                        if (!name_8) {
	                            parseErrorAtPosition(startPos, 0, ts.Diagnostics.Identifier_expected);
	                            return undefined;
	                        }
	                        var typeParameter = createNode(135, name_8.pos);
	                        typeParameter.name = name_8;
	                        finishNode(typeParameter, pos);
	                        typeParameters.push(typeParameter);
	                        skipWhitespace();
	                        if (content.charCodeAt(pos) !== 44) {
	                            break;
	                        }
	                        pos++;
	                    }
	                    typeParameters.end = pos;
	                    var result = createNode(268, atToken.pos);
	                    result.atToken = atToken;
	                    result.tagName = tagName;
	                    result.typeParameters = typeParameters;
	                    return finishNode(result, pos);
	                }
	                function scanIdentifier() {
	                    var startPos = pos;
	                    for (; pos < end; pos++) {
	                        var ch = content.charCodeAt(pos);
	                        if (pos === startPos && ts.isIdentifierStart(ch, 2)) {
	                            continue;
	                        }
	                        else if (pos > startPos && ts.isIdentifierPart(ch, 2)) {
	                            continue;
	                        }
	                        break;
	                    }
	                    if (startPos === pos) {
	                        return undefined;
	                    }
	                    var result = createNode(67, startPos);
	                    result.text = content.substring(startPos, pos);
	                    return finishNode(result, pos);
	                }
	            }
	            JSDocParser.parseJSDocCommentWorker = parseJSDocCommentWorker;
	        })(JSDocParser = Parser.JSDocParser || (Parser.JSDocParser = {}));
	    })(Parser || (Parser = {}));
	    var IncrementalParser;
	    (function (IncrementalParser) {
	        function updateSourceFile(sourceFile, newText, textChangeRange, aggressiveChecks) {
	            aggressiveChecks = aggressiveChecks || ts.Debug.shouldAssert(2);
	            checkChangeRange(sourceFile, newText, textChangeRange, aggressiveChecks);
	            if (ts.textChangeRangeIsUnchanged(textChangeRange)) {
	                return sourceFile;
	            }
	            if (sourceFile.statements.length === 0) {
	                return Parser.parseSourceFile(sourceFile.fileName, newText, sourceFile.languageVersion, undefined, true);
	            }
	            var incrementalSourceFile = sourceFile;
	            ts.Debug.assert(!incrementalSourceFile.hasBeenIncrementallyParsed);
	            incrementalSourceFile.hasBeenIncrementallyParsed = true;
	            var oldText = sourceFile.text;
	            var syntaxCursor = createSyntaxCursor(sourceFile);
	            var changeRange = extendToAffectedRange(sourceFile, textChangeRange);
	            checkChangeRange(sourceFile, newText, changeRange, aggressiveChecks);
	            ts.Debug.assert(changeRange.span.start <= textChangeRange.span.start);
	            ts.Debug.assert(ts.textSpanEnd(changeRange.span) === ts.textSpanEnd(textChangeRange.span));
	            ts.Debug.assert(ts.textSpanEnd(ts.textChangeRangeNewSpan(changeRange)) === ts.textSpanEnd(ts.textChangeRangeNewSpan(textChangeRange)));
	            var delta = ts.textChangeRangeNewSpan(changeRange).length - changeRange.span.length;
	            updateTokenPositionsAndMarkElements(incrementalSourceFile, changeRange.span.start, ts.textSpanEnd(changeRange.span), ts.textSpanEnd(ts.textChangeRangeNewSpan(changeRange)), delta, oldText, newText, aggressiveChecks);
	            var result = Parser.parseSourceFile(sourceFile.fileName, newText, sourceFile.languageVersion, syntaxCursor, true);
	            return result;
	        }
	        IncrementalParser.updateSourceFile = updateSourceFile;
	        function moveElementEntirelyPastChangeRange(element, isArray, delta, oldText, newText, aggressiveChecks) {
	            if (isArray) {
	                visitArray(element);
	            }
	            else {
	                visitNode(element);
	            }
	            return;
	            function visitNode(node) {
	                var text = "";
	                if (aggressiveChecks && shouldCheckNode(node)) {
	                    text = oldText.substring(node.pos, node.end);
	                }
	                if (node._children) {
	                    node._children = undefined;
	                }
	                if (node.jsDocComment) {
	                    node.jsDocComment = undefined;
	                }
	                node.pos += delta;
	                node.end += delta;
	                if (aggressiveChecks && shouldCheckNode(node)) {
	                    ts.Debug.assert(text === newText.substring(node.pos, node.end));
	                }
	                forEachChild(node, visitNode, visitArray);
	                checkNodePositions(node, aggressiveChecks);
	            }
	            function visitArray(array) {
	                array._children = undefined;
	                array.pos += delta;
	                array.end += delta;
	                for (var _i = 0; _i < array.length; _i++) {
	                    var node = array[_i];
	                    visitNode(node);
	                }
	            }
	        }
	        function shouldCheckNode(node) {
	            switch (node.kind) {
	                case 9:
	                case 8:
	                case 67:
	                    return true;
	            }
	            return false;
	        }
	        function adjustIntersectingElement(element, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta) {
	            ts.Debug.assert(element.end >= changeStart, "Adjusting an element that was entirely before the change range");
	            ts.Debug.assert(element.pos <= changeRangeOldEnd, "Adjusting an element that was entirely after the change range");
	            ts.Debug.assert(element.pos <= element.end);
	            element.pos = Math.min(element.pos, changeRangeNewEnd);
	            if (element.end >= changeRangeOldEnd) {
	                element.end += delta;
	            }
	            else {
	                element.end = Math.min(element.end, changeRangeNewEnd);
	            }
	            ts.Debug.assert(element.pos <= element.end);
	            if (element.parent) {
	                ts.Debug.assert(element.pos >= element.parent.pos);
	                ts.Debug.assert(element.end <= element.parent.end);
	            }
	        }
	        function checkNodePositions(node, aggressiveChecks) {
	            if (aggressiveChecks) {
	                var pos = node.pos;
	                forEachChild(node, function (child) {
	                    ts.Debug.assert(child.pos >= pos);
	                    pos = child.end;
	                });
	                ts.Debug.assert(pos <= node.end);
	            }
	        }
	        function updateTokenPositionsAndMarkElements(sourceFile, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta, oldText, newText, aggressiveChecks) {
	            visitNode(sourceFile);
	            return;
	            function visitNode(child) {
	                ts.Debug.assert(child.pos <= child.end);
	                if (child.pos > changeRangeOldEnd) {
	                    moveElementEntirelyPastChangeRange(child, false, delta, oldText, newText, aggressiveChecks);
	                    return;
	                }
	                var fullEnd = child.end;
	                if (fullEnd >= changeStart) {
	                    child.intersectsChange = true;
	                    child._children = undefined;
	                    adjustIntersectingElement(child, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta);
	                    forEachChild(child, visitNode, visitArray);
	                    checkNodePositions(child, aggressiveChecks);
	                    return;
	                }
	                ts.Debug.assert(fullEnd < changeStart);
	            }
	            function visitArray(array) {
	                ts.Debug.assert(array.pos <= array.end);
	                if (array.pos > changeRangeOldEnd) {
	                    moveElementEntirelyPastChangeRange(array, true, delta, oldText, newText, aggressiveChecks);
	                    return;
	                }
	                var fullEnd = array.end;
	                if (fullEnd >= changeStart) {
	                    array.intersectsChange = true;
	                    array._children = undefined;
	                    adjustIntersectingElement(array, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta);
	                    for (var _i = 0; _i < array.length; _i++) {
	                        var node = array[_i];
	                        visitNode(node);
	                    }
	                    return;
	                }
	                ts.Debug.assert(fullEnd < changeStart);
	            }
	        }
	        function extendToAffectedRange(sourceFile, changeRange) {
	            var maxLookahead = 1;
	            var start = changeRange.span.start;
	            for (var i = 0; start > 0 && i <= maxLookahead; i++) {
	                var nearestNode = findNearestNodeStartingBeforeOrAtPosition(sourceFile, start);
	                ts.Debug.assert(nearestNode.pos <= start);
	                var position = nearestNode.pos;
	                start = Math.max(0, position - 1);
	            }
	            var finalSpan = ts.createTextSpanFromBounds(start, ts.textSpanEnd(changeRange.span));
	            var finalLength = changeRange.newLength + (changeRange.span.start - start);
	            return ts.createTextChangeRange(finalSpan, finalLength);
	        }
	        function findNearestNodeStartingBeforeOrAtPosition(sourceFile, position) {
	            var bestResult = sourceFile;
	            var lastNodeEntirelyBeforePosition;
	            forEachChild(sourceFile, visit);
	            if (lastNodeEntirelyBeforePosition) {
	                var lastChildOfLastEntireNodeBeforePosition = getLastChild(lastNodeEntirelyBeforePosition);
	                if (lastChildOfLastEntireNodeBeforePosition.pos > bestResult.pos) {
	                    bestResult = lastChildOfLastEntireNodeBeforePosition;
	                }
	            }
	            return bestResult;
	            function getLastChild(node) {
	                while (true) {
	                    var lastChild = getLastChildWorker(node);
	                    if (lastChild) {
	                        node = lastChild;
	                    }
	                    else {
	                        return node;
	                    }
	                }
	            }
	            function getLastChildWorker(node) {
	                var last = undefined;
	                forEachChild(node, function (child) {
	                    if (ts.nodeIsPresent(child)) {
	                        last = child;
	                    }
	                });
	                return last;
	            }
	            function visit(child) {
	                if (ts.nodeIsMissing(child)) {
	                    return;
	                }
	                if (child.pos <= position) {
	                    if (child.pos >= bestResult.pos) {
	                        bestResult = child;
	                    }
	                    if (position < child.end) {
	                        forEachChild(child, visit);
	                        return true;
	                    }
	                    else {
	                        ts.Debug.assert(child.end <= position);
	                        lastNodeEntirelyBeforePosition = child;
	                    }
	                }
	                else {
	                    ts.Debug.assert(child.pos > position);
	                    return true;
	                }
	            }
	        }
	        function checkChangeRange(sourceFile, newText, textChangeRange, aggressiveChecks) {
	            var oldText = sourceFile.text;
	            if (textChangeRange) {
	                ts.Debug.assert((oldText.length - textChangeRange.span.length + textChangeRange.newLength) === newText.length);
	                if (aggressiveChecks || ts.Debug.shouldAssert(3)) {
	                    var oldTextPrefix = oldText.substr(0, textChangeRange.span.start);
	                    var newTextPrefix = newText.substr(0, textChangeRange.span.start);
	                    ts.Debug.assert(oldTextPrefix === newTextPrefix);
	                    var oldTextSuffix = oldText.substring(ts.textSpanEnd(textChangeRange.span), oldText.length);
	                    var newTextSuffix = newText.substring(ts.textSpanEnd(ts.textChangeRangeNewSpan(textChangeRange)), newText.length);
	                    ts.Debug.assert(oldTextSuffix === newTextSuffix);
	                }
	            }
	        }
	        function createSyntaxCursor(sourceFile) {
	            var currentArray = sourceFile.statements;
	            var currentArrayIndex = 0;
	            ts.Debug.assert(currentArrayIndex < currentArray.length);
	            var current = currentArray[currentArrayIndex];
	            var lastQueriedPosition = -1;
	            return {
	                currentNode: function (position) {
	                    if (position !== lastQueriedPosition) {
	                        if (current && current.end === position && currentArrayIndex < (currentArray.length - 1)) {
	                            currentArrayIndex++;
	                            current = currentArray[currentArrayIndex];
	                        }
	                        if (!current || current.pos !== position) {
	                            findHighestListElementThatStartsAtPosition(position);
	                        }
	                    }
	                    lastQueriedPosition = position;
	                    ts.Debug.assert(!current || current.pos === position);
	                    return current;
	                }
	            };
	            function findHighestListElementThatStartsAtPosition(position) {
	                currentArray = undefined;
	                currentArrayIndex = -1;
	                current = undefined;
	                forEachChild(sourceFile, visitNode, visitArray);
	                return;
	                function visitNode(node) {
	                    if (position >= node.pos && position < node.end) {
	                        forEachChild(node, visitNode, visitArray);
	                        return true;
	                    }
	                    return false;
	                }
	                function visitArray(array) {
	                    if (position >= array.pos && position < array.end) {
	                        for (var i = 0, n = array.length; i < n; i++) {
	                            var child = array[i];
	                            if (child) {
	                                if (child.pos === position) {
	                                    currentArray = array;
	                                    currentArrayIndex = i;
	                                    current = child;
	                                    return true;
	                                }
	                                else {
	                                    if (child.pos < position && position < child.end) {
	                                        forEachChild(child, visitNode, visitArray);
	                                        return true;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    return false;
	                }
	            }
	        }
	    })(IncrementalParser || (IncrementalParser = {}));
	})(ts || (ts = {}));
	/// <reference path="binder.ts"/>
	var ts;
	(function (ts) {
	    var nextSymbolId = 1;
	    var nextNodeId = 1;
	    var nextMergeId = 1;
	    function getNodeId(node) {
	        if (!node.id)
	            node.id = nextNodeId++;
	        return node.id;
	    }
	    ts.getNodeId = getNodeId;
	    ts.checkTime = 0;
	    function getSymbolId(symbol) {
	        if (!symbol.id) {
	            symbol.id = nextSymbolId++;
	        }
	        return symbol.id;
	    }
	    ts.getSymbolId = getSymbolId;
	    function createTypeChecker(host, produceDiagnostics) {
	        var cancellationToken;
	        var Symbol = ts.objectAllocator.getSymbolConstructor();
	        var Type = ts.objectAllocator.getTypeConstructor();
	        var Signature = ts.objectAllocator.getSignatureConstructor();
	        var typeCount = 0;
	        var emptyArray = [];
	        var emptySymbols = {};
	        var compilerOptions = host.getCompilerOptions();
	        var languageVersion = compilerOptions.target || 0;
	        var emitResolver = createResolver();
	        var undefinedSymbol = createSymbol(4 | 67108864, "undefined");
	        var argumentsSymbol = createSymbol(4 | 67108864, "arguments");
	        var checker = {
	            getNodeCount: function () { return ts.sum(host.getSourceFiles(), "nodeCount"); },
	            getIdentifierCount: function () { return ts.sum(host.getSourceFiles(), "identifierCount"); },
	            getSymbolCount: function () { return ts.sum(host.getSourceFiles(), "symbolCount"); },
	            getTypeCount: function () { return typeCount; },
	            isUndefinedSymbol: function (symbol) { return symbol === undefinedSymbol; },
	            isArgumentsSymbol: function (symbol) { return symbol === argumentsSymbol; },
	            getDiagnostics: getDiagnostics,
	            getGlobalDiagnostics: getGlobalDiagnostics,
	            getTypeOfSymbolAtLocation: getNarrowedTypeOfSymbol,
	            getDeclaredTypeOfSymbol: getDeclaredTypeOfSymbol,
	            getPropertiesOfType: getPropertiesOfType,
	            getPropertyOfType: getPropertyOfType,
	            getSignaturesOfType: getSignaturesOfType,
	            getIndexTypeOfType: getIndexTypeOfType,
	            getBaseTypes: getBaseTypes,
	            getReturnTypeOfSignature: getReturnTypeOfSignature,
	            getSymbolsInScope: getSymbolsInScope,
	            getSymbolAtLocation: getSymbolAtLocation,
	            getShorthandAssignmentValueSymbol: getShorthandAssignmentValueSymbol,
	            getTypeAtLocation: getTypeOfNode,
	            typeToString: typeToString,
	            getSymbolDisplayBuilder: getSymbolDisplayBuilder,
	            symbolToString: symbolToString,
	            getAugmentedPropertiesOfType: getAugmentedPropertiesOfType,
	            getRootSymbols: getRootSymbols,
	            getContextualType: getContextualType,
	            getFullyQualifiedName: getFullyQualifiedName,
	            getResolvedSignature: getResolvedSignature,
	            getConstantValue: getConstantValue,
	            isValidPropertyAccess: isValidPropertyAccess,
	            getSignatureFromDeclaration: getSignatureFromDeclaration,
	            isImplementationOfOverload: isImplementationOfOverload,
	            getAliasedSymbol: resolveAlias,
	            getEmitResolver: getEmitResolver,
	            getExportsOfModule: getExportsOfModuleAsArray,
	            getJsxElementAttributesType: getJsxElementAttributesType,
	            getJsxIntrinsicTagNames: getJsxIntrinsicTagNames,
	            isOptionalParameter: isOptionalParameter
	        };
	        var unknownSymbol = createSymbol(4 | 67108864, "unknown");
	        var resolvingSymbol = createSymbol(67108864, "__resolving__");
	        var anyType = createIntrinsicType(1, "any");
	        var stringType = createIntrinsicType(2, "string");
	        var numberType = createIntrinsicType(4, "number");
	        var booleanType = createIntrinsicType(8, "boolean");
	        var esSymbolType = createIntrinsicType(16777216, "symbol");
	        var voidType = createIntrinsicType(16, "void");
	        var undefinedType = createIntrinsicType(32 | 2097152, "undefined");
	        var nullType = createIntrinsicType(64 | 2097152, "null");
	        var unknownType = createIntrinsicType(1, "unknown");
	        var circularType = createIntrinsicType(1, "__circular__");
	        var emptyObjectType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);
	        var emptyGenericType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);
	        emptyGenericType.instantiations = {};
	        var anyFunctionType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);
	        anyFunctionType.flags |= 8388608;
	        var noConstraintType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);
	        var anySignature = createSignature(undefined, undefined, emptyArray, anyType, undefined, 0, false, false);
	        var unknownSignature = createSignature(undefined, undefined, emptyArray, unknownType, undefined, 0, false, false);
	        var globals = {};
	        var globalESSymbolConstructorSymbol;
	        var getGlobalPromiseConstructorSymbol;
	        var globalObjectType;
	        var globalFunctionType;
	        var globalArrayType;
	        var globalStringType;
	        var globalNumberType;
	        var globalBooleanType;
	        var globalRegExpType;
	        var globalTemplateStringsArrayType;
	        var globalESSymbolType;
	        var jsxElementType;
	        var jsxIntrinsicElementsType;
	        var globalIterableType;
	        var globalIteratorType;
	        var globalIterableIteratorType;
	        var anyArrayType;
	        var getGlobalClassDecoratorType;
	        var getGlobalParameterDecoratorType;
	        var getGlobalPropertyDecoratorType;
	        var getGlobalMethodDecoratorType;
	        var getGlobalTypedPropertyDescriptorType;
	        var getGlobalPromiseType;
	        var tryGetGlobalPromiseType;
	        var getGlobalPromiseLikeType;
	        var getInstantiatedGlobalPromiseLikeType;
	        var getGlobalPromiseConstructorLikeType;
	        var getGlobalThenableType;
	        var tupleTypes = {};
	        var unionTypes = {};
	        var intersectionTypes = {};
	        var stringLiteralTypes = {};
	        var emitExtends = false;
	        var emitDecorate = false;
	        var emitParam = false;
	        var emitAwaiter = false;
	        var emitGenerator = false;
	        var resolutionTargets = [];
	        var resolutionResults = [];
	        var resolutionPropertyNames = [];
	        var mergedSymbols = [];
	        var symbolLinks = [];
	        var nodeLinks = [];
	        var potentialThisCollisions = [];
	        var awaitedTypeStack = [];
	        var diagnostics = ts.createDiagnosticCollection();
	        var primitiveTypeInfo = {
	            "string": {
	                type: stringType,
	                flags: 258
	            },
	            "number": {
	                type: numberType,
	                flags: 132
	            },
	            "boolean": {
	                type: booleanType,
	                flags: 8
	            },
	            "symbol": {
	                type: esSymbolType,
	                flags: 16777216
	            }
	        };
	        var JsxNames = {
	            JSX: "JSX",
	            IntrinsicElements: "IntrinsicElements",
	            ElementClass: "ElementClass",
	            ElementAttributesPropertyNameContainer: "ElementAttributesProperty",
	            Element: "Element"
	        };
	        var subtypeRelation = {};
	        var assignableRelation = {};
	        var identityRelation = {};
	        var _displayBuilder;
	        initializeTypeChecker();
	        return checker;
	        function getEmitResolver(sourceFile, cancellationToken) {
	            getDiagnostics(sourceFile, cancellationToken);
	            return emitResolver;
	        }
	        function error(location, message, arg0, arg1, arg2) {
	            var diagnostic = location
	                ? ts.createDiagnosticForNode(location, message, arg0, arg1, arg2)
	                : ts.createCompilerDiagnostic(message, arg0, arg1, arg2);
	            diagnostics.add(diagnostic);
	        }
	        function createSymbol(flags, name) {
	            return new Symbol(flags, name);
	        }
	        function getExcludedSymbolFlags(flags) {
	            var result = 0;
	            if (flags & 2)
	                result |= 107455;
	            if (flags & 1)
	                result |= 107454;
	            if (flags & 4)
	                result |= 107455;
	            if (flags & 8)
	                result |= 107455;
	            if (flags & 16)
	                result |= 106927;
	            if (flags & 32)
	                result |= 899519;
	            if (flags & 64)
	                result |= 792960;
	            if (flags & 256)
	                result |= 899327;
	            if (flags & 128)
	                result |= 899967;
	            if (flags & 512)
	                result |= 106639;
	            if (flags & 8192)
	                result |= 99263;
	            if (flags & 32768)
	                result |= 41919;
	            if (flags & 65536)
	                result |= 74687;
	            if (flags & 262144)
	                result |= 530912;
	            if (flags & 524288)
	                result |= 793056;
	            if (flags & 8388608)
	                result |= 8388608;
	            return result;
	        }
	        function recordMergedSymbol(target, source) {
	            if (!source.mergeId)
	                source.mergeId = nextMergeId++;
	            mergedSymbols[source.mergeId] = target;
	        }
	        function cloneSymbol(symbol) {
	            var result = createSymbol(symbol.flags | 33554432, symbol.name);
	            result.declarations = symbol.declarations.slice(0);
	            result.parent = symbol.parent;
	            if (symbol.valueDeclaration)
	                result.valueDeclaration = symbol.valueDeclaration;
	            if (symbol.constEnumOnlyModule)
	                result.constEnumOnlyModule = true;
	            if (symbol.members)
	                result.members = cloneSymbolTable(symbol.members);
	            if (symbol.exports)
	                result.exports = cloneSymbolTable(symbol.exports);
	            recordMergedSymbol(result, symbol);
	            return result;
	        }
	        function mergeSymbol(target, source) {
	            if (!(target.flags & getExcludedSymbolFlags(source.flags))) {
	                if (source.flags & 512 && target.flags & 512 && target.constEnumOnlyModule && !source.constEnumOnlyModule) {
	                    target.constEnumOnlyModule = false;
	                }
	                target.flags |= source.flags;
	                if (!target.valueDeclaration && source.valueDeclaration)
	                    target.valueDeclaration = source.valueDeclaration;
	                ts.forEach(source.declarations, function (node) {
	                    target.declarations.push(node);
	                });
	                if (source.members) {
	                    if (!target.members)
	                        target.members = {};
	                    mergeSymbolTable(target.members, source.members);
	                }
	                if (source.exports) {
	                    if (!target.exports)
	                        target.exports = {};
	                    mergeSymbolTable(target.exports, source.exports);
	                }
	                recordMergedSymbol(target, source);
	            }
	            else {
	                var message = target.flags & 2 || source.flags & 2
	                    ? ts.Diagnostics.Cannot_redeclare_block_scoped_variable_0 : ts.Diagnostics.Duplicate_identifier_0;
	                ts.forEach(source.declarations, function (node) {
	                    error(node.name ? node.name : node, message, symbolToString(source));
	                });
	                ts.forEach(target.declarations, function (node) {
	                    error(node.name ? node.name : node, message, symbolToString(source));
	                });
	            }
	        }
	        function cloneSymbolTable(symbolTable) {
	            var result = {};
	            for (var id in symbolTable) {
	                if (ts.hasProperty(symbolTable, id)) {
	                    result[id] = symbolTable[id];
	                }
	            }
	            return result;
	        }
	        function mergeSymbolTable(target, source) {
	            for (var id in source) {
	                if (ts.hasProperty(source, id)) {
	                    if (!ts.hasProperty(target, id)) {
	                        target[id] = source[id];
	                    }
	                    else {
	                        var symbol = target[id];
	                        if (!(symbol.flags & 33554432)) {
	                            target[id] = symbol = cloneSymbol(symbol);
	                        }
	                        mergeSymbol(symbol, source[id]);
	                    }
	                }
	            }
	        }
	        function getSymbolLinks(symbol) {
	            if (symbol.flags & 67108864)
	                return symbol;
	            var id = getSymbolId(symbol);
	            return symbolLinks[id] || (symbolLinks[id] = {});
	        }
	        function getNodeLinks(node) {
	            var nodeId = getNodeId(node);
	            return nodeLinks[nodeId] || (nodeLinks[nodeId] = {});
	        }
	        function getSourceFile(node) {
	            return ts.getAncestor(node, 246);
	        }
	        function isGlobalSourceFile(node) {
	            return node.kind === 246 && !ts.isExternalModule(node);
	        }
	        function getSymbol(symbols, name, meaning) {
	            if (meaning && ts.hasProperty(symbols, name)) {
	                var symbol = symbols[name];
	                ts.Debug.assert((symbol.flags & 16777216) === 0, "Should never get an instantiated symbol here.");
	                if (symbol.flags & meaning) {
	                    return symbol;
	                }
	                if (symbol.flags & 8388608) {
	                    var target = resolveAlias(symbol);
	                    if (target === unknownSymbol || target.flags & meaning) {
	                        return symbol;
	                    }
	                }
	            }
	        }
	        function isDefinedBefore(node1, node2) {
	            var file1 = ts.getSourceFileOfNode(node1);
	            var file2 = ts.getSourceFileOfNode(node2);
	            if (file1 === file2) {
	                return node1.pos <= node2.pos;
	            }
	            if (!compilerOptions.outFile && !compilerOptions.out) {
	                return true;
	            }
	            var sourceFiles = host.getSourceFiles();
	            return sourceFiles.indexOf(file1) <= sourceFiles.indexOf(file2);
	        }
	        function resolveName(location, name, meaning, nameNotFoundMessage, nameArg) {
	            var result;
	            var lastLocation;
	            var propertyWithInvalidInitializer;
	            var errorLocation = location;
	            var grandparent;
	            loop: while (location) {
	                if (location.locals && !isGlobalSourceFile(location)) {
	                    if (result = getSymbol(location.locals, name, meaning)) {
	                        if (!(meaning & 793056) ||
	                            !(result.flags & (793056 & ~262144)) ||
	                            !ts.isFunctionLike(location) ||
	                            lastLocation === location.body) {
	                            break loop;
	                        }
	                        result = undefined;
	                    }
	                }
	                switch (location.kind) {
	                    case 246:
	                        if (!ts.isExternalModule(location))
	                            break;
	                    case 216:
	                        var moduleExports = getSymbolOfNode(location).exports;
	                        if (location.kind === 246 ||
	                            (location.kind === 216 && location.name.kind === 9)) {
	                            if (ts.hasProperty(moduleExports, name) &&
	                                moduleExports[name].flags === 8388608 &&
	                                ts.getDeclarationOfKind(moduleExports[name], 228)) {
	                                break;
	                            }
	                            result = moduleExports["default"];
	                            var localSymbol = ts.getLocalSymbolForExportDefault(result);
	                            if (result && localSymbol && (result.flags & meaning) && localSymbol.name === name) {
	                                break loop;
	                            }
	                            result = undefined;
	                        }
	                        if (result = getSymbol(moduleExports, name, meaning & 8914931)) {
	                            break loop;
	                        }
	                        break;
	                    case 215:
	                        if (result = getSymbol(getSymbolOfNode(location).exports, name, meaning & 8)) {
	                            break loop;
	                        }
	                        break;
	                    case 139:
	                    case 138:
	                        if (ts.isClassLike(location.parent) && !(location.flags & 128)) {
	                            var ctor = findConstructorDeclaration(location.parent);
	                            if (ctor && ctor.locals) {
	                                if (getSymbol(ctor.locals, name, meaning & 107455)) {
	                                    propertyWithInvalidInitializer = location;
	                                }
	                            }
	                        }
	                        break;
	                    case 212:
	                    case 184:
	                    case 213:
	                        if (result = getSymbol(getSymbolOfNode(location).members, name, meaning & 793056)) {
	                            if (lastLocation && lastLocation.flags & 128) {
	                                error(errorLocation, ts.Diagnostics.Static_members_cannot_reference_class_type_parameters);
	                                return undefined;
	                            }
	                            break loop;
	                        }
	                        if (location.kind === 184 && meaning & 32) {
	                            var className = location.name;
	                            if (className && name === className.text) {
	                                result = location.symbol;
	                                break loop;
	                            }
	                        }
	                        break;
	                    case 134:
	                        grandparent = location.parent.parent;
	                        if (ts.isClassLike(grandparent) || grandparent.kind === 213) {
	                            if (result = getSymbol(getSymbolOfNode(grandparent).members, name, meaning & 793056)) {
	                                error(errorLocation, ts.Diagnostics.A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type);
	                                return undefined;
	                            }
	                        }
	                        break;
	                    case 141:
	                    case 140:
	                    case 142:
	                    case 143:
	                    case 144:
	                    case 211:
	                    case 172:
	                        if (meaning & 3 && name === "arguments") {
	                            result = argumentsSymbol;
	                            break loop;
	                        }
	                        break;
	                    case 171:
	                        if (meaning & 3 && name === "arguments") {
	                            result = argumentsSymbol;
	                            break loop;
	                        }
	                        if (meaning & 16) {
	                            var functionName = location.name;
	                            if (functionName && name === functionName.text) {
	                                result = location.symbol;
	                                break loop;
	                            }
	                        }
	                        break;
	                    case 137:
	                        if (location.parent && location.parent.kind === 136) {
	                            location = location.parent;
	                        }
	                        if (location.parent && ts.isClassElement(location.parent)) {
	                            location = location.parent;
	                        }
	                        break;
	                }
	                lastLocation = location;
	                location = location.parent;
	            }
	            if (!result) {
	                result = getSymbol(globals, name, meaning);
	            }
	            if (!result) {
	                if (nameNotFoundMessage) {
	                    error(errorLocation, nameNotFoundMessage, typeof nameArg === "string" ? nameArg : ts.declarationNameToString(nameArg));
	                }
	                return undefined;
	            }
	            if (nameNotFoundMessage) {
	                if (propertyWithInvalidInitializer) {
	                    var propertyName = propertyWithInvalidInitializer.name;
	                    error(errorLocation, ts.Diagnostics.Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor, ts.declarationNameToString(propertyName), typeof nameArg === "string" ? nameArg : ts.declarationNameToString(nameArg));
	                    return undefined;
	                }
	                if (meaning & 2 && result.flags & 2) {
	                    checkResolvedBlockScopedVariable(result, errorLocation);
	                }
	            }
	            return result;
	        }
	        function checkResolvedBlockScopedVariable(result, errorLocation) {
	            ts.Debug.assert((result.flags & 2) !== 0);
	            var declaration = ts.forEach(result.declarations, function (d) { return ts.isBlockOrCatchScoped(d) ? d : undefined; });
	            ts.Debug.assert(declaration !== undefined, "Block-scoped variable declaration is undefined");
	            var isUsedBeforeDeclaration = !isDefinedBefore(declaration, errorLocation);
	            if (!isUsedBeforeDeclaration) {
	                var variableDeclaration = ts.getAncestor(declaration, 209);
	                var container = ts.getEnclosingBlockScopeContainer(variableDeclaration);
	                if (variableDeclaration.parent.parent.kind === 191 ||
	                    variableDeclaration.parent.parent.kind === 197) {
	                    isUsedBeforeDeclaration = isSameScopeDescendentOf(errorLocation, variableDeclaration, container);
	                }
	                else if (variableDeclaration.parent.parent.kind === 199 ||
	                    variableDeclaration.parent.parent.kind === 198) {
	                    var expression = variableDeclaration.parent.parent.expression;
	                    isUsedBeforeDeclaration = isSameScopeDescendentOf(errorLocation, expression, container);
	                }
	            }
	            if (isUsedBeforeDeclaration) {
	                error(errorLocation, ts.Diagnostics.Block_scoped_variable_0_used_before_its_declaration, ts.declarationNameToString(declaration.name));
	            }
	        }
	        function isSameScopeDescendentOf(initial, parent, stopAt) {
	            if (!parent) {
	                return false;
	            }
	            for (var current = initial; current && current !== stopAt && !ts.isFunctionLike(current); current = current.parent) {
	                if (current === parent) {
	                    return true;
	                }
	            }
	            return false;
	        }
	        function getAnyImportSyntax(node) {
	            if (ts.isAliasSymbolDeclaration(node)) {
	                if (node.kind === 219) {
	                    return node;
	                }
	                while (node && node.kind !== 220) {
	                    node = node.parent;
	                }
	                return node;
	            }
	        }
	        function getDeclarationOfAliasSymbol(symbol) {
	            return ts.forEach(symbol.declarations, function (d) { return ts.isAliasSymbolDeclaration(d) ? d : undefined; });
	        }
	        function getTargetOfImportEqualsDeclaration(node) {
	            if (node.moduleReference.kind === 230) {
	                return resolveExternalModuleSymbol(resolveExternalModuleName(node, ts.getExternalModuleImportEqualsDeclarationExpression(node)));
	            }
	            return getSymbolOfPartOfRightHandSideOfImportEquals(node.moduleReference, node);
	        }
	        function getTargetOfImportClause(node) {
	            var moduleSymbol = resolveExternalModuleName(node, node.parent.moduleSpecifier);
	            if (moduleSymbol) {
	                var exportDefaultSymbol = resolveSymbol(moduleSymbol.exports["default"]);
	                if (!exportDefaultSymbol) {
	                    error(node.name, ts.Diagnostics.Module_0_has_no_default_export, symbolToString(moduleSymbol));
	                }
	                return exportDefaultSymbol;
	            }
	        }
	        function getTargetOfNamespaceImport(node) {
	            var moduleSpecifier = node.parent.parent.moduleSpecifier;
	            return resolveESModuleSymbol(resolveExternalModuleName(node, moduleSpecifier), moduleSpecifier);
	        }
	        function getMemberOfModuleVariable(moduleSymbol, name) {
	            if (moduleSymbol.flags & 3) {
	                var typeAnnotation = moduleSymbol.valueDeclaration.type;
	                if (typeAnnotation) {
	                    return getPropertyOfType(getTypeFromTypeNode(typeAnnotation), name);
	                }
	            }
	        }
	        function combineValueAndTypeSymbols(valueSymbol, typeSymbol) {
	            if (valueSymbol.flags & (793056 | 1536)) {
	                return valueSymbol;
	            }
	            var result = createSymbol(valueSymbol.flags | typeSymbol.flags, valueSymbol.name);
	            result.declarations = ts.concatenate(valueSymbol.declarations, typeSymbol.declarations);
	            result.parent = valueSymbol.parent || typeSymbol.parent;
	            if (valueSymbol.valueDeclaration)
	                result.valueDeclaration = valueSymbol.valueDeclaration;
	            if (typeSymbol.members)
	                result.members = typeSymbol.members;
	            if (valueSymbol.exports)
	                result.exports = valueSymbol.exports;
	            return result;
	        }
	        function getExportOfModule(symbol, name) {
	            if (symbol.flags & 1536) {
	                var exports = getExportsOfSymbol(symbol);
	                if (ts.hasProperty(exports, name)) {
	                    return resolveSymbol(exports[name]);
	                }
	            }
	        }
	        function getPropertyOfVariable(symbol, name) {
	            if (symbol.flags & 3) {
	                var typeAnnotation = symbol.valueDeclaration.type;
	                if (typeAnnotation) {
	                    return resolveSymbol(getPropertyOfType(getTypeFromTypeNode(typeAnnotation), name));
	                }
	            }
	        }
	        function getExternalModuleMember(node, specifier) {
	            var moduleSymbol = resolveExternalModuleName(node, node.moduleSpecifier);
	            var targetSymbol = resolveESModuleSymbol(moduleSymbol, node.moduleSpecifier);
	            if (targetSymbol) {
	                var name_9 = specifier.propertyName || specifier.name;
	                if (name_9.text) {
	                    var symbolFromModule = getExportOfModule(targetSymbol, name_9.text);
	                    var symbolFromVariable = getPropertyOfVariable(targetSymbol, name_9.text);
	                    var symbol = symbolFromModule && symbolFromVariable ?
	                        combineValueAndTypeSymbols(symbolFromVariable, symbolFromModule) :
	                        symbolFromModule || symbolFromVariable;
	                    if (!symbol) {
	                        error(name_9, ts.Diagnostics.Module_0_has_no_exported_member_1, getFullyQualifiedName(moduleSymbol), ts.declarationNameToString(name_9));
	                    }
	                    return symbol;
	                }
	            }
	        }
	        function getTargetOfImportSpecifier(node) {
	            return getExternalModuleMember(node.parent.parent.parent, node);
	        }
	        function getTargetOfExportSpecifier(node) {
	            return node.parent.parent.moduleSpecifier ?
	                getExternalModuleMember(node.parent.parent, node) :
	                resolveEntityName(node.propertyName || node.name, 107455 | 793056 | 1536);
	        }
	        function getTargetOfExportAssignment(node) {
	            return resolveEntityName(node.expression, 107455 | 793056 | 1536);
	        }
	        function getTargetOfAliasDeclaration(node) {
	            switch (node.kind) {
	                case 219:
	                    return getTargetOfImportEqualsDeclaration(node);
	                case 221:
	                    return getTargetOfImportClause(node);
	                case 222:
	                    return getTargetOfNamespaceImport(node);
	                case 224:
	                    return getTargetOfImportSpecifier(node);
	                case 228:
	                    return getTargetOfExportSpecifier(node);
	                case 225:
	                    return getTargetOfExportAssignment(node);
	            }
	        }
	        function resolveSymbol(symbol) {
	            return symbol && symbol.flags & 8388608 && !(symbol.flags & (107455 | 793056 | 1536)) ? resolveAlias(symbol) : symbol;
	        }
	        function resolveAlias(symbol) {
	            ts.Debug.assert((symbol.flags & 8388608) !== 0, "Should only get Alias here.");
	            var links = getSymbolLinks(symbol);
	            if (!links.target) {
	                links.target = resolvingSymbol;
	                var node = getDeclarationOfAliasSymbol(symbol);
	                var target = getTargetOfAliasDeclaration(node);
	                if (links.target === resolvingSymbol) {
	                    links.target = target || unknownSymbol;
	                }
	                else {
	                    error(node, ts.Diagnostics.Circular_definition_of_import_alias_0, symbolToString(symbol));
	                }
	            }
	            else if (links.target === resolvingSymbol) {
	                links.target = unknownSymbol;
	            }
	            return links.target;
	        }
	        function markExportAsReferenced(node) {
	            var symbol = getSymbolOfNode(node);
	            var target = resolveAlias(symbol);
	            if (target) {
	                var markAlias = (target === unknownSymbol && compilerOptions.isolatedModules) ||
	                    (target !== unknownSymbol && (target.flags & 107455) && !isConstEnumOrConstEnumOnlyModule(target));
	                if (markAlias) {
	                    markAliasSymbolAsReferenced(symbol);
	                }
	            }
	        }
	        function markAliasSymbolAsReferenced(symbol) {
	            var links = getSymbolLinks(symbol);
	            if (!links.referenced) {
	                links.referenced = true;
	                var node = getDeclarationOfAliasSymbol(symbol);
	                if (node.kind === 225) {
	                    checkExpressionCached(node.expression);
	                }
	                else if (node.kind === 228) {
	                    checkExpressionCached(node.propertyName || node.name);
	                }
	                else if (ts.isInternalModuleImportEqualsDeclaration(node)) {
	                    checkExpressionCached(node.moduleReference);
	                }
	            }
	        }
	        function getSymbolOfPartOfRightHandSideOfImportEquals(entityName, importDeclaration) {
	            if (!importDeclaration) {
	                importDeclaration = ts.getAncestor(entityName, 219);
	                ts.Debug.assert(importDeclaration !== undefined);
	            }
	            if (entityName.kind === 67 && ts.isRightSideOfQualifiedNameOrPropertyAccess(entityName)) {
	                entityName = entityName.parent;
	            }
	            if (entityName.kind === 67 || entityName.parent.kind === 133) {
	                return resolveEntityName(entityName, 1536);
	            }
	            else {
	                ts.Debug.assert(entityName.parent.kind === 219);
	                return resolveEntityName(entityName, 107455 | 793056 | 1536);
	            }
	        }
	        function getFullyQualifiedName(symbol) {
	            return symbol.parent ? getFullyQualifiedName(symbol.parent) + "." + symbolToString(symbol) : symbolToString(symbol);
	        }
	        function resolveEntityName(name, meaning, ignoreErrors) {
	            if (ts.nodeIsMissing(name)) {
	                return undefined;
	            }
	            var symbol;
	            if (name.kind === 67) {
	                var message = meaning === 1536 ? ts.Diagnostics.Cannot_find_namespace_0 : ts.Diagnostics.Cannot_find_name_0;
	                symbol = resolveName(name, name.text, meaning, ignoreErrors ? undefined : message, name);
	                if (!symbol) {
	                    return undefined;
	                }
	            }
	            else if (name.kind === 133 || name.kind === 164) {
	                var left = name.kind === 133 ? name.left : name.expression;
	                var right = name.kind === 133 ? name.right : name.name;
	                var namespace = resolveEntityName(left, 1536, ignoreErrors);
	                if (!namespace || namespace === unknownSymbol || ts.nodeIsMissing(right)) {
	                    return undefined;
	                }
	                symbol = getSymbol(getExportsOfSymbol(namespace), right.text, meaning);
	                if (!symbol) {
	                    if (!ignoreErrors) {
	                        error(right, ts.Diagnostics.Module_0_has_no_exported_member_1, getFullyQualifiedName(namespace), ts.declarationNameToString(right));
	                    }
	                    return undefined;
	                }
	            }
	            else {
	                ts.Debug.fail("Unknown entity name kind.");
	            }
	            ts.Debug.assert((symbol.flags & 16777216) === 0, "Should never get an instantiated symbol here.");
	            return symbol.flags & meaning ? symbol : resolveAlias(symbol);
	        }
	        function isExternalModuleNameRelative(moduleName) {
	            return moduleName.substr(0, 2) === "./" || moduleName.substr(0, 3) === "../" || moduleName.substr(0, 2) === ".\\" || moduleName.substr(0, 3) === "..\\";
	        }
	        function resolveExternalModuleName(location, moduleReferenceExpression) {
	            if (moduleReferenceExpression.kind !== 9) {
	                return;
	            }
	            var moduleReferenceLiteral = moduleReferenceExpression;
	            var searchPath = ts.getDirectoryPath(getSourceFile(location).fileName);
	            var moduleName = ts.escapeIdentifier(moduleReferenceLiteral.text);
	            if (!moduleName) {
	                return;
	            }
	            var isRelative = isExternalModuleNameRelative(moduleName);
	            if (!isRelative) {
	                var symbol = getSymbol(globals, "\"" + moduleName + "\"", 512);
	                if (symbol) {
	                    return symbol;
	                }
	            }
	            var fileName = ts.getResolvedModuleFileName(getSourceFile(location), moduleReferenceLiteral.text);
	            var sourceFile = fileName && host.getSourceFile(fileName);
	            if (sourceFile) {
	                if (sourceFile.symbol) {
	                    return sourceFile.symbol;
	                }
	                error(moduleReferenceLiteral, ts.Diagnostics.File_0_is_not_a_module, sourceFile.fileName);
	                return;
	            }
	            error(moduleReferenceLiteral, ts.Diagnostics.Cannot_find_module_0, moduleName);
	        }
	        function resolveExternalModuleSymbol(moduleSymbol) {
	            return moduleSymbol && resolveSymbol(moduleSymbol.exports["export="]) || moduleSymbol;
	        }
	        function resolveESModuleSymbol(moduleSymbol, moduleReferenceExpression) {
	            var symbol = resolveExternalModuleSymbol(moduleSymbol);
	            if (symbol && !(symbol.flags & (1536 | 3))) {
	                error(moduleReferenceExpression, ts.Diagnostics.Module_0_resolves_to_a_non_module_entity_and_cannot_be_imported_using_this_construct, symbolToString(moduleSymbol));
	                symbol = undefined;
	            }
	            return symbol;
	        }
	        function getExportAssignmentSymbol(moduleSymbol) {
	            return moduleSymbol.exports["export="];
	        }
	        function getExportsOfModuleAsArray(moduleSymbol) {
	            return symbolsToArray(getExportsOfModule(moduleSymbol));
	        }
	        function getExportsOfSymbol(symbol) {
	            return symbol.flags & 1536 ? getExportsOfModule(symbol) : symbol.exports || emptySymbols;
	        }
	        function getExportsOfModule(moduleSymbol) {
	            var links = getSymbolLinks(moduleSymbol);
	            return links.resolvedExports || (links.resolvedExports = getExportsForModule(moduleSymbol));
	        }
	        function extendExportSymbols(target, source) {
	            for (var id in source) {
	                if (id !== "default" && !ts.hasProperty(target, id)) {
	                    target[id] = source[id];
	                }
	            }
	        }
	        function getExportsForModule(moduleSymbol) {
	            var result;
	            var visitedSymbols = [];
	            visit(moduleSymbol);
	            return result || moduleSymbol.exports;
	            function visit(symbol) {
	                if (symbol && symbol.flags & 1952 && !ts.contains(visitedSymbols, symbol)) {
	                    visitedSymbols.push(symbol);
	                    if (symbol !== moduleSymbol) {
	                        if (!result) {
	                            result = cloneSymbolTable(moduleSymbol.exports);
	                        }
	                        extendExportSymbols(result, symbol.exports);
	                    }
	                    var exportStars = symbol.exports["__export"];
	                    if (exportStars) {
	                        for (var _i = 0, _a = exportStars.declarations; _i < _a.length; _i++) {
	                            var node = _a[_i];
	                            visit(resolveExternalModuleName(node, node.moduleSpecifier));
	                        }
	                    }
	                }
	            }
	        }
	        function getMergedSymbol(symbol) {
	            var merged;
	            return symbol && symbol.mergeId && (merged = mergedSymbols[symbol.mergeId]) ? merged : symbol;
	        }
	        function getSymbolOfNode(node) {
	            return getMergedSymbol(node.symbol);
	        }
	        function getParentOfSymbol(symbol) {
	            return getMergedSymbol(symbol.parent);
	        }
	        function getExportSymbolOfValueSymbolIfExported(symbol) {
	            return symbol && (symbol.flags & 1048576) !== 0
	                ? getMergedSymbol(symbol.exportSymbol)
	                : symbol;
	        }
	        function symbolIsValue(symbol) {
	            if (symbol.flags & 16777216) {
	                return symbolIsValue(getSymbolLinks(symbol).target);
	            }
	            if (symbol.flags & 107455) {
	                return true;
	            }
	            if (symbol.flags & 8388608) {
	                return (resolveAlias(symbol).flags & 107455) !== 0;
	            }
	            return false;
	        }
	        function findConstructorDeclaration(node) {
	            var members = node.members;
	            for (var _i = 0; _i < members.length; _i++) {
	                var member = members[_i];
	                if (member.kind === 142 && ts.nodeIsPresent(member.body)) {
	                    return member;
	                }
	            }
	        }
	        function createType(flags) {
	            var result = new Type(checker, flags);
	            result.id = typeCount++;
	            return result;
	        }
	        function createIntrinsicType(kind, intrinsicName) {
	            var type = createType(kind);
	            type.intrinsicName = intrinsicName;
	            return type;
	        }
	        function createObjectType(kind, symbol) {
	            var type = createType(kind);
	            type.symbol = symbol;
	            return type;
	        }
	        function isReservedMemberName(name) {
	            return name.charCodeAt(0) === 95 &&
	                name.charCodeAt(1) === 95 &&
	                name.charCodeAt(2) !== 95 &&
	                name.charCodeAt(2) !== 64;
	        }
	        function getNamedMembers(members) {
	            var result;
	            for (var id in members) {
	                if (ts.hasProperty(members, id)) {
	                    if (!isReservedMemberName(id)) {
	                        if (!result)
	                            result = [];
	                        var symbol = members[id];
	                        if (symbolIsValue(symbol)) {
	                            result.push(symbol);
	                        }
	                    }
	                }
	            }
	            return result || emptyArray;
	        }
	        function setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType) {
	            type.members = members;
	            type.properties = getNamedMembers(members);
	            type.callSignatures = callSignatures;
	            type.constructSignatures = constructSignatures;
	            if (stringIndexType)
	                type.stringIndexType = stringIndexType;
	            if (numberIndexType)
	                type.numberIndexType = numberIndexType;
	            return type;
	        }
	        function createAnonymousType(symbol, members, callSignatures, constructSignatures, stringIndexType, numberIndexType) {
	            return setObjectTypeMembers(createObjectType(65536, symbol), members, callSignatures, constructSignatures, stringIndexType, numberIndexType);
	        }
	        function forEachSymbolTableInScope(enclosingDeclaration, callback) {
	            var result;
	            for (var location_1 = enclosingDeclaration; location_1; location_1 = location_1.parent) {
	                if (location_1.locals && !isGlobalSourceFile(location_1)) {
	                    if (result = callback(location_1.locals)) {
	                        return result;
	                    }
	                }
	                switch (location_1.kind) {
	                    case 246:
	                        if (!ts.isExternalModule(location_1)) {
	                            break;
	                        }
	                    case 216:
	                        if (result = callback(getSymbolOfNode(location_1).exports)) {
	                            return result;
	                        }
	                        break;
	                    case 212:
	                    case 213:
	                        if (result = callback(getSymbolOfNode(location_1).members)) {
	                            return result;
	                        }
	                        break;
	                }
	            }
	            return callback(globals);
	        }
	        function getQualifiedLeftMeaning(rightMeaning) {
	            return rightMeaning === 107455 ? 107455 : 1536;
	        }
	        function getAccessibleSymbolChain(symbol, enclosingDeclaration, meaning, useOnlyExternalAliasing) {
	            function getAccessibleSymbolChainFromSymbolTable(symbols) {
	                function canQualifySymbol(symbolFromSymbolTable, meaning) {
	                    if (!needsQualification(symbolFromSymbolTable, enclosingDeclaration, meaning)) {
	                        return true;
	                    }
	                    var accessibleParent = getAccessibleSymbolChain(symbolFromSymbolTable.parent, enclosingDeclaration, getQualifiedLeftMeaning(meaning), useOnlyExternalAliasing);
	                    return !!accessibleParent;
	                }
	                function isAccessible(symbolFromSymbolTable, resolvedAliasSymbol) {
	                    if (symbol === (resolvedAliasSymbol || symbolFromSymbolTable)) {
	                        return !ts.forEach(symbolFromSymbolTable.declarations, hasExternalModuleSymbol) &&
	                            canQualifySymbol(symbolFromSymbolTable, meaning);
	                    }
	                }
	                if (isAccessible(ts.lookUp(symbols, symbol.name))) {
	                    return [symbol];
	                }
	                return ts.forEachValue(symbols, function (symbolFromSymbolTable) {
	                    if (symbolFromSymbolTable.flags & 8388608
	                        && symbolFromSymbolTable.name !== "export="
	                        && !ts.getDeclarationOfKind(symbolFromSymbolTable, 228)) {
	                        if (!useOnlyExternalAliasing ||
	                            ts.forEach(symbolFromSymbolTable.declarations, ts.isExternalModuleImportEqualsDeclaration)) {
	                            var resolvedImportedSymbol = resolveAlias(symbolFromSymbolTable);
	                            if (isAccessible(symbolFromSymbolTable, resolveAlias(symbolFromSymbolTable))) {
	                                return [symbolFromSymbolTable];
	                            }
	                            var accessibleSymbolsFromExports = resolvedImportedSymbol.exports ? getAccessibleSymbolChainFromSymbolTable(resolvedImportedSymbol.exports) : undefined;
	                            if (accessibleSymbolsFromExports && canQualifySymbol(symbolFromSymbolTable, getQualifiedLeftMeaning(meaning))) {
	                                return [symbolFromSymbolTable].concat(accessibleSymbolsFromExports);
	                            }
	                        }
	                    }
	                });
	            }
	            if (symbol) {
	                return forEachSymbolTableInScope(enclosingDeclaration, getAccessibleSymbolChainFromSymbolTable);
	            }
	        }
	        function needsQualification(symbol, enclosingDeclaration, meaning) {
	            var qualify = false;
	            forEachSymbolTableInScope(enclosingDeclaration, function (symbolTable) {
	                if (!ts.hasProperty(symbolTable, symbol.name)) {
	                    return false;
	                }
	                var symbolFromSymbolTable = symbolTable[symbol.name];
	                if (symbolFromSymbolTable === symbol) {
	                    return true;
	                }
	                symbolFromSymbolTable = (symbolFromSymbolTable.flags & 8388608 && !ts.getDeclarationOfKind(symbolFromSymbolTable, 228)) ? resolveAlias(symbolFromSymbolTable) : symbolFromSymbolTable;
	                if (symbolFromSymbolTable.flags & meaning) {
	                    qualify = true;
	                    return true;
	                }
	                return false;
	            });
	            return qualify;
	        }
	        function isSymbolAccessible(symbol, enclosingDeclaration, meaning) {
	            if (symbol && enclosingDeclaration && !(symbol.flags & 262144)) {
	                var initialSymbol = symbol;
	                var meaningToLook = meaning;
	                while (symbol) {
	                    var accessibleSymbolChain = getAccessibleSymbolChain(symbol, enclosingDeclaration, meaningToLook, false);
	                    if (accessibleSymbolChain) {
	                        var hasAccessibleDeclarations = hasVisibleDeclarations(accessibleSymbolChain[0]);
	                        if (!hasAccessibleDeclarations) {
	                            return {
	                                accessibility: 1,
	                                errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),
	                                errorModuleName: symbol !== initialSymbol ? symbolToString(symbol, enclosingDeclaration, 1536) : undefined
	                            };
	                        }
	                        return hasAccessibleDeclarations;
	                    }
	                    meaningToLook = getQualifiedLeftMeaning(meaning);
	                    symbol = getParentOfSymbol(symbol);
	                }
	                var symbolExternalModule = ts.forEach(initialSymbol.declarations, getExternalModuleContainer);
	                if (symbolExternalModule) {
	                    var enclosingExternalModule = getExternalModuleContainer(enclosingDeclaration);
	                    if (symbolExternalModule !== enclosingExternalModule) {
	                        return {
	                            accessibility: 2,
	                            errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),
	                            errorModuleName: symbolToString(symbolExternalModule)
	                        };
	                    }
	                }
	                return {
	                    accessibility: 1,
	                    errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning)
	                };
	            }
	            return { accessibility: 0 };
	            function getExternalModuleContainer(declaration) {
	                for (; declaration; declaration = declaration.parent) {
	                    if (hasExternalModuleSymbol(declaration)) {
	                        return getSymbolOfNode(declaration);
	                    }
	                }
	            }
	        }
	        function hasExternalModuleSymbol(declaration) {
	            return (declaration.kind === 216 && declaration.name.kind === 9) ||
	                (declaration.kind === 246 && ts.isExternalModule(declaration));
	        }
	        function hasVisibleDeclarations(symbol) {
	            var aliasesToMakeVisible;
	            if (ts.forEach(symbol.declarations, function (declaration) { return !getIsDeclarationVisible(declaration); })) {
	                return undefined;
	            }
	            return { accessibility: 0, aliasesToMakeVisible: aliasesToMakeVisible };
	            function getIsDeclarationVisible(declaration) {
	                if (!isDeclarationVisible(declaration)) {
	                    var anyImportSyntax = getAnyImportSyntax(declaration);
	                    if (anyImportSyntax &&
	                        !(anyImportSyntax.flags & 1) &&
	                        isDeclarationVisible(anyImportSyntax.parent)) {
	                        getNodeLinks(declaration).isVisible = true;
	                        if (aliasesToMakeVisible) {
	                            if (!ts.contains(aliasesToMakeVisible, anyImportSyntax)) {
	                                aliasesToMakeVisible.push(anyImportSyntax);
	                            }
	                        }
	                        else {
	                            aliasesToMakeVisible = [anyImportSyntax];
	                        }
	                        return true;
	                    }
	                    return false;
	                }
	                return true;
	            }
	        }
	        function isEntityNameVisible(entityName, enclosingDeclaration) {
	            var meaning;
	            if (entityName.parent.kind === 152) {
	                meaning = 107455 | 1048576;
	            }
	            else if (entityName.kind === 133 || entityName.kind === 164 ||
	                entityName.parent.kind === 219) {
	                meaning = 1536;
	            }
	            else {
	                meaning = 793056;
	            }
	            var firstIdentifier = getFirstIdentifier(entityName);
	            var symbol = resolveName(enclosingDeclaration, firstIdentifier.text, meaning, undefined, undefined);
	            return (symbol && hasVisibleDeclarations(symbol)) || {
	                accessibility: 1,
	                errorSymbolName: ts.getTextOfNode(firstIdentifier),
	                errorNode: firstIdentifier
	            };
	        }
	        function writeKeyword(writer, kind) {
	            writer.writeKeyword(ts.tokenToString(kind));
	        }
	        function writePunctuation(writer, kind) {
	            writer.writePunctuation(ts.tokenToString(kind));
	        }
	        function writeSpace(writer) {
	            writer.writeSpace(" ");
	        }
	        function symbolToString(symbol, enclosingDeclaration, meaning) {
	            var writer = ts.getSingleLineStringWriter();
	            getSymbolDisplayBuilder().buildSymbolDisplay(symbol, writer, enclosingDeclaration, meaning);
	            var result = writer.string();
	            ts.releaseStringWriter(writer);
	            return result;
	        }
	        function signatureToString(signature, enclosingDeclaration, flags) {
	            var writer = ts.getSingleLineStringWriter();
	            getSymbolDisplayBuilder().buildSignatureDisplay(signature, writer, enclosingDeclaration, flags);
	            var result = writer.string();
	            ts.releaseStringWriter(writer);
	            return result;
	        }
	        function typeToString(type, enclosingDeclaration, flags) {
	            var writer = ts.getSingleLineStringWriter();
	            getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);
	            var result = writer.string();
	            ts.releaseStringWriter(writer);
	            var maxLength = compilerOptions.noErrorTruncation || flags & 4 ? undefined : 100;
	            if (maxLength && result.length >= maxLength) {
	                result = result.substr(0, maxLength - "...".length) + "...";
	            }
	            return result;
	        }
	        function getTypeAliasForTypeLiteral(type) {
	            if (type.symbol && type.symbol.flags & 2048) {
	                var node = type.symbol.declarations[0].parent;
	                while (node.kind === 158) {
	                    node = node.parent;
	                }
	                if (node.kind === 214) {
	                    return getSymbolOfNode(node);
	                }
	            }
	            return undefined;
	        }
	        function getSymbolDisplayBuilder() {
	            function getNameOfSymbol(symbol) {
	                if (symbol.declarations && symbol.declarations.length) {
	                    var declaration = symbol.declarations[0];
	                    if (declaration.name) {
	                        return ts.declarationNameToString(declaration.name);
	                    }
	                    switch (declaration.kind) {
	                        case 184:
	                            return "(Anonymous class)";
	                        case 171:
	                        case 172:
	                            return "(Anonymous function)";
	                    }
	                }
	                return symbol.name;
	            }
	            function appendSymbolNameOnly(symbol, writer) {
	                writer.writeSymbol(getNameOfSymbol(symbol), symbol);
	            }
	            function buildSymbolDisplay(symbol, writer, enclosingDeclaration, meaning, flags, typeFlags) {
	                var parentSymbol;
	                function appendParentTypeArgumentsAndSymbolName(symbol) {
	                    if (parentSymbol) {
	                        if (flags & 1) {
	                            if (symbol.flags & 16777216) {
	                                buildDisplayForTypeArgumentsAndDelimiters(getTypeParametersOfClassOrInterface(parentSymbol), symbol.mapper, writer, enclosingDeclaration);
	                            }
	                            else {
	                                buildTypeParameterDisplayFromSymbol(parentSymbol, writer, enclosingDeclaration);
	                            }
	                        }
	                        writePunctuation(writer, 21);
	                    }
	                    parentSymbol = symbol;
	                    appendSymbolNameOnly(symbol, writer);
	                }
	                writer.trackSymbol(symbol, enclosingDeclaration, meaning);
	                function walkSymbol(symbol, meaning) {
	                    if (symbol) {
	                        var accessibleSymbolChain = getAccessibleSymbolChain(symbol, enclosingDeclaration, meaning, !!(flags & 2));
	                        if (!accessibleSymbolChain ||
	                            needsQualification(accessibleSymbolChain[0], enclosingDeclaration, accessibleSymbolChain.length === 1 ? meaning : getQualifiedLeftMeaning(meaning))) {
	                            walkSymbol(getParentOfSymbol(accessibleSymbolChain ? accessibleSymbolChain[0] : symbol), getQualifiedLeftMeaning(meaning));
	                        }
	                        if (accessibleSymbolChain) {
	                            for (var _i = 0; _i < accessibleSymbolChain.length; _i++) {
	                                var accessibleSymbol = accessibleSymbolChain[_i];
	                                appendParentTypeArgumentsAndSymbolName(accessibleSymbol);
	                            }
	                        }
	                        else {
	                            if (!parentSymbol && ts.forEach(symbol.declarations, hasExternalModuleSymbol)) {
	                                return;
	                            }
	                            if (symbol.flags & 2048 || symbol.flags & 4096) {
	                                return;
	                            }
	                            appendParentTypeArgumentsAndSymbolName(symbol);
	                        }
	                    }
	                }
	                var isTypeParameter = symbol.flags & 262144;
	                var typeFormatFlag = 128 & typeFlags;
	                if (!isTypeParameter && (enclosingDeclaration || typeFormatFlag)) {
	                    walkSymbol(symbol, meaning);
	                    return;
	                }
	                return appendParentTypeArgumentsAndSymbolName(symbol);
	            }
	            function buildTypeDisplay(type, writer, enclosingDeclaration, globalFlags, symbolStack) {
	                var globalFlagsToPass = globalFlags & 16;
	                return writeType(type, globalFlags);
	                function writeType(type, flags) {
	                    if (type.flags & 16777343) {
	                        writer.writeKeyword(!(globalFlags & 16) && isTypeAny(type)
	                            ? "any"
	                            : type.intrinsicName);
	                    }
	                    else if (type.flags & 4096) {
	                        writeTypeReference(type, flags);
	                    }
	                    else if (type.flags & (1024 | 2048 | 128 | 512)) {
	                        buildSymbolDisplay(type.symbol, writer, enclosingDeclaration, 793056, 0, flags);
	                    }
	                    else if (type.flags & 8192) {
	                        writeTupleType(type);
	                    }
	                    else if (type.flags & 49152) {
	                        writeUnionOrIntersectionType(type, flags);
	                    }
	                    else if (type.flags & 65536) {
	                        writeAnonymousType(type, flags);
	                    }
	                    else if (type.flags & 256) {
	                        writer.writeStringLiteral(type.text);
	                    }
	                    else {
	                        writePunctuation(writer, 15);
	                        writeSpace(writer);
	                        writePunctuation(writer, 22);
	                        writeSpace(writer);
	                        writePunctuation(writer, 16);
	                    }
	                }
	                function writeTypeList(types, delimiter) {
	                    for (var i = 0; i < types.length; i++) {
	                        if (i > 0) {
	                            if (delimiter !== 24) {
	                                writeSpace(writer);
	                            }
	                            writePunctuation(writer, delimiter);
	                            writeSpace(writer);
	                        }
	                        writeType(types[i], delimiter === 24 ? 0 : 64);
	                    }
	                }
	                function writeSymbolTypeReference(symbol, typeArguments, pos, end) {
	                    if (!isReservedMemberName(symbol.name)) {
	                        buildSymbolDisplay(symbol, writer, enclosingDeclaration, 793056);
	                    }
	                    if (pos < end) {
	                        writePunctuation(writer, 25);
	                        writeType(typeArguments[pos++], 0);
	                        while (pos < end) {
	                            writePunctuation(writer, 24);
	                            writeSpace(writer);
	                            writeType(typeArguments[pos++], 0);
	                        }
	                        writePunctuation(writer, 27);
	                    }
	                }
	                function writeTypeReference(type, flags) {
	                    var typeArguments = type.typeArguments;
	                    if (type.target === globalArrayType && !(flags & 1)) {
	                        writeType(typeArguments[0], 64);
	                        writePunctuation(writer, 19);
	                        writePunctuation(writer, 20);
	                    }
	                    else {
	                        var outerTypeParameters = type.target.outerTypeParameters;
	                        var i = 0;
	                        if (outerTypeParameters) {
	                            var length_1 = outerTypeParameters.length;
	                            while (i < length_1) {
	                                var start = i;
	                                var parent_3 = getParentSymbolOfTypeParameter(outerTypeParameters[i]);
	                                do {
	                                    i++;
	                                } while (i < length_1 && getParentSymbolOfTypeParameter(outerTypeParameters[i]) === parent_3);
	                                if (!ts.rangeEquals(outerTypeParameters, typeArguments, start, i)) {
	                                    writeSymbolTypeReference(parent_3, typeArguments, start, i);
	                                    writePunctuation(writer, 21);
	                                }
	                            }
	                        }
	                        writeSymbolTypeReference(type.symbol, typeArguments, i, typeArguments.length);
	                    }
	                }
	                function writeTupleType(type) {
	                    writePunctuation(writer, 19);
	                    writeTypeList(type.elementTypes, 24);
	                    writePunctuation(writer, 20);
	                }
	                function writeUnionOrIntersectionType(type, flags) {
	                    if (flags & 64) {
	                        writePunctuation(writer, 17);
	                    }
	                    writeTypeList(type.types, type.flags & 16384 ? 46 : 45);
	                    if (flags & 64) {
	                        writePunctuation(writer, 18);
	                    }
	                }
	                function writeAnonymousType(type, flags) {
	                    var symbol = type.symbol;
	                    if (symbol) {
	                        if (symbol.flags & (32 | 384 | 512)) {
	                            writeTypeofSymbol(type, flags);
	                        }
	                        else if (shouldWriteTypeOfFunctionSymbol()) {
	                            writeTypeofSymbol(type, flags);
	                        }
	                        else if (ts.contains(symbolStack, symbol)) {
	                            var typeAlias = getTypeAliasForTypeLiteral(type);
	                            if (typeAlias) {
	                                buildSymbolDisplay(typeAlias, writer, enclosingDeclaration, 793056, 0, flags);
	                            }
	                            else {
	                                writeKeyword(writer, 115);
	                            }
	                        }
	                        else {
	                            if (!symbolStack) {
	                                symbolStack = [];
	                            }
	                            symbolStack.push(symbol);
	                            writeLiteralType(type, flags);
	                            symbolStack.pop();
	                        }
	                    }
	                    else {
	                        writeLiteralType(type, flags);
	                    }
	                    function shouldWriteTypeOfFunctionSymbol() {
	                        var isStaticMethodSymbol = !!(symbol.flags & 8192 &&
	                            ts.forEach(symbol.declarations, function (declaration) { return declaration.flags & 128; }));
	                        var isNonLocalFunctionSymbol = !!(symbol.flags & 16) &&
	                            (symbol.parent ||
	                                ts.forEach(symbol.declarations, function (declaration) {
	                                    return declaration.parent.kind === 246 || declaration.parent.kind === 217;
	                                }));
	                        if (isStaticMethodSymbol || isNonLocalFunctionSymbol) {
	                            return !!(flags & 2) ||
	                                (ts.contains(symbolStack, symbol));
	                        }
	                    }
	                }
	                function writeTypeofSymbol(type, typeFormatFlags) {
	                    writeKeyword(writer, 99);
	                    writeSpace(writer);
	                    buildSymbolDisplay(type.symbol, writer, enclosingDeclaration, 107455, 0, typeFormatFlags);
	                }
	                function getIndexerParameterName(type, indexKind, fallbackName) {
	                    var declaration = getIndexDeclarationOfSymbol(type.symbol, indexKind);
	                    if (!declaration) {
	                        return fallbackName;
	                    }
	                    ts.Debug.assert(declaration.parameters.length !== 0);
	                    return ts.declarationNameToString(declaration.parameters[0].name);
	                }
	                function writeLiteralType(type, flags) {
	                    var resolved = resolveStructuredTypeMembers(type);
	                    if (!resolved.properties.length && !resolved.stringIndexType && !resolved.numberIndexType) {
	                        if (!resolved.callSignatures.length && !resolved.constructSignatures.length) {
	                            writePunctuation(writer, 15);
	                            writePunctuation(writer, 16);
	                            return;
	                        }
	                        if (resolved.callSignatures.length === 1 && !resolved.constructSignatures.length) {
	                            if (flags & 64) {
	                                writePunctuation(writer, 17);
	                            }
	                            buildSignatureDisplay(resolved.callSignatures[0], writer, enclosingDeclaration, globalFlagsToPass | 8, symbolStack);
	                            if (flags & 64) {
	                                writePunctuation(writer, 18);
	                            }
	                            return;
	                        }
	                        if (resolved.constructSignatures.length === 1 && !resolved.callSignatures.length) {
	                            if (flags & 64) {
	                                writePunctuation(writer, 17);
	                            }
	                            writeKeyword(writer, 90);
	                            writeSpace(writer);
	                            buildSignatureDisplay(resolved.constructSignatures[0], writer, enclosingDeclaration, globalFlagsToPass | 8, symbolStack);
	                            if (flags & 64) {
	                                writePunctuation(writer, 18);
	                            }
	                            return;
	                        }
	                    }
	                    writePunctuation(writer, 15);
	                    writer.writeLine();
	                    writer.increaseIndent();
	                    for (var _i = 0, _a = resolved.callSignatures; _i < _a.length; _i++) {
	                        var signature = _a[_i];
	                        buildSignatureDisplay(signature, writer, enclosingDeclaration, globalFlagsToPass, symbolStack);
	                        writePunctuation(writer, 23);
	                        writer.writeLine();
	                    }
	                    for (var _b = 0, _c = resolved.constructSignatures; _b < _c.length; _b++) {
	                        var signature = _c[_b];
	                        writeKeyword(writer, 90);
	                        writeSpace(writer);
	                        buildSignatureDisplay(signature, writer, enclosingDeclaration, globalFlagsToPass, symbolStack);
	                        writePunctuation(writer, 23);
	                        writer.writeLine();
	                    }
	                    if (resolved.stringIndexType) {
	                        writePunctuation(writer, 19);
	                        writer.writeParameter(getIndexerParameterName(resolved, 0, "x"));
	                        writePunctuation(writer, 53);
	                        writeSpace(writer);
	                        writeKeyword(writer, 128);
	                        writePunctuation(writer, 20);
	                        writePunctuation(writer, 53);
	                        writeSpace(writer);
	                        writeType(resolved.stringIndexType, 0);
	                        writePunctuation(writer, 23);
	                        writer.writeLine();
	                    }
	                    if (resolved.numberIndexType) {
	                        writePunctuation(writer, 19);
	                        writer.writeParameter(getIndexerParameterName(resolved, 1, "x"));
	                        writePunctuation(writer, 53);
	                        writeSpace(writer);
	                        writeKeyword(writer, 126);
	                        writePunctuation(writer, 20);
	                        writePunctuation(writer, 53);
	                        writeSpace(writer);
	                        writeType(resolved.numberIndexType, 0);
	                        writePunctuation(writer, 23);
	                        writer.writeLine();
	                    }
	                    for (var _d = 0, _e = resolved.properties; _d < _e.length; _d++) {
	                        var p = _e[_d];
	                        var t = getTypeOfSymbol(p);
	                        if (p.flags & (16 | 8192) && !getPropertiesOfObjectType(t).length) {
	                            var signatures = getSignaturesOfType(t, 0);
	                            for (var _f = 0; _f < signatures.length; _f++) {
	                                var signature = signatures[_f];
	                                buildSymbolDisplay(p, writer);
	                                if (p.flags & 536870912) {
	                                    writePunctuation(writer, 52);
	                                }
	                                buildSignatureDisplay(signature, writer, enclosingDeclaration, globalFlagsToPass, symbolStack);
	                                writePunctuation(writer, 23);
	                                writer.writeLine();
	                            }
	                        }
	                        else {
	                            buildSymbolDisplay(p, writer);
	                            if (p.flags & 536870912) {
	                                writePunctuation(writer, 52);
	                            }
	                            writePunctuation(writer, 53);
	                            writeSpace(writer);
	                            writeType(t, 0);
	                            writePunctuation(writer, 23);
	                            writer.writeLine();
	                        }
	                    }
	                    writer.decreaseIndent();
	                    writePunctuation(writer, 16);
	                }
	            }
	            function buildTypeParameterDisplayFromSymbol(symbol, writer, enclosingDeclaraiton, flags) {
	                var targetSymbol = getTargetSymbol(symbol);
	                if (targetSymbol.flags & 32 || targetSymbol.flags & 64 || targetSymbol.flags & 524288) {
	                    buildDisplayForTypeParametersAndDelimiters(getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol), writer, enclosingDeclaraiton, flags);
	                }
	            }
	            function buildTypeParameterDisplay(tp, writer, enclosingDeclaration, flags, symbolStack) {
	                appendSymbolNameOnly(tp.symbol, writer);
	                var constraint = getConstraintOfTypeParameter(tp);
	                if (constraint) {
	                    writeSpace(writer);
	                    writeKeyword(writer, 81);
	                    writeSpace(writer);
	                    buildTypeDisplay(constraint, writer, enclosingDeclaration, flags, symbolStack);
	                }
	            }
	            function buildParameterDisplay(p, writer, enclosingDeclaration, flags, symbolStack) {
	                var parameterNode = p.valueDeclaration;
	                if (ts.isRestParameter(parameterNode)) {
	                    writePunctuation(writer, 22);
	                }
	                appendSymbolNameOnly(p, writer);
	                if (isOptionalParameter(parameterNode)) {
	                    writePunctuation(writer, 52);
	                }
	                writePunctuation(writer, 53);
	                writeSpace(writer);
	                buildTypeDisplay(getTypeOfSymbol(p), writer, enclosingDeclaration, flags, symbolStack);
	            }
	            function buildDisplayForTypeParametersAndDelimiters(typeParameters, writer, enclosingDeclaration, flags, symbolStack) {
	                if (typeParameters && typeParameters.length) {
	                    writePunctuation(writer, 25);
	                    for (var i = 0; i < typeParameters.length; i++) {
	                        if (i > 0) {
	                            writePunctuation(writer, 24);
	                            writeSpace(writer);
	                        }
	                        buildTypeParameterDisplay(typeParameters[i], writer, enclosingDeclaration, flags, symbolStack);
	                    }
	                    writePunctuation(writer, 27);
	                }
	            }
	            function buildDisplayForTypeArgumentsAndDelimiters(typeParameters, mapper, writer, enclosingDeclaration, flags, symbolStack) {
	                if (typeParameters && typeParameters.length) {
	                    writePunctuation(writer, 25);
	                    for (var i = 0; i < typeParameters.length; i++) {
	                        if (i > 0) {
	                            writePunctuation(writer, 24);
	                            writeSpace(writer);
	                        }
	                        buildTypeDisplay(mapper(typeParameters[i]), writer, enclosingDeclaration, 0);
	                    }
	                    writePunctuation(writer, 27);
	                }
	            }
	            function buildDisplayForParametersAndDelimiters(parameters, writer, enclosingDeclaration, flags, symbolStack) {
	                writePunctuation(writer, 17);
	                for (var i = 0; i < parameters.length; i++) {
	                    if (i > 0) {
	                        writePunctuation(writer, 24);
	                        writeSpace(writer);
	                    }
	                    buildParameterDisplay(parameters[i], writer, enclosingDeclaration, flags, symbolStack);
	                }
	                writePunctuation(writer, 18);
	            }
	            function buildReturnTypeDisplay(signature, writer, enclosingDeclaration, flags, symbolStack) {
	                if (flags & 8) {
	                    writeSpace(writer);
	                    writePunctuation(writer, 34);
	                }
	                else {
	                    writePunctuation(writer, 53);
	                }
	                writeSpace(writer);
	                var returnType;
	                if (signature.typePredicate) {
	                    writer.writeParameter(signature.typePredicate.parameterName);
	                    writeSpace(writer);
	                    writeKeyword(writer, 122);
	                    writeSpace(writer);
	                    returnType = signature.typePredicate.type;
	                }
	                else {
	                    returnType = getReturnTypeOfSignature(signature);
	                }
	                buildTypeDisplay(returnType, writer, enclosingDeclaration, flags, symbolStack);
	            }
	            function buildSignatureDisplay(signature, writer, enclosingDeclaration, flags, symbolStack) {
	                if (signature.target && (flags & 32)) {
	                    buildDisplayForTypeArgumentsAndDelimiters(signature.target.typeParameters, signature.mapper, writer, enclosingDeclaration);
	                }
	                else {
	                    buildDisplayForTypeParametersAndDelimiters(signature.typeParameters, writer, enclosingDeclaration, flags, symbolStack);
	                }
	                buildDisplayForParametersAndDelimiters(signature.parameters, writer, enclosingDeclaration, flags, symbolStack);
	                buildReturnTypeDisplay(signature, writer, enclosingDeclaration, flags, symbolStack);
	            }
	            return _displayBuilder || (_displayBuilder = {
	                buildSymbolDisplay: buildSymbolDisplay,
	                buildTypeDisplay: buildTypeDisplay,
	                buildTypeParameterDisplay: buildTypeParameterDisplay,
	                buildParameterDisplay: buildParameterDisplay,
	                buildDisplayForParametersAndDelimiters: buildDisplayForParametersAndDelimiters,
	                buildDisplayForTypeParametersAndDelimiters: buildDisplayForTypeParametersAndDelimiters,
	                buildTypeParameterDisplayFromSymbol: buildTypeParameterDisplayFromSymbol,
	                buildSignatureDisplay: buildSignatureDisplay,
	                buildReturnTypeDisplay: buildReturnTypeDisplay
	            });
	        }
	        function isDeclarationVisible(node) {
	            function getContainingExternalModule(node) {
	                for (; node; node = node.parent) {
	                    if (node.kind === 216) {
	                        if (node.name.kind === 9) {
	                            return node;
	                        }
	                    }
	                    else if (node.kind === 246) {
	                        return ts.isExternalModule(node) ? node : undefined;
	                    }
	                }
	                ts.Debug.fail("getContainingModule cant reach here");
	            }
	            function isUsedInExportAssignment(node) {
	                var externalModule = getContainingExternalModule(node);
	                var exportAssignmentSymbol;
	                var resolvedExportSymbol;
	                if (externalModule) {
	                    var externalModuleSymbol = getSymbolOfNode(externalModule);
	                    exportAssignmentSymbol = getExportAssignmentSymbol(externalModuleSymbol);
	                    var symbolOfNode = getSymbolOfNode(node);
	                    if (isSymbolUsedInExportAssignment(symbolOfNode)) {
	                        return true;
	                    }
	                    if (symbolOfNode.flags & 8388608) {
	                        return isSymbolUsedInExportAssignment(resolveAlias(symbolOfNode));
	                    }
	                }
	                function isSymbolUsedInExportAssignment(symbol) {
	                    if (exportAssignmentSymbol === symbol) {
	                        return true;
	                    }
	                    if (exportAssignmentSymbol && !!(exportAssignmentSymbol.flags & 8388608)) {
	                        resolvedExportSymbol = resolvedExportSymbol || resolveAlias(exportAssignmentSymbol);
	                        if (resolvedExportSymbol === symbol) {
	                            return true;
	                        }
	                        return ts.forEach(resolvedExportSymbol.declarations, function (current) {
	                            while (current) {
	                                if (current === node) {
	                                    return true;
	                                }
	                                current = current.parent;
	                            }
	                        });
	                    }
	                }
	            }
	            function determineIfDeclarationIsVisible() {
	                switch (node.kind) {
	                    case 161:
	                        return isDeclarationVisible(node.parent.parent);
	                    case 209:
	                        if (ts.isBindingPattern(node.name) &&
	                            !node.name.elements.length) {
	                            return false;
	                        }
	                    case 216:
	                    case 212:
	                    case 213:
	                    case 214:
	                    case 211:
	                    case 215:
	                    case 219:
	                        var parent_4 = getDeclarationContainer(node);
	                        if (!(ts.getCombinedNodeFlags(node) & 1) &&
	                            !(node.kind !== 219 && parent_4.kind !== 246 && ts.isInAmbientContext(parent_4))) {
	                            return isGlobalSourceFile(parent_4);
	                        }
	                        return isDeclarationVisible(parent_4);
	                    case 139:
	                    case 138:
	                    case 143:
	                    case 144:
	                    case 141:
	                    case 140:
	                        if (node.flags & (32 | 64)) {
	                            return false;
	                        }
	                    case 142:
	                    case 146:
	                    case 145:
	                    case 147:
	                    case 136:
	                    case 217:
	                    case 150:
	                    case 151:
	                    case 153:
	                    case 149:
	                    case 154:
	                    case 155:
	                    case 156:
	                    case 157:
	                    case 158:
	                        return isDeclarationVisible(node.parent);
	                    case 221:
	                    case 222:
	                    case 224:
	                        return false;
	                    case 135:
	                    case 246:
	                        return true;
	                    case 225:
	                        return false;
	                    default:
	                        ts.Debug.fail("isDeclarationVisible unknown: SyntaxKind: " + node.kind);
	                }
	            }
	            if (node) {
	                var links = getNodeLinks(node);
	                if (links.isVisible === undefined) {
	                    links.isVisible = !!determineIfDeclarationIsVisible();
	                }
	                return links.isVisible;
	            }
	        }
	        function collectLinkedAliases(node) {
	            var exportSymbol;
	            if (node.parent && node.parent.kind === 225) {
	                exportSymbol = resolveName(node.parent, node.text, 107455 | 793056 | 1536 | 8388608, ts.Diagnostics.Cannot_find_name_0, node);
	            }
	            else if (node.parent.kind === 228) {
	                var exportSpecifier = node.parent;
	                exportSymbol = exportSpecifier.parent.parent.moduleSpecifier ?
	                    getExternalModuleMember(exportSpecifier.parent.parent, exportSpecifier) :
	                    resolveEntityName(exportSpecifier.propertyName || exportSpecifier.name, 107455 | 793056 | 1536 | 8388608);
	            }
	            var result = [];
	            if (exportSymbol) {
	                buildVisibleNodeList(exportSymbol.declarations);
	            }
	            return result;
	            function buildVisibleNodeList(declarations) {
	                ts.forEach(declarations, function (declaration) {
	                    getNodeLinks(declaration).isVisible = true;
	                    var resultNode = getAnyImportSyntax(declaration) || declaration;
	                    if (!ts.contains(result, resultNode)) {
	                        result.push(resultNode);
	                    }
	                    if (ts.isInternalModuleImportEqualsDeclaration(declaration)) {
	                        var internalModuleReference = declaration.moduleReference;
	                        var firstIdentifier = getFirstIdentifier(internalModuleReference);
	                        var importSymbol = resolveName(declaration, firstIdentifier.text, 107455 | 793056 | 1536, ts.Diagnostics.Cannot_find_name_0, firstIdentifier);
	                        buildVisibleNodeList(importSymbol.declarations);
	                    }
	                });
	            }
	        }
	        function pushTypeResolution(target, propertyName) {
	            var resolutionCycleStartIndex = findResolutionCycleStartIndex(target, propertyName);
	            if (resolutionCycleStartIndex >= 0) {
	                var length_2 = resolutionTargets.length;
	                for (var i = resolutionCycleStartIndex; i < length_2; i++) {
	                    resolutionResults[i] = false;
	                }
	                return false;
	            }
	            resolutionTargets.push(target);
	            resolutionResults.push(true);
	            resolutionPropertyNames.push(propertyName);
	            return true;
	        }
	        function findResolutionCycleStartIndex(target, propertyName) {
	            for (var i = resolutionTargets.length - 1; i >= 0; i--) {
	                if (hasType(resolutionTargets[i], resolutionPropertyNames[i])) {
	                    return -1;
	                }
	                if (resolutionTargets[i] === target && resolutionPropertyNames[i] === propertyName) {
	                    return i;
	                }
	            }
	            return -1;
	        }
	        function hasType(target, propertyName) {
	            if (propertyName === 0) {
	                return getSymbolLinks(target).type;
	            }
	            if (propertyName === 2) {
	                return getSymbolLinks(target).declaredType;
	            }
	            if (propertyName === 1) {
	                ts.Debug.assert(!!(target.flags & 1024));
	                return target.resolvedBaseConstructorType;
	            }
	            if (propertyName === 3) {
	                return target.resolvedReturnType;
	            }
	            ts.Debug.fail("Unhandled TypeSystemPropertyName " + propertyName);
	        }
	        function popTypeResolution() {
	            resolutionTargets.pop();
	            resolutionPropertyNames.pop();
	            return resolutionResults.pop();
	        }
	        function getDeclarationContainer(node) {
	            node = ts.getRootDeclaration(node);
	            return node.kind === 209 ? node.parent.parent.parent : node.parent;
	        }
	        function getTypeOfPrototypeProperty(prototype) {
	            var classType = getDeclaredTypeOfSymbol(prototype.parent);
	            return classType.typeParameters ? createTypeReference(classType, ts.map(classType.typeParameters, function (_) { return anyType; })) : classType;
	        }
	        function getTypeOfPropertyOfType(type, name) {
	            var prop = getPropertyOfType(type, name);
	            return prop ? getTypeOfSymbol(prop) : undefined;
	        }
	        function isTypeAny(type) {
	            return type && (type.flags & 1) !== 0;
	        }
	        function getTypeForBindingElement(declaration) {
	            var pattern = declaration.parent;
	            var parentType = getTypeForVariableLikeDeclaration(pattern.parent);
	            if (parentType === unknownType) {
	                return unknownType;
	            }
	            if (!parentType || isTypeAny(parentType)) {
	                if (declaration.initializer) {
	                    return checkExpressionCached(declaration.initializer);
	                }
	                return parentType;
	            }
	            var type;
	            if (pattern.kind === 159) {
	                var name_10 = declaration.propertyName || declaration.name;
	                type = getTypeOfPropertyOfType(parentType, name_10.text) ||
	                    isNumericLiteralName(name_10.text) && getIndexTypeOfType(parentType, 1) ||
	                    getIndexTypeOfType(parentType, 0);
	                if (!type) {
	                    error(name_10, ts.Diagnostics.Type_0_has_no_property_1_and_no_string_index_signature, typeToString(parentType), ts.declarationNameToString(name_10));
	                    return unknownType;
	                }
	            }
	            else {
	                var elementType = checkIteratedTypeOrElementType(parentType, pattern, false);
	                if (!declaration.dotDotDotToken) {
	                    var propName = "" + ts.indexOf(pattern.elements, declaration);
	                    type = isTupleLikeType(parentType)
	                        ? getTypeOfPropertyOfType(parentType, propName)
	                        : elementType;
	                    if (!type) {
	                        if (isTupleType(parentType)) {
	                            error(declaration, ts.Diagnostics.Tuple_type_0_with_length_1_cannot_be_assigned_to_tuple_with_length_2, typeToString(parentType), parentType.elementTypes.length, pattern.elements.length);
	                        }
	                        else {
	                            error(declaration, ts.Diagnostics.Type_0_has_no_property_1, typeToString(parentType), propName);
	                        }
	                        return unknownType;
	                    }
	                }
	                else {
	                    type = createArrayType(elementType);
	                }
	            }
	            return type;
	        }
	        function getTypeForVariableLikeDeclaration(declaration) {
	            if (declaration.parent.parent.kind === 198) {
	                return anyType;
	            }
	            if (declaration.parent.parent.kind === 199) {
	                return checkRightHandSideOfForOf(declaration.parent.parent.expression) || anyType;
	            }
	            if (ts.isBindingPattern(declaration.parent)) {
	                return getTypeForBindingElement(declaration);
	            }
	            if (declaration.type) {
	                return getTypeFromTypeNode(declaration.type);
	            }
	            if (declaration.kind === 136) {
	                var func = declaration.parent;
	                if (func.kind === 144 && !ts.hasDynamicName(func)) {
	                    var getter = ts.getDeclarationOfKind(declaration.parent.symbol, 143);
	                    if (getter) {
	                        return getReturnTypeOfSignature(getSignatureFromDeclaration(getter));
	                    }
	                }
	                var type = getContextuallyTypedParameterType(declaration);
	                if (type) {
	                    return type;
	                }
	            }
	            if (declaration.initializer) {
	                return checkExpressionCached(declaration.initializer);
	            }
	            if (declaration.kind === 244) {
	                return checkIdentifier(declaration.name);
	            }
	            if (ts.isBindingPattern(declaration.name)) {
	                return getTypeFromBindingPattern(declaration.name);
	            }
	            return undefined;
	        }
	        function getTypeFromBindingElement(element) {
	            if (element.initializer) {
	                return getWidenedType(checkExpressionCached(element.initializer));
	            }
	            if (ts.isBindingPattern(element.name)) {
	                return getTypeFromBindingPattern(element.name);
	            }
	            return anyType;
	        }
	        function getTypeFromObjectBindingPattern(pattern) {
	            var members = {};
	            ts.forEach(pattern.elements, function (e) {
	                var flags = 4 | 67108864 | (e.initializer ? 536870912 : 0);
	                var name = e.propertyName || e.name;
	                var symbol = createSymbol(flags, name.text);
	                symbol.type = getTypeFromBindingElement(e);
	                members[symbol.name] = symbol;
	            });
	            return createAnonymousType(undefined, members, emptyArray, emptyArray, undefined, undefined);
	        }
	        function getTypeFromArrayBindingPattern(pattern) {
	            var hasSpreadElement = false;
	            var elementTypes = [];
	            ts.forEach(pattern.elements, function (e) {
	                elementTypes.push(e.kind === 185 || e.dotDotDotToken ? anyType : getTypeFromBindingElement(e));
	                if (e.dotDotDotToken) {
	                    hasSpreadElement = true;
	                }
	            });
	            if (!elementTypes.length) {
	                return languageVersion >= 2 ? createIterableType(anyType) : anyArrayType;
	            }
	            else if (hasSpreadElement) {
	                var unionOfElements = getUnionType(elementTypes);
	                return languageVersion >= 2 ? createIterableType(unionOfElements) : createArrayType(unionOfElements);
	            }
	            return createTupleType(elementTypes);
	        }
	        function getTypeFromBindingPattern(pattern) {
	            return pattern.kind === 159
	                ? getTypeFromObjectBindingPattern(pattern)
	                : getTypeFromArrayBindingPattern(pattern);
	        }
	        function getWidenedTypeForVariableLikeDeclaration(declaration, reportErrors) {
	            var type = getTypeForVariableLikeDeclaration(declaration);
	            if (type) {
	                if (reportErrors) {
	                    reportErrorsFromWidening(declaration, type);
	                }
	                return declaration.kind !== 243 ? getWidenedType(type) : type;
	            }
	            type = declaration.dotDotDotToken ? anyArrayType : anyType;
	            if (reportErrors && compilerOptions.noImplicitAny) {
	                var root = ts.getRootDeclaration(declaration);
	                if (!isPrivateWithinAmbient(root) && !(root.kind === 136 && isPrivateWithinAmbient(root.parent))) {
	                    reportImplicitAnyError(declaration, type);
	                }
	            }
	            return type;
	        }
	        function getTypeOfVariableOrParameterOrProperty(symbol) {
	            var links = getSymbolLinks(symbol);
	            if (!links.type) {
	                if (symbol.flags & 134217728) {
	                    return links.type = getTypeOfPrototypeProperty(symbol);
	                }
	                var declaration = symbol.valueDeclaration;
	                if (declaration.parent.kind === 242) {
	                    return links.type = anyType;
	                }
	                if (declaration.kind === 225) {
	                    return links.type = checkExpression(declaration.expression);
	                }
	                if (!pushTypeResolution(symbol, 0)) {
	                    return unknownType;
	                }
	                var type = getWidenedTypeForVariableLikeDeclaration(declaration, true);
	                if (!popTypeResolution()) {
	                    if (symbol.valueDeclaration.type) {
	                        type = unknownType;
	                        error(symbol.valueDeclaration, ts.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, symbolToString(symbol));
	                    }
	                    else {
	                        type = anyType;
	                        if (compilerOptions.noImplicitAny) {
	                            error(symbol.valueDeclaration, ts.Diagnostics._0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer, symbolToString(symbol));
	                        }
	                    }
	                }
	                links.type = type;
	            }
	            return links.type;
	        }
	        function getAnnotatedAccessorType(accessor) {
	            if (accessor) {
	                if (accessor.kind === 143) {
	                    return accessor.type && getTypeFromTypeNode(accessor.type);
	                }
	                else {
	                    var setterTypeAnnotation = ts.getSetAccessorTypeAnnotationNode(accessor);
	                    return setterTypeAnnotation && getTypeFromTypeNode(setterTypeAnnotation);
	                }
	            }
	            return undefined;
	        }
	        function getTypeOfAccessors(symbol) {
	            var links = getSymbolLinks(symbol);
	            if (!links.type) {
	                if (!pushTypeResolution(symbol, 0)) {
	                    return unknownType;
	                }
	                var getter = ts.getDeclarationOfKind(symbol, 143);
	                var setter = ts.getDeclarationOfKind(symbol, 144);
	                var type;
	                var getterReturnType = getAnnotatedAccessorType(getter);
	                if (getterReturnType) {
	                    type = getterReturnType;
	                }
	                else {
	                    var setterParameterType = getAnnotatedAccessorType(setter);
	                    if (setterParameterType) {
	                        type = setterParameterType;
	                    }
	                    else {
	                        if (getter && getter.body) {
	                            type = getReturnTypeFromBody(getter);
	                        }
	                        else {
	                            if (compilerOptions.noImplicitAny) {
	                                error(setter, ts.Diagnostics.Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_type_annotation, symbolToString(symbol));
	                            }
	                            type = anyType;
	                        }
	                    }
	                }
	                if (!popTypeResolution()) {
	                    type = anyType;
	                    if (compilerOptions.noImplicitAny) {
	                        var getter_1 = ts.getDeclarationOfKind(symbol, 143);
	                        error(getter_1, ts.Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, symbolToString(symbol));
	                    }
	                }
	                links.type = type;
	            }
	            return links.type;
	        }
	        function getTypeOfFuncClassEnumModule(symbol) {
	            var links = getSymbolLinks(symbol);
	            if (!links.type) {
	                links.type = createObjectType(65536, symbol);
	            }
	            return links.type;
	        }
	        function getTypeOfEnumMember(symbol) {
	            var links = getSymbolLinks(symbol);
	            if (!links.type) {
	                links.type = getDeclaredTypeOfEnum(getParentOfSymbol(symbol));
	            }
	            return links.type;
	        }
	        function getTypeOfAlias(symbol) {
	            var links = getSymbolLinks(symbol);
	            if (!links.type) {
	                var targetSymbol = resolveAlias(symbol);
	                links.type = targetSymbol.flags & 107455
	                    ? getTypeOfSymbol(targetSymbol)
	                    : unknownType;
	            }
	            return links.type;
	        }
	        function getTypeOfInstantiatedSymbol(symbol) {
	            var links = getSymbolLinks(symbol);
	            if (!links.type) {
	                links.type = instantiateType(getTypeOfSymbol(links.target), links.mapper);
	            }
	            return links.type;
	        }
	        function getTypeOfSymbol(symbol) {
	            if (symbol.flags & 16777216) {
	                return getTypeOfInstantiatedSymbol(symbol);
	            }
	            if (symbol.flags & (3 | 4)) {
	                return getTypeOfVariableOrParameterOrProperty(symbol);
	            }
	            if (symbol.flags & (16 | 8192 | 32 | 384 | 512)) {
	                return getTypeOfFuncClassEnumModule(symbol);
	            }
	            if (symbol.flags & 8) {
	                return getTypeOfEnumMember(symbol);
	            }
	            if (symbol.flags & 98304) {
	                return getTypeOfAccessors(symbol);
	            }
	            if (symbol.flags & 8388608) {
	                return getTypeOfAlias(symbol);
	            }
	            return unknownType;
	        }
	        function getTargetType(type) {
	            return type.flags & 4096 ? type.target : type;
	        }
	        function hasBaseType(type, checkBase) {
	            return check(type);
	            function check(type) {
	                var target = getTargetType(type);
	                return target === checkBase || ts.forEach(getBaseTypes(target), check);
	            }
	        }
	        function appendTypeParameters(typeParameters, declarations) {
	            for (var _i = 0; _i < declarations.length; _i++) {
	                var declaration = declarations[_i];
	                var tp = getDeclaredTypeOfTypeParameter(getSymbolOfNode(declaration));
	                if (!typeParameters) {
	                    typeParameters = [tp];
	                }
	                else if (!ts.contains(typeParameters, tp)) {
	                    typeParameters.push(tp);
	                }
	            }
	            return typeParameters;
	        }
	        function appendOuterTypeParameters(typeParameters, node) {
	            while (true) {
	                node = node.parent;
	                if (!node) {
	                    return typeParameters;
	                }
	                if (node.kind === 212 || node.kind === 184 ||
	                    node.kind === 211 || node.kind === 171 ||
	                    node.kind === 141 || node.kind === 172) {
	                    var declarations = node.typeParameters;
	                    if (declarations) {
	                        return appendTypeParameters(appendOuterTypeParameters(typeParameters, node), declarations);
	                    }
	                }
	            }
	        }
	        function getOuterTypeParametersOfClassOrInterface(symbol) {
	            var declaration = symbol.flags & 32 ? symbol.valueDeclaration : ts.getDeclarationOfKind(symbol, 213);
	            return appendOuterTypeParameters(undefined, declaration);
	        }
	        function getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol) {
	            var result;
	            for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
	                var node = _a[_i];
	                if (node.kind === 213 || node.kind === 212 ||
	                    node.kind === 184 || node.kind === 214) {
	                    var declaration = node;
	                    if (declaration.typeParameters) {
	                        result = appendTypeParameters(result, declaration.typeParameters);
	                    }
	                }
	            }
	            return result;
	        }
	        function getTypeParametersOfClassOrInterface(symbol) {
	            return ts.concatenate(getOuterTypeParametersOfClassOrInterface(symbol), getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol));
	        }
	        function isConstructorType(type) {
	            return type.flags & 80896 && getSignaturesOfType(type, 1).length > 0;
	        }
	        function getBaseTypeNodeOfClass(type) {
	            return ts.getClassExtendsHeritageClauseElement(type.symbol.valueDeclaration);
	        }
	        function getConstructorsForTypeArguments(type, typeArgumentNodes) {
	            var typeArgCount = typeArgumentNodes ? typeArgumentNodes.length : 0;
	            return ts.filter(getSignaturesOfType(type, 1), function (sig) { return (sig.typeParameters ? sig.typeParameters.length : 0) === typeArgCount; });
	        }
	        function getInstantiatedConstructorsForTypeArguments(type, typeArgumentNodes) {
	            var signatures = getConstructorsForTypeArguments(type, typeArgumentNodes);
	            if (typeArgumentNodes) {
	                var typeArguments = ts.map(typeArgumentNodes, getTypeFromTypeNode);
	                signatures = ts.map(signatures, function (sig) { return getSignatureInstantiation(sig, typeArguments); });
	            }
	            return signatures;
	        }
	        function getBaseConstructorTypeOfClass(type) {
	            if (!type.resolvedBaseConstructorType) {
	                var baseTypeNode = getBaseTypeNodeOfClass(type);
	                if (!baseTypeNode) {
	                    return type.resolvedBaseConstructorType = undefinedType;
	                }
	                if (!pushTypeResolution(type, 1)) {
	                    return unknownType;
	                }
	                var baseConstructorType = checkExpression(baseTypeNode.expression);
	                if (baseConstructorType.flags & 80896) {
	                    resolveStructuredTypeMembers(baseConstructorType);
	                }
	                if (!popTypeResolution()) {
	                    error(type.symbol.valueDeclaration, ts.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_base_expression, symbolToString(type.symbol));
	                    return type.resolvedBaseConstructorType = unknownType;
	                }
	                if (baseConstructorType !== unknownType && baseConstructorType !== nullType && !isConstructorType(baseConstructorType)) {
	                    error(baseTypeNode.expression, ts.Diagnostics.Type_0_is_not_a_constructor_function_type, typeToString(baseConstructorType));
	                    return type.resolvedBaseConstructorType = unknownType;
	                }
	                type.resolvedBaseConstructorType = baseConstructorType;
	            }
	            return type.resolvedBaseConstructorType;
	        }
	        function getBaseTypes(type) {
	            if (!type.resolvedBaseTypes) {
	                if (type.symbol.flags & 32) {
	                    resolveBaseTypesOfClass(type);
	                }
	                else if (type.symbol.flags & 64) {
	                    resolveBaseTypesOfInterface(type);
	                }
	                else {
	                    ts.Debug.fail("type must be class or interface");
	                }
	            }
	            return type.resolvedBaseTypes;
	        }
	        function resolveBaseTypesOfClass(type) {
	            type.resolvedBaseTypes = emptyArray;
	            var baseContructorType = getBaseConstructorTypeOfClass(type);
	            if (!(baseContructorType.flags & 80896)) {
	                return;
	            }
	            var baseTypeNode = getBaseTypeNodeOfClass(type);
	            var baseType;
	            if (baseContructorType.symbol && baseContructorType.symbol.flags & 32) {
	                baseType = getTypeFromClassOrInterfaceReference(baseTypeNode, baseContructorType.symbol);
	            }
	            else {
	                var constructors = getInstantiatedConstructorsForTypeArguments(baseContructorType, baseTypeNode.typeArguments);
	                if (!constructors.length) {
	                    error(baseTypeNode.expression, ts.Diagnostics.No_base_constructor_has_the_specified_number_of_type_arguments);
	                    return;
	                }
	                baseType = getReturnTypeOfSignature(constructors[0]);
	            }
	            if (baseType === unknownType) {
	                return;
	            }
	            if (!(getTargetType(baseType).flags & (1024 | 2048))) {
	                error(baseTypeNode.expression, ts.Diagnostics.Base_constructor_return_type_0_is_not_a_class_or_interface_type, typeToString(baseType));
	                return;
	            }
	            if (type === baseType || hasBaseType(baseType, type)) {
	                error(type.symbol.valueDeclaration, ts.Diagnostics.Type_0_recursively_references_itself_as_a_base_type, typeToString(type, undefined, 1));
	                return;
	            }
	            type.resolvedBaseTypes = [baseType];
	        }
	        function resolveBaseTypesOfInterface(type) {
	            type.resolvedBaseTypes = [];
	            for (var _i = 0, _a = type.symbol.declarations; _i < _a.length; _i++) {
	                var declaration = _a[_i];
	                if (declaration.kind === 213 && ts.getInterfaceBaseTypeNodes(declaration)) {
	                    for (var _b = 0, _c = ts.getInterfaceBaseTypeNodes(declaration); _b < _c.length; _b++) {
	                        var node = _c[_b];
	                        var baseType = getTypeFromTypeNode(node);
	                        if (baseType !== unknownType) {
	                            if (getTargetType(baseType).flags & (1024 | 2048)) {
	                                if (type !== baseType && !hasBaseType(baseType, type)) {
	                                    type.resolvedBaseTypes.push(baseType);
	                                }
	                                else {
	                                    error(declaration, ts.Diagnostics.Type_0_recursively_references_itself_as_a_base_type, typeToString(type, undefined, 1));
	                                }
	                            }
	                            else {
	                                error(node, ts.Diagnostics.An_interface_may_only_extend_a_class_or_another_interface);
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        function getDeclaredTypeOfClassOrInterface(symbol) {
	            var links = getSymbolLinks(symbol);
	            if (!links.declaredType) {
	                var kind = symbol.flags & 32 ? 1024 : 2048;
	                var type = links.declaredType = createObjectType(kind, symbol);
	                var outerTypeParameters = getOuterTypeParametersOfClassOrInterface(symbol);
	                var localTypeParameters = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol);
	                if (outerTypeParameters || localTypeParameters) {
	                    type.flags |= 4096;
	                    type.typeParameters = ts.concatenate(outerTypeParameters, localTypeParameters);
	                    type.outerTypeParameters = outerTypeParameters;
	                    type.localTypeParameters = localTypeParameters;
	                    type.instantiations = {};
	                    type.instantiations[getTypeListId(type.typeParameters)] = type;
	                    type.target = type;
	                    type.typeArguments = type.typeParameters;
	                }
	            }
	            return links.declaredType;
	        }
	        function getDeclaredTypeOfTypeAlias(symbol) {
	            var links = getSymbolLinks(symbol);
	            if (!links.declaredType) {
	                if (!pushTypeResolution(symbol, 2)) {
	                    return unknownType;
	                }
	                var declaration = ts.getDeclarationOfKind(symbol, 214);
	                var type = getTypeFromTypeNode(declaration.type);
	                if (popTypeResolution()) {
	                    links.typeParameters = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol);
	                    if (links.typeParameters) {
	                        links.instantiations = {};
	                        links.instantiations[getTypeListId(links.typeParameters)] = type;
	                    }
	                }
	                else {
	                    type = unknownType;
	                    error(declaration.name, ts.Diagnostics.Type_alias_0_circularly_references_itself, symbolToString(symbol));
	                }
	                links.declaredType = type;
	            }
	            return links.declaredType;
	        }
	        function getDeclaredTypeOfEnum(symbol) {
	            var links = getSymbolLinks(symbol);
	            if (!links.declaredType) {
	                var type = createType(128);
	                type.symbol = symbol;
	                links.declaredType = type;
	            }
	            return links.declaredType;
	        }
	        function getDeclaredTypeOfTypeParameter(symbol) {
	            var links = getSymbolLinks(symbol);
	            if (!links.declaredType) {
	                var type = createType(512);
	                type.symbol = symbol;
	                if (!ts.getDeclarationOfKind(symbol, 135).constraint) {
	                    type.constraint = noConstraintType;
	                }
	                links.declaredType = type;
	            }
	            return links.declaredType;
	        }
	        function getDeclaredTypeOfAlias(symbol) {
	            var links = getSymbolLinks(symbol);
	            if (!links.declaredType) {
	                links.declaredType = getDeclaredTypeOfSymbol(resolveAlias(symbol));
	            }
	            return links.declaredType;
	        }
	        function getDeclaredTypeOfSymbol(symbol) {
	            ts.Debug.assert((symbol.flags & 16777216) === 0);
	            if (symbol.flags & (32 | 64)) {
	                return getDeclaredTypeOfClassOrInterface(symbol);
	            }
	            if (symbol.flags & 524288) {
	                return getDeclaredTypeOfTypeAlias(symbol);
	            }
	            if (symbol.flags & 384) {
	                return getDeclaredTypeOfEnum(symbol);
	            }
	            if (symbol.flags & 262144) {
	                return getDeclaredTypeOfTypeParameter(symbol);
	            }
	            if (symbol.flags & 8388608) {
	                return getDeclaredTypeOfAlias(symbol);
	            }
	            return unknownType;
	        }
	        function createSymbolTable(symbols) {
	            var result = {};
	            for (var _i = 0; _i < symbols.length; _i++) {
	                var symbol = symbols[_i];
	                result[symbol.name] = symbol;
	            }
	            return result;
	        }
	        function createInstantiatedSymbolTable(symbols, mapper) {
	            var result = {};
	            for (var _i = 0; _i < symbols.length; _i++) {
	                var symbol = symbols[_i];
	                result[symbol.name] = instantiateSymbol(symbol, mapper);
	            }
	            return result;
	        }
	        function addInheritedMembers(symbols, baseSymbols) {
	            for (var _i = 0; _i < baseSymbols.length; _i++) {
	                var s = baseSymbols[_i];
	                if (!ts.hasProperty(symbols, s.name)) {
	                    symbols[s.name] = s;
	                }
	            }
	        }
	        function addInheritedSignatures(signatures, baseSignatures) {
	            if (baseSignatures) {
	                for (var _i = 0; _i < baseSignatures.length; _i++) {
	                    var signature = baseSignatures[_i];
	                    signatures.push(signature);
	                }
	            }
	        }
	        function resolveDeclaredMembers(type) {
	            if (!type.declaredProperties) {
	                var symbol = type.symbol;
	                type.declaredProperties = getNamedMembers(symbol.members);
	                type.declaredCallSignatures = getSignaturesOfSymbol(symbol.members["__call"]);
	                type.declaredConstructSignatures = getSignaturesOfSymbol(symbol.members["__new"]);
	                type.declaredStringIndexType = getIndexTypeOfSymbol(symbol, 0);
	                type.declaredNumberIndexType = getIndexTypeOfSymbol(symbol, 1);
	            }
	            return type;
	        }
	        function resolveClassOrInterfaceMembers(type) {
	            var target = resolveDeclaredMembers(type);
	            var members = target.symbol.members;
	            var callSignatures = target.declaredCallSignatures;
	            var constructSignatures = target.declaredConstructSignatures;
	            var stringIndexType = target.declaredStringIndexType;
	            var numberIndexType = target.declaredNumberIndexType;
	            var baseTypes = getBaseTypes(target);
	            if (baseTypes.length) {
	                members = createSymbolTable(target.declaredProperties);
	                for (var _i = 0; _i < baseTypes.length; _i++) {
	                    var baseType = baseTypes[_i];
	                    addInheritedMembers(members, getPropertiesOfObjectType(baseType));
	                    callSignatures = ts.concatenate(callSignatures, getSignaturesOfType(baseType, 0));
	                    constructSignatures = ts.concatenate(constructSignatures, getSignaturesOfType(baseType, 1));
	                    stringIndexType = stringIndexType || getIndexTypeOfType(baseType, 0);
	                    numberIndexType = numberIndexType || getIndexTypeOfType(baseType, 1);
	                }
	            }
	            setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);
	        }
	        function resolveTypeReferenceMembers(type) {
	            var target = resolveDeclaredMembers(type.target);
	            var mapper = createTypeMapper(target.typeParameters, type.typeArguments);
	            var members = createInstantiatedSymbolTable(target.declaredProperties, mapper);
	            var callSignatures = instantiateList(target.declaredCallSignatures, mapper, instantiateSignature);
	            var constructSignatures = instantiateList(target.declaredConstructSignatures, mapper, instantiateSignature);
	            var stringIndexType = target.declaredStringIndexType ? instantiateType(target.declaredStringIndexType, mapper) : undefined;
	            var numberIndexType = target.declaredNumberIndexType ? instantiateType(target.declaredNumberIndexType, mapper) : undefined;
	            ts.forEach(getBaseTypes(target), function (baseType) {
	                var instantiatedBaseType = instantiateType(baseType, mapper);
	                addInheritedMembers(members, getPropertiesOfObjectType(instantiatedBaseType));
	                callSignatures = ts.concatenate(callSignatures, getSignaturesOfType(instantiatedBaseType, 0));
	                constructSignatures = ts.concatenate(constructSignatures, getSignaturesOfType(instantiatedBaseType, 1));
	                stringIndexType = stringIndexType || getIndexTypeOfType(instantiatedBaseType, 0);
	                numberIndexType = numberIndexType || getIndexTypeOfType(instantiatedBaseType, 1);
	            });
	            setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);
	        }
	        function createSignature(declaration, typeParameters, parameters, resolvedReturnType, typePredicate, minArgumentCount, hasRestParameter, hasStringLiterals) {
	            var sig = new Signature(checker);
	            sig.declaration = declaration;
	            sig.typeParameters = typeParameters;
	            sig.parameters = parameters;
	            sig.resolvedReturnType = resolvedReturnType;
	            sig.typePredicate = typePredicate;
	            sig.minArgumentCount = minArgumentCount;
	            sig.hasRestParameter = hasRestParameter;
	            sig.hasStringLiterals = hasStringLiterals;
	            return sig;
	        }
	        function cloneSignature(sig) {
	            return createSignature(sig.declaration, sig.typeParameters, sig.parameters, sig.resolvedReturnType, sig.typePredicate, sig.minArgumentCount, sig.hasRestParameter, sig.hasStringLiterals);
	        }
	        function getDefaultConstructSignatures(classType) {
	            if (!getBaseTypes(classType).length) {
	                return [createSignature(undefined, classType.localTypeParameters, emptyArray, classType, undefined, 0, false, false)];
	            }
	            var baseConstructorType = getBaseConstructorTypeOfClass(classType);
	            var baseSignatures = getSignaturesOfType(baseConstructorType, 1);
	            var baseTypeNode = getBaseTypeNodeOfClass(classType);
	            var typeArguments = ts.map(baseTypeNode.typeArguments, getTypeFromTypeNode);
	            var typeArgCount = typeArguments ? typeArguments.length : 0;
	            var result = [];
	            for (var _i = 0; _i < baseSignatures.length; _i++) {
	                var baseSig = baseSignatures[_i];
	                var typeParamCount = baseSig.typeParameters ? baseSig.typeParameters.length : 0;
	                if (typeParamCount === typeArgCount) {
	                    var sig = typeParamCount ? getSignatureInstantiation(baseSig, typeArguments) : cloneSignature(baseSig);
	                    sig.typeParameters = classType.localTypeParameters;
	                    sig.resolvedReturnType = classType;
	                    result.push(sig);
	                }
	            }
	            return result;
	        }
	        function createTupleTypeMemberSymbols(memberTypes) {
	            var members = {};
	            for (var i = 0; i < memberTypes.length; i++) {
	                var symbol = createSymbol(4 | 67108864, "" + i);
	                symbol.type = memberTypes[i];
	                members[i] = symbol;
	            }
	            return members;
	        }
	        function resolveTupleTypeMembers(type) {
	            var arrayType = resolveStructuredTypeMembers(createArrayType(getUnionType(type.elementTypes, true)));
	            var members = createTupleTypeMemberSymbols(type.elementTypes);
	            addInheritedMembers(members, arrayType.properties);
	            setObjectTypeMembers(type, members, arrayType.callSignatures, arrayType.constructSignatures, arrayType.stringIndexType, arrayType.numberIndexType);
	        }
	        function findMatchingSignature(signatureList, signature, partialMatch, ignoreReturnTypes) {
	            for (var _i = 0; _i < signatureList.length; _i++) {
	                var s = signatureList[_i];
	                if (compareSignatures(s, signature, partialMatch, ignoreReturnTypes, compareTypes)) {
	                    return s;
	                }
	            }
	        }
	        function findMatchingSignatures(signatureLists, signature, listIndex) {
	            if (signature.typeParameters) {
	                if (listIndex > 0) {
	                    return undefined;
	                }
	                for (var i = 1; i < signatureLists.length; i++) {
	                    if (!findMatchingSignature(signatureLists[i], signature, false, false)) {
	                        return undefined;
	                    }
	                }
	                return [signature];
	            }
	            var result = undefined;
	            for (var i = 0; i < signatureLists.length; i++) {
	                var match = i === listIndex ? signature : findMatchingSignature(signatureLists[i], signature, true, true);
	                if (!match) {
	                    return undefined;
	                }
	                if (!ts.contains(result, match)) {
	                    (result || (result = [])).push(match);
	                }
	            }
	            return result;
	        }
	        function getUnionSignatures(types, kind) {
	            var signatureLists = ts.map(types, function (t) { return getSignaturesOfType(t, kind); });
	            var result = undefined;
	            for (var i = 0; i < signatureLists.length; i++) {
	                for (var _i = 0, _a = signatureLists[i]; _i < _a.length; _i++) {
	                    var signature = _a[_i];
	                    if (!result || !findMatchingSignature(result, signature, false, true)) {
	                        var unionSignatures = findMatchingSignatures(signatureLists, signature, i);
	                        if (unionSignatures) {
	                            var s = signature;
	                            if (unionSignatures.length > 1) {
	                                s = cloneSignature(signature);
	                                s.resolvedReturnType = undefined;
	                                s.unionSignatures = unionSignatures;
	                            }
	                            (result || (result = [])).push(s);
	                        }
	                    }
	                }
	            }
	            return result || emptyArray;
	        }
	        function getUnionIndexType(types, kind) {
	            var indexTypes = [];
	            for (var _i = 0; _i < types.length; _i++) {
	                var type = types[_i];
	                var indexType = getIndexTypeOfType(type, kind);
	                if (!indexType) {
	                    return undefined;
	                }
	                indexTypes.push(indexType);
	            }
	            return getUnionType(indexTypes);
	        }
	        function resolveUnionTypeMembers(type) {
	            var callSignatures = getUnionSignatures(type.types, 0);
	            var constructSignatures = getUnionSignatures(type.types, 1);
	            var stringIndexType = getUnionIndexType(type.types, 0);
	            var numberIndexType = getUnionIndexType(type.types, 1);
	            setObjectTypeMembers(type, emptySymbols, callSignatures, constructSignatures, stringIndexType, numberIndexType);
	        }
	        function intersectTypes(type1, type2) {
	            return !type1 ? type2 : !type2 ? type1 : getIntersectionType([type1, type2]);
	        }
	        function resolveIntersectionTypeMembers(type) {
	            var callSignatures = emptyArray;
	            var constructSignatures = emptyArray;
	            var stringIndexType = undefined;
	            var numberIndexType = undefined;
	            for (var _i = 0, _a = type.types; _i < _a.length; _i++) {
	                var t = _a[_i];
	                callSignatures = ts.concatenate(callSignatures, getSignaturesOfType(t, 0));
	                constructSignatures = ts.concatenate(constructSignatures, getSignaturesOfType(t, 1));
	                stringIndexType = intersectTypes(stringIndexType, getIndexTypeOfType(t, 0));
	                numberIndexType = intersectTypes(numberIndexType, getIndexTypeOfType(t, 1));
	            }
	            setObjectTypeMembers(type, emptySymbols, callSignatures, constructSignatures, stringIndexType, numberIndexType);
	        }
	        function resolveAnonymousTypeMembers(type) {
	            var symbol = type.symbol;
	            var members;
	            var callSignatures;
	            var constructSignatures;
	            var stringIndexType;
	            var numberIndexType;
	            if (symbol.flags & 2048) {
	                members = symbol.members;
	                callSignatures = getSignaturesOfSymbol(members["__call"]);
	                constructSignatures = getSignaturesOfSymbol(members["__new"]);
	                stringIndexType = getIndexTypeOfSymbol(symbol, 0);
	                numberIndexType = getIndexTypeOfSymbol(symbol, 1);
	            }
	            else {
	                members = emptySymbols;
	                callSignatures = emptyArray;
	                constructSignatures = emptyArray;
	                if (symbol.flags & 1952) {
	                    members = getExportsOfSymbol(symbol);
	                }
	                if (symbol.flags & (16 | 8192)) {
	                    callSignatures = getSignaturesOfSymbol(symbol);
	                }
	                if (symbol.flags & 32) {
	                    var classType = getDeclaredTypeOfClassOrInterface(symbol);
	                    constructSignatures = getSignaturesOfSymbol(symbol.members["__constructor"]);
	                    if (!constructSignatures.length) {
	                        constructSignatures = getDefaultConstructSignatures(classType);
	                    }
	                    var baseConstructorType = getBaseConstructorTypeOfClass(classType);
	                    if (baseConstructorType.flags & 80896) {
	                        members = createSymbolTable(getNamedMembers(members));
	                        addInheritedMembers(members, getPropertiesOfObjectType(baseConstructorType));
	                    }
	                }
	                stringIndexType = undefined;
	                numberIndexType = (symbol.flags & 384) ? stringType : undefined;
	            }
	            setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);
	        }
	        function resolveStructuredTypeMembers(type) {
	            if (!type.members) {
	                if (type.flags & (1024 | 2048)) {
	                    resolveClassOrInterfaceMembers(type);
	                }
	                else if (type.flags & 65536) {
	                    resolveAnonymousTypeMembers(type);
	                }
	                else if (type.flags & 8192) {
	                    resolveTupleTypeMembers(type);
	                }
	                else if (type.flags & 16384) {
	                    resolveUnionTypeMembers(type);
	                }
	                else if (type.flags & 32768) {
	                    resolveIntersectionTypeMembers(type);
	                }
	                else {
	                    resolveTypeReferenceMembers(type);
	                }
	            }
	            return type;
	        }
	        function getPropertiesOfObjectType(type) {
	            if (type.flags & 80896) {
	                return resolveStructuredTypeMembers(type).properties;
	            }
	            return emptyArray;
	        }
	        function getPropertyOfObjectType(type, name) {
	            if (type.flags & 80896) {
	                var resolved = resolveStructuredTypeMembers(type);
	                if (ts.hasProperty(resolved.members, name)) {
	                    var symbol = resolved.members[name];
	                    if (symbolIsValue(symbol)) {
	                        return symbol;
	                    }
	                }
	            }
	        }
	        function getPropertiesOfUnionOrIntersectionType(type) {
	            for (var _i = 0, _a = type.types; _i < _a.length; _i++) {
	                var current = _a[_i];
	                for (var _b = 0, _c = getPropertiesOfType(current); _b < _c.length; _b++) {
	                    var prop = _c[_b];
	                    getPropertyOfUnionOrIntersectionType(type, prop.name);
	                }
	                if (type.flags & 16384) {
	                    break;
	                }
	            }
	            return type.resolvedProperties ? symbolsToArray(type.resolvedProperties) : emptyArray;
	        }
	        function getPropertiesOfType(type) {
	            type = getApparentType(type);
	            return type.flags & 49152 ? getPropertiesOfUnionOrIntersectionType(type) : getPropertiesOfObjectType(type);
	        }
	        function getApparentType(type) {
	            if (type.flags & 512) {
	                do {
	                    type = getConstraintOfTypeParameter(type);
	                } while (type && type.flags & 512);
	                if (!type) {
	                    type = emptyObjectType;
	                }
	            }
	            if (type.flags & 258) {
	                type = globalStringType;
	            }
	            else if (type.flags & 132) {
	                type = globalNumberType;
	            }
	            else if (type.flags & 8) {
	                type = globalBooleanType;
	            }
	            else if (type.flags & 16777216) {
	                type = globalESSymbolType;
	            }
	            return type;
	        }
	        function createUnionOrIntersectionProperty(containingType, name) {
	            var types = containingType.types;
	            var props;
	            for (var _i = 0; _i < types.length; _i++) {
	                var current = types[_i];
	                var type = getApparentType(current);
	                if (type !== unknownType) {
	                    var prop = getPropertyOfType(type, name);
	                    if (prop && !(getDeclarationFlagsFromSymbol(prop) & (32 | 64))) {
	                        if (!props) {
	                            props = [prop];
	                        }
	                        else if (!ts.contains(props, prop)) {
	                            props.push(prop);
	                        }
	                    }
	                    else if (containingType.flags & 16384) {
	                        return undefined;
	                    }
	                }
	            }
	            if (!props) {
	                return undefined;
	            }
	            if (props.length === 1) {
	                return props[0];
	            }
	            var propTypes = [];
	            var declarations = [];
	            for (var _a = 0; _a < props.length; _a++) {
	                var prop = props[_a];
	                if (prop.declarations) {
	                    ts.addRange(declarations, prop.declarations);
	                }
	                propTypes.push(getTypeOfSymbol(prop));
	            }
	            var result = createSymbol(4 | 67108864 | 268435456, name);
	            result.containingType = containingType;
	            result.declarations = declarations;
	            result.type = containingType.flags & 16384 ? getUnionType(propTypes) : getIntersectionType(propTypes);
	            return result;
	        }
	        function getPropertyOfUnionOrIntersectionType(type, name) {
	            var properties = type.resolvedProperties || (type.resolvedProperties = {});
	            if (ts.hasProperty(properties, name)) {
	                return properties[name];
	            }
	            var property = createUnionOrIntersectionProperty(type, name);
	            if (property) {
	                properties[name] = property;
	            }
	            return property;
	        }
	        function getPropertyOfType(type, name) {
	            type = getApparentType(type);
	            if (type.flags & 80896) {
	                var resolved = resolveStructuredTypeMembers(type);
	                if (ts.hasProperty(resolved.members, name)) {
	                    var symbol = resolved.members[name];
	                    if (symbolIsValue(symbol)) {
	                        return symbol;
	                    }
	                }
	                if (resolved === anyFunctionType || resolved.callSignatures.length || resolved.constructSignatures.length) {
	                    var symbol = getPropertyOfObjectType(globalFunctionType, name);
	                    if (symbol) {
	                        return symbol;
	                    }
	                }
	                return getPropertyOfObjectType(globalObjectType, name);
	            }
	            if (type.flags & 49152) {
	                return getPropertyOfUnionOrIntersectionType(type, name);
	            }
	            return undefined;
	        }
	        function getSignaturesOfStructuredType(type, kind) {
	            if (type.flags & 130048) {
	                var resolved = resolveStructuredTypeMembers(type);
	                return kind === 0 ? resolved.callSignatures : resolved.constructSignatures;
	            }
	            return emptyArray;
	        }
	        function getSignaturesOfType(type, kind) {
	            return getSignaturesOfStructuredType(getApparentType(type), kind);
	        }
	        function typeHasConstructSignatures(type) {
	            var apparentType = getApparentType(type);
	            if (apparentType.flags & (80896 | 16384)) {
	                var resolved = resolveStructuredTypeMembers(type);
	                return resolved.constructSignatures.length > 0;
	            }
	            return false;
	        }
	        function typeHasCallOrConstructSignatures(type) {
	            var apparentType = getApparentType(type);
	            if (apparentType.flags & 130048) {
	                var resolved = resolveStructuredTypeMembers(type);
	                return resolved.callSignatures.length > 0 || resolved.constructSignatures.length > 0;
	            }
	            return false;
	        }
	        function getIndexTypeOfStructuredType(type, kind) {
	            if (type.flags & 130048) {
	                var resolved = resolveStructuredTypeMembers(type);
	                return kind === 0 ? resolved.stringIndexType : resolved.numberIndexType;
	            }
	        }
	        function getIndexTypeOfType(type, kind) {
	            return getIndexTypeOfStructuredType(getApparentType(type), kind);
	        }
	        function getTypeParametersFromDeclaration(typeParameterDeclarations) {
	            var result = [];
	            ts.forEach(typeParameterDeclarations, function (node) {
	                var tp = getDeclaredTypeOfTypeParameter(node.symbol);
	                if (!ts.contains(result, tp)) {
	                    result.push(tp);
	                }
	            });
	            return result;
	        }
	        function symbolsToArray(symbols) {
	            var result = [];
	            for (var id in symbols) {
	                if (!isReservedMemberName(id)) {
	                    result.push(symbols[id]);
	                }
	            }
	            return result;
	        }
	        function isOptionalParameter(node) {
	            if (ts.hasQuestionToken(node)) {
	                return true;
	            }
	            if (node.initializer) {
	                var signatureDeclaration = node.parent;
	                var signature = getSignatureFromDeclaration(signatureDeclaration);
	                var parameterIndex = signatureDeclaration.parameters.indexOf(node);
	                ts.Debug.assert(parameterIndex >= 0);
	                return parameterIndex >= signature.minArgumentCount;
	            }
	            return false;
	        }
	        function getSignatureFromDeclaration(declaration) {
	            var links = getNodeLinks(declaration);
	            if (!links.resolvedSignature) {
	                var classType = declaration.kind === 142 ? getDeclaredTypeOfClassOrInterface(declaration.parent.symbol) : undefined;
	                var typeParameters = classType ? classType.localTypeParameters :
	                    declaration.typeParameters ? getTypeParametersFromDeclaration(declaration.typeParameters) : undefined;
	                var parameters = [];
	                var hasStringLiterals = false;
	                var minArgumentCount = -1;
	                for (var i = 0, n = declaration.parameters.length; i < n; i++) {
	                    var param = declaration.parameters[i];
	                    parameters.push(param.symbol);
	                    if (param.type && param.type.kind === 9) {
	                        hasStringLiterals = true;
	                    }
	                    if (param.initializer || param.questionToken || param.dotDotDotToken) {
	                        if (minArgumentCount < 0) {
	                            minArgumentCount = i;
	                        }
	                    }
	                    else {
	                        minArgumentCount = -1;
	                    }
	                }
	                if (minArgumentCount < 0) {
	                    minArgumentCount = declaration.parameters.length;
	                }
	                var returnType;
	                var typePredicate;
	                if (classType) {
	                    returnType = classType;
	                }
	                else if (declaration.type) {
	                    returnType = getTypeFromTypeNode(declaration.type);
	                    if (declaration.type.kind === 148) {
	                        var typePredicateNode = declaration.type;
	                        typePredicate = {
	                            parameterName: typePredicateNode.parameterName ? typePredicateNode.parameterName.text : undefined,
	                            parameterIndex: typePredicateNode.parameterName ? getTypePredicateParameterIndex(declaration.parameters, typePredicateNode.parameterName) : undefined,
	                            type: getTypeFromTypeNode(typePredicateNode.type)
	                        };
	                    }
	                }
	                else {
	                    if (declaration.kind === 143 && !ts.hasDynamicName(declaration)) {
	                        var setter = ts.getDeclarationOfKind(declaration.symbol, 144);
	                        returnType = getAnnotatedAccessorType(setter);
	                    }
	                    if (!returnType && ts.nodeIsMissing(declaration.body)) {
	                        returnType = anyType;
	                    }
	                }
	                links.resolvedSignature = createSignature(declaration, typeParameters, parameters, returnType, typePredicate, minArgumentCount, ts.hasRestParameter(declaration), hasStringLiterals);
	            }
	            return links.resolvedSignature;
	        }
	        function getSignaturesOfSymbol(symbol) {
	            if (!symbol)
	                return emptyArray;
	            var result = [];
	            for (var i = 0, len = symbol.declarations.length; i < len; i++) {
	                var node = symbol.declarations[i];
	                switch (node.kind) {
	                    case 150:
	                    case 151:
	                    case 211:
	                    case 141:
	                    case 140:
	                    case 142:
	                    case 145:
	                    case 146:
	                    case 147:
	                    case 143:
	                    case 144:
	                    case 171:
	                    case 172:
	                        if (i > 0 && node.body) {
	                            var previous = symbol.declarations[i - 1];
	                            if (node.parent === previous.parent && node.kind === previous.kind && node.pos === previous.end) {
	                                break;
	                            }
	                        }
	                        result.push(getSignatureFromDeclaration(node));
	                }
	            }
	            return result;
	        }
	        function getReturnTypeOfSignature(signature) {
	            if (!signature.resolvedReturnType) {
	                if (!pushTypeResolution(signature, 3)) {
	                    return unknownType;
	                }
	                var type;
	                if (signature.target) {
	                    type = instantiateType(getReturnTypeOfSignature(signature.target), signature.mapper);
	                }
	                else if (signature.unionSignatures) {
	                    type = getUnionType(ts.map(signature.unionSignatures, getReturnTypeOfSignature));
	                }
	                else {
	                    type = getReturnTypeFromBody(signature.declaration);
	                }
	                if (!popTypeResolution()) {
	                    type = anyType;
	                    if (compilerOptions.noImplicitAny) {
	                        var declaration = signature.declaration;
	                        if (declaration.name) {
	                            error(declaration.name, ts.Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, ts.declarationNameToString(declaration.name));
	                        }
	                        else {
	                            error(declaration, ts.Diagnostics.Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions);
	                        }
	                    }
	                }
	                signature.resolvedReturnType = type;
	            }
	            return signature.resolvedReturnType;
	        }
	        function getRestTypeOfSignature(signature) {
	            if (signature.hasRestParameter) {
	                var type = getTypeOfSymbol(ts.lastOrUndefined(signature.parameters));
	                if (type.flags & 4096 && type.target === globalArrayType) {
	                    return type.typeArguments[0];
	                }
	            }
	            return anyType;
	        }
	        function getSignatureInstantiation(signature, typeArguments) {
	            return instantiateSignature(signature, createTypeMapper(signature.typeParameters, typeArguments), true);
	        }
	        function getErasedSignature(signature) {
	            if (!signature.typeParameters)
	                return signature;
	            if (!signature.erasedSignatureCache) {
	                if (signature.target) {
	                    signature.erasedSignatureCache = instantiateSignature(getErasedSignature(signature.target), signature.mapper);
	                }
	                else {
	                    signature.erasedSignatureCache = instantiateSignature(signature, createTypeEraser(signature.typeParameters), true);
	                }
	            }
	            return signature.erasedSignatureCache;
	        }
	        function getOrCreateTypeFromSignature(signature) {
	            if (!signature.isolatedSignatureType) {
	                var isConstructor = signature.declaration.kind === 142 || signature.declaration.kind === 146;
	                var type = createObjectType(65536 | 262144);
	                type.members = emptySymbols;
	                type.properties = emptyArray;
	                type.callSignatures = !isConstructor ? [signature] : emptyArray;
	                type.constructSignatures = isConstructor ? [signature] : emptyArray;
	                signature.isolatedSignatureType = type;
	            }
	            return signature.isolatedSignatureType;
	        }
	        function getIndexSymbol(symbol) {
	            return symbol.members["__index"];
	        }
	        function getIndexDeclarationOfSymbol(symbol, kind) {
	            var syntaxKind = kind === 1 ? 126 : 128;
	            var indexSymbol = getIndexSymbol(symbol);
	            if (indexSymbol) {
	                for (var _i = 0, _a = indexSymbol.declarations; _i < _a.length; _i++) {
	                    var decl = _a[_i];
	                    var node = decl;
	                    if (node.parameters.length === 1) {
	                        var parameter = node.parameters[0];
	                        if (parameter && parameter.type && parameter.type.kind === syntaxKind) {
	                            return node;
	                        }
	                    }
	                }
	            }
	            return undefined;
	        }
	        function getIndexTypeOfSymbol(symbol, kind) {
	            var declaration = getIndexDeclarationOfSymbol(symbol, kind);
	            return declaration
	                ? declaration.type ? getTypeFromTypeNode(declaration.type) : anyType
	                : undefined;
	        }
	        function getConstraintOfTypeParameter(type) {
	            if (!type.constraint) {
	                if (type.target) {
	                    var targetConstraint = getConstraintOfTypeParameter(type.target);
	                    type.constraint = targetConstraint ? instantiateType(targetConstraint, type.mapper) : noConstraintType;
	                }
	                else {
	                    type.constraint = getTypeFromTypeNode(ts.getDeclarationOfKind(type.symbol, 135).constraint);
	                }
	            }
	            return type.constraint === noConstraintType ? undefined : type.constraint;
	        }
	        function getParentSymbolOfTypeParameter(typeParameter) {
	            return getSymbolOfNode(ts.getDeclarationOfKind(typeParameter.symbol, 135).parent);
	        }
	        function getTypeListId(types) {
	            switch (types.length) {
	                case 1:
	                    return "" + types[0].id;
	                case 2:
	                    return types[0].id + "," + types[1].id;
	                default:
	                    var result = "";
	                    for (var i = 0; i < types.length; i++) {
	                        if (i > 0) {
	                            result += ",";
	                        }
	                        result += types[i].id;
	                    }
	                    return result;
	            }
	        }
	        function getPropagatingFlagsOfTypes(types) {
	            var result = 0;
	            for (var _i = 0; _i < types.length; _i++) {
	                var type = types[_i];
	                result |= type.flags;
	            }
	            return result & 14680064;
	        }
	        function createTypeReference(target, typeArguments) {
	            var id = getTypeListId(typeArguments);
	            var type = target.instantiations[id];
	            if (!type) {
	                var flags = 4096 | getPropagatingFlagsOfTypes(typeArguments);
	                type = target.instantiations[id] = createObjectType(flags, target.symbol);
	                type.target = target;
	                type.typeArguments = typeArguments;
	            }
	            return type;
	        }
	        function isTypeParameterReferenceIllegalInConstraint(typeReferenceNode, typeParameterSymbol) {
	            var links = getNodeLinks(typeReferenceNode);
	            if (links.isIllegalTypeReferenceInConstraint !== undefined) {
	                return links.isIllegalTypeReferenceInConstraint;
	            }
	            var currentNode = typeReferenceNode;
	            while (!ts.forEach(typeParameterSymbol.declarations, function (d) { return d.parent === currentNode.parent; })) {
	                currentNode = currentNode.parent;
	            }
	            links.isIllegalTypeReferenceInConstraint = currentNode.kind === 135;
	            return links.isIllegalTypeReferenceInConstraint;
	        }
	        function checkTypeParameterHasIllegalReferencesInConstraint(typeParameter) {
	            var typeParameterSymbol;
	            function check(n) {
	                if (n.kind === 149 && n.typeName.kind === 67) {
	                    var links = getNodeLinks(n);
	                    if (links.isIllegalTypeReferenceInConstraint === undefined) {
	                        var symbol = resolveName(typeParameter, n.typeName.text, 793056, undefined, undefined);
	                        if (symbol && (symbol.flags & 262144)) {
	                            links.isIllegalTypeReferenceInConstraint = ts.forEach(symbol.declarations, function (d) { return d.parent === typeParameter.parent; });
	                        }
	                    }
	                    if (links.isIllegalTypeReferenceInConstraint) {
	                        error(typeParameter, ts.Diagnostics.Constraint_of_a_type_parameter_cannot_reference_any_type_parameter_from_the_same_type_parameter_list);
	                    }
	                }
	                ts.forEachChild(n, check);
	            }
	            if (typeParameter.constraint) {
	                typeParameterSymbol = getSymbolOfNode(typeParameter);
	                check(typeParameter.constraint);
	            }
	        }
	        function getTypeFromClassOrInterfaceReference(node, symbol) {
	            var type = getDeclaredTypeOfSymbol(symbol);
	            var typeParameters = type.localTypeParameters;
	            if (typeParameters) {
	                if (!node.typeArguments || node.typeArguments.length !== typeParameters.length) {
	                    error(node, ts.Diagnostics.Generic_type_0_requires_1_type_argument_s, typeToString(type, undefined, 1), typeParameters.length);
	                    return unknownType;
	                }
	                return createTypeReference(type, ts.concatenate(type.outerTypeParameters, ts.map(node.typeArguments, getTypeFromTypeNode)));
	            }
	            if (node.typeArguments) {
	                error(node, ts.Diagnostics.Type_0_is_not_generic, typeToString(type));
	                return unknownType;
	            }
	            return type;
	        }
	        function getTypeFromTypeAliasReference(node, symbol) {
	            var type = getDeclaredTypeOfSymbol(symbol);
	            var links = getSymbolLinks(symbol);
	            var typeParameters = links.typeParameters;
	            if (typeParameters) {
	                if (!node.typeArguments || node.typeArguments.length !== typeParameters.length) {
	                    error(node, ts.Diagnostics.Generic_type_0_requires_1_type_argument_s, symbolToString(symbol), typeParameters.length);
	                    return unknownType;
	                }
	                var typeArguments = ts.map(node.typeArguments, getTypeFromTypeNode);
	                var id = getTypeListId(typeArguments);
	                return links.instantiations[id] || (links.instantiations[id] = instantiateType(type, createTypeMapper(typeParameters, typeArguments)));
	            }
	            if (node.typeArguments) {
	                error(node, ts.Diagnostics.Type_0_is_not_generic, symbolToString(symbol));
	                return unknownType;
	            }
	            return type;
	        }
	        function getTypeFromNonGenericTypeReference(node, symbol) {
	            if (symbol.flags & 262144 && isTypeParameterReferenceIllegalInConstraint(node, symbol)) {
	                return unknownType;
	            }
	            if (node.typeArguments) {
	                error(node, ts.Diagnostics.Type_0_is_not_generic, symbolToString(symbol));
	                return unknownType;
	            }
	            return getDeclaredTypeOfSymbol(symbol);
	        }
	        function getTypeFromTypeReference(node) {
	            var links = getNodeLinks(node);
	            if (!links.resolvedType) {
	                var typeNameOrExpression = node.kind === 149 ? node.typeName :
	                    ts.isSupportedExpressionWithTypeArguments(node) ? node.expression :
	                        undefined;
	                var symbol = typeNameOrExpression && resolveEntityName(typeNameOrExpression, 793056) || unknownSymbol;
	                var type = symbol === unknownSymbol ? unknownType :
	                    symbol.flags & (32 | 64) ? getTypeFromClassOrInterfaceReference(node, symbol) :
	                        symbol.flags & 524288 ? getTypeFromTypeAliasReference(node, symbol) :
	                            getTypeFromNonGenericTypeReference(node, symbol);
	                links.resolvedSymbol = symbol;
	                links.resolvedType = type;
	            }
	            return links.resolvedType;
	        }
	        function getTypeFromTypeQueryNode(node) {
	            var links = getNodeLinks(node);
	            if (!links.resolvedType) {
	                links.resolvedType = getWidenedType(checkExpression(node.exprName));
	            }
	            return links.resolvedType;
	        }
	        function getTypeOfGlobalSymbol(symbol, arity) {
	            function getTypeDeclaration(symbol) {
	                var declarations = symbol.declarations;
	                for (var _i = 0; _i < declarations.length; _i++) {
	                    var declaration = declarations[_i];
	                    switch (declaration.kind) {
	                        case 212:
	                        case 213:
	                        case 215:
	                            return declaration;
	                    }
	                }
	            }
	            if (!symbol) {
	                return arity ? emptyGenericType : emptyObjectType;
	            }
	            var type = getDeclaredTypeOfSymbol(symbol);
	            if (!(type.flags & 80896)) {
	                error(getTypeDeclaration(symbol), ts.Diagnostics.Global_type_0_must_be_a_class_or_interface_type, symbol.name);
	                return arity ? emptyGenericType : emptyObjectType;
	            }
	            if ((type.typeParameters ? type.typeParameters.length : 0) !== arity) {
	                error(getTypeDeclaration(symbol), ts.Diagnostics.Global_type_0_must_have_1_type_parameter_s, symbol.name, arity);
	                return arity ? emptyGenericType : emptyObjectType;
	            }
	            return type;
	        }
	        function getGlobalValueSymbol(name) {
	            return getGlobalSymbol(name, 107455, ts.Diagnostics.Cannot_find_global_value_0);
	        }
	        function getGlobalTypeSymbol(name) {
	            return getGlobalSymbol(name, 793056, ts.Diagnostics.Cannot_find_global_type_0);
	        }
	        function getGlobalSymbol(name, meaning, diagnostic) {
	            return resolveName(undefined, name, meaning, diagnostic, name);
	        }
	        function getGlobalType(name, arity) {
	            if (arity === void 0) { arity = 0; }
	            return getTypeOfGlobalSymbol(getGlobalTypeSymbol(name), arity);
	        }
	        function tryGetGlobalType(name, arity) {
	            if (arity === void 0) { arity = 0; }
	            return getTypeOfGlobalSymbol(getGlobalSymbol(name, 793056, undefined), arity);
	        }
	        function getExportedTypeFromNamespace(namespace, name) {
	            var namespaceSymbol = getGlobalSymbol(namespace, 1536, undefined);
	            var typeSymbol = namespaceSymbol && getSymbol(namespaceSymbol.exports, name, 793056);
	            return typeSymbol && getDeclaredTypeOfSymbol(typeSymbol);
	        }
	        function getGlobalESSymbolConstructorSymbol() {
	            return globalESSymbolConstructorSymbol || (globalESSymbolConstructorSymbol = getGlobalValueSymbol("Symbol"));
	        }
	        function createTypedPropertyDescriptorType(propertyType) {
	            var globalTypedPropertyDescriptorType = getGlobalTypedPropertyDescriptorType();
	            return globalTypedPropertyDescriptorType !== emptyGenericType
	                ? createTypeReference(globalTypedPropertyDescriptorType, [propertyType])
	                : emptyObjectType;
	        }
	        function createTypeFromGenericGlobalType(genericGlobalType, elementType) {
	            return genericGlobalType !== emptyGenericType ? createTypeReference(genericGlobalType, [elementType]) : emptyObjectType;
	        }
	        function createIterableType(elementType) {
	            return createTypeFromGenericGlobalType(globalIterableType, elementType);
	        }
	        function createIterableIteratorType(elementType) {
	            return createTypeFromGenericGlobalType(globalIterableIteratorType, elementType);
	        }
	        function createArrayType(elementType) {
	            return createTypeFromGenericGlobalType(globalArrayType, elementType);
	        }
	        function getTypeFromArrayTypeNode(node) {
	            var links = getNodeLinks(node);
	            if (!links.resolvedType) {
	                links.resolvedType = createArrayType(getTypeFromTypeNode(node.elementType));
	            }
	            return links.resolvedType;
	        }
	        function createTupleType(elementTypes) {
	            var id = getTypeListId(elementTypes);
	            var type = tupleTypes[id];
	            if (!type) {
	                type = tupleTypes[id] = createObjectType(8192 | getPropagatingFlagsOfTypes(elementTypes));
	                type.elementTypes = elementTypes;
	            }
	            return type;
	        }
	        function getTypeFromTupleTypeNode(node) {
	            var links = getNodeLinks(node);
	            if (!links.resolvedType) {
	                links.resolvedType = createTupleType(ts.map(node.elementTypes, getTypeFromTypeNode));
	            }
	            return links.resolvedType;
	        }
	        function addTypeToSet(typeSet, type, typeSetKind) {
	            if (type.flags & typeSetKind) {
	                addTypesToSet(typeSet, type.types, typeSetKind);
	            }
	            else if (!ts.contains(typeSet, type)) {
	                typeSet.push(type);
	            }
	        }
	        function addTypesToSet(typeSet, types, typeSetKind) {
	            for (var _i = 0; _i < types.length; _i++) {
	                var type = types[_i];
	                addTypeToSet(typeSet, type, typeSetKind);
	            }
	        }
	        function isSubtypeOfAny(candidate, types) {
	            for (var i = 0, len = types.length; i < len; i++) {
	                if (candidate !== types[i] && isTypeSubtypeOf(candidate, types[i])) {
	                    return true;
	                }
	            }
	            return false;
	        }
	        function removeSubtypes(types) {
	            var i = types.length;
	            while (i > 0) {
	                i--;
	                if (isSubtypeOfAny(types[i], types)) {
	                    types.splice(i, 1);
	                }
	            }
	        }
	        function containsTypeAny(types) {
	            for (var _i = 0; _i < types.length; _i++) {
	                var type = types[_i];
	                if (isTypeAny(type)) {
	                    return true;
	                }
	            }
	            return false;
	        }
	        function removeAllButLast(types, typeToRemove) {
	            var i = types.length;
	            while (i > 0 && types.length > 1) {
	                i--;
	                if (types[i] === typeToRemove) {
	                    types.splice(i, 1);
	                }
	            }
	        }
	        function getUnionType(types, noSubtypeReduction) {
	            if (types.length === 0) {
	                return emptyObjectType;
	            }
	            var typeSet = [];
	            addTypesToSet(typeSet, types, 16384);
	            if (containsTypeAny(typeSet)) {
	                return anyType;
	            }
	            if (noSubtypeReduction) {
	                removeAllButLast(typeSet, undefinedType);
	                removeAllButLast(typeSet, nullType);
	            }
	            else {
	                removeSubtypes(typeSet);
	            }
	            if (typeSet.length === 1) {
	                return typeSet[0];
	            }
	            var id = getTypeListId(typeSet);
	            var type = unionTypes[id];
	            if (!type) {
	                type = unionTypes[id] = createObjectType(16384 | getPropagatingFlagsOfTypes(typeSet));
	                type.types = typeSet;
	            }
	            return type;
	        }
	        function getTypeFromUnionTypeNode(node) {
	            var links = getNodeLinks(node);
	            if (!links.resolvedType) {
	                links.resolvedType = getUnionType(ts.map(node.types, getTypeFromTypeNode), true);
	            }
	            return links.resolvedType;
	        }
	        function getIntersectionType(types) {
	            if (types.length === 0) {
	                return emptyObjectType;
	            }
	            var typeSet = [];
	            addTypesToSet(typeSet, types, 32768);
	            if (containsTypeAny(typeSet)) {
	                return anyType;
	            }
	            if (typeSet.length === 1) {
	                return typeSet[0];
	            }
	            var id = getTypeListId(typeSet);
	            var type = intersectionTypes[id];
	            if (!type) {
	                type = intersectionTypes[id] = createObjectType(32768 | getPropagatingFlagsOfTypes(typeSet));
	                type.types = typeSet;
	            }
	            return type;
	        }
	        function getTypeFromIntersectionTypeNode(node) {
	            var links = getNodeLinks(node);
	            if (!links.resolvedType) {
	                links.resolvedType = getIntersectionType(ts.map(node.types, getTypeFromTypeNode));
	            }
	            return links.resolvedType;
	        }
	        function getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node) {
	            var links = getNodeLinks(node);
	            if (!links.resolvedType) {
	                links.resolvedType = createObjectType(65536, node.symbol);
	            }
	            return links.resolvedType;
	        }
	        function getStringLiteralType(node) {
	            if (ts.hasProperty(stringLiteralTypes, node.text)) {
	                return stringLiteralTypes[node.text];
	            }
	            var type = stringLiteralTypes[node.text] = createType(256);
	            type.text = ts.getTextOfNode(node);
	            return type;
	        }
	        function getTypeFromStringLiteral(node) {
	            var links = getNodeLinks(node);
	            if (!links.resolvedType) {
	                links.resolvedType = getStringLiteralType(node);
	            }
	            return links.resolvedType;
	        }
	        function getTypeFromTypeNode(node) {
	            switch (node.kind) {
	                case 115:
	                    return anyType;
	                case 128:
	                    return stringType;
	                case 126:
	                    return numberType;
	                case 118:
	                    return booleanType;
	                case 129:
	                    return esSymbolType;
	                case 101:
	                    return voidType;
	                case 9:
	                    return getTypeFromStringLiteral(node);
	                case 149:
	                    return getTypeFromTypeReference(node);
	                case 148:
	                    return booleanType;
	                case 186:
	                    return getTypeFromTypeReference(node);
	                case 152:
	                    return getTypeFromTypeQueryNode(node);
	                case 154:
	                    return getTypeFromArrayTypeNode(node);
	                case 155:
	                    return getTypeFromTupleTypeNode(node);
	                case 156:
	                    return getTypeFromUnionTypeNode(node);
	                case 157:
	                    return getTypeFromIntersectionTypeNode(node);
	                case 158:
	                    return getTypeFromTypeNode(node.type);
	                case 150:
	                case 151:
	                case 153:
	                    return getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node);
	                case 67:
	                case 133:
	                    var symbol = getSymbolAtLocation(node);
	                    return symbol && getDeclaredTypeOfSymbol(symbol);
	                default:
	                    return unknownType;
	            }
	        }
	        function instantiateList(items, mapper, instantiator) {
	            if (items && items.length) {
	                var result = [];
	                for (var _i = 0; _i < items.length; _i++) {
	                    var v = items[_i];
	                    result.push(instantiator(v, mapper));
	                }
	                return result;
	            }
	            return items;
	        }
	        function createUnaryTypeMapper(source, target) {
	            return function (t) { return t === source ? target : t; };
	        }
	        function createBinaryTypeMapper(source1, target1, source2, target2) {
	            return function (t) { return t === source1 ? target1 : t === source2 ? target2 : t; };
	        }
	        function createTypeMapper(sources, targets) {
	            switch (sources.length) {
	                case 1: return createUnaryTypeMapper(sources[0], targets[0]);
	                case 2: return createBinaryTypeMapper(sources[0], targets[0], sources[1], targets[1]);
	            }
	            return function (t) {
	                for (var i = 0; i < sources.length; i++) {
	                    if (t === sources[i]) {
	                        return targets[i];
	                    }
	                }
	                return t;
	            };
	        }
	        function createUnaryTypeEraser(source) {
	            return function (t) { return t === source ? anyType : t; };
	        }
	        function createBinaryTypeEraser(source1, source2) {
	            return function (t) { return t === source1 || t === source2 ? anyType : t; };
	        }
	        function createTypeEraser(sources) {
	            switch (sources.length) {
	                case 1: return createUnaryTypeEraser(sources[0]);
	                case 2: return createBinaryTypeEraser(sources[0], sources[1]);
	            }
	            return function (t) {
	                for (var _i = 0; _i < sources.length; _i++) {
	                    var source = sources[_i];
	                    if (t === source) {
	                        return anyType;
	                    }
	                }
	                return t;
	            };
	        }
	        function createInferenceMapper(context) {
	            var mapper = function (t) {
	                for (var i = 0; i < context.typeParameters.length; i++) {
	                    if (t === context.typeParameters[i]) {
	                        context.inferences[i].isFixed = true;
	                        return getInferredType(context, i);
	                    }
	                }
	                return t;
	            };
	            mapper.context = context;
	            return mapper;
	        }
	        function identityMapper(type) {
	            return type;
	        }
	        function combineTypeMappers(mapper1, mapper2) {
	            return function (t) { return instantiateType(mapper1(t), mapper2); };
	        }
	        function instantiateTypeParameter(typeParameter, mapper) {
	            var result = createType(512);
	            result.symbol = typeParameter.symbol;
	            if (typeParameter.constraint) {
	                result.constraint = instantiateType(typeParameter.constraint, mapper);
	            }
	            else {
	                result.target = typeParameter;
	                result.mapper = mapper;
	            }
	            return result;
	        }
	        function instantiateSignature(signature, mapper, eraseTypeParameters) {
	            var freshTypeParameters;
	            var freshTypePredicate;
	            if (signature.typeParameters && !eraseTypeParameters) {
	                freshTypeParameters = instantiateList(signature.typeParameters, mapper, instantiateTypeParameter);
	                mapper = combineTypeMappers(createTypeMapper(signature.typeParameters, freshTypeParameters), mapper);
	            }
	            if (signature.typePredicate) {
	                freshTypePredicate = {
	                    parameterName: signature.typePredicate.parameterName,
	                    parameterIndex: signature.typePredicate.parameterIndex,
	                    type: instantiateType(signature.typePredicate.type, mapper)
	                };
	            }
	            var result = createSignature(signature.declaration, freshTypeParameters, instantiateList(signature.parameters, mapper, instantiateSymbol), signature.resolvedReturnType ? instantiateType(signature.resolvedReturnType, mapper) : undefined, freshTypePredicate, signature.minArgumentCount, signature.hasRestParameter, signature.hasStringLiterals);
	            result.target = signature;
	            result.mapper = mapper;
	            return result;
	        }
	        function instantiateSymbol(symbol, mapper) {
	            if (symbol.flags & 16777216) {
	                var links = getSymbolLinks(symbol);
	                symbol = links.target;
	                mapper = combineTypeMappers(links.mapper, mapper);
	            }
	            var result = createSymbol(16777216 | 67108864 | symbol.flags, symbol.name);
	            result.declarations = symbol.declarations;
	            result.parent = symbol.parent;
	            result.target = symbol;
	            result.mapper = mapper;
	            if (symbol.valueDeclaration) {
	                result.valueDeclaration = symbol.valueDeclaration;
	            }
	            return result;
	        }
	        function instantiateAnonymousType(type, mapper) {
	            if (mapper.instantiations) {
	                var cachedType = mapper.instantiations[type.id];
	                if (cachedType) {
	                    return cachedType;
	                }
	            }
	            else {
	                mapper.instantiations = [];
	            }
	            var result = createObjectType(65536 | 131072, type.symbol);
	            result.properties = instantiateList(getPropertiesOfObjectType(type), mapper, instantiateSymbol);
	            result.members = createSymbolTable(result.properties);
	            result.callSignatures = instantiateList(getSignaturesOfType(type, 0), mapper, instantiateSignature);
	            result.constructSignatures = instantiateList(getSignaturesOfType(type, 1), mapper, instantiateSignature);
	            var stringIndexType = getIndexTypeOfType(type, 0);
	            var numberIndexType = getIndexTypeOfType(type, 1);
	            if (stringIndexType)
	                result.stringIndexType = instantiateType(stringIndexType, mapper);
	            if (numberIndexType)
	                result.numberIndexType = instantiateType(numberIndexType, mapper);
	            mapper.instantiations[type.id] = result;
	            return result;
	        }
	        function instantiateType(type, mapper) {
	            if (mapper !== identityMapper) {
	                if (type.flags & 512) {
	                    return mapper(type);
	                }
	                if (type.flags & 65536) {
	                    return type.symbol && type.symbol.flags & (16 | 8192 | 32 | 2048 | 4096) ?
	                        instantiateAnonymousType(type, mapper) : type;
	                }
	                if (type.flags & 4096) {
	                    return createTypeReference(type.target, instantiateList(type.typeArguments, mapper, instantiateType));
	                }
	                if (type.flags & 8192) {
	                    return createTupleType(instantiateList(type.elementTypes, mapper, instantiateType));
	                }
	                if (type.flags & 16384) {
	                    return getUnionType(instantiateList(type.types, mapper, instantiateType), true);
	                }
	                if (type.flags & 32768) {
	                    return getIntersectionType(instantiateList(type.types, mapper, instantiateType));
	                }
	            }
	            return type;
	        }
	        function isContextSensitive(node) {
	            ts.Debug.assert(node.kind !== 141 || ts.isObjectLiteralMethod(node));
	            switch (node.kind) {
	                case 171:
	                case 172:
	                    return isContextSensitiveFunctionLikeDeclaration(node);
	                case 163:
	                    return ts.forEach(node.properties, isContextSensitive);
	                case 162:
	                    return ts.forEach(node.elements, isContextSensitive);
	                case 180:
	                    return isContextSensitive(node.whenTrue) ||
	                        isContextSensitive(node.whenFalse);
	                case 179:
	                    return node.operatorToken.kind === 51 &&
	                        (isContextSensitive(node.left) || isContextSensitive(node.right));
	                case 243:
	                    return isContextSensitive(node.initializer);
	                case 141:
	                case 140:
	                    return isContextSensitiveFunctionLikeDeclaration(node);
	                case 170:
	                    return isContextSensitive(node.expression);
	            }
	            return false;
	        }
	        function isContextSensitiveFunctionLikeDeclaration(node) {
	            return !node.typeParameters && node.parameters.length && !ts.forEach(node.parameters, function (p) { return p.type; });
	        }
	        function getTypeWithoutSignatures(type) {
	            if (type.flags & 80896) {
	                var resolved = resolveStructuredTypeMembers(type);
	                if (resolved.constructSignatures.length) {
	                    var result = createObjectType(65536, type.symbol);
	                    result.members = resolved.members;
	                    result.properties = resolved.properties;
	                    result.callSignatures = emptyArray;
	                    result.constructSignatures = emptyArray;
	                    type = result;
	                }
	            }
	            return type;
	        }
	        function isTypeIdenticalTo(source, target) {
	            return checkTypeRelatedTo(source, target, identityRelation, undefined);
	        }
	        function compareTypes(source, target) {
	            return checkTypeRelatedTo(source, target, identityRelation, undefined) ? -1 : 0;
	        }
	        function isTypeSubtypeOf(source, target) {
	            return checkTypeSubtypeOf(source, target, undefined);
	        }
	        function isTypeAssignableTo(source, target) {
	            return checkTypeAssignableTo(source, target, undefined);
	        }
	        function checkTypeSubtypeOf(source, target, errorNode, headMessage, containingMessageChain) {
	            return checkTypeRelatedTo(source, target, subtypeRelation, errorNode, headMessage, containingMessageChain);
	        }
	        function checkTypeAssignableTo(source, target, errorNode, headMessage, containingMessageChain) {
	            return checkTypeRelatedTo(source, target, assignableRelation, errorNode, headMessage, containingMessageChain);
	        }
	        function isSignatureAssignableTo(source, target) {
	            var sourceType = getOrCreateTypeFromSignature(source);
	            var targetType = getOrCreateTypeFromSignature(target);
	            return checkTypeRelatedTo(sourceType, targetType, assignableRelation, undefined);
	        }
	        function checkTypeRelatedTo(source, target, relation, errorNode, headMessage, containingMessageChain) {
	            var errorInfo;
	            var sourceStack;
	            var targetStack;
	            var maybeStack;
	            var expandingFlags;
	            var depth = 0;
	            var overflow = false;
	            var elaborateErrors = false;
	            ts.Debug.assert(relation !== identityRelation || !errorNode, "no error reporting in identity checking");
	            var result = isRelatedTo(source, target, errorNode !== undefined, headMessage);
	            if (overflow) {
	                error(errorNode, ts.Diagnostics.Excessive_stack_depth_comparing_types_0_and_1, typeToString(source), typeToString(target));
	            }
	            else if (errorInfo) {
	                if (errorInfo.next === undefined) {
	                    errorInfo = undefined;
	                    elaborateErrors = true;
	                    isRelatedTo(source, target, errorNode !== undefined, headMessage);
	                }
	                if (containingMessageChain) {
	                    errorInfo = ts.concatenateDiagnosticMessageChains(containingMessageChain, errorInfo);
	                }
	                diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(errorNode, errorInfo));
	            }
	            return result !== 0;
	            function reportError(message, arg0, arg1, arg2) {
	                errorInfo = ts.chainDiagnosticMessages(errorInfo, message, arg0, arg1, arg2);
	            }
	            function reportRelationError(message, source, target) {
	                var sourceType = typeToString(source);
	                var targetType = typeToString(target);
	                if (sourceType === targetType) {
	                    sourceType = typeToString(source, undefined, 128);
	                    targetType = typeToString(target, undefined, 128);
	                }
	                reportError(message || ts.Diagnostics.Type_0_is_not_assignable_to_type_1, sourceType, targetType);
	            }
	            function isRelatedTo(source, target, reportErrors, headMessage) {
	                var result;
	                if (source === target)
	                    return -1;
	                if (relation === identityRelation) {
	                    return isIdenticalTo(source, target);
	                }
	                if (isTypeAny(target))
	                    return -1;
	                if (source === undefinedType)
	                    return -1;
	                if (source === nullType && target !== undefinedType)
	                    return -1;
	                if (source.flags & 128 && target === numberType)
	                    return -1;
	                if (source.flags & 256 && target === stringType)
	                    return -1;
	                if (relation === assignableRelation) {
	                    if (isTypeAny(source))
	                        return -1;
	                    if (source === numberType && target.flags & 128)
	                        return -1;
	                }
	                if (source.flags & 1048576) {
	                    if (hasExcessProperties(source, target, reportErrors)) {
	                        if (reportErrors) {
	                            reportRelationError(headMessage, source, target);
	                        }
	                        return 0;
	                    }
	                    source = getRegularTypeOfObjectLiteral(source);
	                }
	                var saveErrorInfo = errorInfo;
	                if (source.flags & 16384) {
	                    if (result = eachTypeRelatedToType(source, target, reportErrors)) {
	                        return result;
	                    }
	                }
	                else if (target.flags & 32768) {
	                    if (result = typeRelatedToEachType(source, target, reportErrors)) {
	                        return result;
	                    }
	                }
	                else {
	                    if (source.flags & 32768) {
	                        if (result = someTypeRelatedToType(source, target, reportErrors && !(target.flags & 16384))) {
	                            return result;
	                        }
	                    }
	                    if (target.flags & 16384) {
	                        if (result = typeRelatedToSomeType(source, target, reportErrors)) {
	                            return result;
	                        }
	                    }
	                }
	                if (source.flags & 512) {
	                    var constraint = getConstraintOfTypeParameter(source);
	                    if (!constraint || constraint.flags & 1) {
	                        constraint = emptyObjectType;
	                    }
	                    var reportConstraintErrors = reportErrors && constraint !== emptyObjectType;
	                    if (result = isRelatedTo(constraint, target, reportConstraintErrors)) {
	                        errorInfo = saveErrorInfo;
	                        return result;
	                    }
	                }
	                else {
	                    if (source.flags & 4096 && target.flags & 4096 && source.target === target.target) {
	                        if (result = typesRelatedTo(source.typeArguments, target.typeArguments, reportErrors)) {
	                            return result;
	                        }
	                    }
	                    var apparentType = getApparentType(source);
	                    if (apparentType.flags & (80896 | 32768) && target.flags & 80896) {
	                        var reportStructuralErrors = reportErrors && errorInfo === saveErrorInfo;
	                        if (result = objectTypeRelatedTo(apparentType, target, reportStructuralErrors)) {
	                            errorInfo = saveErrorInfo;
	                            return result;
	                        }
	                    }
	                }
	                if (reportErrors) {
	                    reportRelationError(headMessage, source, target);
	                }
	                return 0;
	            }
	            function isIdenticalTo(source, target) {
	                var result;
	                if (source.flags & 80896 && target.flags & 80896) {
	                    if (source.flags & 4096 && target.flags & 4096 && source.target === target.target) {
	                        if (result = typesRelatedTo(source.typeArguments, target.typeArguments, false)) {
	                            return result;
	                        }
	                    }
	                    return objectTypeRelatedTo(source, target, false);
	                }
	                if (source.flags & 512 && target.flags & 512) {
	                    return typeParameterIdenticalTo(source, target);
	                }
	                if (source.flags & 16384 && target.flags & 16384 ||
	                    source.flags & 32768 && target.flags & 32768) {
	                    if (result = eachTypeRelatedToSomeType(source, target)) {
	                        if (result &= eachTypeRelatedToSomeType(target, source)) {
	                            return result;
	                        }
	                    }
	                }
	                return 0;
	            }
	            function isKnownProperty(type, name) {
	                if (type.flags & 80896) {
	                    var resolved = resolveStructuredTypeMembers(type);
	                    if (relation === assignableRelation && (type === globalObjectType || resolved.properties.length === 0) ||
	                        resolved.stringIndexType || resolved.numberIndexType || getPropertyOfType(type, name)) {
	                        return true;
	                    }
	                    return false;
	                }
	                if (type.flags & 49152) {
	                    for (var _i = 0, _a = type.types; _i < _a.length; _i++) {
	                        var t = _a[_i];
	                        if (isKnownProperty(t, name)) {
	                            return true;
	                        }
	                    }
	                    return false;
	                }
	                return true;
	            }
	            function hasExcessProperties(source, target, reportErrors) {
	                for (var _i = 0, _a = getPropertiesOfObjectType(source); _i < _a.length; _i++) {
	                    var prop = _a[_i];
	                    if (!isKnownProperty(target, prop.name)) {
	                        if (reportErrors) {
	                            reportError(ts.Diagnostics.Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1, symbolToString(prop), typeToString(target));
	                        }
	                        return true;
	                    }
	                }
	            }
	            function eachTypeRelatedToSomeType(source, target) {
	                var result = -1;
	                var sourceTypes = source.types;
	                for (var _i = 0; _i < sourceTypes.length; _i++) {
	                    var sourceType = sourceTypes[_i];
	                    var related = typeRelatedToSomeType(sourceType, target, false);
	                    if (!related) {
	                        return 0;
	                    }
	                    result &= related;
	                }
	                return result;
	            }
	            function typeRelatedToSomeType(source, target, reportErrors) {
	                var targetTypes = target.types;
	                for (var i = 0, len = targetTypes.length; i < len; i++) {
	                    var related = isRelatedTo(source, targetTypes[i], reportErrors && i === len - 1);
	                    if (related) {
	                        return related;
	                    }
	                }
	                return 0;
	            }
	            function typeRelatedToEachType(source, target, reportErrors) {
	                var result = -1;
	                var targetTypes = target.types;
	                for (var _i = 0; _i < targetTypes.length; _i++) {
	                    var targetType = targetTypes[_i];
	                    var related = isRelatedTo(source, targetType, reportErrors);
	                    if (!related) {
	                        return 0;
	                    }
	                    result &= related;
	                }
	                return result;
	            }
	            function someTypeRelatedToType(source, target, reportErrors) {
	                var sourceTypes = source.types;
	                for (var i = 0, len = sourceTypes.length; i < len; i++) {
	                    var related = isRelatedTo(sourceTypes[i], target, reportErrors && i === len - 1);
	                    if (related) {
	                        return related;
	                    }
	                }
	                return 0;
	            }
	            function eachTypeRelatedToType(source, target, reportErrors) {
	                var result = -1;
	                var sourceTypes = source.types;
	                for (var _i = 0; _i < sourceTypes.length; _i++) {
	                    var sourceType = sourceTypes[_i];
	                    var related = isRelatedTo(sourceType, target, reportErrors);
	                    if (!related) {
	                        return 0;
	                    }
	                    result &= related;
	                }
	                return result;
	            }
	            function typesRelatedTo(sources, targets, reportErrors) {
	                var result = -1;
	                for (var i = 0, len = sources.length; i < len; i++) {
	                    var related = isRelatedTo(sources[i], targets[i], reportErrors);
	                    if (!related) {
	                        return 0;
	                    }
	                    result &= related;
	                }
	                return result;
	            }
	            function typeParameterIdenticalTo(source, target) {
	                if (source.symbol.name !== target.symbol.name) {
	                    return 0;
	                }
	                if (source.constraint === target.constraint) {
	                    return -1;
	                }
	                if (source.constraint === noConstraintType || target.constraint === noConstraintType) {
	                    return 0;
	                }
	                return isIdenticalTo(source.constraint, target.constraint);
	            }
	            function objectTypeRelatedTo(source, target, reportErrors) {
	                if (overflow) {
	                    return 0;
	                }
	                var id = relation !== identityRelation || source.id < target.id ? source.id + "," + target.id : target.id + "," + source.id;
	                var related = relation[id];
	                if (related !== undefined) {
	                    if (!elaborateErrors || (related === 3)) {
	                        return related === 1 ? -1 : 0;
	                    }
	                }
	                if (depth > 0) {
	                    for (var i = 0; i < depth; i++) {
	                        if (maybeStack[i][id]) {
	                            return 1;
	                        }
	                    }
	                    if (depth === 100) {
	                        overflow = true;
	                        return 0;
	                    }
	                }
	                else {
	                    sourceStack = [];
	                    targetStack = [];
	                    maybeStack = [];
	                    expandingFlags = 0;
	                }
	                sourceStack[depth] = source;
	                targetStack[depth] = target;
	                maybeStack[depth] = {};
	                maybeStack[depth][id] = 1;
	                depth++;
	                var saveExpandingFlags = expandingFlags;
	                if (!(expandingFlags & 1) && isDeeplyNestedGeneric(source, sourceStack, depth))
	                    expandingFlags |= 1;
	                if (!(expandingFlags & 2) && isDeeplyNestedGeneric(target, targetStack, depth))
	                    expandingFlags |= 2;
	                var result;
	                if (expandingFlags === 3) {
	                    result = 1;
	                }
	                else {
	                    result = propertiesRelatedTo(source, target, reportErrors);
	                    if (result) {
	                        result &= signaturesRelatedTo(source, target, 0, reportErrors);
	                        if (result) {
	                            result &= signaturesRelatedTo(source, target, 1, reportErrors);
	                            if (result) {
	                                result &= stringIndexTypesRelatedTo(source, target, reportErrors);
	                                if (result) {
	                                    result &= numberIndexTypesRelatedTo(source, target, reportErrors);
	                                }
	                            }
	                        }
	                    }
	                }
	                expandingFlags = saveExpandingFlags;
	                depth--;
	                if (result) {
	                    var maybeCache = maybeStack[depth];
	                    var destinationCache = (result === -1 || depth === 0) ? relation : maybeStack[depth - 1];
	                    ts.copyMap(maybeCache, destinationCache);
	                }
	                else {
	                    relation[id] = reportErrors ? 3 : 2;
	                }
	                return result;
	            }
	            function propertiesRelatedTo(source, target, reportErrors) {
	                if (relation === identityRelation) {
	                    return propertiesIdenticalTo(source, target);
	                }
	                var result = -1;
	                var properties = getPropertiesOfObjectType(target);
	                var requireOptionalProperties = relation === subtypeRelation && !(source.flags & 524288);
	                for (var _i = 0; _i < properties.length; _i++) {
	                    var targetProp = properties[_i];
	                    var sourceProp = getPropertyOfType(source, targetProp.name);
	                    if (sourceProp !== targetProp) {
	                        if (!sourceProp) {
	                            if (!(targetProp.flags & 536870912) || requireOptionalProperties) {
	                                if (reportErrors) {
	                                    reportError(ts.Diagnostics.Property_0_is_missing_in_type_1, symbolToString(targetProp), typeToString(source));
	                                }
	                                return 0;
	                            }
	                        }
	                        else if (!(targetProp.flags & 134217728)) {
	                            var sourcePropFlags = getDeclarationFlagsFromSymbol(sourceProp);
	                            var targetPropFlags = getDeclarationFlagsFromSymbol(targetProp);
	                            if (sourcePropFlags & 32 || targetPropFlags & 32) {
	                                if (sourceProp.valueDeclaration !== targetProp.valueDeclaration) {
	                                    if (reportErrors) {
	                                        if (sourcePropFlags & 32 && targetPropFlags & 32) {
	                                            reportError(ts.Diagnostics.Types_have_separate_declarations_of_a_private_property_0, symbolToString(targetProp));
	                                        }
	                                        else {
	                                            reportError(ts.Diagnostics.Property_0_is_private_in_type_1_but_not_in_type_2, symbolToString(targetProp), typeToString(sourcePropFlags & 32 ? source : target), typeToString(sourcePropFlags & 32 ? target : source));
	                                        }
	                                    }
	                                    return 0;
	                                }
	                            }
	                            else if (targetPropFlags & 64) {
	                                var sourceDeclaredInClass = sourceProp.parent && sourceProp.parent.flags & 32;
	                                var sourceClass = sourceDeclaredInClass ? getDeclaredTypeOfSymbol(sourceProp.parent) : undefined;
	                                var targetClass = getDeclaredTypeOfSymbol(targetProp.parent);
	                                if (!sourceClass || !hasBaseType(sourceClass, targetClass)) {
	                                    if (reportErrors) {
	                                        reportError(ts.Diagnostics.Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2, symbolToString(targetProp), typeToString(sourceClass || source), typeToString(targetClass));
	                                    }
	                                    return 0;
	                                }
	                            }
	                            else if (sourcePropFlags & 64) {
	                                if (reportErrors) {
	                                    reportError(ts.Diagnostics.Property_0_is_protected_in_type_1_but_public_in_type_2, symbolToString(targetProp), typeToString(source), typeToString(target));
	                                }
	                                return 0;
	                            }
	                            var related = isRelatedTo(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp), reportErrors);
	                            if (!related) {
	                                if (reportErrors) {
	                                    reportError(ts.Diagnostics.Types_of_property_0_are_incompatible, symbolToString(targetProp));
	                                }
	                                return 0;
	                            }
	                            result &= related;
	                            if (sourceProp.flags & 536870912 && !(targetProp.flags & 536870912)) {
	                                if (reportErrors) {
	                                    reportError(ts.Diagnostics.Property_0_is_optional_in_type_1_but_required_in_type_2, symbolToString(targetProp), typeToString(source), typeToString(target));
	                                }
	                                return 0;
	                            }
	                        }
	                    }
	                }
	                return result;
	            }
	            function propertiesIdenticalTo(source, target) {
	                if (!(source.flags & 80896 && target.flags & 80896)) {
	                    return 0;
	                }
	                var sourceProperties = getPropertiesOfObjectType(source);
	                var targetProperties = getPropertiesOfObjectType(target);
	                if (sourceProperties.length !== targetProperties.length) {
	                    return 0;
	                }
	                var result = -1;
	                for (var _i = 0; _i < sourceProperties.length; _i++) {
	                    var sourceProp = sourceProperties[_i];
	                    var targetProp = getPropertyOfObjectType(target, sourceProp.name);
	                    if (!targetProp) {
	                        return 0;
	                    }
	                    var related = compareProperties(sourceProp, targetProp, isRelatedTo);
	                    if (!related) {
	                        return 0;
	                    }
	                    result &= related;
	                }
	                return result;
	            }
	            function signaturesRelatedTo(source, target, kind, reportErrors) {
	                if (relation === identityRelation) {
	                    return signaturesIdenticalTo(source, target, kind);
	                }
	                if (target === anyFunctionType || source === anyFunctionType) {
	                    return -1;
	                }
	                var sourceSignatures = getSignaturesOfType(source, kind);
	                var targetSignatures = getSignaturesOfType(target, kind);
	                var result = -1;
	                var saveErrorInfo = errorInfo;
	                if (kind === 1) {
	                    var sourceSig = sourceSignatures[0];
	                    var targetSig = targetSignatures[0];
	                    result &= abstractSignatureRelatedTo(source, sourceSig, target, targetSig);
	                    if (result !== -1) {
	                        return result;
	                    }
	                }
	                outer: for (var _i = 0; _i < targetSignatures.length; _i++) {
	                    var t = targetSignatures[_i];
	                    if (!t.hasStringLiterals || target.flags & 262144) {
	                        var localErrors = reportErrors;
	                        var checkedAbstractAssignability = false;
	                        for (var _a = 0; _a < sourceSignatures.length; _a++) {
	                            var s = sourceSignatures[_a];
	                            if (!s.hasStringLiterals || source.flags & 262144) {
	                                var related = signatureRelatedTo(s, t, localErrors);
	                                if (related) {
	                                    result &= related;
	                                    errorInfo = saveErrorInfo;
	                                    continue outer;
	                                }
	                                localErrors = false;
	                            }
	                        }
	                        return 0;
	                    }
	                }
	                return result;
	                function abstractSignatureRelatedTo(source, sourceSig, target, targetSig) {
	                    if (sourceSig && targetSig) {
	                        var sourceDecl = source.symbol && ts.getDeclarationOfKind(source.symbol, 212);
	                        var targetDecl = target.symbol && ts.getDeclarationOfKind(target.symbol, 212);
	                        if (!sourceDecl) {
	                            return -1;
	                        }
	                        var sourceErasedSignature = getErasedSignature(sourceSig);
	                        var targetErasedSignature = getErasedSignature(targetSig);
	                        var sourceReturnType = sourceErasedSignature && getReturnTypeOfSignature(sourceErasedSignature);
	                        var targetReturnType = targetErasedSignature && getReturnTypeOfSignature(targetErasedSignature);
	                        var sourceReturnDecl = sourceReturnType && sourceReturnType.symbol && ts.getDeclarationOfKind(sourceReturnType.symbol, 212);
	                        var targetReturnDecl = targetReturnType && targetReturnType.symbol && ts.getDeclarationOfKind(targetReturnType.symbol, 212);
	                        var sourceIsAbstract = sourceReturnDecl && sourceReturnDecl.flags & 256;
	                        var targetIsAbstract = targetReturnDecl && targetReturnDecl.flags & 256;
	                        if (sourceIsAbstract && !(targetIsAbstract && targetDecl)) {
	                            if (reportErrors) {
	                                reportError(ts.Diagnostics.Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type);
	                            }
	                            return 0;
	                        }
	                    }
	                    return -1;
	                }
	            }
	            function signatureRelatedTo(source, target, reportErrors) {
	                if (source === target) {
	                    return -1;
	                }
	                if (!target.hasRestParameter && source.minArgumentCount > target.parameters.length) {
	                    return 0;
	                }
	                var sourceMax = source.parameters.length;
	                var targetMax = target.parameters.length;
	                var checkCount;
	                if (source.hasRestParameter && target.hasRestParameter) {
	                    checkCount = sourceMax > targetMax ? sourceMax : targetMax;
	                    sourceMax--;
	                    targetMax--;
	                }
	                else if (source.hasRestParameter) {
	                    sourceMax--;
	                    checkCount = targetMax;
	                }
	                else if (target.hasRestParameter) {
	                    targetMax--;
	                    checkCount = sourceMax;
	                }
	                else {
	                    checkCount = sourceMax < targetMax ? sourceMax : targetMax;
	                }
	                source = getErasedSignature(source);
	                target = getErasedSignature(target);
	                var result = -1;
	                for (var i = 0; i < checkCount; i++) {
	                    var s = i < sourceMax ? getTypeOfSymbol(source.parameters[i]) : getRestTypeOfSignature(source);
	                    var t = i < targetMax ? getTypeOfSymbol(target.parameters[i]) : getRestTypeOfSignature(target);
	                    var saveErrorInfo = errorInfo;
	                    var related = isRelatedTo(s, t, reportErrors);
	                    if (!related) {
	                        related = isRelatedTo(t, s, false);
	                        if (!related) {
	                            if (reportErrors) {
	                                reportError(ts.Diagnostics.Types_of_parameters_0_and_1_are_incompatible, source.parameters[i < sourceMax ? i : sourceMax].name, target.parameters[i < targetMax ? i : targetMax].name);
	                            }
	                            return 0;
	                        }
	                        errorInfo = saveErrorInfo;
	                    }
	                    result &= related;
	                }
	                if (source.typePredicate && target.typePredicate) {
	                    var hasDifferentParameterIndex = source.typePredicate.parameterIndex !== target.typePredicate.parameterIndex;
	                    var hasDifferentTypes;
	                    if (hasDifferentParameterIndex ||
	                        (hasDifferentTypes = !isTypeIdenticalTo(source.typePredicate.type, target.typePredicate.type))) {
	                        if (reportErrors) {
	                            var sourceParamText = source.typePredicate.parameterName;
	                            var targetParamText = target.typePredicate.parameterName;
	                            var sourceTypeText = typeToString(source.typePredicate.type);
	                            var targetTypeText = typeToString(target.typePredicate.type);
	                            if (hasDifferentParameterIndex) {
	                                reportError(ts.Diagnostics.Parameter_0_is_not_in_the_same_position_as_parameter_1, sourceParamText, targetParamText);
	                            }
	                            else if (hasDifferentTypes) {
	                                reportError(ts.Diagnostics.Type_0_is_not_assignable_to_type_1, sourceTypeText, targetTypeText);
	                            }
	                            reportError(ts.Diagnostics.Type_predicate_0_is_not_assignable_to_1, sourceParamText + " is " + sourceTypeText, targetParamText + " is " + targetTypeText);
	                        }
	                        return 0;
	                    }
	                }
	                else if (!source.typePredicate && target.typePredicate) {
	                    if (reportErrors) {
	                        reportError(ts.Diagnostics.Signature_0_must_have_a_type_predicate, signatureToString(source));
	                    }
	                    return 0;
	                }
	                var targetReturnType = getReturnTypeOfSignature(target);
	                if (targetReturnType === voidType)
	                    return result;
	                var sourceReturnType = getReturnTypeOfSignature(source);
	                return result & isRelatedTo(sourceReturnType, targetReturnType, reportErrors);
	            }
	            function signaturesIdenticalTo(source, target, kind) {
	                var sourceSignatures = getSignaturesOfType(source, kind);
	                var targetSignatures = getSignaturesOfType(target, kind);
	                if (sourceSignatures.length !== targetSignatures.length) {
	                    return 0;
	                }
	                var result = -1;
	                for (var i = 0, len = sourceSignatures.length; i < len; ++i) {
	                    var related = compareSignatures(sourceSignatures[i], targetSignatures[i], false, false, isRelatedTo);
	                    if (!related) {
	                        return 0;
	                    }
	                    result &= related;
	                }
	                return result;
	            }
	            function stringIndexTypesRelatedTo(source, target, reportErrors) {
	                if (relation === identityRelation) {
	                    return indexTypesIdenticalTo(0, source, target);
	                }
	                var targetType = getIndexTypeOfType(target, 0);
	                if (targetType && !(targetType.flags & 1)) {
	                    var sourceType = getIndexTypeOfType(source, 0);
	                    if (!sourceType) {
	                        if (reportErrors) {
	                            reportError(ts.Diagnostics.Index_signature_is_missing_in_type_0, typeToString(source));
	                        }
	                        return 0;
	                    }
	                    var related = isRelatedTo(sourceType, targetType, reportErrors);
	                    if (!related) {
	                        if (reportErrors) {
	                            reportError(ts.Diagnostics.Index_signatures_are_incompatible);
	                        }
	                        return 0;
	                    }
	                    return related;
	                }
	                return -1;
	            }
	            function numberIndexTypesRelatedTo(source, target, reportErrors) {
	                if (relation === identityRelation) {
	                    return indexTypesIdenticalTo(1, source, target);
	                }
	                var targetType = getIndexTypeOfType(target, 1);
	                if (targetType && !(targetType.flags & 1)) {
	                    var sourceStringType = getIndexTypeOfType(source, 0);
	                    var sourceNumberType = getIndexTypeOfType(source, 1);
	                    if (!(sourceStringType || sourceNumberType)) {
	                        if (reportErrors) {
	                            reportError(ts.Diagnostics.Index_signature_is_missing_in_type_0, typeToString(source));
	                        }
	                        return 0;
	                    }
	                    var related;
	                    if (sourceStringType && sourceNumberType) {
	                        related = isRelatedTo(sourceStringType, targetType, false) || isRelatedTo(sourceNumberType, targetType, reportErrors);
	                    }
	                    else {
	                        related = isRelatedTo(sourceStringType || sourceNumberType, targetType, reportErrors);
	                    }
	                    if (!related) {
	                        if (reportErrors) {
	                            reportError(ts.Diagnostics.Index_signatures_are_incompatible);
	                        }
	                        return 0;
	                    }
	                    return related;
	                }
	                return -1;
	            }
	            function indexTypesIdenticalTo(indexKind, source, target) {
	                var targetType = getIndexTypeOfType(target, indexKind);
	                var sourceType = getIndexTypeOfType(source, indexKind);
	                if (!sourceType && !targetType) {
	                    return -1;
	                }
	                if (sourceType && targetType) {
	                    return isRelatedTo(sourceType, targetType);
	                }
	                return 0;
	            }
	        }
	        function isDeeplyNestedGeneric(type, stack, depth) {
	            if (type.flags & (4096 | 131072) && depth >= 5) {
	                var symbol = type.symbol;
	                var count = 0;
	                for (var i = 0; i < depth; i++) {
	                    var t = stack[i];
	                    if (t.flags & (4096 | 131072) && t.symbol === symbol) {
	                        count++;
	                        if (count >= 5)
	                            return true;
	                    }
	                }
	            }
	            return false;
	        }
	        function isPropertyIdenticalTo(sourceProp, targetProp) {
	            return compareProperties(sourceProp, targetProp, compareTypes) !== 0;
	        }
	        function compareProperties(sourceProp, targetProp, compareTypes) {
	            if (sourceProp === targetProp) {
	                return -1;
	            }
	            var sourcePropAccessibility = getDeclarationFlagsFromSymbol(sourceProp) & (32 | 64);
	            var targetPropAccessibility = getDeclarationFlagsFromSymbol(targetProp) & (32 | 64);
	            if (sourcePropAccessibility !== targetPropAccessibility) {
	                return 0;
	            }
	            if (sourcePropAccessibility) {
	                if (getTargetSymbol(sourceProp) !== getTargetSymbol(targetProp)) {
	                    return 0;
	                }
	            }
	            else {
	                if ((sourceProp.flags & 536870912) !== (targetProp.flags & 536870912)) {
	                    return 0;
	                }
	            }
	            return compareTypes(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp));
	        }
	        function compareSignatures(source, target, partialMatch, ignoreReturnTypes, compareTypes) {
	            if (source === target) {
	                return -1;
	            }
	            if (source.parameters.length !== target.parameters.length ||
	                source.minArgumentCount !== target.minArgumentCount ||
	                source.hasRestParameter !== target.hasRestParameter) {
	                if (!partialMatch ||
	                    source.parameters.length < target.parameters.length && !source.hasRestParameter ||
	                    source.minArgumentCount > target.minArgumentCount) {
	                    return 0;
	                }
	            }
	            var result = -1;
	            if (source.typeParameters && target.typeParameters) {
	                if (source.typeParameters.length !== target.typeParameters.length) {
	                    return 0;
	                }
	                for (var i = 0, len = source.typeParameters.length; i < len; ++i) {
	                    var related = compareTypes(source.typeParameters[i], target.typeParameters[i]);
	                    if (!related) {
	                        return 0;
	                    }
	                    result &= related;
	                }
	            }
	            else if (source.typeParameters || target.typeParameters) {
	                return 0;
	            }
	            source = getErasedSignature(source);
	            target = getErasedSignature(target);
	            var sourceLen = source.parameters.length;
	            var targetLen = target.parameters.length;
	            for (var i = 0; i < targetLen; i++) {
	                var s = source.hasRestParameter && i === sourceLen - 1 ? getRestTypeOfSignature(source) : getTypeOfSymbol(source.parameters[i]);
	                var t = target.hasRestParameter && i === targetLen - 1 ? getRestTypeOfSignature(target) : getTypeOfSymbol(target.parameters[i]);
	                var related = compareTypes(s, t);
	                if (!related) {
	                    return 0;
	                }
	                result &= related;
	            }
	            if (!ignoreReturnTypes) {
	                result &= compareTypes(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));
	            }
	            return result;
	        }
	        function isSupertypeOfEach(candidate, types) {
	            for (var _i = 0; _i < types.length; _i++) {
	                var type = types[_i];
	                if (candidate !== type && !isTypeSubtypeOf(type, candidate))
	                    return false;
	            }
	            return true;
	        }
	        function getCommonSupertype(types) {
	            return ts.forEach(types, function (t) { return isSupertypeOfEach(t, types) ? t : undefined; });
	        }
	        function reportNoCommonSupertypeError(types, errorLocation, errorMessageChainHead) {
	            var bestSupertype;
	            var bestSupertypeDownfallType;
	            var bestSupertypeScore = 0;
	            for (var i = 0; i < types.length; i++) {
	                var score = 0;
	                var downfallType = undefined;
	                for (var j = 0; j < types.length; j++) {
	                    if (isTypeSubtypeOf(types[j], types[i])) {
	                        score++;
	                    }
	                    else if (!downfallType) {
	                        downfallType = types[j];
	                    }
	                }
	                ts.Debug.assert(!!downfallType, "If there is no common supertype, each type should have a downfallType");
	                if (score > bestSupertypeScore) {
	                    bestSupertype = types[i];
	                    bestSupertypeDownfallType = downfallType;
	                    bestSupertypeScore = score;
	                }
	                if (bestSupertypeScore === types.length - 1) {
	                    break;
	                }
	            }
	            checkTypeSubtypeOf(bestSupertypeDownfallType, bestSupertype, errorLocation, ts.Diagnostics.Type_argument_candidate_1_is_not_a_valid_type_argument_because_it_is_not_a_supertype_of_candidate_0, errorMessageChainHead);
	        }
	        function isArrayType(type) {
	            return type.flags & 4096 && type.target === globalArrayType;
	        }
	        function isArrayLikeType(type) {
	            return !(type.flags & (32 | 64)) && isTypeAssignableTo(type, anyArrayType);
	        }
	        function isTupleLikeType(type) {
	            return !!getPropertyOfType(type, "0");
	        }
	        function isTupleType(type) {
	            return !!(type.flags & 8192);
	        }
	        function getRegularTypeOfObjectLiteral(type) {
	            if (type.flags & 1048576) {
	                var regularType = type.regularType;
	                if (!regularType) {
	                    regularType = createType(type.flags & ~1048576);
	                    regularType.symbol = type.symbol;
	                    regularType.members = type.members;
	                    regularType.properties = type.properties;
	                    regularType.callSignatures = type.callSignatures;
	                    regularType.constructSignatures = type.constructSignatures;
	                    regularType.stringIndexType = type.stringIndexType;
	                    regularType.numberIndexType = type.numberIndexType;
	                }
	                return regularType;
	            }
	            return type;
	        }
	        function getWidenedTypeOfObjectLiteral(type) {
	            var properties = getPropertiesOfObjectType(type);
	            var members = {};
	            ts.forEach(properties, function (p) {
	                var propType = getTypeOfSymbol(p);
	                var widenedType = getWidenedType(propType);
	                if (propType !== widenedType) {
	                    var symbol = createSymbol(p.flags | 67108864, p.name);
	                    symbol.declarations = p.declarations;
	                    symbol.parent = p.parent;
	                    symbol.type = widenedType;
	                    symbol.target = p;
	                    if (p.valueDeclaration)
	                        symbol.valueDeclaration = p.valueDeclaration;
	                    p = symbol;
	                }
	                members[p.name] = p;
	            });
	            var stringIndexType = getIndexTypeOfType(type, 0);
	            var numberIndexType = getIndexTypeOfType(type, 1);
	            if (stringIndexType)
	                stringIndexType = getWidenedType(stringIndexType);
	            if (numberIndexType)
	                numberIndexType = getWidenedType(numberIndexType);
	            return createAnonymousType(type.symbol, members, emptyArray, emptyArray, stringIndexType, numberIndexType);
	        }
	        function getWidenedType(type) {
	            if (type.flags & 6291456) {
	                if (type.flags & (32 | 64)) {
	                    return anyType;
	                }
	                if (type.flags & 524288) {
	                    return getWidenedTypeOfObjectLiteral(type);
	                }
	                if (type.flags & 16384) {
	                    return getUnionType(ts.map(type.types, getWidenedType), true);
	                }
	                if (isArrayType(type)) {
	                    return createArrayType(getWidenedType(type.typeArguments[0]));
	                }
	                if (isTupleType(type)) {
	                    return createTupleType(ts.map(type.elementTypes, getWidenedType));
	                }
	            }
	            return type;
	        }
	        function reportWideningErrorsInType(type) {
	            var errorReported = false;
	            if (type.flags & 16384) {
	                for (var _i = 0, _a = type.types; _i < _a.length; _i++) {
	                    var t = _a[_i];
	                    if (reportWideningErrorsInType(t)) {
	                        errorReported = true;
	                    }
	                }
	            }
	            if (isArrayType(type)) {
	                return reportWideningErrorsInType(type.typeArguments[0]);
	            }
	            if (isTupleType(type)) {
	                for (var _b = 0, _c = type.elementTypes; _b < _c.length; _b++) {
	                    var t = _c[_b];
	                    if (reportWideningErrorsInType(t)) {
	                        errorReported = true;
	                    }
	                }
	            }
	            if (type.flags & 524288) {
	                for (var _d = 0, _e = getPropertiesOfObjectType(type); _d < _e.length; _d++) {
	                    var p = _e[_d];
	                    var t = getTypeOfSymbol(p);
	                    if (t.flags & 2097152) {
	                        if (!reportWideningErrorsInType(t)) {
	                            error(p.valueDeclaration, ts.Diagnostics.Object_literal_s_property_0_implicitly_has_an_1_type, p.name, typeToString(getWidenedType(t)));
	                        }
	                        errorReported = true;
	                    }
	                }
	            }
	            return errorReported;
	        }
	        function reportImplicitAnyError(declaration, type) {
	            var typeAsString = typeToString(getWidenedType(type));
	            var diagnostic;
	            switch (declaration.kind) {
	                case 139:
	                case 138:
	                    diagnostic = ts.Diagnostics.Member_0_implicitly_has_an_1_type;
	                    break;
	                case 136:
	                    diagnostic = declaration.dotDotDotToken ?
	                        ts.Diagnostics.Rest_parameter_0_implicitly_has_an_any_type :
	                        ts.Diagnostics.Parameter_0_implicitly_has_an_1_type;
	                    break;
	                case 211:
	                case 141:
	                case 140:
	                case 143:
	                case 144:
	                case 171:
	                case 172:
	                    if (!declaration.name) {
	                        error(declaration, ts.Diagnostics.Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type, typeAsString);
	                        return;
	                    }
	                    diagnostic = ts.Diagnostics._0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type;
	                    break;
	                default:
	                    diagnostic = ts.Diagnostics.Variable_0_implicitly_has_an_1_type;
	            }
	            error(declaration, diagnostic, ts.declarationNameToString(declaration.name), typeAsString);
	        }
	        function reportErrorsFromWidening(declaration, type) {
	            if (produceDiagnostics && compilerOptions.noImplicitAny && type.flags & 2097152) {
	                if (!reportWideningErrorsInType(type)) {
	                    reportImplicitAnyError(declaration, type);
	                }
	            }
	        }
	        function forEachMatchingParameterType(source, target, callback) {
	            var sourceMax = source.parameters.length;
	            var targetMax = target.parameters.length;
	            var count;
	            if (source.hasRestParameter && target.hasRestParameter) {
	                count = sourceMax > targetMax ? sourceMax : targetMax;
	                sourceMax--;
	                targetMax--;
	            }
	            else if (source.hasRestParameter) {
	                sourceMax--;
	                count = targetMax;
	            }
	            else if (target.hasRestParameter) {
	                targetMax--;
	                count = sourceMax;
	            }
	            else {
	                count = sourceMax < targetMax ? sourceMax : targetMax;
	            }
	            for (var i = 0; i < count; i++) {
	                var s = i < sourceMax ? getTypeOfSymbol(source.parameters[i]) : getRestTypeOfSignature(source);
	                var t = i < targetMax ? getTypeOfSymbol(target.parameters[i]) : getRestTypeOfSignature(target);
	                callback(s, t);
	            }
	        }
	        function createInferenceContext(typeParameters, inferUnionTypes) {
	            var inferences = [];
	            for (var _i = 0; _i < typeParameters.length; _i++) {
	                var unused = typeParameters[_i];
	                inferences.push({
	                    primary: undefined, secondary: undefined, isFixed: false
	                });
	            }
	            return {
	                typeParameters: typeParameters,
	                inferUnionTypes: inferUnionTypes,
	                inferences: inferences,
	                inferredTypes: new Array(typeParameters.length)
	            };
	        }
	        function inferTypes(context, source, target) {
	            var sourceStack;
	            var targetStack;
	            var depth = 0;
	            var inferiority = 0;
	            inferFromTypes(source, target);
	            function isInProcess(source, target) {
	                for (var i = 0; i < depth; i++) {
	                    if (source === sourceStack[i] && target === targetStack[i]) {
	                        return true;
	                    }
	                }
	                return false;
	            }
	            function inferFromTypes(source, target) {
	                if (target.flags & 512) {
	                    if (source.flags & 8388608) {
	                        return;
	                    }
	                    var typeParameters = context.typeParameters;
	                    for (var i = 0; i < typeParameters.length; i++) {
	                        if (target === typeParameters[i]) {
	                            var inferences = context.inferences[i];
	                            if (!inferences.isFixed) {
	                                var candidates = inferiority ?
	                                    inferences.secondary || (inferences.secondary = []) :
	                                    inferences.primary || (inferences.primary = []);
	                                if (!ts.contains(candidates, source)) {
	                                    candidates.push(source);
	                                }
	                            }
	                            return;
	                        }
	                    }
	                }
	                else if (source.flags & 4096 && target.flags & 4096 && source.target === target.target) {
	                    var sourceTypes = source.typeArguments;
	                    var targetTypes = target.typeArguments;
	                    for (var i = 0; i < sourceTypes.length; i++) {
	                        inferFromTypes(sourceTypes[i], targetTypes[i]);
	                    }
	                }
	                else if (source.flags & 8192 && target.flags & 8192 && source.elementTypes.length === target.elementTypes.length) {
	                    var sourceTypes = source.elementTypes;
	                    var targetTypes = target.elementTypes;
	                    for (var i = 0; i < sourceTypes.length; i++) {
	                        inferFromTypes(sourceTypes[i], targetTypes[i]);
	                    }
	                }
	                else if (target.flags & 49152) {
	                    var targetTypes = target.types;
	                    var typeParameterCount = 0;
	                    var typeParameter;
	                    for (var _i = 0; _i < targetTypes.length; _i++) {
	                        var t = targetTypes[_i];
	                        if (t.flags & 512 && ts.contains(context.typeParameters, t)) {
	                            typeParameter = t;
	                            typeParameterCount++;
	                        }
	                        else {
	                            inferFromTypes(source, t);
	                        }
	                    }
	                    if (target.flags & 16384 && typeParameterCount === 1) {
	                        inferiority++;
	                        inferFromTypes(source, typeParameter);
	                        inferiority--;
	                    }
	                }
	                else if (source.flags & 49152) {
	                    var sourceTypes = source.types;
	                    for (var _a = 0; _a < sourceTypes.length; _a++) {
	                        var sourceType = sourceTypes[_a];
	                        inferFromTypes(sourceType, target);
	                    }
	                }
	                else {
	                    source = getApparentType(source);
	                    if (source.flags & 80896 && (target.flags & (4096 | 8192) ||
	                        (target.flags & 65536) && target.symbol && target.symbol.flags & (8192 | 2048 | 32))) {
	                        if (isInProcess(source, target)) {
	                            return;
	                        }
	                        if (isDeeplyNestedGeneric(source, sourceStack, depth) && isDeeplyNestedGeneric(target, targetStack, depth)) {
	                            return;
	                        }
	                        if (depth === 0) {
	                            sourceStack = [];
	                            targetStack = [];
	                        }
	                        sourceStack[depth] = source;
	                        targetStack[depth] = target;
	                        depth++;
	                        inferFromProperties(source, target);
	                        inferFromSignatures(source, target, 0);
	                        inferFromSignatures(source, target, 1);
	                        inferFromIndexTypes(source, target, 0, 0);
	                        inferFromIndexTypes(source, target, 1, 1);
	                        inferFromIndexTypes(source, target, 0, 1);
	                        depth--;
	                    }
	                }
	            }
	            function inferFromProperties(source, target) {
	                var properties = getPropertiesOfObjectType(target);
	                for (var _i = 0; _i < properties.length; _i++) {
	                    var targetProp = properties[_i];
	                    var sourceProp = getPropertyOfObjectType(source, targetProp.name);
	                    if (sourceProp) {
	                        inferFromTypes(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp));
	                    }
	                }
	            }
	            function inferFromSignatures(source, target, kind) {
	                var sourceSignatures = getSignaturesOfType(source, kind);
	                var targetSignatures = getSignaturesOfType(target, kind);
	                var sourceLen = sourceSignatures.length;
	                var targetLen = targetSignatures.length;
	                var len = sourceLen < targetLen ? sourceLen : targetLen;
	                for (var i = 0; i < len; i++) {
	                    inferFromSignature(getErasedSignature(sourceSignatures[sourceLen - len + i]), getErasedSignature(targetSignatures[targetLen - len + i]));
	                }
	            }
	            function inferFromSignature(source, target) {
	                forEachMatchingParameterType(source, target, inferFromTypes);
	                if (source.typePredicate && target.typePredicate) {
	                    if (target.typePredicate.parameterIndex === source.typePredicate.parameterIndex) {
	                        inferFromTypes(source.typePredicate.type, target.typePredicate.type);
	                    }
	                }
	                else {
	                    inferFromTypes(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));
	                }
	            }
	            function inferFromIndexTypes(source, target, sourceKind, targetKind) {
	                var targetIndexType = getIndexTypeOfType(target, targetKind);
	                if (targetIndexType) {
	                    var sourceIndexType = getIndexTypeOfType(source, sourceKind);
	                    if (sourceIndexType) {
	                        inferFromTypes(sourceIndexType, targetIndexType);
	                    }
	                }
	            }
	        }
	        function getInferenceCandidates(context, index) {
	            var inferences = context.inferences[index];
	            return inferences.primary || inferences.secondary || emptyArray;
	        }
	        function getInferredType(context, index) {
	            var inferredType = context.inferredTypes[index];
	            var inferenceSucceeded;
	            if (!inferredType) {
	                var inferences = getInferenceCandidates(context, index);
	                if (inferences.length) {
	                    var unionOrSuperType = context.inferUnionTypes ? getUnionType(inferences) : getCommonSupertype(inferences);
	                    inferredType = unionOrSuperType ? getWidenedType(unionOrSuperType) : unknownType;
	                    inferenceSucceeded = !!unionOrSuperType;
	                }
	                else {
	                    inferredType = emptyObjectType;
	                    inferenceSucceeded = true;
	                }
	                if (inferenceSucceeded) {
	                    var constraint = getConstraintOfTypeParameter(context.typeParameters[index]);
	                    inferredType = constraint && !isTypeAssignableTo(inferredType, constraint) ? constraint : inferredType;
	                }
	                else if (context.failedTypeParameterIndex === undefined || context.failedTypeParameterIndex > index) {
	                    context.failedTypeParameterIndex = index;
	                }
	                context.inferredTypes[index] = inferredType;
	            }
	            return inferredType;
	        }
	        function getInferredTypes(context) {
	            for (var i = 0; i < context.inferredTypes.length; i++) {
	                getInferredType(context, i);
	            }
	            return context.inferredTypes;
	        }
	        function hasAncestor(node, kind) {
	            return ts.getAncestor(node, kind) !== undefined;
	        }
	        function getResolvedSymbol(node) {
	            var links = getNodeLinks(node);
	            if (!links.resolvedSymbol) {
	                links.resolvedSymbol = (!ts.nodeIsMissing(node) && resolveName(node, node.text, 107455 | 1048576, ts.Diagnostics.Cannot_find_name_0, node)) || unknownSymbol;
	            }
	            return links.resolvedSymbol;
	        }
	        function isInTypeQuery(node) {
	            while (node) {
	                switch (node.kind) {
	                    case 152:
	                        return true;
	                    case 67:
	                    case 133:
	                        node = node.parent;
	                        continue;
	                    default:
	                        return false;
	                }
	            }
	            ts.Debug.fail("should not get here");
	        }
	        function removeTypesFromUnionType(type, typeKind, isOfTypeKind, allowEmptyUnionResult) {
	            if (type.flags & 16384) {
	                var types = type.types;
	                if (ts.forEach(types, function (t) { return !!(t.flags & typeKind) === isOfTypeKind; })) {
	                    var narrowedType = getUnionType(ts.filter(types, function (t) { return !(t.flags & typeKind) === isOfTypeKind; }));
	                    if (allowEmptyUnionResult || narrowedType !== emptyObjectType) {
	                        return narrowedType;
	                    }
	                }
	            }
	            else if (allowEmptyUnionResult && !!(type.flags & typeKind) === isOfTypeKind) {
	                return getUnionType(emptyArray);
	            }
	            return type;
	        }
	        function hasInitializer(node) {
	            return !!(node.initializer || ts.isBindingPattern(node.parent) && hasInitializer(node.parent.parent));
	        }
	        function isVariableAssignedWithin(symbol, node) {
	            var links = getNodeLinks(node);
	            if (links.assignmentChecks) {
	                var cachedResult = links.assignmentChecks[symbol.id];
	                if (cachedResult !== undefined) {
	                    return cachedResult;
	                }
	            }
	            else {
	                links.assignmentChecks = {};
	            }
	            return links.assignmentChecks[symbol.id] = isAssignedIn(node);
	            function isAssignedInBinaryExpression(node) {
	                if (node.operatorToken.kind >= 55 && node.operatorToken.kind <= 66) {
	                    var n = node.left;
	                    while (n.kind === 170) {
	                        n = n.expression;
	                    }
	                    if (n.kind === 67 && getResolvedSymbol(n) === symbol) {
	                        return true;
	                    }
	                }
	                return ts.forEachChild(node, isAssignedIn);
	            }
	            function isAssignedInVariableDeclaration(node) {
	                if (!ts.isBindingPattern(node.name) && getSymbolOfNode(node) === symbol && hasInitializer(node)) {
	                    return true;
	                }
	                return ts.forEachChild(node, isAssignedIn);
	            }
	            function isAssignedIn(node) {
	                switch (node.kind) {
	                    case 179:
	                        return isAssignedInBinaryExpression(node);
	                    case 209:
	                    case 161:
	                        return isAssignedInVariableDeclaration(node);
	                    case 159:
	                    case 160:
	                    case 162:
	                    case 163:
	                    case 164:
	                    case 165:
	                    case 166:
	                    case 167:
	                    case 169:
	                    case 187:
	                    case 170:
	                    case 177:
	                    case 173:
	                    case 176:
	                    case 174:
	                    case 175:
	                    case 178:
	                    case 182:
	                    case 180:
	                    case 183:
	                    case 190:
	                    case 191:
	                    case 193:
	                    case 194:
	                    case 195:
	                    case 196:
	                    case 197:
	                    case 198:
	                    case 199:
	                    case 202:
	                    case 203:
	                    case 204:
	                    case 239:
	                    case 240:
	                    case 205:
	                    case 206:
	                    case 207:
	                    case 242:
	                    case 231:
	                    case 232:
	                    case 236:
	                    case 237:
	                    case 233:
	                    case 238:
	                        return ts.forEachChild(node, isAssignedIn);
	                }
	                return false;
	            }
	        }
	        function getNarrowedTypeOfSymbol(symbol, node) {
	            var type = getTypeOfSymbol(symbol);
	            if (node && symbol.flags & 3) {
	                if (isTypeAny(type) || type.flags & (80896 | 16384 | 512)) {
	                    loop: while (node.parent) {
	                        var child = node;
	                        node = node.parent;
	                        var narrowedType = type;
	                        switch (node.kind) {
	                            case 194:
	                                if (child !== node.expression) {
	                                    narrowedType = narrowType(type, node.expression, child === node.thenStatement);
	                                }
	                                break;
	                            case 180:
	                                if (child !== node.condition) {
	                                    narrowedType = narrowType(type, node.condition, child === node.whenTrue);
	                                }
	                                break;
	                            case 179:
	                                if (child === node.right) {
	                                    if (node.operatorToken.kind === 50) {
	                                        narrowedType = narrowType(type, node.left, true);
	                                    }
	                                    else if (node.operatorToken.kind === 51) {
	                                        narrowedType = narrowType(type, node.left, false);
	                                    }
	                                }
	                                break;
	                            case 246:
	                            case 216:
	                            case 211:
	                            case 141:
	                            case 140:
	                            case 143:
	                            case 144:
	                            case 142:
	                                break loop;
	                        }
	                        if (narrowedType !== type) {
	                            if (isVariableAssignedWithin(symbol, node)) {
	                                break;
	                            }
	                            type = narrowedType;
	                        }
	                    }
	                }
	            }
	            return type;
	            function narrowTypeByEquality(type, expr, assumeTrue) {
	                if (expr.left.kind !== 174 || expr.right.kind !== 9) {
	                    return type;
	                }
	                var left = expr.left;
	                var right = expr.right;
	                if (left.expression.kind !== 67 || getResolvedSymbol(left.expression) !== symbol) {
	                    return type;
	                }
	                var typeInfo = primitiveTypeInfo[right.text];
	                if (expr.operatorToken.kind === 33) {
	                    assumeTrue = !assumeTrue;
	                }
	                if (assumeTrue) {
	                    if (!typeInfo) {
	                        return removeTypesFromUnionType(type, 258 | 132 | 8 | 16777216, true, false);
	                    }
	                    if (isTypeSubtypeOf(typeInfo.type, type)) {
	                        return typeInfo.type;
	                    }
	                    return removeTypesFromUnionType(type, typeInfo.flags, false, false);
	                }
	                else {
	                    if (typeInfo) {
	                        return removeTypesFromUnionType(type, typeInfo.flags, true, false);
	                    }
	                    return type;
	                }
	            }
	            function narrowTypeByAnd(type, expr, assumeTrue) {
	                if (assumeTrue) {
	                    return narrowType(narrowType(type, expr.left, true), expr.right, true);
	                }
	                else {
	                    return getUnionType([
	                        narrowType(type, expr.left, false),
	                        narrowType(narrowType(type, expr.left, true), expr.right, false)
	                    ]);
	                }
	            }
	            function narrowTypeByOr(type, expr, assumeTrue) {
	                if (assumeTrue) {
	                    return getUnionType([
	                        narrowType(type, expr.left, true),
	                        narrowType(narrowType(type, expr.left, false), expr.right, true)
	                    ]);
	                }
	                else {
	                    return narrowType(narrowType(type, expr.left, false), expr.right, false);
	                }
	            }
	            function narrowTypeByInstanceof(type, expr, assumeTrue) {
	                if (isTypeAny(type) || !assumeTrue || expr.left.kind !== 67 || getResolvedSymbol(expr.left) !== symbol) {
	                    return type;
	                }
	                var rightType = checkExpression(expr.right);
	                if (!isTypeSubtypeOf(rightType, globalFunctionType)) {
	                    return type;
	                }
	                var targetType;
	                var prototypeProperty = getPropertyOfType(rightType, "prototype");
	                if (prototypeProperty) {
	                    var prototypePropertyType = getTypeOfSymbol(prototypeProperty);
	                    if (!isTypeAny(prototypePropertyType)) {
	                        targetType = prototypePropertyType;
	                    }
	                }
	                if (!targetType) {
	                    var constructSignatures;
	                    if (rightType.flags & 2048) {
	                        constructSignatures = resolveDeclaredMembers(rightType).declaredConstructSignatures;
	                    }
	                    else if (rightType.flags & 65536) {
	                        constructSignatures = getSignaturesOfType(rightType, 1);
	                    }
	                    if (constructSignatures && constructSignatures.length) {
	                        targetType = getUnionType(ts.map(constructSignatures, function (signature) { return getReturnTypeOfSignature(getErasedSignature(signature)); }));
	                    }
	                }
	                if (targetType) {
	                    return getNarrowedType(type, targetType);
	                }
	                return type;
	            }
	            function getNarrowedType(originalType, narrowedTypeCandidate) {
	                if (originalType.flags & 16384) {
	                    var assignableConstituents = ts.filter(originalType.types, function (t) { return isTypeAssignableTo(t, narrowedTypeCandidate); });
	                    if (assignableConstituents.length) {
	                        return getUnionType(assignableConstituents);
	                    }
	                }
	                if (isTypeAssignableTo(narrowedTypeCandidate, originalType)) {
	                    return narrowedTypeCandidate;
	                }
	                return originalType;
	            }
	            function narrowTypeByTypePredicate(type, expr, assumeTrue) {
	                if (type.flags & 1) {
	                    return type;
	                }
	                var signature = getResolvedSignature(expr);
	                if (signature.typePredicate &&
	                    expr.arguments[signature.typePredicate.parameterIndex] &&
	                    getSymbolAtLocation(expr.arguments[signature.typePredicate.parameterIndex]) === symbol) {
	                    if (!assumeTrue) {
	                        if (type.flags & 16384) {
	                            return getUnionType(ts.filter(type.types, function (t) { return !isTypeSubtypeOf(t, signature.typePredicate.type); }));
	                        }
	                        return type;
	                    }
	                    return getNarrowedType(type, signature.typePredicate.type);
	                }
	                return type;
	            }
	            function narrowType(type, expr, assumeTrue) {
	                switch (expr.kind) {
	                    case 166:
	                        return narrowTypeByTypePredicate(type, expr, assumeTrue);
	                    case 170:
	                        return narrowType(type, expr.expression, assumeTrue);
	                    case 179:
	                        var operator = expr.operatorToken.kind;
	                        if (operator === 32 || operator === 33) {
	                            return narrowTypeByEquality(type, expr, assumeTrue);
	                        }
	                        else if (operator === 50) {
	                            return narrowTypeByAnd(type, expr, assumeTrue);
	                        }
	                        else if (operator === 51) {
	                            return narrowTypeByOr(type, expr, assumeTrue);
	                        }
	                        else if (operator === 89) {
	                            return narrowTypeByInstanceof(type, expr, assumeTrue);
	                        }
	                        break;
	                    case 177:
	                        if (expr.operator === 48) {
	                            return narrowType(type, expr.operand, !assumeTrue);
	                        }
	                        break;
	                }
	                return type;
	            }
	        }
	        function checkIdentifier(node) {
	            var symbol = getResolvedSymbol(node);
	            if (symbol === argumentsSymbol) {
	                var container = ts.getContainingFunction(node);
	                if (container.kind === 172) {
	                    if (languageVersion < 2) {
	                        error(node, ts.Diagnostics.The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_standard_function_expression);
	                    }
	                }
	                if (node.parserContextFlags & 8) {
	                    getNodeLinks(container).flags |= 4096;
	                    getNodeLinks(node).flags |= 2048;
	                }
	            }
	            if (symbol.flags & 8388608 && !isInTypeQuery(node) && !isConstEnumOrConstEnumOnlyModule(resolveAlias(symbol))) {
	                markAliasSymbolAsReferenced(symbol);
	            }
	            checkCollisionWithCapturedSuperVariable(node, node);
	            checkCollisionWithCapturedThisVariable(node, node);
	            checkBlockScopedBindingCapturedInLoop(node, symbol);
	            return getNarrowedTypeOfSymbol(getExportSymbolOfValueSymbolIfExported(symbol), node);
	        }
	        function isInsideFunction(node, threshold) {
	            var current = node;
	            while (current && current !== threshold) {
	                if (ts.isFunctionLike(current)) {
	                    return true;
	                }
	                current = current.parent;
	            }
	            return false;
	        }
	        function checkBlockScopedBindingCapturedInLoop(node, symbol) {
	            if (languageVersion >= 2 ||
	                (symbol.flags & 2) === 0 ||
	                symbol.valueDeclaration.parent.kind === 242) {
	                return;
	            }
	            var container = symbol.valueDeclaration;
	            while (container.kind !== 210) {
	                container = container.parent;
	            }
	            container = container.parent;
	            if (container.kind === 191) {
	                container = container.parent;
	            }
	            var inFunction = isInsideFunction(node.parent, container);
	            var current = container;
	            while (current && !ts.nodeStartsNewLexicalEnvironment(current)) {
	                if (isIterationStatement(current, false)) {
	                    if (inFunction) {
	                        grammarErrorOnFirstToken(current, ts.Diagnostics.Loop_contains_block_scoped_variable_0_referenced_by_a_function_in_the_loop_This_is_only_supported_in_ECMAScript_6_or_higher, ts.declarationNameToString(node));
	                    }
	                    getNodeLinks(symbol.valueDeclaration).flags |= 16384;
	                    break;
	                }
	                current = current.parent;
	            }
	        }
	        function captureLexicalThis(node, container) {
	            getNodeLinks(node).flags |= 2;
	            if (container.kind === 139 || container.kind === 142) {
	                var classNode = container.parent;
	                getNodeLinks(classNode).flags |= 4;
	            }
	            else {
	                getNodeLinks(container).flags |= 4;
	            }
	        }
	        function checkThisExpression(node) {
	            var container = ts.getThisContainer(node, true);
	            var needToCaptureLexicalThis = false;
	            if (container.kind === 172) {
	                container = ts.getThisContainer(container, false);
	                needToCaptureLexicalThis = (languageVersion < 2);
	            }
	            switch (container.kind) {
	                case 216:
	                    error(node, ts.Diagnostics.this_cannot_be_referenced_in_a_module_or_namespace_body);
	                    break;
	                case 215:
	                    error(node, ts.Diagnostics.this_cannot_be_referenced_in_current_location);
	                    break;
	                case 142:
	                    if (isInConstructorArgumentInitializer(node, container)) {
	                        error(node, ts.Diagnostics.this_cannot_be_referenced_in_constructor_arguments);
	                    }
	                    break;
	                case 139:
	                case 138:
	                    if (container.flags & 128) {
	                        error(node, ts.Diagnostics.this_cannot_be_referenced_in_a_static_property_initializer);
	                    }
	                    break;
	                case 134:
	                    error(node, ts.Diagnostics.this_cannot_be_referenced_in_a_computed_property_name);
	                    break;
	            }
	            if (needToCaptureLexicalThis) {
	                captureLexicalThis(node, container);
	            }
	            if (ts.isClassLike(container.parent)) {
	                var symbol = getSymbolOfNode(container.parent);
	                return container.flags & 128 ? getTypeOfSymbol(symbol) : getDeclaredTypeOfSymbol(symbol);
	            }
	            return anyType;
	        }
	        function isInConstructorArgumentInitializer(node, constructorDecl) {
	            for (var n = node; n && n !== constructorDecl; n = n.parent) {
	                if (n.kind === 136) {
	                    return true;
	                }
	            }
	            return false;
	        }
	        function checkSuperExpression(node) {
	            var isCallExpression = node.parent.kind === 166 && node.parent.expression === node;
	            var classDeclaration = ts.getContainingClass(node);
	            var classType = classDeclaration && getDeclaredTypeOfSymbol(getSymbolOfNode(classDeclaration));
	            var baseClassType = classType && getBaseTypes(classType)[0];
	            var container = ts.getSuperContainer(node, true);
	            var needToCaptureLexicalThis = false;
	            if (!isCallExpression) {
	                while (container && container.kind === 172) {
	                    container = ts.getSuperContainer(container, true);
	                    needToCaptureLexicalThis = languageVersion < 2;
	                }
	            }
	            var canUseSuperExpression = isLegalUsageOfSuperExpression(container);
	            var nodeCheckFlag = 0;
	            if (canUseSuperExpression) {
	                if ((container.flags & 128) || isCallExpression) {
	                    nodeCheckFlag = 512;
	                }
	                else {
	                    nodeCheckFlag = 256;
	                }
	                getNodeLinks(node).flags |= nodeCheckFlag;
	                if (needToCaptureLexicalThis) {
	                    captureLexicalThis(node.parent, container);
	                }
	            }
	            if (!baseClassType) {
	                if (!classDeclaration || !ts.getClassExtendsHeritageClauseElement(classDeclaration)) {
	                    error(node, ts.Diagnostics.super_can_only_be_referenced_in_a_derived_class);
	                }
	                return unknownType;
	            }
	            if (!canUseSuperExpression) {
	                if (container && container.kind === 134) {
	                    error(node, ts.Diagnostics.super_cannot_be_referenced_in_a_computed_property_name);
	                }
	                else if (isCallExpression) {
	                    error(node, ts.Diagnostics.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors);
	                }
	                else {
	                    error(node, ts.Diagnostics.super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class);
	                }
	                return unknownType;
	            }
	            if (container.kind === 142 && isInConstructorArgumentInitializer(node, container)) {
	                error(node, ts.Diagnostics.super_cannot_be_referenced_in_constructor_arguments);
	                return unknownType;
	            }
	            return nodeCheckFlag === 512
	                ? getBaseConstructorTypeOfClass(classType)
	                : baseClassType;
	            function isLegalUsageOfSuperExpression(container) {
	                if (!container) {
	                    return false;
	                }
	                if (isCallExpression) {
	                    return container.kind === 142;
	                }
	                else {
	                    if (container && ts.isClassLike(container.parent)) {
	                        if (container.flags & 128) {
	                            return container.kind === 141 ||
	                                container.kind === 140 ||
	                                container.kind === 143 ||
	                                container.kind === 144;
	                        }
	                        else {
	                            return container.kind === 141 ||
	                                container.kind === 140 ||
	                                container.kind === 143 ||
	                                container.kind === 144 ||
	                                container.kind === 139 ||
	                                container.kind === 138 ||
	                                container.kind === 142;
	                        }
	                    }
	                }
	                return false;
	            }
	        }
	        function getContextuallyTypedParameterType(parameter) {
	            if (isFunctionExpressionOrArrowFunction(parameter.parent)) {
	                var func = parameter.parent;
	                if (isContextSensitive(func)) {
	                    var contextualSignature = getContextualSignature(func);
	                    if (contextualSignature) {
	                        var funcHasRestParameters = ts.hasRestParameter(func);
	                        var len = func.parameters.length - (funcHasRestParameters ? 1 : 0);
	                        var indexOfParameter = ts.indexOf(func.parameters, parameter);
	                        if (indexOfParameter < len) {
	                            return getTypeAtPosition(contextualSignature, indexOfParameter);
	                        }
	                        if (indexOfParameter === (func.parameters.length - 1) &&
	                            funcHasRestParameters && contextualSignature.hasRestParameter && func.parameters.length >= contextualSignature.parameters.length) {
	                            return getTypeOfSymbol(ts.lastOrUndefined(contextualSignature.parameters));
	                        }
	                    }
	                }
	            }
	            return undefined;
	        }
	        function getContextualTypeForInitializerExpression(node) {
	            var declaration = node.parent;
	            if (node === declaration.initializer) {
	                if (declaration.type) {
	                    return getTypeFromTypeNode(declaration.type);
	                }
	                if (declaration.kind === 136) {
	                    var type = getContextuallyTypedParameterType(declaration);
	                    if (type) {
	                        return type;
	                    }
	                }
	                if (ts.isBindingPattern(declaration.name)) {
	                    return getTypeFromBindingPattern(declaration.name);
	                }
	            }
	            return undefined;
	        }
	        function getContextualTypeForReturnExpression(node) {
	            var func = ts.getContainingFunction(node);
	            if (func && !func.asteriskToken) {
	                return getContextualReturnType(func);
	            }
	            return undefined;
	        }
	        function getContextualTypeForYieldOperand(node) {
	            var func = ts.getContainingFunction(node);
	            if (func) {
	                var contextualReturnType = getContextualReturnType(func);
	                if (contextualReturnType) {
	                    return node.asteriskToken
	                        ? contextualReturnType
	                        : getElementTypeOfIterableIterator(contextualReturnType);
	                }
	            }
	            return undefined;
	        }
	        function isInParameterInitializerBeforeContainingFunction(node) {
	            while (node.parent && !ts.isFunctionLike(node.parent)) {
	                if (node.parent.kind === 136 && node.parent.initializer === node) {
	                    return true;
	                }
	                node = node.parent;
	            }
	            return false;
	        }
	        function getContextualReturnType(functionDecl) {
	            if (functionDecl.type ||
	                functionDecl.kind === 142 ||
	                functionDecl.kind === 143 && ts.getSetAccessorTypeAnnotationNode(ts.getDeclarationOfKind(functionDecl.symbol, 144))) {
	                return getReturnTypeOfSignature(getSignatureFromDeclaration(functionDecl));
	            }
	            var signature = getContextualSignatureForFunctionLikeDeclaration(functionDecl);
	            if (signature) {
	                return getReturnTypeOfSignature(signature);
	            }
	            return undefined;
	        }
	        function getContextualTypeForArgument(callTarget, arg) {
	            var args = getEffectiveCallArguments(callTarget);
	            var argIndex = ts.indexOf(args, arg);
	            if (argIndex >= 0) {
	                var signature = getResolvedSignature(callTarget);
	                return getTypeAtPosition(signature, argIndex);
	            }
	            return undefined;
	        }
	        function getContextualTypeForSubstitutionExpression(template, substitutionExpression) {
	            if (template.parent.kind === 168) {
	                return getContextualTypeForArgument(template.parent, substitutionExpression);
	            }
	            return undefined;
	        }
	        function getContextualTypeForBinaryOperand(node) {
	            var binaryExpression = node.parent;
	            var operator = binaryExpression.operatorToken.kind;
	            if (operator >= 55 && operator <= 66) {
	                if (node === binaryExpression.right) {
	                    return checkExpression(binaryExpression.left);
	                }
	            }
	            else if (operator === 51) {
	                var type = getContextualType(binaryExpression);
	                if (!type && node === binaryExpression.right) {
	                    type = checkExpression(binaryExpression.left);
	                }
	                return type;
	            }
	            return undefined;
	        }
	        function applyToContextualType(type, mapper) {
	            if (!(type.flags & 16384)) {
	                return mapper(type);
	            }
	            var types = type.types;
	            var mappedType;
	            var mappedTypes;
	            for (var _i = 0; _i < types.length; _i++) {
	                var current = types[_i];
	                var t = mapper(current);
	                if (t) {
	                    if (!mappedType) {
	                        mappedType = t;
	                    }
	                    else if (!mappedTypes) {
	                        mappedTypes = [mappedType, t];
	                    }
	                    else {
	                        mappedTypes.push(t);
	                    }
	                }
	            }
	            return mappedTypes ? getUnionType(mappedTypes) : mappedType;
	        }
	        function getTypeOfPropertyOfContextualType(type, name) {
	            return applyToContextualType(type, function (t) {
	                var prop = t.flags & 130048 ? getPropertyOfType(t, name) : undefined;
	                return prop ? getTypeOfSymbol(prop) : undefined;
	            });
	        }
	        function getIndexTypeOfContextualType(type, kind) {
	            return applyToContextualType(type, function (t) { return getIndexTypeOfStructuredType(t, kind); });
	        }
	        function contextualTypeIsTupleLikeType(type) {
	            return !!(type.flags & 16384 ? ts.forEach(type.types, isTupleLikeType) : isTupleLikeType(type));
	        }
	        function contextualTypeHasIndexSignature(type, kind) {
	            return !!(type.flags & 16384 ? ts.forEach(type.types, function (t) { return getIndexTypeOfStructuredType(t, kind); }) : getIndexTypeOfStructuredType(type, kind));
	        }
	        function getContextualTypeForObjectLiteralMethod(node) {
	            ts.Debug.assert(ts.isObjectLiteralMethod(node));
	            if (isInsideWithStatementBody(node)) {
	                return undefined;
	            }
	            return getContextualTypeForObjectLiteralElement(node);
	        }
	        function getContextualTypeForObjectLiteralElement(element) {
	            var objectLiteral = element.parent;
	            var type = getContextualType(objectLiteral);
	            if (type) {
	                if (!ts.hasDynamicName(element)) {
	                    var symbolName = getSymbolOfNode(element).name;
	                    var propertyType = getTypeOfPropertyOfContextualType(type, symbolName);
	                    if (propertyType) {
	                        return propertyType;
	                    }
	                }
	                return isNumericName(element.name) && getIndexTypeOfContextualType(type, 1) ||
	                    getIndexTypeOfContextualType(type, 0);
	            }
	            return undefined;
	        }
	        function getContextualTypeForElementExpression(node) {
	            var arrayLiteral = node.parent;
	            var type = getContextualType(arrayLiteral);
	            if (type) {
	                var index = ts.indexOf(arrayLiteral.elements, node);
	                return getTypeOfPropertyOfContextualType(type, "" + index)
	                    || getIndexTypeOfContextualType(type, 1)
	                    || (languageVersion >= 2 ? getElementTypeOfIterable(type, undefined) : undefined);
	            }
	            return undefined;
	        }
	        function getContextualTypeForConditionalOperand(node) {
	            var conditional = node.parent;
	            return node === conditional.whenTrue || node === conditional.whenFalse ? getContextualType(conditional) : undefined;
	        }
	        function getContextualTypeForJsxExpression(expr) {
	            if (expr.parent.kind === 236) {
	                var attrib = expr.parent;
	                var attrsType = getJsxElementAttributesType(attrib.parent);
	                if (!attrsType || isTypeAny(attrsType)) {
	                    return undefined;
	                }
	                else {
	                    return getTypeOfPropertyOfType(attrsType, attrib.name.text);
	                }
	            }
	            if (expr.kind === 237) {
	                return getJsxElementAttributesType(expr.parent);
	            }
	            return undefined;
	        }
	        function getContextualType(node) {
	            var type = getContextualTypeWorker(node);
	            return type && getApparentType(type);
	        }
	        function getContextualTypeWorker(node) {
	            if (isInsideWithStatementBody(node)) {
	                return undefined;
	            }
	            if (node.contextualType) {
	                return node.contextualType;
	            }
	            var parent = node.parent;
	            switch (parent.kind) {
	                case 209:
	                case 136:
	                case 139:
	                case 138:
	                case 161:
	                    return getContextualTypeForInitializerExpression(node);
	                case 172:
	                case 202:
	                    return getContextualTypeForReturnExpression(node);
	                case 182:
	                    return getContextualTypeForYieldOperand(parent);
	                case 166:
	                case 167:
	                    return getContextualTypeForArgument(parent, node);
	                case 169:
	                case 187:
	                    return getTypeFromTypeNode(parent.type);
	                case 179:
	                    return getContextualTypeForBinaryOperand(node);
	                case 243:
	                    return getContextualTypeForObjectLiteralElement(parent);
	                case 162:
	                    return getContextualTypeForElementExpression(node);
	                case 180:
	                    return getContextualTypeForConditionalOperand(node);
	                case 188:
	                    ts.Debug.assert(parent.parent.kind === 181);
	                    return getContextualTypeForSubstitutionExpression(parent.parent, node);
	                case 170:
	                    return getContextualType(parent);
	                case 238:
	                case 237:
	                    return getContextualTypeForJsxExpression(parent);
	            }
	            return undefined;
	        }
	        function getNonGenericSignature(type) {
	            var signatures = getSignaturesOfStructuredType(type, 0);
	            if (signatures.length === 1) {
	                var signature = signatures[0];
	                if (!signature.typeParameters) {
	                    return signature;
	                }
	            }
	        }
	        function isFunctionExpressionOrArrowFunction(node) {
	            return node.kind === 171 || node.kind === 172;
	        }
	        function getContextualSignatureForFunctionLikeDeclaration(node) {
	            return isFunctionExpressionOrArrowFunction(node) || ts.isObjectLiteralMethod(node)
	                ? getContextualSignature(node)
	                : undefined;
	        }
	        function getContextualSignature(node) {
	            ts.Debug.assert(node.kind !== 141 || ts.isObjectLiteralMethod(node));
	            var type = ts.isObjectLiteralMethod(node)
	                ? getContextualTypeForObjectLiteralMethod(node)
	                : getContextualType(node);
	            if (!type) {
	                return undefined;
	            }
	            if (!(type.flags & 16384)) {
	                return getNonGenericSignature(type);
	            }
	            var signatureList;
	            var types = type.types;
	            for (var _i = 0; _i < types.length; _i++) {
	                var current = types[_i];
	                var signature = getNonGenericSignature(current);
	                if (signature) {
	                    if (!signatureList) {
	                        signatureList = [signature];
	                    }
	                    else if (!compareSignatures(signatureList[0], signature, false, true, compareTypes)) {
	                        return undefined;
	                    }
	                    else {
	                        signatureList.push(signature);
	                    }
	                }
	            }
	            var result;
	            if (signatureList) {
	                result = cloneSignature(signatureList[0]);
	                result.resolvedReturnType = undefined;
	                result.unionSignatures = signatureList;
	            }
	            return result;
	        }
	        function isInferentialContext(mapper) {
	            return mapper && mapper.context;
	        }
	        function isAssignmentTarget(node) {
	            var parent = node.parent;
	            if (parent.kind === 179 && parent.operatorToken.kind === 55 && parent.left === node) {
	                return true;
	            }
	            if (parent.kind === 243) {
	                return isAssignmentTarget(parent.parent);
	            }
	            if (parent.kind === 162) {
	                return isAssignmentTarget(parent);
	            }
	            return false;
	        }
	        function checkSpreadElementExpression(node, contextualMapper) {
	            var arrayOrIterableType = checkExpressionCached(node.expression, contextualMapper);
	            return checkIteratedTypeOrElementType(arrayOrIterableType, node.expression, false);
	        }
	        function checkArrayLiteral(node, contextualMapper) {
	            var elements = node.elements;
	            if (!elements.length) {
	                return createArrayType(undefinedType);
	            }
	            var hasSpreadElement = false;
	            var elementTypes = [];
	            var inDestructuringPattern = isAssignmentTarget(node);
	            for (var _i = 0; _i < elements.length; _i++) {
	                var e = elements[_i];
	                if (inDestructuringPattern && e.kind === 183) {
	                    var restArrayType = checkExpression(e.expression, contextualMapper);
	                    var restElementType = getIndexTypeOfType(restArrayType, 1) ||
	                        (languageVersion >= 2 ? getElementTypeOfIterable(restArrayType, undefined) : undefined);
	                    if (restElementType) {
	                        elementTypes.push(restElementType);
	                    }
	                }
	                else {
	                    var type = checkExpression(e, contextualMapper);
	                    elementTypes.push(type);
	                }
	                hasSpreadElement = hasSpreadElement || e.kind === 183;
	            }
	            if (!hasSpreadElement) {
	                var contextualType = getContextualType(node);
	                if (contextualType && contextualTypeIsTupleLikeType(contextualType) || inDestructuringPattern) {
	                    return createTupleType(elementTypes);
	                }
	            }
	            return createArrayType(getUnionType(elementTypes));
	        }
	        function isNumericName(name) {
	            return name.kind === 134 ? isNumericComputedName(name) : isNumericLiteralName(name.text);
	        }
	        function isNumericComputedName(name) {
	            return isTypeAnyOrAllConstituentTypesHaveKind(checkComputedPropertyName(name), 132);
	        }
	        function isTypeAnyOrAllConstituentTypesHaveKind(type, kind) {
	            return isTypeAny(type) || allConstituentTypesHaveKind(type, kind);
	        }
	        function isNumericLiteralName(name) {
	            return (+name).toString() === name;
	        }
	        function checkComputedPropertyName(node) {
	            var links = getNodeLinks(node.expression);
	            if (!links.resolvedType) {
	                links.resolvedType = checkExpression(node.expression);
	                if (!isTypeAnyOrAllConstituentTypesHaveKind(links.resolvedType, 132 | 258 | 16777216)) {
	                    error(node, ts.Diagnostics.A_computed_property_name_must_be_of_type_string_number_symbol_or_any);
	                }
	                else {
	                    checkThatExpressionIsProperSymbolReference(node.expression, links.resolvedType, true);
	                }
	            }
	            return links.resolvedType;
	        }
	        function checkObjectLiteral(node, contextualMapper) {
	            checkGrammarObjectLiteralExpression(node);
	            var propertiesTable = {};
	            var propertiesArray = [];
	            var contextualType = getContextualType(node);
	            var typeFlags = 0;
	            for (var _i = 0, _a = node.properties; _i < _a.length; _i++) {
	                var memberDecl = _a[_i];
	                var member = memberDecl.symbol;
	                if (memberDecl.kind === 243 ||
	                    memberDecl.kind === 244 ||
	                    ts.isObjectLiteralMethod(memberDecl)) {
	                    var type = void 0;
	                    if (memberDecl.kind === 243) {
	                        type = checkPropertyAssignment(memberDecl, contextualMapper);
	                    }
	                    else if (memberDecl.kind === 141) {
	                        type = checkObjectLiteralMethod(memberDecl, contextualMapper);
	                    }
	                    else {
	                        ts.Debug.assert(memberDecl.kind === 244);
	                        type = checkExpression(memberDecl.name, contextualMapper);
	                    }
	                    typeFlags |= type.flags;
	                    var prop = createSymbol(4 | 67108864 | member.flags, member.name);
	                    prop.declarations = member.declarations;
	                    prop.parent = member.parent;
	                    if (member.valueDeclaration) {
	                        prop.valueDeclaration = member.valueDeclaration;
	                    }
	                    prop.type = type;
	                    prop.target = member;
	                    member = prop;
	                }
	                else {
	                    ts.Debug.assert(memberDecl.kind === 143 || memberDecl.kind === 144);
	                    checkAccessorDeclaration(memberDecl);
	                }
	                if (!ts.hasDynamicName(memberDecl)) {
	                    propertiesTable[member.name] = member;
	                }
	                propertiesArray.push(member);
	            }
	            var stringIndexType = getIndexType(0);
	            var numberIndexType = getIndexType(1);
	            var result = createAnonymousType(node.symbol, propertiesTable, emptyArray, emptyArray, stringIndexType, numberIndexType);
	            var freshObjectLiteralFlag = compilerOptions.suppressExcessPropertyErrors ? 0 : 1048576;
	            result.flags |= 524288 | 4194304 | freshObjectLiteralFlag | (typeFlags & 14680064);
	            return result;
	            function getIndexType(kind) {
	                if (contextualType && contextualTypeHasIndexSignature(contextualType, kind)) {
	                    var propTypes = [];
	                    for (var i = 0; i < propertiesArray.length; i++) {
	                        var propertyDecl = node.properties[i];
	                        if (kind === 0 || isNumericName(propertyDecl.name)) {
	                            var type = getTypeOfSymbol(propertiesArray[i]);
	                            if (!ts.contains(propTypes, type)) {
	                                propTypes.push(type);
	                            }
	                        }
	                    }
	                    var result_1 = propTypes.length ? getUnionType(propTypes) : undefinedType;
	                    typeFlags |= result_1.flags;
	                    return result_1;
	                }
	                return undefined;
	            }
	        }
	        function checkJsxSelfClosingElement(node) {
	            checkJsxOpeningLikeElement(node);
	            return jsxElementType || anyType;
	        }
	        function tagNamesAreEquivalent(lhs, rhs) {
	            if (lhs.kind !== rhs.kind) {
	                return false;
	            }
	            if (lhs.kind === 67) {
	                return lhs.text === rhs.text;
	            }
	            return lhs.right.text === rhs.right.text &&
	                tagNamesAreEquivalent(lhs.left, rhs.left);
	        }
	        function checkJsxElement(node) {
	            checkJsxOpeningLikeElement(node.openingElement);
	            if (!tagNamesAreEquivalent(node.openingElement.tagName, node.closingElement.tagName)) {
	                error(node.closingElement, ts.Diagnostics.Expected_corresponding_JSX_closing_tag_for_0, ts.getTextOfNode(node.openingElement.tagName));
	            }
	            else {
	                getJsxElementTagSymbol(node.closingElement);
	            }
	            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
	                var child = _a[_i];
	                switch (child.kind) {
	                    case 238:
	                        checkJsxExpression(child);
	                        break;
	                    case 231:
	                        checkJsxElement(child);
	                        break;
	                    case 232:
	                        checkJsxSelfClosingElement(child);
	                        break;
	                    default:
	                        ts.Debug.assert(child.kind === 234);
	                }
	            }
	            return jsxElementType || anyType;
	        }
	        function isUnhyphenatedJsxName(name) {
	            return name.indexOf("-") < 0;
	        }
	        function isJsxIntrinsicIdentifier(tagName) {
	            if (tagName.kind === 133) {
	                return false;
	            }
	            else {
	                return ts.isIntrinsicJsxName(tagName.text);
	            }
	        }
	        function checkJsxAttribute(node, elementAttributesType, nameTable) {
	            var correspondingPropType = undefined;
	            if (elementAttributesType === emptyObjectType && isUnhyphenatedJsxName(node.name.text)) {
	                error(node.parent, ts.Diagnostics.JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property, getJsxElementPropertiesName());
	            }
	            else if (elementAttributesType && !isTypeAny(elementAttributesType)) {
	                var correspondingPropSymbol = getPropertyOfType(elementAttributesType, node.name.text);
	                correspondingPropType = correspondingPropSymbol && getTypeOfSymbol(correspondingPropSymbol);
	                if (isUnhyphenatedJsxName(node.name.text)) {
	                    var indexerType = getIndexTypeOfType(elementAttributesType, 0);
	                    if (indexerType) {
	                        correspondingPropType = indexerType;
	                    }
	                    else {
	                        if (!correspondingPropType) {
	                            error(node.name, ts.Diagnostics.Property_0_does_not_exist_on_type_1, node.name.text, typeToString(elementAttributesType));
	                            return unknownType;
	                        }
	                    }
	                }
	            }
	            var exprType;
	            if (node.initializer) {
	                exprType = checkExpression(node.initializer);
	            }
	            else {
	                exprType = booleanType;
	            }
	            if (correspondingPropType) {
	                checkTypeAssignableTo(exprType, correspondingPropType, node);
	            }
	            nameTable[node.name.text] = true;
	            return exprType;
	        }
	        function checkJsxSpreadAttribute(node, elementAttributesType, nameTable) {
	            var type = checkExpression(node.expression);
	            var props = getPropertiesOfType(type);
	            for (var _i = 0; _i < props.length; _i++) {
	                var prop = props[_i];
	                if (!nameTable[prop.name]) {
	                    var targetPropSym = getPropertyOfType(elementAttributesType, prop.name);
	                    if (targetPropSym) {
	                        var msg = ts.chainDiagnosticMessages(undefined, ts.Diagnostics.Property_0_of_JSX_spread_attribute_is_not_assignable_to_target_property, prop.name);
	                        checkTypeAssignableTo(getTypeOfSymbol(prop), getTypeOfSymbol(targetPropSym), node, undefined, msg);
	                    }
	                    nameTable[prop.name] = true;
	                }
	            }
	            return type;
	        }
	        function getJsxIntrinsicElementsType() {
	            if (!jsxIntrinsicElementsType) {
	                jsxIntrinsicElementsType = getExportedTypeFromNamespace(JsxNames.JSX, JsxNames.IntrinsicElements) || unknownType;
	            }
	            return jsxIntrinsicElementsType;
	        }
	        function getJsxElementTagSymbol(node) {
	            var flags = 8;
	            var links = getNodeLinks(node);
	            if (!links.resolvedSymbol) {
	                if (isJsxIntrinsicIdentifier(node.tagName)) {
	                    links.resolvedSymbol = lookupIntrinsicTag(node);
	                }
	                else {
	                    links.resolvedSymbol = lookupClassTag(node);
	                }
	            }
	            return links.resolvedSymbol;
	            function lookupIntrinsicTag(node) {
	                var intrinsicElementsType = getJsxIntrinsicElementsType();
	                if (intrinsicElementsType !== unknownType) {
	                    var intrinsicProp = getPropertyOfType(intrinsicElementsType, node.tagName.text);
	                    if (intrinsicProp) {
	                        links.jsxFlags |= 1;
	                        return intrinsicProp;
	                    }
	                    var indexSignatureType = getIndexTypeOfType(intrinsicElementsType, 0);
	                    if (indexSignatureType) {
	                        links.jsxFlags |= 2;
	                        return intrinsicElementsType.symbol;
	                    }
	                    error(node, ts.Diagnostics.Property_0_does_not_exist_on_type_1, node.tagName.text, "JSX." + JsxNames.IntrinsicElements);
	                    return unknownSymbol;
	                }
	                else {
	                    if (compilerOptions.noImplicitAny) {
	                        error(node, ts.Diagnostics.JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists, JsxNames.IntrinsicElements);
	                    }
	                }
	            }
	            function lookupClassTag(node) {
	                var valueSymbol = resolveJsxTagName(node);
	                if (valueSymbol && valueSymbol !== unknownSymbol) {
	                    links.jsxFlags |= 4;
	                    getSymbolLinks(valueSymbol).referenced = true;
	                }
	                return valueSymbol || unknownSymbol;
	            }
	            function resolveJsxTagName(node) {
	                if (node.tagName.kind === 67) {
	                    var tag = node.tagName;
	                    var sym = getResolvedSymbol(tag);
	                    return sym.exportSymbol || sym;
	                }
	                else {
	                    return checkQualifiedName(node.tagName).symbol;
	                }
	            }
	        }
	        function getJsxElementInstanceType(node) {
	            ts.Debug.assert(!!(getNodeLinks(node).jsxFlags & 4), "Should not call getJsxElementInstanceType on non-class Element");
	            var classSymbol = getJsxElementTagSymbol(node);
	            if (classSymbol === unknownSymbol) {
	                return anyType;
	            }
	            var valueType = getTypeOfSymbol(classSymbol);
	            if (isTypeAny(valueType)) {
	                return anyType;
	            }
	            var signatures = getSignaturesOfType(valueType, 1);
	            if (signatures.length === 0) {
	                signatures = getSignaturesOfType(valueType, 0);
	                if (signatures.length === 0) {
	                    error(node.tagName, ts.Diagnostics.JSX_element_type_0_does_not_have_any_construct_or_call_signatures, ts.getTextOfNode(node.tagName));
	                    return unknownType;
	                }
	            }
	            var returnType = getUnionType(signatures.map(getReturnTypeOfSignature));
	            var elemClassType = getJsxGlobalElementClassType();
	            if (elemClassType) {
	                checkTypeRelatedTo(returnType, elemClassType, assignableRelation, node, ts.Diagnostics.JSX_element_type_0_is_not_a_constructor_function_for_JSX_elements);
	            }
	            return returnType;
	        }
	        function getJsxElementPropertiesName() {
	            var jsxNamespace = getGlobalSymbol(JsxNames.JSX, 1536, undefined);
	            var attribsPropTypeSym = jsxNamespace && getSymbol(jsxNamespace.exports, JsxNames.ElementAttributesPropertyNameContainer, 793056);
	            var attribPropType = attribsPropTypeSym && getDeclaredTypeOfSymbol(attribsPropTypeSym);
	            var attribProperties = attribPropType && getPropertiesOfType(attribPropType);
	            if (attribProperties) {
	                if (attribProperties.length === 0) {
	                    return "";
	                }
	                else if (attribProperties.length === 1) {
	                    return attribProperties[0].name;
	                }
	                else {
	                    error(attribsPropTypeSym.declarations[0], ts.Diagnostics.The_global_type_JSX_0_may_not_have_more_than_one_property, JsxNames.ElementAttributesPropertyNameContainer);
	                    return undefined;
	                }
	            }
	            else {
	                return undefined;
	            }
	        }
	        function getJsxElementAttributesType(node) {
	            var links = getNodeLinks(node);
	            if (!links.resolvedJsxType) {
	                var sym = getJsxElementTagSymbol(node);
	                if (links.jsxFlags & 4) {
	                    var elemInstanceType = getJsxElementInstanceType(node);
	                    if (isTypeAny(elemInstanceType)) {
	                        return links.resolvedJsxType = elemInstanceType;
	                    }
	                    var propsName = getJsxElementPropertiesName();
	                    if (propsName === undefined) {
	                        return links.resolvedJsxType = anyType;
	                    }
	                    else if (propsName === "") {
	                        return links.resolvedJsxType = elemInstanceType;
	                    }
	                    else {
	                        var attributesType = getTypeOfPropertyOfType(elemInstanceType, propsName);
	                        if (!attributesType) {
	                            return links.resolvedJsxType = emptyObjectType;
	                        }
	                        else if (isTypeAny(attributesType) || (attributesType === unknownType)) {
	                            return links.resolvedJsxType = attributesType;
	                        }
	                        else if (!(attributesType.flags & 80896)) {
	                            error(node.tagName, ts.Diagnostics.JSX_element_attributes_type_0_must_be_an_object_type, typeToString(attributesType));
	                            return links.resolvedJsxType = anyType;
	                        }
	                        else {
	                            return links.resolvedJsxType = attributesType;
	                        }
	                    }
	                }
	                else if (links.jsxFlags & 1) {
	                    return links.resolvedJsxType = getTypeOfSymbol(sym);
	                }
	                else if (links.jsxFlags & 2) {
	                    return links.resolvedJsxType = getIndexTypeOfSymbol(sym, 0);
	                }
	                else {
	                    return links.resolvedJsxType = anyType;
	                }
	            }
	            return links.resolvedJsxType;
	        }
	        function getJsxAttributePropertySymbol(attrib) {
	            var attributesType = getJsxElementAttributesType(attrib.parent);
	            var prop = getPropertyOfType(attributesType, attrib.name.text);
	            return prop || unknownSymbol;
	        }
	        var jsxElementClassType = undefined;
	        function getJsxGlobalElementClassType() {
	            if (!jsxElementClassType) {
	                jsxElementClassType = getExportedTypeFromNamespace(JsxNames.JSX, JsxNames.ElementClass);
	            }
	            return jsxElementClassType;
	        }
	        function getJsxIntrinsicTagNames() {
	            var intrinsics = getJsxIntrinsicElementsType();
	            return intrinsics ? getPropertiesOfType(intrinsics) : emptyArray;
	        }
	        function checkJsxPreconditions(errorNode) {
	            if ((compilerOptions.jsx || 0) === 0) {
	                error(errorNode, ts.Diagnostics.Cannot_use_JSX_unless_the_jsx_flag_is_provided);
	            }
	            if (jsxElementType === undefined) {
	                if (compilerOptions.noImplicitAny) {
	                    error(errorNode, ts.Diagnostics.JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist);
	                }
	            }
	        }
	        function checkJsxOpeningLikeElement(node) {
	            checkGrammarJsxElement(node);
	            checkJsxPreconditions(node);
	            if (compilerOptions.jsx === 2) {
	                var reactSym = resolveName(node.tagName, "React", 107455, ts.Diagnostics.Cannot_find_name_0, "React");
	                if (reactSym) {
	                    getSymbolLinks(reactSym).referenced = true;
	                }
	            }
	            var targetAttributesType = getJsxElementAttributesType(node);
	            var nameTable = {};
	            var sawSpreadedAny = false;
	            for (var i = node.attributes.length - 1; i >= 0; i--) {
	                if (node.attributes[i].kind === 236) {
	                    checkJsxAttribute((node.attributes[i]), targetAttributesType, nameTable);
	                }
	                else {
	                    ts.Debug.assert(node.attributes[i].kind === 237);
	                    var spreadType = checkJsxSpreadAttribute((node.attributes[i]), targetAttributesType, nameTable);
	                    if (isTypeAny(spreadType)) {
	                        sawSpreadedAny = true;
	                    }
	                }
	            }
	            if (targetAttributesType && !sawSpreadedAny) {
	                var targetProperties = getPropertiesOfType(targetAttributesType);
	                for (var i = 0; i < targetProperties.length; i++) {
	                    if (!(targetProperties[i].flags & 536870912) &&
	                        nameTable[targetProperties[i].name] === undefined) {
	                        error(node, ts.Diagnostics.Property_0_is_missing_in_type_1, targetProperties[i].name, typeToString(targetAttributesType));
	                    }
	                }
	            }
	        }
	        function checkJsxExpression(node) {
	            if (node.expression) {
	                return checkExpression(node.expression);
	            }
	            else {
	                return unknownType;
	            }
	        }
	        function getDeclarationKindFromSymbol(s) {
	            return s.valueDeclaration ? s.valueDeclaration.kind : 139;
	        }
	        function getDeclarationFlagsFromSymbol(s) {
	            return s.valueDeclaration ? ts.getCombinedNodeFlags(s.valueDeclaration) : s.flags & 134217728 ? 16 | 128 : 0;
	        }
	        function checkClassPropertyAccess(node, left, type, prop) {
	            var flags = getDeclarationFlagsFromSymbol(prop);
	            var declaringClass = getDeclaredTypeOfSymbol(prop.parent);
	            if (left.kind === 93) {
	                var errorNode = node.kind === 164 ?
	                    node.name :
	                    node.right;
	                if (getDeclarationKindFromSymbol(prop) !== 141) {
	                    error(errorNode, ts.Diagnostics.Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword);
	                    return false;
	                }
	                if (flags & 256) {
	                    error(errorNode, ts.Diagnostics.Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression, symbolToString(prop), typeToString(declaringClass));
	                    return false;
	                }
	            }
	            if (!(flags & (32 | 64))) {
	                return true;
	            }
	            var enclosingClassDeclaration = ts.getContainingClass(node);
	            var enclosingClass = enclosingClassDeclaration ? getDeclaredTypeOfSymbol(getSymbolOfNode(enclosingClassDeclaration)) : undefined;
	            if (flags & 32) {
	                if (declaringClass !== enclosingClass) {
	                    error(node, ts.Diagnostics.Property_0_is_private_and_only_accessible_within_class_1, symbolToString(prop), typeToString(declaringClass));
	                    return false;
	                }
	                return true;
	            }
	            if (left.kind === 93) {
	                return true;
	            }
	            if (!enclosingClass || !hasBaseType(enclosingClass, declaringClass)) {
	                error(node, ts.Diagnostics.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses, symbolToString(prop), typeToString(declaringClass));
	                return false;
	            }
	            if (flags & 128) {
	                return true;
	            }
	            if (!(getTargetType(type).flags & (1024 | 2048) && hasBaseType(type, enclosingClass))) {
	                error(node, ts.Diagnostics.Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1, symbolToString(prop), typeToString(enclosingClass));
	                return false;
	            }
	            return true;
	        }
	        function checkPropertyAccessExpression(node) {
	            return checkPropertyAccessExpressionOrQualifiedName(node, node.expression, node.name);
	        }
	        function checkQualifiedName(node) {
	            return checkPropertyAccessExpressionOrQualifiedName(node, node.left, node.right);
	        }
	        function checkPropertyAccessExpressionOrQualifiedName(node, left, right) {
	            var type = checkExpression(left);
	            if (isTypeAny(type)) {
	                return type;
	            }
	            var apparentType = getApparentType(getWidenedType(type));
	            if (apparentType === unknownType) {
	                return unknownType;
	            }
	            var prop = getPropertyOfType(apparentType, right.text);
	            if (!prop) {
	                if (right.text) {
	                    error(right, ts.Diagnostics.Property_0_does_not_exist_on_type_1, ts.declarationNameToString(right), typeToString(type));
	                }
	                return unknownType;
	            }
	            getNodeLinks(node).resolvedSymbol = prop;
	            if (prop.parent && prop.parent.flags & 32) {
	                checkClassPropertyAccess(node, left, type, prop);
	            }
	            return getTypeOfSymbol(prop);
	        }
	        function isValidPropertyAccess(node, propertyName) {
	            var left = node.kind === 164
	                ? node.expression
	                : node.left;
	            var type = checkExpression(left);
	            if (type !== unknownType && !isTypeAny(type)) {
	                var prop = getPropertyOfType(getWidenedType(type), propertyName);
	                if (prop && prop.parent && prop.parent.flags & 32) {
	                    return checkClassPropertyAccess(node, left, type, prop);
	                }
	            }
	            return true;
	        }
	        function checkIndexedAccess(node) {
	            if (!node.argumentExpression) {
	                var sourceFile = getSourceFile(node);
	                if (node.parent.kind === 167 && node.parent.expression === node) {
	                    var start = ts.skipTrivia(sourceFile.text, node.expression.end);
	                    var end = node.end;
	                    grammarErrorAtPos(sourceFile, start, end - start, ts.Diagnostics.new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead);
	                }
	                else {
	                    var start = node.end - "]".length;
	                    var end = node.end;
	                    grammarErrorAtPos(sourceFile, start, end - start, ts.Diagnostics.Expression_expected);
	                }
	            }
	            var objectType = getApparentType(checkExpression(node.expression));
	            var indexType = node.argumentExpression ? checkExpression(node.argumentExpression) : unknownType;
	            if (objectType === unknownType) {
	                return unknownType;
	            }
	            var isConstEnum = isConstEnumObjectType(objectType);
	            if (isConstEnum &&
	                (!node.argumentExpression || node.argumentExpression.kind !== 9)) {
	                error(node.argumentExpression, ts.Diagnostics.A_const_enum_member_can_only_be_accessed_using_a_string_literal);
	                return unknownType;
	            }
	            if (node.argumentExpression) {
	                var name_11 = getPropertyNameForIndexedAccess(node.argumentExpression, indexType);
	                if (name_11 !== undefined) {
	                    var prop = getPropertyOfType(objectType, name_11);
	                    if (prop) {
	                        getNodeLinks(node).resolvedSymbol = prop;
	                        return getTypeOfSymbol(prop);
	                    }
	                    else if (isConstEnum) {
	                        error(node.argumentExpression, ts.Diagnostics.Property_0_does_not_exist_on_const_enum_1, name_11, symbolToString(objectType.symbol));
	                        return unknownType;
	                    }
	                }
	            }
	            if (isTypeAnyOrAllConstituentTypesHaveKind(indexType, 258 | 132 | 16777216)) {
	                if (isTypeAnyOrAllConstituentTypesHaveKind(indexType, 132)) {
	                    var numberIndexType = getIndexTypeOfType(objectType, 1);
	                    if (numberIndexType) {
	                        return numberIndexType;
	                    }
	                }
	                var stringIndexType = getIndexTypeOfType(objectType, 0);
	                if (stringIndexType) {
	                    return stringIndexType;
	                }
	                if (compilerOptions.noImplicitAny && !compilerOptions.suppressImplicitAnyIndexErrors && !isTypeAny(objectType)) {
	                    error(node, ts.Diagnostics.Index_signature_of_object_type_implicitly_has_an_any_type);
	                }
	                return anyType;
	            }
	            error(node, ts.Diagnostics.An_index_expression_argument_must_be_of_type_string_number_symbol_or_any);
	            return unknownType;
	        }
	        function getPropertyNameForIndexedAccess(indexArgumentExpression, indexArgumentType) {
	            if (indexArgumentExpression.kind === 9 || indexArgumentExpression.kind === 8) {
	                return indexArgumentExpression.text;
	            }
	            if (checkThatExpressionIsProperSymbolReference(indexArgumentExpression, indexArgumentType, false)) {
	                var rightHandSideName = indexArgumentExpression.name.text;
	                return ts.getPropertyNameForKnownSymbolName(rightHandSideName);
	            }
	            return undefined;
	        }
	        function checkThatExpressionIsProperSymbolReference(expression, expressionType, reportError) {
	            if (expressionType === unknownType) {
	                return false;
	            }
	            if (!ts.isWellKnownSymbolSyntactically(expression)) {
	                return false;
	            }
	            if ((expressionType.flags & 16777216) === 0) {
	                if (reportError) {
	                    error(expression, ts.Diagnostics.A_computed_property_name_of_the_form_0_must_be_of_type_symbol, ts.getTextOfNode(expression));
	                }
	                return false;
	            }
	            var leftHandSide = expression.expression;
	            var leftHandSideSymbol = getResolvedSymbol(leftHandSide);
	            if (!leftHandSideSymbol) {
	                return false;
	            }
	            var globalESSymbol = getGlobalESSymbolConstructorSymbol();
	            if (!globalESSymbol) {
	                return false;
	            }
	            if (leftHandSideSymbol !== globalESSymbol) {
	                if (reportError) {
	                    error(leftHandSide, ts.Diagnostics.Symbol_reference_does_not_refer_to_the_global_Symbol_constructor_object);
	                }
	                return false;
	            }
	            return true;
	        }
	        function resolveUntypedCall(node) {
	            if (node.kind === 168) {
	                checkExpression(node.template);
	            }
	            else if (node.kind !== 137) {
	                ts.forEach(node.arguments, function (argument) {
	                    checkExpression(argument);
	                });
	            }
	            return anySignature;
	        }
	        function resolveErrorCall(node) {
	            resolveUntypedCall(node);
	            return unknownSignature;
	        }
	        function reorderCandidates(signatures, result) {
	            var lastParent;
	            var lastSymbol;
	            var cutoffIndex = 0;
	            var index;
	            var specializedIndex = -1;
	            var spliceIndex;
	            ts.Debug.assert(!result.length);
	            for (var _i = 0; _i < signatures.length; _i++) {
	                var signature = signatures[_i];
	                var symbol = signature.declaration && getSymbolOfNode(signature.declaration);
	                var parent_5 = signature.declaration && signature.declaration.parent;
	                if (!lastSymbol || symbol === lastSymbol) {
	                    if (lastParent && parent_5 === lastParent) {
	                        index++;
	                    }
	                    else {
	                        lastParent = parent_5;
	                        index = cutoffIndex;
	                    }
	                }
	                else {
	                    index = cutoffIndex = result.length;
	                    lastParent = parent_5;
	                }
	                lastSymbol = symbol;
	                if (signature.hasStringLiterals) {
	                    specializedIndex++;
	                    spliceIndex = specializedIndex;
	                    cutoffIndex++;
	                }
	                else {
	                    spliceIndex = index;
	                }
	                result.splice(spliceIndex, 0, signature);
	            }
	        }
	        function getSpreadArgumentIndex(args) {
	            for (var i = 0; i < args.length; i++) {
	                var arg = args[i];
	                if (arg && arg.kind === 183) {
	                    return i;
	                }
	            }
	            return -1;
	        }
	        function hasCorrectArity(node, args, signature) {
	            var adjustedArgCount;
	            var typeArguments;
	            var callIsIncomplete;
	            var isDecorator;
	            var spreadArgIndex = -1;
	            if (node.kind === 168) {
	                var tagExpression = node;
	                adjustedArgCount = args.length;
	                typeArguments = undefined;
	                if (tagExpression.template.kind === 181) {
	                    var templateExpression = tagExpression.template;
	                    var lastSpan = ts.lastOrUndefined(templateExpression.templateSpans);
	                    ts.Debug.assert(lastSpan !== undefined);
	                    callIsIncomplete = ts.nodeIsMissing(lastSpan.literal) || !!lastSpan.literal.isUnterminated;
	                }
	                else {
	                    var templateLiteral = tagExpression.template;
	                    ts.Debug.assert(templateLiteral.kind === 11);
	                    callIsIncomplete = !!templateLiteral.isUnterminated;
	                }
	            }
	            else if (node.kind === 137) {
	                isDecorator = true;
	                typeArguments = undefined;
	                adjustedArgCount = getEffectiveArgumentCount(node, undefined, signature);
	            }
	            else {
	                var callExpression = node;
	                if (!callExpression.arguments) {
	                    ts.Debug.assert(callExpression.kind === 167);
	                    return signature.minArgumentCount === 0;
	                }
	                adjustedArgCount = callExpression.arguments.hasTrailingComma ? args.length + 1 : args.length;
	                callIsIncomplete = callExpression.arguments.end === callExpression.end;
	                typeArguments = callExpression.typeArguments;
	                spreadArgIndex = getSpreadArgumentIndex(args);
	            }
	            var hasRightNumberOfTypeArgs = !typeArguments ||
	                (signature.typeParameters && typeArguments.length === signature.typeParameters.length);
	            if (!hasRightNumberOfTypeArgs) {
	                return false;
	            }
	            if (spreadArgIndex >= 0) {
	                return signature.hasRestParameter && spreadArgIndex >= signature.parameters.length - 1;
	            }
	            if (!signature.hasRestParameter && adjustedArgCount > signature.parameters.length) {
	                return false;
	            }
	            var hasEnoughArguments = adjustedArgCount >= signature.minArgumentCount;
	            return callIsIncomplete || hasEnoughArguments;
	        }
	        function getSingleCallSignature(type) {
	            if (type.flags & 80896) {
	                var resolved = resolveStructuredTypeMembers(type);
	                if (resolved.callSignatures.length === 1 && resolved.constructSignatures.length === 0 &&
	                    resolved.properties.length === 0 && !resolved.stringIndexType && !resolved.numberIndexType) {
	                    return resolved.callSignatures[0];
	                }
	            }
	            return undefined;
	        }
	        function instantiateSignatureInContextOf(signature, contextualSignature, contextualMapper) {
	            var context = createInferenceContext(signature.typeParameters, true);
	            forEachMatchingParameterType(contextualSignature, signature, function (source, target) {
	                inferTypes(context, instantiateType(source, contextualMapper), target);
	            });
	            return getSignatureInstantiation(signature, getInferredTypes(context));
	        }
	        function inferTypeArguments(node, signature, args, excludeArgument, context) {
	            var typeParameters = signature.typeParameters;
	            var inferenceMapper = createInferenceMapper(context);
	            for (var i = 0; i < typeParameters.length; i++) {
	                if (!context.inferences[i].isFixed) {
	                    context.inferredTypes[i] = undefined;
	                }
	            }
	            if (context.failedTypeParameterIndex !== undefined && !context.inferences[context.failedTypeParameterIndex].isFixed) {
	                context.failedTypeParameterIndex = undefined;
	            }
	            var argCount = getEffectiveArgumentCount(node, args, signature);
	            for (var i = 0; i < argCount; i++) {
	                var arg = getEffectiveArgument(node, args, i);
	                if (arg === undefined || arg.kind !== 185) {
	                    var paramType = getTypeAtPosition(signature, i);
	                    var argType = getEffectiveArgumentType(node, i, arg);
	                    if (argType === undefined) {
	                        var mapper = excludeArgument && excludeArgument[i] !== undefined ? identityMapper : inferenceMapper;
	                        argType = checkExpressionWithContextualType(arg, paramType, mapper);
	                    }
	                    inferTypes(context, argType, paramType);
	                }
	            }
	            if (excludeArgument) {
	                for (var i = 0; i < argCount; i++) {
	                    if (excludeArgument[i] === false) {
	                        var arg = args[i];
	                        var paramType = getTypeAtPosition(signature, i);
	                        inferTypes(context, checkExpressionWithContextualType(arg, paramType, inferenceMapper), paramType);
	                    }
	                }
	            }
	            getInferredTypes(context);
	        }
	        function checkTypeArguments(signature, typeArguments, typeArgumentResultTypes, reportErrors, headMessage) {
	            var typeParameters = signature.typeParameters;
	            var typeArgumentsAreAssignable = true;
	            for (var i = 0; i < typeParameters.length; i++) {
	                var typeArgNode = typeArguments[i];
	                var typeArgument = getTypeFromTypeNode(typeArgNode);
	                typeArgumentResultTypes[i] = typeArgument;
	                if (typeArgumentsAreAssignable) {
	                    var constraint = getConstraintOfTypeParameter(typeParameters[i]);
	                    if (constraint) {
	                        var errorInfo = void 0;
	                        var typeArgumentHeadMessage = ts.Diagnostics.Type_0_does_not_satisfy_the_constraint_1;
	                        if (reportErrors && headMessage) {
	                            errorInfo = ts.chainDiagnosticMessages(errorInfo, typeArgumentHeadMessage);
	                            typeArgumentHeadMessage = headMessage;
	                        }
	                        typeArgumentsAreAssignable = checkTypeAssignableTo(typeArgument, constraint, reportErrors ? typeArgNode : undefined, typeArgumentHeadMessage, errorInfo);
	                    }
	                }
	            }
	            return typeArgumentsAreAssignable;
	        }
	        function checkApplicableSignature(node, args, signature, relation, excludeArgument, reportErrors) {
	            var argCount = getEffectiveArgumentCount(node, args, signature);
	            for (var i = 0; i < argCount; i++) {
	                var arg = getEffectiveArgument(node, args, i);
	                if (arg === undefined || arg.kind !== 185) {
	                    var paramType = getTypeAtPosition(signature, i);
	                    var argType = getEffectiveArgumentType(node, i, arg);
	                    if (argType === undefined) {
	                        argType = arg.kind === 9 && !reportErrors
	                            ? getStringLiteralType(arg)
	                            : checkExpressionWithContextualType(arg, paramType, excludeArgument && excludeArgument[i] ? identityMapper : undefined);
	                    }
	                    var errorNode = reportErrors ? getEffectiveArgumentErrorNode(node, i, arg) : undefined;
	                    var headMessage = ts.Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1;
	                    if (!checkTypeRelatedTo(argType, paramType, relation, errorNode, headMessage)) {
	                        return false;
	                    }
	                }
	            }
	            return true;
	        }
	        function getEffectiveCallArguments(node) {
	            var args;
	            if (node.kind === 168) {
	                var template = node.template;
	                args = [undefined];
	                if (template.kind === 181) {
	                    ts.forEach(template.templateSpans, function (span) {
	                        args.push(span.expression);
	                    });
	                }
	            }
	            else if (node.kind === 137) {
	                return undefined;
	            }
	            else {
	                args = node.arguments || emptyArray;
	            }
	            return args;
	        }
	        function getEffectiveArgumentCount(node, args, signature) {
	            if (node.kind === 137) {
	                switch (node.parent.kind) {
	                    case 212:
	                    case 184:
	                        return 1;
	                    case 139:
	                        return 2;
	                    case 141:
	                    case 143:
	                    case 144:
	                        return signature.parameters.length >= 3 ? 3 : 2;
	                    case 136:
	                        return 3;
	                }
	            }
	            else {
	                return args.length;
	            }
	        }
	        function getEffectiveDecoratorFirstArgumentType(node) {
	            switch (node.kind) {
	                case 212:
	                case 184:
	                    var classSymbol = getSymbolOfNode(node);
	                    return getTypeOfSymbol(classSymbol);
	                case 136:
	                    node = node.parent;
	                    if (node.kind === 142) {
	                        var classSymbol_1 = getSymbolOfNode(node);
	                        return getTypeOfSymbol(classSymbol_1);
	                    }
	                case 139:
	                case 141:
	                case 143:
	                case 144:
	                    return getParentTypeOfClassElement(node);
	                default:
	                    ts.Debug.fail("Unsupported decorator target.");
	                    return unknownType;
	            }
	        }
	        function getEffectiveDecoratorSecondArgumentType(node) {
	            switch (node.kind) {
	                case 212:
	                    ts.Debug.fail("Class decorators should not have a second synthetic argument.");
	                    return unknownType;
	                case 136:
	                    node = node.parent;
	                    if (node.kind === 142) {
	                        return anyType;
	                    }
	                case 139:
	                case 141:
	                case 143:
	                case 144:
	                    var element = node;
	                    switch (element.name.kind) {
	                        case 67:
	                        case 8:
	                        case 9:
	                            return getStringLiteralType(element.name);
	                        case 134:
	                            var nameType = checkComputedPropertyName(element.name);
	                            if (allConstituentTypesHaveKind(nameType, 16777216)) {
	                                return nameType;
	                            }
	                            else {
	                                return stringType;
	                            }
	                        default:
	                            ts.Debug.fail("Unsupported property name.");
	                            return unknownType;
	                    }
	                default:
	                    ts.Debug.fail("Unsupported decorator target.");
	                    return unknownType;
	            }
	        }
	        function getEffectiveDecoratorThirdArgumentType(node) {
	            switch (node.kind) {
	                case 212:
	                    ts.Debug.fail("Class decorators should not have a third synthetic argument.");
	                    return unknownType;
	                case 136:
	                    return numberType;
	                case 139:
	                    ts.Debug.fail("Property decorators should not have a third synthetic argument.");
	                    return unknownType;
	                case 141:
	                case 143:
	                case 144:
	                    var propertyType = getTypeOfNode(node);
	                    return createTypedPropertyDescriptorType(propertyType);
	                default:
	                    ts.Debug.fail("Unsupported decorator target.");
	                    return unknownType;
	            }
	        }
	        function getEffectiveDecoratorArgumentType(node, argIndex) {
	            if (argIndex === 0) {
	                return getEffectiveDecoratorFirstArgumentType(node.parent);
	            }
	            else if (argIndex === 1) {
	                return getEffectiveDecoratorSecondArgumentType(node.parent);
	            }
	            else if (argIndex === 2) {
	                return getEffectiveDecoratorThirdArgumentType(node.parent);
	            }
	            ts.Debug.fail("Decorators should not have a fourth synthetic argument.");
	            return unknownType;
	        }
	        function getEffectiveArgumentType(node, argIndex, arg) {
	            if (node.kind === 137) {
	                return getEffectiveDecoratorArgumentType(node, argIndex);
	            }
	            else if (argIndex === 0 && node.kind === 168) {
	                return globalTemplateStringsArrayType;
	            }
	            return undefined;
	        }
	        function getEffectiveArgument(node, args, argIndex) {
	            if (node.kind === 137 ||
	                (argIndex === 0 && node.kind === 168)) {
	                return undefined;
	            }
	            return args[argIndex];
	        }
	        function getEffectiveArgumentErrorNode(node, argIndex, arg) {
	            if (node.kind === 137) {
	                return node.expression;
	            }
	            else if (argIndex === 0 && node.kind === 168) {
	                return node.template;
	            }
	            else {
	                return arg;
	            }
	        }
	        function resolveCall(node, signatures, candidatesOutArray, headMessage) {
	            var isTaggedTemplate = node.kind === 168;
	            var isDecorator = node.kind === 137;
	            var typeArguments;
	            if (!isTaggedTemplate && !isDecorator) {
	                typeArguments = node.typeArguments;
	                if (node.expression.kind !== 93) {
	                    ts.forEach(typeArguments, checkSourceElement);
	                }
	            }
	            var candidates = candidatesOutArray || [];
	            reorderCandidates(signatures, candidates);
	            if (!candidates.length) {
	                reportError(ts.Diagnostics.Supplied_parameters_do_not_match_any_signature_of_call_target);
	                return resolveErrorCall(node);
	            }
	            var args = getEffectiveCallArguments(node);
	            var excludeArgument;
	            if (!isDecorator) {
	                for (var i = isTaggedTemplate ? 1 : 0; i < args.length; i++) {
	                    if (isContextSensitive(args[i])) {
	                        if (!excludeArgument) {
	                            excludeArgument = new Array(args.length);
	                        }
	                        excludeArgument[i] = true;
	                    }
	                }
	            }
	            var candidateForArgumentError;
	            var candidateForTypeArgumentError;
	            var resultOfFailedInference;
	            var result;
	            if (candidates.length > 1) {
	                result = chooseOverload(candidates, subtypeRelation);
	            }
	            if (!result) {
	                candidateForArgumentError = undefined;
	                candidateForTypeArgumentError = undefined;
	                resultOfFailedInference = undefined;
	                result = chooseOverload(candidates, assignableRelation);
	            }
	            if (result) {
	                return result;
	            }
	            if (candidateForArgumentError) {
	                checkApplicableSignature(node, args, candidateForArgumentError, assignableRelation, undefined, true);
	            }
	            else if (candidateForTypeArgumentError) {
	                if (!isTaggedTemplate && !isDecorator && typeArguments) {
	                    checkTypeArguments(candidateForTypeArgumentError, node.typeArguments, [], true, headMessage);
	                }
	                else {
	                    ts.Debug.assert(resultOfFailedInference.failedTypeParameterIndex >= 0);
	                    var failedTypeParameter = candidateForTypeArgumentError.typeParameters[resultOfFailedInference.failedTypeParameterIndex];
	                    var inferenceCandidates = getInferenceCandidates(resultOfFailedInference, resultOfFailedInference.failedTypeParameterIndex);
	                    var diagnosticChainHead = ts.chainDiagnosticMessages(undefined, ts.Diagnostics.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly, typeToString(failedTypeParameter));
	                    if (headMessage) {
	                        diagnosticChainHead = ts.chainDiagnosticMessages(diagnosticChainHead, headMessage);
	                    }
	                    reportNoCommonSupertypeError(inferenceCandidates, node.expression || node.tag, diagnosticChainHead);
	                }
	            }
	            else {
	                reportError(ts.Diagnostics.Supplied_parameters_do_not_match_any_signature_of_call_target);
	            }
	            if (!produceDiagnostics) {
	                for (var _i = 0; _i < candidates.length; _i++) {
	                    var candidate = candidates[_i];
	                    if (hasCorrectArity(node, args, candidate)) {
	                        if (candidate.typeParameters && typeArguments) {
	                            candidate = getSignatureInstantiation(candidate, ts.map(typeArguments, getTypeFromTypeNode));
	                        }
	                        return candidate;
	                    }
	                }
	            }
	            return resolveErrorCall(node);
	            function reportError(message, arg0, arg1, arg2) {
	                var errorInfo;
	                errorInfo = ts.chainDiagnosticMessages(errorInfo, message, arg0, arg1, arg2);
	                if (headMessage) {
	                    errorInfo = ts.chainDiagnosticMessages(errorInfo, headMessage);
	                }
	                diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(node, errorInfo));
	            }
	            function chooseOverload(candidates, relation) {
	                for (var _i = 0; _i < candidates.length; _i++) {
	                    var originalCandidate = candidates[_i];
	                    if (!hasCorrectArity(node, args, originalCandidate)) {
	                        continue;
	                    }
	                    var candidate = void 0;
	                    var typeArgumentsAreValid = void 0;
	                    var inferenceContext = originalCandidate.typeParameters
	                        ? createInferenceContext(originalCandidate.typeParameters, false)
	                        : undefined;
	                    while (true) {
	                        candidate = originalCandidate;
	                        if (candidate.typeParameters) {
	                            var typeArgumentTypes = void 0;
	                            if (typeArguments) {
	                                typeArgumentTypes = new Array(candidate.typeParameters.length);
	                                typeArgumentsAreValid = checkTypeArguments(candidate, typeArguments, typeArgumentTypes, false);
	                            }
	                            else {
	                                inferTypeArguments(node, candidate, args, excludeArgument, inferenceContext);
	                                typeArgumentsAreValid = inferenceContext.failedTypeParameterIndex === undefined;
	                                typeArgumentTypes = inferenceContext.inferredTypes;
	                            }
	                            if (!typeArgumentsAreValid) {
	                                break;
	                            }
	                            candidate = getSignatureInstantiation(candidate, typeArgumentTypes);
	                        }
	                        if (!checkApplicableSignature(node, args, candidate, relation, excludeArgument, false)) {
	                            break;
	                        }
	                        var index = excludeArgument ? ts.indexOf(excludeArgument, true) : -1;
	                        if (index < 0) {
	                            return candidate;
	                        }
	                        excludeArgument[index] = false;
	                    }
	                    if (originalCandidate.typeParameters) {
	                        var instantiatedCandidate = candidate;
	                        if (typeArgumentsAreValid) {
	                            candidateForArgumentError = instantiatedCandidate;
	                        }
	                        else {
	                            candidateForTypeArgumentError = originalCandidate;
	                            if (!typeArguments) {
	                                resultOfFailedInference = inferenceContext;
	                            }
	                        }
	                    }
	                    else {
	                        ts.Debug.assert(originalCandidate === candidate);
	                        candidateForArgumentError = originalCandidate;
	                    }
	                }
	                return undefined;
	            }
	        }
	        function resolveCallExpression(node, candidatesOutArray) {
	            if (node.expression.kind === 93) {
	                var superType = checkSuperExpression(node.expression);
	                if (superType !== unknownType) {
	                    var baseTypeNode = ts.getClassExtendsHeritageClauseElement(ts.getContainingClass(node));
	                    var baseConstructors = getInstantiatedConstructorsForTypeArguments(superType, baseTypeNode.typeArguments);
	                    return resolveCall(node, baseConstructors, candidatesOutArray);
	                }
	                return resolveUntypedCall(node);
	            }
	            var funcType = checkExpression(node.expression);
	            var apparentType = getApparentType(funcType);
	            if (apparentType === unknownType) {
	                return resolveErrorCall(node);
	            }
	            var callSignatures = getSignaturesOfType(apparentType, 0);
	            var constructSignatures = getSignaturesOfType(apparentType, 1);
	            if (isTypeAny(funcType) || (!callSignatures.length && !constructSignatures.length && !(funcType.flags & 16384) && isTypeAssignableTo(funcType, globalFunctionType))) {
	                if (funcType !== unknownType && node.typeArguments) {
	                    error(node, ts.Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);
	                }
	                return resolveUntypedCall(node);
	            }
	            if (!callSignatures.length) {
	                if (constructSignatures.length) {
	                    error(node, ts.Diagnostics.Value_of_type_0_is_not_callable_Did_you_mean_to_include_new, typeToString(funcType));
	                }
	                else {
	                    error(node, ts.Diagnostics.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature);
	                }
	                return resolveErrorCall(node);
	            }
	            return resolveCall(node, callSignatures, candidatesOutArray);
	        }
	        function resolveNewExpression(node, candidatesOutArray) {
	            if (node.arguments && languageVersion < 1) {
	                var spreadIndex = getSpreadArgumentIndex(node.arguments);
	                if (spreadIndex >= 0) {
	                    error(node.arguments[spreadIndex], ts.Diagnostics.Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher);
	                }
	            }
	            var expressionType = checkExpression(node.expression);
	            expressionType = getApparentType(expressionType);
	            if (expressionType === unknownType) {
	                return resolveErrorCall(node);
	            }
	            var valueDecl = expressionType.symbol && ts.getDeclarationOfKind(expressionType.symbol, 212);
	            if (valueDecl && valueDecl.flags & 256) {
	                error(node, ts.Diagnostics.Cannot_create_an_instance_of_the_abstract_class_0, ts.declarationNameToString(valueDecl.name));
	                return resolveErrorCall(node);
	            }
	            if (isTypeAny(expressionType)) {
	                if (node.typeArguments) {
	                    error(node, ts.Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);
	                }
	                return resolveUntypedCall(node);
	            }
	            var constructSignatures = getSignaturesOfType(expressionType, 1);
	            if (constructSignatures.length) {
	                return resolveCall(node, constructSignatures, candidatesOutArray);
	            }
	            var callSignatures = getSignaturesOfType(expressionType, 0);
	            if (callSignatures.length) {
	                var signature = resolveCall(node, callSignatures, candidatesOutArray);
	                if (getReturnTypeOfSignature(signature) !== voidType) {
	                    error(node, ts.Diagnostics.Only_a_void_function_can_be_called_with_the_new_keyword);
	                }
	                return signature;
	            }
	            error(node, ts.Diagnostics.Cannot_use_new_with_an_expression_whose_type_lacks_a_call_or_construct_signature);
	            return resolveErrorCall(node);
	        }
	        function resolveTaggedTemplateExpression(node, candidatesOutArray) {
	            var tagType = checkExpression(node.tag);
	            var apparentType = getApparentType(tagType);
	            if (apparentType === unknownType) {
	                return resolveErrorCall(node);
	            }
	            var callSignatures = getSignaturesOfType(apparentType, 0);
	            if (isTypeAny(tagType) || (!callSignatures.length && !(tagType.flags & 16384) && isTypeAssignableTo(tagType, globalFunctionType))) {
	                return resolveUntypedCall(node);
	            }
	            if (!callSignatures.length) {
	                error(node, ts.Diagnostics.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature);
	                return resolveErrorCall(node);
	            }
	            return resolveCall(node, callSignatures, candidatesOutArray);
	        }
	        function getDiagnosticHeadMessageForDecoratorResolution(node) {
	            switch (node.parent.kind) {
	                case 212:
	                case 184:
	                    return ts.Diagnostics.Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression;
	                case 136:
	                    return ts.Diagnostics.Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression;
	                case 139:
	                    return ts.Diagnostics.Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression;
	                case 141:
	                case 143:
	                case 144:
	                    return ts.Diagnostics.Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression;
	            }
	        }
	        function resolveDecorator(node, candidatesOutArray) {
	            var funcType = checkExpression(node.expression);
	            var apparentType = getApparentType(funcType);
	            if (apparentType === unknownType) {
	                return resolveErrorCall(node);
	            }
	            var callSignatures = getSignaturesOfType(apparentType, 0);
	            if (funcType === anyType || (!callSignatures.length && !(funcType.flags & 16384) && isTypeAssignableTo(funcType, globalFunctionType))) {
	                return resolveUntypedCall(node);
	            }
	            var headMessage = getDiagnosticHeadMessageForDecoratorResolution(node);
	            if (!callSignatures.length) {
	                var errorInfo;
	                errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature);
	                errorInfo = ts.chainDiagnosticMessages(errorInfo, headMessage);
	                diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(node, errorInfo));
	                return resolveErrorCall(node);
	            }
	            return resolveCall(node, callSignatures, candidatesOutArray, headMessage);
	        }
	        function getResolvedSignature(node, candidatesOutArray) {
	            var links = getNodeLinks(node);
	            if (!links.resolvedSignature || candidatesOutArray) {
	                links.resolvedSignature = anySignature;
	                if (node.kind === 166) {
	                    links.resolvedSignature = resolveCallExpression(node, candidatesOutArray);
	                }
	                else if (node.kind === 167) {
	                    links.resolvedSignature = resolveNewExpression(node, candidatesOutArray);
	                }
	                else if (node.kind === 168) {
	                    links.resolvedSignature = resolveTaggedTemplateExpression(node, candidatesOutArray);
	                }
	                else if (node.kind === 137) {
	                    links.resolvedSignature = resolveDecorator(node, candidatesOutArray);
	                }
	                else {
	                    ts.Debug.fail("Branch in 'getResolvedSignature' should be unreachable.");
	                }
	            }
	            return links.resolvedSignature;
	        }
	        function checkCallExpression(node) {
	            checkGrammarTypeArguments(node, node.typeArguments) || checkGrammarArguments(node, node.arguments);
	            var signature = getResolvedSignature(node);
	            if (node.expression.kind === 93) {
	                return voidType;
	            }
	            if (node.kind === 167) {
	                var declaration = signature.declaration;
	                if (declaration &&
	                    declaration.kind !== 142 &&
	                    declaration.kind !== 146 &&
	                    declaration.kind !== 151) {
	                    if (compilerOptions.noImplicitAny) {
	                        error(node, ts.Diagnostics.new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type);
	                    }
	                    return anyType;
	                }
	            }
	            return getReturnTypeOfSignature(signature);
	        }
	        function checkTaggedTemplateExpression(node) {
	            return getReturnTypeOfSignature(getResolvedSignature(node));
	        }
	        function checkAssertion(node) {
	            var exprType = getRegularTypeOfObjectLiteral(checkExpression(node.expression));
	            var targetType = getTypeFromTypeNode(node.type);
	            if (produceDiagnostics && targetType !== unknownType) {
	                var widenedType = getWidenedType(exprType);
	                if (!(isTypeAssignableTo(targetType, widenedType))) {
	                    checkTypeAssignableTo(exprType, targetType, node, ts.Diagnostics.Neither_type_0_nor_type_1_is_assignable_to_the_other);
	                }
	            }
	            return targetType;
	        }
	        function getTypeAtPosition(signature, pos) {
	            return signature.hasRestParameter ?
	                pos < signature.parameters.length - 1 ? getTypeOfSymbol(signature.parameters[pos]) : getRestTypeOfSignature(signature) :
	                pos < signature.parameters.length ? getTypeOfSymbol(signature.parameters[pos]) : anyType;
	        }
	        function assignContextualParameterTypes(signature, context, mapper) {
	            var len = signature.parameters.length - (signature.hasRestParameter ? 1 : 0);
	            for (var i = 0; i < len; i++) {
	                var parameter = signature.parameters[i];
	                var contextualParameterType = getTypeAtPosition(context, i);
	                assignTypeToParameterAndFixTypeParameters(parameter, contextualParameterType, mapper);
	            }
	            if (signature.hasRestParameter && context.hasRestParameter && signature.parameters.length >= context.parameters.length) {
	                var parameter = ts.lastOrUndefined(signature.parameters);
	                var contextualParameterType = getTypeOfSymbol(ts.lastOrUndefined(context.parameters));
	                assignTypeToParameterAndFixTypeParameters(parameter, contextualParameterType, mapper);
	            }
	        }
	        function assignTypeToParameterAndFixTypeParameters(parameter, contextualType, mapper) {
	            var links = getSymbolLinks(parameter);
	            if (!links.type) {
	                links.type = instantiateType(contextualType, mapper);
	            }
	            else if (isInferentialContext(mapper)) {
	                inferTypes(mapper.context, links.type, instantiateType(contextualType, mapper));
	            }
	        }
	        function createPromiseType(promisedType) {
	            var globalPromiseType = getGlobalPromiseType();
	            if (globalPromiseType !== emptyGenericType) {
	                promisedType = getAwaitedType(promisedType);
	                return createTypeReference(globalPromiseType, [promisedType]);
	            }
	            return emptyObjectType;
	        }
	        function getReturnTypeFromBody(func, contextualMapper) {
	            var contextualSignature = getContextualSignatureForFunctionLikeDeclaration(func);
	            if (!func.body) {
	                return unknownType;
	            }
	            var isAsync = ts.isAsyncFunctionLike(func);
	            var type;
	            if (func.body.kind !== 190) {
	                type = checkExpressionCached(func.body, contextualMapper);
	                if (isAsync) {
	                    type = checkAwaitedType(type, func, ts.Diagnostics.Return_expression_in_async_function_does_not_have_a_valid_callable_then_member);
	                }
	            }
	            else {
	                var types;
	                var funcIsGenerator = !!func.asteriskToken;
	                if (funcIsGenerator) {
	                    types = checkAndAggregateYieldOperandTypes(func.body, contextualMapper);
	                    if (types.length === 0) {
	                        var iterableIteratorAny = createIterableIteratorType(anyType);
	                        if (compilerOptions.noImplicitAny) {
	                            error(func.asteriskToken, ts.Diagnostics.Generator_implicitly_has_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_type, typeToString(iterableIteratorAny));
	                        }
	                        return iterableIteratorAny;
	                    }
	                }
	                else {
	                    types = checkAndAggregateReturnExpressionTypes(func.body, contextualMapper, isAsync);
	                    if (types.length === 0) {
	                        if (isAsync) {
	                            var promiseType = createPromiseType(voidType);
	                            if (promiseType === emptyObjectType) {
	                                error(func, ts.Diagnostics.An_async_function_or_method_must_have_a_valid_awaitable_return_type);
	                                return unknownType;
	                            }
	                            return promiseType;
	                        }
	                        else {
	                            return voidType;
	                        }
	                    }
	                }
	                type = contextualSignature ? getUnionType(types) : getCommonSupertype(types);
	                if (!type) {
	                    if (funcIsGenerator) {
	                        error(func, ts.Diagnostics.No_best_common_type_exists_among_yield_expressions);
	                        return createIterableIteratorType(unknownType);
	                    }
	                    else {
	                        error(func, ts.Diagnostics.No_best_common_type_exists_among_return_expressions);
	                        return unknownType;
	                    }
	                }
	                if (funcIsGenerator) {
	                    type = createIterableIteratorType(type);
	                }
	            }
	            if (!contextualSignature) {
	                reportErrorsFromWidening(func, type);
	            }
	            var widenedType = getWidenedType(type);
	            if (isAsync) {
	                var promiseType = createPromiseType(widenedType);
	                if (promiseType === emptyObjectType) {
	                    error(func, ts.Diagnostics.An_async_function_or_method_must_have_a_valid_awaitable_return_type);
	                    return unknownType;
	                }
	                return promiseType;
	            }
	            else {
	                return widenedType;
	            }
	        }
	        function checkAndAggregateYieldOperandTypes(body, contextualMapper) {
	            var aggregatedTypes = [];
	            ts.forEachYieldExpression(body, function (yieldExpression) {
	                var expr = yieldExpression.expression;
	                if (expr) {
	                    var type = checkExpressionCached(expr, contextualMapper);
	                    if (yieldExpression.asteriskToken) {
	                        type = checkElementTypeOfIterable(type, yieldExpression.expression);
	                    }
	                    if (!ts.contains(aggregatedTypes, type)) {
	                        aggregatedTypes.push(type);
	                    }
	                }
	            });
	            return aggregatedTypes;
	        }
	        function checkAndAggregateReturnExpressionTypes(body, contextualMapper, isAsync) {
	            var aggregatedTypes = [];
	            ts.forEachReturnStatement(body, function (returnStatement) {
	                var expr = returnStatement.expression;
	                if (expr) {
	                    var type = checkExpressionCached(expr, contextualMapper);
	                    if (isAsync) {
	                        type = checkAwaitedType(type, body.parent, ts.Diagnostics.Return_expression_in_async_function_does_not_have_a_valid_callable_then_member);
	                    }
	                    if (!ts.contains(aggregatedTypes, type)) {
	                        aggregatedTypes.push(type);
	                    }
	                }
	            });
	            return aggregatedTypes;
	        }
	        function bodyContainsAReturnStatement(funcBody) {
	            return ts.forEachReturnStatement(funcBody, function (returnStatement) {
	                return true;
	            });
	        }
	        function bodyContainsSingleThrowStatement(body) {
	            return (body.statements.length === 1) && (body.statements[0].kind === 206);
	        }
	        function checkIfNonVoidFunctionHasReturnExpressionsOrSingleThrowStatment(func, returnType) {
	            if (!produceDiagnostics) {
	                return;
	            }
	            if (returnType === voidType || isTypeAny(returnType)) {
	                return;
	            }
	            if (ts.nodeIsMissing(func.body) || func.body.kind !== 190) {
	                return;
	            }
	            var bodyBlock = func.body;
	            if (bodyContainsAReturnStatement(bodyBlock)) {
	                return;
	            }
	            if (bodyContainsSingleThrowStatement(bodyBlock)) {
	                return;
	            }
	            error(func.type, ts.Diagnostics.A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value_or_consist_of_a_single_throw_statement);
	        }
	        function checkFunctionExpressionOrObjectLiteralMethod(node, contextualMapper) {
	            ts.Debug.assert(node.kind !== 141 || ts.isObjectLiteralMethod(node));
	            var hasGrammarError = checkGrammarFunctionLikeDeclaration(node);
	            if (!hasGrammarError && node.kind === 171) {
	                checkGrammarForGenerator(node);
	            }
	            if (contextualMapper === identityMapper && isContextSensitive(node)) {
	                return anyFunctionType;
	            }
	            var isAsync = ts.isAsyncFunctionLike(node);
	            if (isAsync) {
	                emitAwaiter = true;
	            }
	            var links = getNodeLinks(node);
	            var type = getTypeOfSymbol(node.symbol);
	            var contextSensitive = isContextSensitive(node);
	            var mightFixTypeParameters = contextSensitive && isInferentialContext(contextualMapper);
	            if (mightFixTypeParameters || !(links.flags & 1024)) {
	                var contextualSignature = getContextualSignature(node);
	                var contextChecked = !!(links.flags & 1024);
	                if (mightFixTypeParameters || !contextChecked) {
	                    links.flags |= 1024;
	                    if (contextualSignature) {
	                        var signature = getSignaturesOfType(type, 0)[0];
	                        if (contextSensitive) {
	                            assignContextualParameterTypes(signature, contextualSignature, contextualMapper || identityMapper);
	                        }
	                        if (mightFixTypeParameters || !node.type && !signature.resolvedReturnType) {
	                            var returnType = getReturnTypeFromBody(node, contextualMapper);
	                            if (!signature.resolvedReturnType) {
	                                signature.resolvedReturnType = returnType;
	                            }
	                        }
	                    }
	                    if (!contextChecked) {
	                        checkSignatureDeclaration(node);
	                    }
	                }
	            }
	            if (produceDiagnostics && node.kind !== 141 && node.kind !== 140) {
	                checkCollisionWithCapturedSuperVariable(node, node.name);
	                checkCollisionWithCapturedThisVariable(node, node.name);
	            }
	            return type;
	        }
	        function checkFunctionExpressionOrObjectLiteralMethodBody(node) {
	            ts.Debug.assert(node.kind !== 141 || ts.isObjectLiteralMethod(node));
	            var isAsync = ts.isAsyncFunctionLike(node);
	            if (isAsync) {
	                emitAwaiter = true;
	            }
	            var returnType = node.type && getTypeFromTypeNode(node.type);
	            var promisedType;
	            if (returnType && isAsync) {
	                promisedType = checkAsyncFunctionReturnType(node);
	            }
	            if (returnType && !node.asteriskToken) {
	                checkIfNonVoidFunctionHasReturnExpressionsOrSingleThrowStatment(node, isAsync ? promisedType : returnType);
	            }
	            if (node.body) {
	                if (!node.type) {
	                    getReturnTypeOfSignature(getSignatureFromDeclaration(node));
	                }
	                if (node.body.kind === 190) {
	                    checkSourceElement(node.body);
	                }
	                else {
	                    var exprType = checkExpression(node.body);
	                    if (returnType) {
	                        if (isAsync) {
	                            var awaitedType = checkAwaitedType(exprType, node.body, ts.Diagnostics.Expression_body_for_async_arrow_function_does_not_have_a_valid_callable_then_member);
	                            checkTypeAssignableTo(awaitedType, promisedType, node.body);
	                        }
	                        else {
	                            checkTypeAssignableTo(exprType, returnType, node.body);
	                        }
	                    }
	                    checkFunctionAndClassExpressionBodies(node.body);
	                }
	            }
	        }
	        function checkArithmeticOperandType(operand, type, diagnostic) {
	            if (!isTypeAnyOrAllConstituentTypesHaveKind(type, 132)) {
	                error(operand, diagnostic);
	                return false;
	            }
	            return true;
	        }
	        function checkReferenceExpression(n, invalidReferenceMessage, constantVariableMessage) {
	            function findSymbol(n) {
	                var symbol = getNodeLinks(n).resolvedSymbol;
	                return symbol && getExportSymbolOfValueSymbolIfExported(symbol);
	            }
	            function isReferenceOrErrorExpression(n) {
	                switch (n.kind) {
	                    case 67: {
	                        var symbol = findSymbol(n);
	                        return !symbol || symbol === unknownSymbol || symbol === argumentsSymbol || (symbol.flags & 3) !== 0;
	                    }
	                    case 164: {
	                        var symbol = findSymbol(n);
	                        return !symbol || symbol === unknownSymbol || (symbol.flags & ~8) !== 0;
	                    }
	                    case 165:
	                        return true;
	                    case 170:
	                        return isReferenceOrErrorExpression(n.expression);
	                    default:
	                        return false;
	                }
	            }
	            function isConstVariableReference(n) {
	                switch (n.kind) {
	                    case 67:
	                    case 164: {
	                        var symbol = findSymbol(n);
	                        return symbol && (symbol.flags & 3) !== 0 && (getDeclarationFlagsFromSymbol(symbol) & 32768) !== 0;
	                    }
	                    case 165: {
	                        var index = n.argumentExpression;
	                        var symbol = findSymbol(n.expression);
	                        if (symbol && index && index.kind === 9) {
	                            var name_12 = index.text;
	                            var prop = getPropertyOfType(getTypeOfSymbol(symbol), name_12);
	                            return prop && (prop.flags & 3) !== 0 && (getDeclarationFlagsFromSymbol(prop) & 32768) !== 0;
	                        }
	                        return false;
	                    }
	                    case 170:
	                        return isConstVariableReference(n.expression);
	                    default:
	                        return false;
	                }
	            }
	            if (!isReferenceOrErrorExpression(n)) {
	                error(n, invalidReferenceMessage);
	                return false;
	            }
	            if (isConstVariableReference(n)) {
	                error(n, constantVariableMessage);
	                return false;
	            }
	            return true;
	        }
	        function checkDeleteExpression(node) {
	            checkExpression(node.expression);
	            return booleanType;
	        }
	        function checkTypeOfExpression(node) {
	            checkExpression(node.expression);
	            return stringType;
	        }
	        function checkVoidExpression(node) {
	            checkExpression(node.expression);
	            return undefinedType;
	        }
	        function checkAwaitExpression(node) {
	            if (produceDiagnostics) {
	                if (!(node.parserContextFlags & 8)) {
	                    grammarErrorOnFirstToken(node, ts.Diagnostics.await_expression_is_only_allowed_within_an_async_function);
	                }
	                if (isInParameterInitializerBeforeContainingFunction(node)) {
	                    error(node, ts.Diagnostics.await_expressions_cannot_be_used_in_a_parameter_initializer);
	                }
	            }
	            var operandType = checkExpression(node.expression);
	            return checkAwaitedType(operandType, node);
	        }
	        function checkPrefixUnaryExpression(node) {
	            var operandType = checkExpression(node.operand);
	            switch (node.operator) {
	                case 35:
	                case 36:
	                case 49:
	                    if (someConstituentTypeHasKind(operandType, 16777216)) {
	                        error(node.operand, ts.Diagnostics.The_0_operator_cannot_be_applied_to_type_symbol, ts.tokenToString(node.operator));
	                    }
	                    return numberType;
	                case 48:
	                    return booleanType;
	                case 40:
	                case 41:
	                    var ok = checkArithmeticOperandType(node.operand, operandType, ts.Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type);
	                    if (ok) {
	                        checkReferenceExpression(node.operand, ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer, ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant);
	                    }
	                    return numberType;
	            }
	            return unknownType;
	        }
	        function checkPostfixUnaryExpression(node) {
	            var operandType = checkExpression(node.operand);
	            var ok = checkArithmeticOperandType(node.operand, operandType, ts.Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type);
	            if (ok) {
	                checkReferenceExpression(node.operand, ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer, ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant);
	            }
	            return numberType;
	        }
	        function someConstituentTypeHasKind(type, kind) {
	            if (type.flags & kind) {
	                return true;
	            }
	            if (type.flags & 49152) {
	                var types = type.types;
	                for (var _i = 0; _i < types.length; _i++) {
	                    var current = types[_i];
	                    if (current.flags & kind) {
	                        return true;
	                    }
	                }
	                return false;
	            }
	            return false;
	        }
	        function allConstituentTypesHaveKind(type, kind) {
	            if (type.flags & kind) {
	                return true;
	            }
	            if (type.flags & 49152) {
	                var types = type.types;
	                for (var _i = 0; _i < types.length; _i++) {
	                    var current = types[_i];
	                    if (!(current.flags & kind)) {
	                        return false;
	                    }
	                }
	                return true;
	            }
	            return false;
	        }
	        function isConstEnumObjectType(type) {
	            return type.flags & (80896 | 65536) && type.symbol && isConstEnumSymbol(type.symbol);
	        }
	        function isConstEnumSymbol(symbol) {
	            return (symbol.flags & 128) !== 0;
	        }
	        function checkInstanceOfExpression(node, leftType, rightType) {
	            if (allConstituentTypesHaveKind(leftType, 16777726)) {
	                error(node.left, ts.Diagnostics.The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter);
	            }
	            if (!(isTypeAny(rightType) || isTypeSubtypeOf(rightType, globalFunctionType))) {
	                error(node.right, ts.Diagnostics.The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type);
	            }
	            return booleanType;
	        }
	        function checkInExpression(node, leftType, rightType) {
	            if (!isTypeAnyOrAllConstituentTypesHaveKind(leftType, 258 | 132 | 16777216)) {
	                error(node.left, ts.Diagnostics.The_left_hand_side_of_an_in_expression_must_be_of_type_any_string_number_or_symbol);
	            }
	            if (!isTypeAnyOrAllConstituentTypesHaveKind(rightType, 80896 | 512)) {
	                error(node.right, ts.Diagnostics.The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter);
	            }
	            return booleanType;
	        }
	        function checkObjectLiteralAssignment(node, sourceType, contextualMapper) {
	            var properties = node.properties;
	            for (var _i = 0; _i < properties.length; _i++) {
	                var p = properties[_i];
	                if (p.kind === 243 || p.kind === 244) {
	                    var name_13 = p.name;
	                    var type = isTypeAny(sourceType)
	                        ? sourceType
	                        : getTypeOfPropertyOfType(sourceType, name_13.text) ||
	                            isNumericLiteralName(name_13.text) && getIndexTypeOfType(sourceType, 1) ||
	                            getIndexTypeOfType(sourceType, 0);
	                    if (type) {
	                        checkDestructuringAssignment(p.initializer || name_13, type);
	                    }
	                    else {
	                        error(name_13, ts.Diagnostics.Type_0_has_no_property_1_and_no_string_index_signature, typeToString(sourceType), ts.declarationNameToString(name_13));
	                    }
	                }
	                else {
	                    error(p, ts.Diagnostics.Property_assignment_expected);
	                }
	            }
	            return sourceType;
	        }
	        function checkArrayLiteralAssignment(node, sourceType, contextualMapper) {
	            var elementType = checkIteratedTypeOrElementType(sourceType, node, false) || unknownType;
	            var elements = node.elements;
	            for (var i = 0; i < elements.length; i++) {
	                var e = elements[i];
	                if (e.kind !== 185) {
	                    if (e.kind !== 183) {
	                        var propName = "" + i;
	                        var type = isTypeAny(sourceType)
	                            ? sourceType
	                            : isTupleLikeType(sourceType)
	                                ? getTypeOfPropertyOfType(sourceType, propName)
	                                : elementType;
	                        if (type) {
	                            checkDestructuringAssignment(e, type, contextualMapper);
	                        }
	                        else {
	                            if (isTupleType(sourceType)) {
	                                error(e, ts.Diagnostics.Tuple_type_0_with_length_1_cannot_be_assigned_to_tuple_with_length_2, typeToString(sourceType), sourceType.elementTypes.length, elements.length);
	                            }
	                            else {
	                                error(e, ts.Diagnostics.Type_0_has_no_property_1, typeToString(sourceType), propName);
	                            }
	                        }
	                    }
	                    else {
	                        if (i < elements.length - 1) {
	                            error(e, ts.Diagnostics.A_rest_element_must_be_last_in_an_array_destructuring_pattern);
	                        }
	                        else {
	                            var restExpression = e.expression;
	                            if (restExpression.kind === 179 && restExpression.operatorToken.kind === 55) {
	                                error(restExpression.operatorToken, ts.Diagnostics.A_rest_element_cannot_have_an_initializer);
	                            }
	                            else {
	                                checkDestructuringAssignment(restExpression, createArrayType(elementType), contextualMapper);
	                            }
	                        }
	                    }
	                }
	            }
	            return sourceType;
	        }
	        function checkDestructuringAssignment(target, sourceType, contextualMapper) {
	            if (target.kind === 179 && target.operatorToken.kind === 55) {
	                checkBinaryExpression(target, contextualMapper);
	                target = target.left;
	            }
	            if (target.kind === 163) {
	                return checkObjectLiteralAssignment(target, sourceType, contextualMapper);
	            }
	            if (target.kind === 162) {
	                return checkArrayLiteralAssignment(target, sourceType, contextualMapper);
	            }
	            return checkReferenceAssignment(target, sourceType, contextualMapper);
	        }
	        function checkReferenceAssignment(target, sourceType, contextualMapper) {
	            var targetType = checkExpression(target, contextualMapper);
	            if (checkReferenceExpression(target, ts.Diagnostics.Invalid_left_hand_side_of_assignment_expression, ts.Diagnostics.Left_hand_side_of_assignment_expression_cannot_be_a_constant)) {
	                checkTypeAssignableTo(sourceType, targetType, target, undefined);
	            }
	            return sourceType;
	        }
	        function checkBinaryExpression(node, contextualMapper) {
	            var operator = node.operatorToken.kind;
	            if (operator === 55 && (node.left.kind === 163 || node.left.kind === 162)) {
	                return checkDestructuringAssignment(node.left, checkExpression(node.right, contextualMapper), contextualMapper);
	            }
	            var leftType = checkExpression(node.left, contextualMapper);
	            var rightType = checkExpression(node.right, contextualMapper);
	            switch (operator) {
	                case 37:
	                case 58:
	                case 38:
	                case 59:
	                case 39:
	                case 60:
	                case 36:
	                case 57:
	                case 42:
	                case 61:
	                case 43:
	                case 62:
	                case 44:
	                case 63:
	                case 46:
	                case 65:
	                case 47:
	                case 66:
	                case 45:
	                case 64:
	                    if (leftType.flags & (32 | 64))
	                        leftType = rightType;
	                    if (rightType.flags & (32 | 64))
	                        rightType = leftType;
	                    var suggestedOperator;
	                    if ((leftType.flags & 8) &&
	                        (rightType.flags & 8) &&
	                        (suggestedOperator = getSuggestedBooleanOperator(node.operatorToken.kind)) !== undefined) {
	                        error(node, ts.Diagnostics.The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead, ts.tokenToString(node.operatorToken.kind), ts.tokenToString(suggestedOperator));
	                    }
	                    else {
	                        var leftOk = checkArithmeticOperandType(node.left, leftType, ts.Diagnostics.The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type);
	                        var rightOk = checkArithmeticOperandType(node.right, rightType, ts.Diagnostics.The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type);
	                        if (leftOk && rightOk) {
	                            checkAssignmentOperator(numberType);
	                        }
	                    }
	                    return numberType;
	                case 35:
	                case 56:
	                    if (leftType.flags & (32 | 64))
	                        leftType = rightType;
	                    if (rightType.flags & (32 | 64))
	                        rightType = leftType;
	                    var resultType;
	                    if (allConstituentTypesHaveKind(leftType, 132) && allConstituentTypesHaveKind(rightType, 132)) {
	                        resultType = numberType;
	                    }
	                    else {
	                        if (allConstituentTypesHaveKind(leftType, 258) || allConstituentTypesHaveKind(rightType, 258)) {
	                            resultType = stringType;
	                        }
	                        else if (isTypeAny(leftType) || isTypeAny(rightType)) {
	                            resultType = leftType === unknownType || rightType === unknownType ? unknownType : anyType;
	                        }
	                        if (resultType && !checkForDisallowedESSymbolOperand(operator)) {
	                            return resultType;
	                        }
	                    }
	                    if (!resultType) {
	                        reportOperatorError();
	                        return anyType;
	                    }
	                    if (operator === 56) {
	                        checkAssignmentOperator(resultType);
	                    }
	                    return resultType;
	                case 25:
	                case 27:
	                case 28:
	                case 29:
	                    if (!checkForDisallowedESSymbolOperand(operator)) {
	                        return booleanType;
	                    }
	                case 30:
	                case 31:
	                case 32:
	                case 33:
	                    if (!isTypeAssignableTo(leftType, rightType) && !isTypeAssignableTo(rightType, leftType)) {
	                        reportOperatorError();
	                    }
	                    return booleanType;
	                case 89:
	                    return checkInstanceOfExpression(node, leftType, rightType);
	                case 88:
	                    return checkInExpression(node, leftType, rightType);
	                case 50:
	                    return rightType;
	                case 51:
	                    return getUnionType([leftType, rightType]);
	                case 55:
	                    checkAssignmentOperator(rightType);
	                    return getRegularTypeOfObjectLiteral(rightType);
	                case 24:
	                    return rightType;
	            }
	            function checkForDisallowedESSymbolOperand(operator) {
	                var offendingSymbolOperand = someConstituentTypeHasKind(leftType, 16777216) ? node.left :
	                    someConstituentTypeHasKind(rightType, 16777216) ? node.right :
	                        undefined;
	                if (offendingSymbolOperand) {
	                    error(offendingSymbolOperand, ts.Diagnostics.The_0_operator_cannot_be_applied_to_type_symbol, ts.tokenToString(operator));
	                    return false;
	                }
	                return true;
	            }
	            function getSuggestedBooleanOperator(operator) {
	                switch (operator) {
	                    case 46:
	                    case 65:
	                        return 51;
	                    case 47:
	                    case 66:
	                        return 33;
	                    case 45:
	                    case 64:
	                        return 50;
	                    default:
	                        return undefined;
	                }
	            }
	            function checkAssignmentOperator(valueType) {
	                if (produceDiagnostics && operator >= 55 && operator <= 66) {
	                    var ok = checkReferenceExpression(node.left, ts.Diagnostics.Invalid_left_hand_side_of_assignment_expression, ts.Diagnostics.Left_hand_side_of_assignment_expression_cannot_be_a_constant);
	                    if (ok) {
	                        checkTypeAssignableTo(valueType, leftType, node.left, undefined);
	                    }
	                }
	            }
	            function reportOperatorError() {
	                error(node, ts.Diagnostics.Operator_0_cannot_be_applied_to_types_1_and_2, ts.tokenToString(node.operatorToken.kind), typeToString(leftType), typeToString(rightType));
	            }
	        }
	        function isYieldExpressionInClass(node) {
	            var current = node;
	            var parent = node.parent;
	            while (parent) {
	                if (ts.isFunctionLike(parent) && current === parent.body) {
	                    return false;
	                }
	                else if (ts.isClassLike(current)) {
	                    return true;
	                }
	                current = parent;
	                parent = parent.parent;
	            }
	            return false;
	        }
	        function checkYieldExpression(node) {
	            if (produceDiagnostics) {
	                if (!(node.parserContextFlags & 2) || isYieldExpressionInClass(node)) {
	                    grammarErrorOnFirstToken(node, ts.Diagnostics.A_yield_expression_is_only_allowed_in_a_generator_body);
	                }
	                if (isInParameterInitializerBeforeContainingFunction(node)) {
	                    error(node, ts.Diagnostics.yield_expressions_cannot_be_used_in_a_parameter_initializer);
	                }
	            }
	            if (node.expression) {
	                var func = ts.getContainingFunction(node);
	                if (func && func.asteriskToken) {
	                    var expressionType = checkExpressionCached(node.expression, undefined);
	                    var expressionElementType;
	                    var nodeIsYieldStar = !!node.asteriskToken;
	                    if (nodeIsYieldStar) {
	                        expressionElementType = checkElementTypeOfIterable(expressionType, node.expression);
	                    }
	                    if (func.type) {
	                        var signatureElementType = getElementTypeOfIterableIterator(getTypeFromTypeNode(func.type)) || anyType;
	                        if (nodeIsYieldStar) {
	                            checkTypeAssignableTo(expressionElementType, signatureElementType, node.expression, undefined);
	                        }
	                        else {
	                            checkTypeAssignableTo(expressionType, signatureElementType, node.expression, undefined);
	                        }
	                    }
	                }
	            }
	            return anyType;
	        }
	        function checkConditionalExpression(node, contextualMapper) {
	            checkExpression(node.condition);
	            var type1 = checkExpression(node.whenTrue, contextualMapper);
	            var type2 = checkExpression(node.whenFalse, contextualMapper);
	            return getUnionType([type1, type2]);
	        }
	        function checkTemplateExpression(node) {
	            ts.forEach(node.templateSpans, function (templateSpan) {
	                checkExpression(templateSpan.expression);
	            });
	            return stringType;
	        }
	        function checkExpressionWithContextualType(node, contextualType, contextualMapper) {
	            var saveContextualType = node.contextualType;
	            node.contextualType = contextualType;
	            var result = checkExpression(node, contextualMapper);
	            node.contextualType = saveContextualType;
	            return result;
	        }
	        function checkExpressionCached(node, contextualMapper) {
	            var links = getNodeLinks(node);
	            if (!links.resolvedType) {
	                links.resolvedType = checkExpression(node, contextualMapper);
	            }
	            return links.resolvedType;
	        }
	        function checkPropertyAssignment(node, contextualMapper) {
	            if (node.name.kind === 134) {
	                checkComputedPropertyName(node.name);
	            }
	            return checkExpression(node.initializer, contextualMapper);
	        }
	        function checkObjectLiteralMethod(node, contextualMapper) {
	            checkGrammarMethod(node);
	            if (node.name.kind === 134) {
	                checkComputedPropertyName(node.name);
	            }
	            var uninstantiatedType = checkFunctionExpressionOrObjectLiteralMethod(node, contextualMapper);
	            return instantiateTypeWithSingleGenericCallSignature(node, uninstantiatedType, contextualMapper);
	        }
	        function instantiateTypeWithSingleGenericCallSignature(node, type, contextualMapper) {
	            if (isInferentialContext(contextualMapper)) {
	                var signature = getSingleCallSignature(type);
	                if (signature && signature.typeParameters) {
	                    var contextualType = getContextualType(node);
	                    if (contextualType) {
	                        var contextualSignature = getSingleCallSignature(contextualType);
	                        if (contextualSignature && !contextualSignature.typeParameters) {
	                            return getOrCreateTypeFromSignature(instantiateSignatureInContextOf(signature, contextualSignature, contextualMapper));
	                        }
	                    }
	                }
	            }
	            return type;
	        }
	        function checkExpression(node, contextualMapper) {
	            var type;
	            if (node.kind === 133) {
	                type = checkQualifiedName(node);
	            }
	            else {
	                var uninstantiatedType = checkExpressionWorker(node, contextualMapper);
	                type = instantiateTypeWithSingleGenericCallSignature(node, uninstantiatedType, contextualMapper);
	            }
	            if (isConstEnumObjectType(type)) {
	                var ok = (node.parent.kind === 164 && node.parent.expression === node) ||
	                    (node.parent.kind === 165 && node.parent.expression === node) ||
	                    ((node.kind === 67 || node.kind === 133) && isInRightSideOfImportOrExportAssignment(node));
	                if (!ok) {
	                    error(node, ts.Diagnostics.const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment);
	                }
	            }
	            return type;
	        }
	        function checkNumericLiteral(node) {
	            checkGrammarNumericLiteral(node);
	            return numberType;
	        }
	        function checkExpressionWorker(node, contextualMapper) {
	            switch (node.kind) {
	                case 67:
	                    return checkIdentifier(node);
	                case 95:
	                    return checkThisExpression(node);
	                case 93:
	                    return checkSuperExpression(node);
	                case 91:
	                    return nullType;
	                case 97:
	                case 82:
	                    return booleanType;
	                case 8:
	                    return checkNumericLiteral(node);
	                case 181:
	                    return checkTemplateExpression(node);
	                case 9:
	                case 11:
	                    return stringType;
	                case 10:
	                    return globalRegExpType;
	                case 162:
	                    return checkArrayLiteral(node, contextualMapper);
	                case 163:
	                    return checkObjectLiteral(node, contextualMapper);
	                case 164:
	                    return checkPropertyAccessExpression(node);
	                case 165:
	                    return checkIndexedAccess(node);
	                case 166:
	                case 167:
	                    return checkCallExpression(node);
	                case 168:
	                    return checkTaggedTemplateExpression(node);
	                case 170:
	                    return checkExpression(node.expression, contextualMapper);
	                case 184:
	                    return checkClassExpression(node);
	                case 171:
	                case 172:
	                    return checkFunctionExpressionOrObjectLiteralMethod(node, contextualMapper);
	                case 174:
	                    return checkTypeOfExpression(node);
	                case 169:
	                case 187:
	                    return checkAssertion(node);
	                case 173:
	                    return checkDeleteExpression(node);
	                case 175:
	                    return checkVoidExpression(node);
	                case 176:
	                    return checkAwaitExpression(node);
	                case 177:
	                    return checkPrefixUnaryExpression(node);
	                case 178:
	                    return checkPostfixUnaryExpression(node);
	                case 179:
	                    return checkBinaryExpression(node, contextualMapper);
	                case 180:
	                    return checkConditionalExpression(node, contextualMapper);
	                case 183:
	                    return checkSpreadElementExpression(node, contextualMapper);
	                case 185:
	                    return undefinedType;
	                case 182:
	                    return checkYieldExpression(node);
	                case 238:
	                    return checkJsxExpression(node);
	                case 231:
	                    return checkJsxElement(node);
	                case 232:
	                    return checkJsxSelfClosingElement(node);
	                case 233:
	                    ts.Debug.fail("Shouldn't ever directly check a JsxOpeningElement");
	            }
	            return unknownType;
	        }
	        function checkTypeParameter(node) {
	            if (node.expression) {
	                grammarErrorOnFirstToken(node.expression, ts.Diagnostics.Type_expected);
	            }
	            checkSourceElement(node.constraint);
	            if (produceDiagnostics) {
	                checkTypeParameterHasIllegalReferencesInConstraint(node);
	                checkTypeNameIsReserved(node.name, ts.Diagnostics.Type_parameter_name_cannot_be_0);
	            }
	        }
	        function checkParameter(node) {
	            // Grammar checking
	            // It is a SyntaxError if the Identifier "eval" or the Identifier "arguments" occurs as the
	            // Identifier in a PropertySetParameterList of a PropertyAssignment that is contained in strict code
	            // or if its FunctionBody is strict code(11.1.5).
	            checkGrammarDecorators(node) || checkGrammarModifiers(node);
	            checkVariableLikeDeclaration(node);
	            var func = ts.getContainingFunction(node);
	            if (node.flags & 112) {
	                func = ts.getContainingFunction(node);
	                if (!(func.kind === 142 && ts.nodeIsPresent(func.body))) {
	                    error(node, ts.Diagnostics.A_parameter_property_is_only_allowed_in_a_constructor_implementation);
	                }
	            }
	            if (node.questionToken && ts.isBindingPattern(node.name) && func.body) {
	                error(node, ts.Diagnostics.A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature);
	            }
	            if (node.dotDotDotToken && !ts.isBindingPattern(node.name) && !isArrayType(getTypeOfSymbol(node.symbol))) {
	                error(node, ts.Diagnostics.A_rest_parameter_must_be_of_an_array_type);
	            }
	        }
	        function isSyntacticallyValidGenerator(node) {
	            if (!node.asteriskToken || !node.body) {
	                return false;
	            }
	            return node.kind === 141 ||
	                node.kind === 211 ||
	                node.kind === 171;
	        }
	        function getTypePredicateParameterIndex(parameterList, parameter) {
	            if (parameterList) {
	                for (var i = 0; i < parameterList.length; i++) {
	                    var param = parameterList[i];
	                    if (param.name.kind === 67 &&
	                        param.name.text === parameter.text) {
	                        return i;
	                    }
	                }
	            }
	            return -1;
	        }
	        function isInLegalTypePredicatePosition(node) {
	            switch (node.parent.kind) {
	                case 172:
	                case 145:
	                case 211:
	                case 171:
	                case 150:
	                case 141:
	                case 140:
	                    return node === node.parent.type;
	            }
	            return false;
	        }
	        function checkSignatureDeclaration(node) {
	            if (node.kind === 147) {
	                checkGrammarIndexSignature(node);
	            }
	            else if (node.kind === 150 || node.kind === 211 || node.kind === 151 ||
	                node.kind === 145 || node.kind === 142 ||
	                node.kind === 146) {
	                checkGrammarFunctionLikeDeclaration(node);
	            }
	            checkTypeParameters(node.typeParameters);
	            ts.forEach(node.parameters, checkParameter);
	            if (node.type) {
	                if (node.type.kind === 148) {
	                    var typePredicate = getSignatureFromDeclaration(node).typePredicate;
	                    var typePredicateNode = node.type;
	                    if (isInLegalTypePredicatePosition(typePredicateNode)) {
	                        if (typePredicate.parameterIndex >= 0) {
	                            if (node.parameters[typePredicate.parameterIndex].dotDotDotToken) {
	                                error(typePredicateNode.parameterName, ts.Diagnostics.A_type_predicate_cannot_reference_a_rest_parameter);
	                            }
	                            else {
	                                checkTypeAssignableTo(typePredicate.type, getTypeOfNode(node.parameters[typePredicate.parameterIndex]), typePredicateNode.type);
	                            }
	                        }
	                        else if (typePredicateNode.parameterName) {
	                            var hasReportedError = false;
	                            for (var _i = 0, _a = node.parameters; _i < _a.length; _i++) {
	                                var param = _a[_i];
	                                if (hasReportedError) {
	                                    break;
	                                }
	                                if (param.name.kind === 159 ||
	                                    param.name.kind === 160) {
	                                    (function checkBindingPattern(pattern) {
	                                        for (var _i = 0, _a = pattern.elements; _i < _a.length; _i++) {
	                                            var element = _a[_i];
	                                            if (element.name.kind === 67 &&
	                                                element.name.text === typePredicate.parameterName) {
	                                                error(typePredicateNode.parameterName, ts.Diagnostics.A_type_predicate_cannot_reference_element_0_in_a_binding_pattern, typePredicate.parameterName);
	                                                hasReportedError = true;
	                                                break;
	                                            }
	                                            else if (element.name.kind === 160 ||
	                                                element.name.kind === 159) {
	                                                checkBindingPattern(element.name);
	                                            }
	                                        }
	                                    })(param.name);
	                                }
	                            }
	                            if (!hasReportedError) {
	                                error(typePredicateNode.parameterName, ts.Diagnostics.Cannot_find_parameter_0, typePredicate.parameterName);
	                            }
	                        }
	                    }
	                    else {
	                        error(typePredicateNode, ts.Diagnostics.A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods);
	                    }
	                }
	                else {
	                    checkSourceElement(node.type);
	                }
	            }
	            if (produceDiagnostics) {
	                checkCollisionWithArgumentsInGeneratedCode(node);
	                if (compilerOptions.noImplicitAny && !node.type) {
	                    switch (node.kind) {
	                        case 146:
	                            error(node, ts.Diagnostics.Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);
	                            break;
	                        case 145:
	                            error(node, ts.Diagnostics.Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);
	                            break;
	                    }
	                }
	                if (node.type) {
	                    if (languageVersion >= 2 && isSyntacticallyValidGenerator(node)) {
	                        var returnType = getTypeFromTypeNode(node.type);
	                        if (returnType === voidType) {
	                            error(node.type, ts.Diagnostics.A_generator_cannot_have_a_void_type_annotation);
	                        }
	                        else {
	                            var generatorElementType = getElementTypeOfIterableIterator(returnType) || anyType;
	                            var iterableIteratorInstantiation = createIterableIteratorType(generatorElementType);
	                            checkTypeAssignableTo(iterableIteratorInstantiation, returnType, node.type);
	                        }
	                    }
	                }
	            }
	            checkSpecializedSignatureDeclaration(node);
	        }
	        function checkTypeForDuplicateIndexSignatures(node) {
	            if (node.kind === 213) {
	                var nodeSymbol = getSymbolOfNode(node);
	                if (nodeSymbol.declarations.length > 0 && nodeSymbol.declarations[0] !== node) {
	                    return;
	                }
	            }
	            var indexSymbol = getIndexSymbol(getSymbolOfNode(node));
	            if (indexSymbol) {
	                var seenNumericIndexer = false;
	                var seenStringIndexer = false;
	                for (var _i = 0, _a = indexSymbol.declarations; _i < _a.length; _i++) {
	                    var decl = _a[_i];
	                    var declaration = decl;
	                    if (declaration.parameters.length === 1 && declaration.parameters[0].type) {
	                        switch (declaration.parameters[0].type.kind) {
	                            case 128:
	                                if (!seenStringIndexer) {
	                                    seenStringIndexer = true;
	                                }
	                                else {
	                                    error(declaration, ts.Diagnostics.Duplicate_string_index_signature);
	                                }
	                                break;
	                            case 126:
	                                if (!seenNumericIndexer) {
	                                    seenNumericIndexer = true;
	                                }
	                                else {
	                                    error(declaration, ts.Diagnostics.Duplicate_number_index_signature);
	                                }
	                                break;
	                        }
	                    }
	                }
	            }
	        }
	        function checkPropertyDeclaration(node) {
	            checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarProperty(node) || checkGrammarComputedPropertyName(node.name);
	            checkVariableLikeDeclaration(node);
	        }
	        function checkMethodDeclaration(node) {
	            checkGrammarMethod(node) || checkGrammarComputedPropertyName(node.name);
	            checkFunctionLikeDeclaration(node);
	            if (node.flags & 256 && node.body) {
	                error(node, ts.Diagnostics.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract, ts.declarationNameToString(node.name));
	            }
	        }
	        function checkConstructorDeclaration(node) {
	            checkSignatureDeclaration(node);
	            checkGrammarConstructorTypeParameters(node) || checkGrammarConstructorTypeAnnotation(node);
	            checkSourceElement(node.body);
	            var symbol = getSymbolOfNode(node);
	            var firstDeclaration = ts.getDeclarationOfKind(symbol, node.kind);
	            if (node === firstDeclaration) {
	                checkFunctionOrConstructorSymbol(symbol);
	            }
	            if (ts.nodeIsMissing(node.body)) {
	                return;
	            }
	            if (!produceDiagnostics) {
	                return;
	            }
	            function isSuperCallExpression(n) {
	                return n.kind === 166 && n.expression.kind === 93;
	            }
	            function containsSuperCallAsComputedPropertyName(n) {
	                return n.name && containsSuperCall(n.name);
	            }
	            function containsSuperCall(n) {
	                if (isSuperCallExpression(n)) {
	                    return true;
	                }
	                else if (ts.isFunctionLike(n)) {
	                    return false;
	                }
	                else if (ts.isClassLike(n)) {
	                    return ts.forEach(n.members, containsSuperCallAsComputedPropertyName);
	                }
	                return ts.forEachChild(n, containsSuperCall);
	            }
	            function markThisReferencesAsErrors(n) {
	                if (n.kind === 95) {
	                    error(n, ts.Diagnostics.this_cannot_be_referenced_in_current_location);
	                }
	                else if (n.kind !== 171 && n.kind !== 211) {
	                    ts.forEachChild(n, markThisReferencesAsErrors);
	                }
	            }
	            function isInstancePropertyWithInitializer(n) {
	                return n.kind === 139 &&
	                    !(n.flags & 128) &&
	                    !!n.initializer;
	            }
	            var containingClassDecl = node.parent;
	            if (ts.getClassExtendsHeritageClauseElement(containingClassDecl)) {
	                var containingClassSymbol = getSymbolOfNode(containingClassDecl);
	                var containingClassInstanceType = getDeclaredTypeOfSymbol(containingClassSymbol);
	                var baseConstructorType = getBaseConstructorTypeOfClass(containingClassInstanceType);
	                if (containsSuperCall(node.body)) {
	                    if (baseConstructorType === nullType) {
	                        error(node, ts.Diagnostics.A_constructor_cannot_contain_a_super_call_when_its_class_extends_null);
	                    }
	                    var superCallShouldBeFirst = ts.forEach(node.parent.members, isInstancePropertyWithInitializer) ||
	                        ts.forEach(node.parameters, function (p) { return p.flags & (16 | 32 | 64); });
	                    if (superCallShouldBeFirst) {
	                        var statements = node.body.statements;
	                        var superCallStatement;
	                        for (var _i = 0; _i < statements.length; _i++) {
	                            var statement = statements[_i];
	                            if (statement.kind === 193 && isSuperCallExpression(statement.expression)) {
	                                superCallStatement = statement;
	                                break;
	                            }
	                            if (!ts.isPrologueDirective(statement)) {
	                                break;
	                            }
	                        }
	                        if (!superCallStatement) {
	                            error(node, ts.Diagnostics.A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties);
	                        }
	                        else {
	                            markThisReferencesAsErrors(superCallStatement.expression);
	                        }
	                    }
	                }
	                else if (baseConstructorType !== nullType) {
	                    error(node, ts.Diagnostics.Constructors_for_derived_classes_must_contain_a_super_call);
	                }
	            }
	        }
	        function checkAccessorDeclaration(node) {
	            if (produceDiagnostics) {
	                checkGrammarFunctionLikeDeclaration(node) || checkGrammarAccessor(node) || checkGrammarComputedPropertyName(node.name);
	                if (node.kind === 143) {
	                    if (!ts.isInAmbientContext(node) && ts.nodeIsPresent(node.body) && !(bodyContainsAReturnStatement(node.body) || bodyContainsSingleThrowStatement(node.body))) {
	                        error(node.name, ts.Diagnostics.A_get_accessor_must_return_a_value_or_consist_of_a_single_throw_statement);
	                    }
	                }
	                if (!ts.hasDynamicName(node)) {
	                    var otherKind = node.kind === 143 ? 144 : 143;
	                    var otherAccessor = ts.getDeclarationOfKind(node.symbol, otherKind);
	                    if (otherAccessor) {
	                        if (((node.flags & 112) !== (otherAccessor.flags & 112))) {
	                            error(node.name, ts.Diagnostics.Getter_and_setter_accessors_do_not_agree_in_visibility);
	                        }
	                        var currentAccessorType = getAnnotatedAccessorType(node);
	                        var otherAccessorType = getAnnotatedAccessorType(otherAccessor);
	                        if (currentAccessorType && otherAccessorType) {
	                            if (!isTypeIdenticalTo(currentAccessorType, otherAccessorType)) {
	                                error(node, ts.Diagnostics.get_and_set_accessor_must_have_the_same_type);
	                            }
	                        }
	                    }
	                }
	                getTypeOfAccessors(getSymbolOfNode(node));
	            }
	            checkFunctionLikeDeclaration(node);
	        }
	        function checkMissingDeclaration(node) {
	            checkDecorators(node);
	        }
	        function checkTypeArgumentConstraints(typeParameters, typeArguments) {
	            var result = true;
	            for (var i = 0; i < typeParameters.length; i++) {
	                var constraint = getConstraintOfTypeParameter(typeParameters[i]);
	                if (constraint) {
	                    var typeArgument = typeArguments[i];
	                    result = result && checkTypeAssignableTo(getTypeFromTypeNode(typeArgument), constraint, typeArgument, ts.Diagnostics.Type_0_does_not_satisfy_the_constraint_1);
	                }
	            }
	            return result;
	        }
	        function checkTypeReferenceNode(node) {
	            checkGrammarTypeArguments(node, node.typeArguments);
	            var type = getTypeFromTypeReference(node);
	            if (type !== unknownType && node.typeArguments) {
	                ts.forEach(node.typeArguments, checkSourceElement);
	                if (produceDiagnostics) {
	                    var symbol = getNodeLinks(node).resolvedSymbol;
	                    var typeParameters = symbol.flags & 524288 ? getSymbolLinks(symbol).typeParameters : type.target.localTypeParameters;
	                    checkTypeArgumentConstraints(typeParameters, node.typeArguments);
	                }
	            }
	        }
	        function checkTypeQuery(node) {
	            getTypeFromTypeQueryNode(node);
	        }
	        function checkTypeLiteral(node) {
	            ts.forEach(node.members, checkSourceElement);
	            if (produceDiagnostics) {
	                var type = getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node);
	                checkIndexConstraints(type);
	                checkTypeForDuplicateIndexSignatures(node);
	            }
	        }
	        function checkArrayType(node) {
	            checkSourceElement(node.elementType);
	        }
	        function checkTupleType(node) {
	            var hasErrorFromDisallowedTrailingComma = checkGrammarForDisallowedTrailingComma(node.elementTypes);
	            if (!hasErrorFromDisallowedTrailingComma && node.elementTypes.length === 0) {
	                grammarErrorOnNode(node, ts.Diagnostics.A_tuple_type_element_list_cannot_be_empty);
	            }
	            ts.forEach(node.elementTypes, checkSourceElement);
	        }
	        function checkUnionOrIntersectionType(node) {
	            ts.forEach(node.types, checkSourceElement);
	        }
	        function isPrivateWithinAmbient(node) {
	            return (node.flags & 32) && ts.isInAmbientContext(node);
	        }
	        function checkSpecializedSignatureDeclaration(signatureDeclarationNode) {
	            if (!produceDiagnostics) {
	                return;
	            }
	            var signature = getSignatureFromDeclaration(signatureDeclarationNode);
	            if (!signature.hasStringLiterals) {
	                return;
	            }
	            if (ts.nodeIsPresent(signatureDeclarationNode.body)) {
	                error(signatureDeclarationNode, ts.Diagnostics.A_signature_with_an_implementation_cannot_use_a_string_literal_type);
	                return;
	            }
	            var signaturesToCheck;
	            if (!signatureDeclarationNode.name && signatureDeclarationNode.parent && signatureDeclarationNode.parent.kind === 213) {
	                ts.Debug.assert(signatureDeclarationNode.kind === 145 || signatureDeclarationNode.kind === 146);
	                var signatureKind = signatureDeclarationNode.kind === 145 ? 0 : 1;
	                var containingSymbol = getSymbolOfNode(signatureDeclarationNode.parent);
	                var containingType = getDeclaredTypeOfSymbol(containingSymbol);
	                signaturesToCheck = getSignaturesOfType(containingType, signatureKind);
	            }
	            else {
	                signaturesToCheck = getSignaturesOfSymbol(getSymbolOfNode(signatureDeclarationNode));
	            }
	            for (var _i = 0; _i < signaturesToCheck.length; _i++) {
	                var otherSignature = signaturesToCheck[_i];
	                if (!otherSignature.hasStringLiterals && isSignatureAssignableTo(signature, otherSignature)) {
	                    return;
	                }
	            }
	            error(signatureDeclarationNode, ts.Diagnostics.Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature);
	        }
	        function getEffectiveDeclarationFlags(n, flagsToCheck) {
	            var flags = ts.getCombinedNodeFlags(n);
	            if (n.parent.kind !== 213 && ts.isInAmbientContext(n)) {
	                if (!(flags & 2)) {
	                    flags |= 1;
	                }
	                flags |= 2;
	            }
	            return flags & flagsToCheck;
	        }
	        function checkFunctionOrConstructorSymbol(symbol) {
	            if (!produceDiagnostics) {
	                return;
	            }
	            function getCanonicalOverload(overloads, implementation) {
	                var implementationSharesContainerWithFirstOverload = implementation !== undefined && implementation.parent === overloads[0].parent;
	                return implementationSharesContainerWithFirstOverload ? implementation : overloads[0];
	            }
	            function checkFlagAgreementBetweenOverloads(overloads, implementation, flagsToCheck, someOverloadFlags, allOverloadFlags) {
	                var someButNotAllOverloadFlags = someOverloadFlags ^ allOverloadFlags;
	                if (someButNotAllOverloadFlags !== 0) {
	                    var canonicalFlags = getEffectiveDeclarationFlags(getCanonicalOverload(overloads, implementation), flagsToCheck);
	                    ts.forEach(overloads, function (o) {
	                        var deviation = getEffectiveDeclarationFlags(o, flagsToCheck) ^ canonicalFlags;
	                        if (deviation & 1) {
	                            error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_exported_or_not_exported);
	                        }
	                        else if (deviation & 2) {
	                            error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_ambient_or_non_ambient);
	                        }
	                        else if (deviation & (32 | 64)) {
	                            error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_public_private_or_protected);
	                        }
	                        else if (deviation & 256) {
	                            error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_abstract_or_not_abstract);
	                        }
	                    });
	                }
	            }
	            function checkQuestionTokenAgreementBetweenOverloads(overloads, implementation, someHaveQuestionToken, allHaveQuestionToken) {
	                if (someHaveQuestionToken !== allHaveQuestionToken) {
	                    var canonicalHasQuestionToken = ts.hasQuestionToken(getCanonicalOverload(overloads, implementation));
	                    ts.forEach(overloads, function (o) {
	                        var deviation = ts.hasQuestionToken(o) !== canonicalHasQuestionToken;
	                        if (deviation) {
	                            error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_optional_or_required);
	                        }
	                    });
	                }
	            }
	            var flagsToCheck = 1 | 2 | 32 | 64 | 256;
	            var someNodeFlags = 0;
	            var allNodeFlags = flagsToCheck;
	            var someHaveQuestionToken = false;
	            var allHaveQuestionToken = true;
	            var hasOverloads = false;
	            var bodyDeclaration;
	            var lastSeenNonAmbientDeclaration;
	            var previousDeclaration;
	            var declarations = symbol.declarations;
	            var isConstructor = (symbol.flags & 16384) !== 0;
	            function reportImplementationExpectedError(node) {
	                if (node.name && ts.nodeIsMissing(node.name)) {
	                    return;
	                }
	                var seen = false;
	                var subsequentNode = ts.forEachChild(node.parent, function (c) {
	                    if (seen) {
	                        return c;
	                    }
	                    else {
	                        seen = c === node;
	                    }
	                });
	                if (subsequentNode) {
	                    if (subsequentNode.kind === node.kind) {
	                        var errorNode_1 = subsequentNode.name || subsequentNode;
	                        if (node.name && subsequentNode.name && node.name.text === subsequentNode.name.text) {
	                            ts.Debug.assert(node.kind === 141 || node.kind === 140);
	                            ts.Debug.assert((node.flags & 128) !== (subsequentNode.flags & 128));
	                            var diagnostic = node.flags & 128 ? ts.Diagnostics.Function_overload_must_be_static : ts.Diagnostics.Function_overload_must_not_be_static;
	                            error(errorNode_1, diagnostic);
	                            return;
	                        }
	                        else if (ts.nodeIsPresent(subsequentNode.body)) {
	                            error(errorNode_1, ts.Diagnostics.Function_implementation_name_must_be_0, ts.declarationNameToString(node.name));
	                            return;
	                        }
	                    }
	                }
	                var errorNode = node.name || node;
	                if (isConstructor) {
	                    error(errorNode, ts.Diagnostics.Constructor_implementation_is_missing);
	                }
	                else {
	                    if (node.flags & 256) {
	                        error(errorNode, ts.Diagnostics.All_declarations_of_an_abstract_method_must_be_consecutive);
	                    }
	                    else {
	                        error(errorNode, ts.Diagnostics.Function_implementation_is_missing_or_not_immediately_following_the_declaration);
	                    }
	                }
	            }
	            var isExportSymbolInsideModule = symbol.parent && symbol.parent.flags & 1536;
	            var duplicateFunctionDeclaration = false;
	            var multipleConstructorImplementation = false;
	            for (var _i = 0; _i < declarations.length; _i++) {
	                var current = declarations[_i];
	                var node = current;
	                var inAmbientContext = ts.isInAmbientContext(node);
	                var inAmbientContextOrInterface = node.parent.kind === 213 || node.parent.kind === 153 || inAmbientContext;
	                if (inAmbientContextOrInterface) {
	                    previousDeclaration = undefined;
	                }
	                if (node.kind === 211 || node.kind === 141 || node.kind === 140 || node.kind === 142) {
	                    var currentNodeFlags = getEffectiveDeclarationFlags(node, flagsToCheck);
	                    someNodeFlags |= currentNodeFlags;
	                    allNodeFlags &= currentNodeFlags;
	                    someHaveQuestionToken = someHaveQuestionToken || ts.hasQuestionToken(node);
	                    allHaveQuestionToken = allHaveQuestionToken && ts.hasQuestionToken(node);
	                    if (ts.nodeIsPresent(node.body) && bodyDeclaration) {
	                        if (isConstructor) {
	                            multipleConstructorImplementation = true;
	                        }
	                        else {
	                            duplicateFunctionDeclaration = true;
	                        }
	                    }
	                    else if (!isExportSymbolInsideModule && previousDeclaration && previousDeclaration.parent === node.parent && previousDeclaration.end !== node.pos) {
	                        reportImplementationExpectedError(previousDeclaration);
	                    }
	                    if (ts.nodeIsPresent(node.body)) {
	                        if (!bodyDeclaration) {
	                            bodyDeclaration = node;
	                        }
	                    }
	                    else {
	                        hasOverloads = true;
	                    }
	                    previousDeclaration = node;
	                    if (!inAmbientContextOrInterface) {
	                        lastSeenNonAmbientDeclaration = node;
	                    }
	                }
	            }
	            if (multipleConstructorImplementation) {
	                ts.forEach(declarations, function (declaration) {
	                    error(declaration, ts.Diagnostics.Multiple_constructor_implementations_are_not_allowed);
	                });
	            }
	            if (duplicateFunctionDeclaration) {
	                ts.forEach(declarations, function (declaration) {
	                    error(declaration.name, ts.Diagnostics.Duplicate_function_implementation);
	                });
	            }
	            if (!isExportSymbolInsideModule && lastSeenNonAmbientDeclaration && !lastSeenNonAmbientDeclaration.body &&
	                !(lastSeenNonAmbientDeclaration.flags & 256)) {
	                reportImplementationExpectedError(lastSeenNonAmbientDeclaration);
	            }
	            if (hasOverloads) {
	                checkFlagAgreementBetweenOverloads(declarations, bodyDeclaration, flagsToCheck, someNodeFlags, allNodeFlags);
	                checkQuestionTokenAgreementBetweenOverloads(declarations, bodyDeclaration, someHaveQuestionToken, allHaveQuestionToken);
	                if (bodyDeclaration) {
	                    var signatures = getSignaturesOfSymbol(symbol);
	                    var bodySignature = getSignatureFromDeclaration(bodyDeclaration);
	                    if (!bodySignature.hasStringLiterals) {
	                        for (var _a = 0; _a < signatures.length; _a++) {
	                            var signature = signatures[_a];
	                            if (!signature.hasStringLiterals && !isSignatureAssignableTo(bodySignature, signature)) {
	                                error(signature.declaration, ts.Diagnostics.Overload_signature_is_not_compatible_with_function_implementation);
	                                break;
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        function checkExportsOnMergedDeclarations(node) {
	            if (!produceDiagnostics) {
	                return;
	            }
	            var symbol = node.localSymbol;
	            if (!symbol) {
	                symbol = getSymbolOfNode(node);
	                if (!(symbol.flags & 7340032)) {
	                    return;
	                }
	            }
	            if (ts.getDeclarationOfKind(symbol, node.kind) !== node) {
	                return;
	            }
	            var exportedDeclarationSpaces = 0;
	            var nonExportedDeclarationSpaces = 0;
	            var defaultExportedDeclarationSpaces = 0;
	            for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
	                var d = _a[_i];
	                var declarationSpaces = getDeclarationSpaces(d);
	                var effectiveDeclarationFlags = getEffectiveDeclarationFlags(d, 1 | 1024);
	                if (effectiveDeclarationFlags & 1) {
	                    if (effectiveDeclarationFlags & 1024) {
	                        defaultExportedDeclarationSpaces |= declarationSpaces;
	                    }
	                    else {
	                        exportedDeclarationSpaces |= declarationSpaces;
	                    }
	                }
	                else {
	                    nonExportedDeclarationSpaces |= declarationSpaces;
	                }
	            }
	            var nonDefaultExportedDeclarationSpaces = exportedDeclarationSpaces | nonExportedDeclarationSpaces;
	            var commonDeclarationSpacesForExportsAndLocals = exportedDeclarationSpaces & nonExportedDeclarationSpaces;
	            var commonDeclarationSpacesForDefaultAndNonDefault = defaultExportedDeclarationSpaces & nonDefaultExportedDeclarationSpaces;
	            if (commonDeclarationSpacesForExportsAndLocals || commonDeclarationSpacesForDefaultAndNonDefault) {
	                for (var _b = 0, _c = symbol.declarations; _b < _c.length; _b++) {
	                    var d = _c[_b];
	                    var declarationSpaces = getDeclarationSpaces(d);
	                    if (declarationSpaces & commonDeclarationSpacesForDefaultAndNonDefault) {
	                        error(d.name, ts.Diagnostics.Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_default_0_declaration_instead, ts.declarationNameToString(d.name));
	                    }
	                    else if (declarationSpaces & commonDeclarationSpacesForExportsAndLocals) {
	                        error(d.name, ts.Diagnostics.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local, ts.declarationNameToString(d.name));
	                    }
	                }
	            }
	            function getDeclarationSpaces(d) {
	                switch (d.kind) {
	                    case 213:
	                        return 2097152;
	                    case 216:
	                        return d.name.kind === 9 || ts.getModuleInstanceState(d) !== 0
	                            ? 4194304 | 1048576
	                            : 4194304;
	                    case 212:
	                    case 215:
	                        return 2097152 | 1048576;
	                    case 219:
	                        var result = 0;
	                        var target = resolveAlias(getSymbolOfNode(d));
	                        ts.forEach(target.declarations, function (d) { result |= getDeclarationSpaces(d); });
	                        return result;
	                    default:
	                        return 1048576;
	                }
	            }
	        }
	        function checkNonThenableType(type, location, message) {
	            if (!(type.flags & 1) && isTypeAssignableTo(type, getGlobalThenableType())) {
	                if (location) {
	                    if (!message) {
	                        message = ts.Diagnostics.Operand_for_await_does_not_have_a_valid_callable_then_member;
	                    }
	                    error(location, message);
	                }
	                return unknownType;
	            }
	            return type;
	        }
	        function getPromisedType(promise) {
	            //
	            //  { // promise
	            //      then( // thenFunction
	            //          onfulfilled: ( // onfulfilledParameterType
	            //              value: T // valueParameterType
	            //          ) => any
	            //      ): any;
	            //  }
	            //
	            if (promise.flags & 1) {
	                return undefined;
	            }
	            if ((promise.flags & 4096) && promise.target === tryGetGlobalPromiseType()) {
	                return promise.typeArguments[0];
	            }
	            var globalPromiseLikeType = getInstantiatedGlobalPromiseLikeType();
	            if (globalPromiseLikeType === emptyObjectType || !isTypeAssignableTo(promise, globalPromiseLikeType)) {
	                return undefined;
	            }
	            var thenFunction = getTypeOfPropertyOfType(promise, "then");
	            if (thenFunction && (thenFunction.flags & 1)) {
	                return undefined;
	            }
	            var thenSignatures = thenFunction ? getSignaturesOfType(thenFunction, 0) : emptyArray;
	            if (thenSignatures.length === 0) {
	                return undefined;
	            }
	            var onfulfilledParameterType = getUnionType(ts.map(thenSignatures, getTypeOfFirstParameterOfSignature));
	            if (onfulfilledParameterType.flags & 1) {
	                return undefined;
	            }
	            var onfulfilledParameterSignatures = getSignaturesOfType(onfulfilledParameterType, 0);
	            if (onfulfilledParameterSignatures.length === 0) {
	                return undefined;
	            }
	            var valueParameterType = getUnionType(ts.map(onfulfilledParameterSignatures, getTypeOfFirstParameterOfSignature));
	            return valueParameterType;
	        }
	        function getTypeOfFirstParameterOfSignature(signature) {
	            return getTypeAtPosition(signature, 0);
	        }
	        function getAwaitedType(type) {
	            return checkAwaitedType(type, undefined, undefined);
	        }
	        function checkAwaitedType(type, location, message) {
	            return checkAwaitedTypeWorker(type);
	            function checkAwaitedTypeWorker(type) {
	                if (type.flags & 16384) {
	                    var types = [];
	                    for (var _i = 0, _a = type.types; _i < _a.length; _i++) {
	                        var constituentType = _a[_i];
	                        types.push(checkAwaitedTypeWorker(constituentType));
	                    }
	                    return getUnionType(types);
	                }
	                else {
	                    var promisedType = getPromisedType(type);
	                    if (promisedType === undefined) {
	                        return checkNonThenableType(type, location, message);
	                    }
	                    else {
	                        if (type.id === promisedType.id || awaitedTypeStack.indexOf(promisedType.id) >= 0) {
	                            if (location) {
	                                error(location, ts.Diagnostics._0_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method, symbolToString(type.symbol));
	                            }
	                            return unknownType;
	                        }
	                        awaitedTypeStack.push(type.id);
	                        var awaitedType = checkAwaitedTypeWorker(promisedType);
	                        awaitedTypeStack.pop();
	                        return awaitedType;
	                    }
	                }
	            }
	        }
	        function checkAsyncFunctionReturnType(node) {
	            var globalPromiseConstructorLikeType = getGlobalPromiseConstructorLikeType();
	            if (globalPromiseConstructorLikeType === emptyObjectType) {
	                return unknownType;
	            }
	            var promiseType = getTypeFromTypeNode(node.type);
	            if (promiseType === unknownType && compilerOptions.isolatedModules) {
	                return unknownType;
	            }
	            var promiseConstructor = getMergedSymbol(promiseType.symbol);
	            if (!promiseConstructor || !symbolIsValue(promiseConstructor)) {
	                error(node, ts.Diagnostics.Type_0_is_not_a_valid_async_function_return_type, typeToString(promiseType));
	                return unknownType;
	            }
	            var promiseConstructorType = getTypeOfSymbol(promiseConstructor);
	            if (!checkTypeAssignableTo(promiseConstructorType, globalPromiseConstructorLikeType, node, ts.Diagnostics.Type_0_is_not_a_valid_async_function_return_type)) {
	                return unknownType;
	            }
	            var promiseName = ts.getEntityNameFromTypeNode(node.type);
	            var root = getFirstIdentifier(promiseName);
	            var rootSymbol = getSymbol(node.locals, root.text, 107455);
	            if (rootSymbol) {
	                error(rootSymbol.valueDeclaration, ts.Diagnostics.Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions, root.text, getFullyQualifiedName(promiseConstructor));
	                return unknownType;
	            }
	            return checkAwaitedType(promiseType, node, ts.Diagnostics.An_async_function_or_method_must_have_a_valid_awaitable_return_type);
	        }
	        function checkDecorator(node) {
	            var signature = getResolvedSignature(node);
	            var returnType = getReturnTypeOfSignature(signature);
	            if (returnType.flags & 1) {
	                return;
	            }
	            var expectedReturnType;
	            var headMessage = getDiagnosticHeadMessageForDecoratorResolution(node);
	            var errorInfo;
	            switch (node.parent.kind) {
	                case 212:
	                    var classSymbol = getSymbolOfNode(node.parent);
	                    var classConstructorType = getTypeOfSymbol(classSymbol);
	                    expectedReturnType = getUnionType([classConstructorType, voidType]);
	                    break;
	                case 136:
	                    expectedReturnType = voidType;
	                    errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any);
	                    break;
	                case 139:
	                    expectedReturnType = voidType;
	                    errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.The_return_type_of_a_property_decorator_function_must_be_either_void_or_any);
	                    break;
	                case 141:
	                case 143:
	                case 144:
	                    var methodType = getTypeOfNode(node.parent);
	                    var descriptorType = createTypedPropertyDescriptorType(methodType);
	                    expectedReturnType = getUnionType([descriptorType, voidType]);
	                    break;
	            }
	            checkTypeAssignableTo(returnType, expectedReturnType, node, headMessage, errorInfo);
	        }
	        function checkTypeNodeAsExpression(node) {
	            if (node && node.kind === 149) {
	                var root = getFirstIdentifier(node.typeName);
	                var meaning = root.parent.kind === 149 ? 793056 : 1536;
	                var rootSymbol = resolveName(root, root.text, meaning | 8388608, undefined, undefined);
	                if (rootSymbol && rootSymbol.flags & 8388608) {
	                    var aliasTarget = resolveAlias(rootSymbol);
	                    if (aliasTarget.flags & 107455 && !isConstEnumOrConstEnumOnlyModule(resolveAlias(rootSymbol))) {
	                        markAliasSymbolAsReferenced(rootSymbol);
	                    }
	                }
	            }
	        }
	        function checkTypeAnnotationAsExpression(node) {
	            switch (node.kind) {
	                case 139:
	                    checkTypeNodeAsExpression(node.type);
	                    break;
	                case 136:
	                    checkTypeNodeAsExpression(node.type);
	                    break;
	                case 141:
	                    checkTypeNodeAsExpression(node.type);
	                    break;
	                case 143:
	                    checkTypeNodeAsExpression(node.type);
	                    break;
	                case 144:
	                    checkTypeNodeAsExpression(ts.getSetAccessorTypeAnnotationNode(node));
	                    break;
	            }
	        }
	        function checkParameterTypeAnnotationsAsExpressions(node) {
	            for (var _i = 0, _a = node.parameters; _i < _a.length; _i++) {
	                var parameter = _a[_i];
	                checkTypeAnnotationAsExpression(parameter);
	            }
	        }
	        function checkDecorators(node) {
	            if (!node.decorators) {
	                return;
	            }
	            if (!ts.nodeCanBeDecorated(node)) {
	                return;
	            }
	            if (!compilerOptions.experimentalDecorators) {
	                error(node, ts.Diagnostics.Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Specify_experimentalDecorators_to_remove_this_warning);
	            }
	            if (compilerOptions.emitDecoratorMetadata) {
	                switch (node.kind) {
	                    case 212:
	                        var constructor = ts.getFirstConstructorWithBody(node);
	                        if (constructor) {
	                            checkParameterTypeAnnotationsAsExpressions(constructor);
	                        }
	                        break;
	                    case 141:
	                        checkParameterTypeAnnotationsAsExpressions(node);
	                    case 144:
	                    case 143:
	                    case 139:
	                    case 136:
	                        checkTypeAnnotationAsExpression(node);
	                        break;
	                }
	            }
	            emitDecorate = true;
	            if (node.kind === 136) {
	                emitParam = true;
	            }
	            ts.forEach(node.decorators, checkDecorator);
	        }
	        function checkFunctionDeclaration(node) {
	            if (produceDiagnostics) {
	                checkFunctionLikeDeclaration(node) || checkGrammarForGenerator(node);
	                checkCollisionWithCapturedSuperVariable(node, node.name);
	                checkCollisionWithCapturedThisVariable(node, node.name);
	                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);
	            }
	        }
	        function checkFunctionLikeDeclaration(node) {
	            checkDecorators(node);
	            checkSignatureDeclaration(node);
	            var isAsync = ts.isAsyncFunctionLike(node);
	            if (isAsync) {
	                if (!compilerOptions.experimentalAsyncFunctions) {
	                    error(node, ts.Diagnostics.Experimental_support_for_async_functions_is_a_feature_that_is_subject_to_change_in_a_future_release_Specify_experimentalAsyncFunctions_to_remove_this_warning);
	                }
	                emitAwaiter = true;
	            }
	            if (node.name && node.name.kind === 134) {
	                checkComputedPropertyName(node.name);
	            }
	            if (!ts.hasDynamicName(node)) {
	                var symbol = getSymbolOfNode(node);
	                var localSymbol = node.localSymbol || symbol;
	                var firstDeclaration = ts.getDeclarationOfKind(localSymbol, node.kind);
	                if (node === firstDeclaration) {
	                    checkFunctionOrConstructorSymbol(localSymbol);
	                }
	                if (symbol.parent) {
	                    if (ts.getDeclarationOfKind(symbol, node.kind) === node) {
	                        checkFunctionOrConstructorSymbol(symbol);
	                    }
	                }
	            }
	            checkSourceElement(node.body);
	            if (node.type && !isAccessor(node.kind) && !node.asteriskToken) {
	                var returnType = getTypeFromTypeNode(node.type);
	                var promisedType;
	                if (isAsync) {
	                    promisedType = checkAsyncFunctionReturnType(node);
	                }
	                checkIfNonVoidFunctionHasReturnExpressionsOrSingleThrowStatment(node, isAsync ? promisedType : returnType);
	            }
	            if (produceDiagnostics && !node.type) {
	                if (compilerOptions.noImplicitAny && ts.nodeIsMissing(node.body) && !isPrivateWithinAmbient(node)) {
	                    reportImplicitAnyError(node, anyType);
	                }
	                if (node.asteriskToken && ts.nodeIsPresent(node.body)) {
	                    getReturnTypeOfSignature(getSignatureFromDeclaration(node));
	                }
	            }
	        }
	        function checkBlock(node) {
	            if (node.kind === 190) {
	                checkGrammarStatementInAmbientContext(node);
	            }
	            ts.forEach(node.statements, checkSourceElement);
	            if (ts.isFunctionBlock(node) || node.kind === 217) {
	                checkFunctionAndClassExpressionBodies(node);
	            }
	        }
	        function checkCollisionWithArgumentsInGeneratedCode(node) {
	            if (!ts.hasRestParameter(node) || ts.isInAmbientContext(node) || ts.nodeIsMissing(node.body)) {
	                return;
	            }
	            ts.forEach(node.parameters, function (p) {
	                if (p.name && !ts.isBindingPattern(p.name) && p.name.text === argumentsSymbol.name) {
	                    error(p, ts.Diagnostics.Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters);
	                }
	            });
	        }
	        function needCollisionCheckForIdentifier(node, identifier, name) {
	            if (!(identifier && identifier.text === name)) {
	                return false;
	            }
	            if (node.kind === 139 ||
	                node.kind === 138 ||
	                node.kind === 141 ||
	                node.kind === 140 ||
	                node.kind === 143 ||
	                node.kind === 144) {
	                return false;
	            }
	            if (ts.isInAmbientContext(node)) {
	                return false;
	            }
	            var root = ts.getRootDeclaration(node);
	            if (root.kind === 136 && ts.nodeIsMissing(root.parent.body)) {
	                return false;
	            }
	            return true;
	        }
	        function checkCollisionWithCapturedThisVariable(node, name) {
	            if (needCollisionCheckForIdentifier(node, name, "_this")) {
	                potentialThisCollisions.push(node);
	            }
	        }
	        function checkIfThisIsCapturedInEnclosingScope(node) {
	            var current = node;
	            while (current) {
	                if (getNodeCheckFlags(current) & 4) {
	                    var isDeclaration_1 = node.kind !== 67;
	                    if (isDeclaration_1) {
	                        error(node.name, ts.Diagnostics.Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference);
	                    }
	                    else {
	                        error(node, ts.Diagnostics.Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference);
	                    }
	                    return;
	                }
	                current = current.parent;
	            }
	        }
	        function checkCollisionWithCapturedSuperVariable(node, name) {
	            if (!needCollisionCheckForIdentifier(node, name, "_super")) {
	                return;
	            }
	            var enclosingClass = ts.getContainingClass(node);
	            if (!enclosingClass || ts.isInAmbientContext(enclosingClass)) {
	                return;
	            }
	            if (ts.getClassExtendsHeritageClauseElement(enclosingClass)) {
	                var isDeclaration_2 = node.kind !== 67;
	                if (isDeclaration_2) {
	                    error(node, ts.Diagnostics.Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference);
	                }
	                else {
	                    error(node, ts.Diagnostics.Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference);
	                }
	            }
	        }
	        function checkCollisionWithRequireExportsInGeneratedCode(node, name) {
	            if (!needCollisionCheckForIdentifier(node, name, "require") && !needCollisionCheckForIdentifier(node, name, "exports")) {
	                return;
	            }
	            if (node.kind === 216 && ts.getModuleInstanceState(node) !== 1) {
	                return;
	            }
	            var parent = getDeclarationContainer(node);
	            if (parent.kind === 246 && ts.isExternalModule(parent)) {
	                error(name, ts.Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module, ts.declarationNameToString(name), ts.declarationNameToString(name));
	            }
	        }
	        function checkVarDeclaredNamesNotShadowed(node) {
	            // - ScriptBody : StatementList
	            // It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList
	            // also occurs in the VarDeclaredNames of StatementList.
	            if ((ts.getCombinedNodeFlags(node) & 49152) !== 0 || ts.isParameterDeclaration(node)) {
	                return;
	            }
	            if (node.kind === 209 && !node.initializer) {
	                return;
	            }
	            var symbol = getSymbolOfNode(node);
	            if (symbol.flags & 1) {
	                var localDeclarationSymbol = resolveName(node, node.name.text, 3, undefined, undefined);
	                if (localDeclarationSymbol &&
	                    localDeclarationSymbol !== symbol &&
	                    localDeclarationSymbol.flags & 2) {
	                    if (getDeclarationFlagsFromSymbol(localDeclarationSymbol) & 49152) {
	                        var varDeclList = ts.getAncestor(localDeclarationSymbol.valueDeclaration, 210);
	                        var container = varDeclList.parent.kind === 191 && varDeclList.parent.parent
	                            ? varDeclList.parent.parent
	                            : undefined;
	                        var namesShareScope = container &&
	                            (container.kind === 190 && ts.isFunctionLike(container.parent) ||
	                                container.kind === 217 ||
	                                container.kind === 216 ||
	                                container.kind === 246);
	                        if (!namesShareScope) {
	                            var name_14 = symbolToString(localDeclarationSymbol);
	                            error(node, ts.Diagnostics.Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1, name_14, name_14);
	                        }
	                    }
	                }
	            }
	        }
	        function checkParameterInitializer(node) {
	            if (ts.getRootDeclaration(node).kind !== 136) {
	                return;
	            }
	            var func = ts.getContainingFunction(node);
	            visit(node.initializer);
	            function visit(n) {
	                if (n.kind === 67) {
	                    var referencedSymbol = getNodeLinks(n).resolvedSymbol;
	                    if (referencedSymbol && referencedSymbol !== unknownSymbol && getSymbol(func.locals, referencedSymbol.name, 107455) === referencedSymbol) {
	                        if (referencedSymbol.valueDeclaration.kind === 136) {
	                            if (referencedSymbol.valueDeclaration === node) {
	                                error(n, ts.Diagnostics.Parameter_0_cannot_be_referenced_in_its_initializer, ts.declarationNameToString(node.name));
	                                return;
	                            }
	                            if (referencedSymbol.valueDeclaration.pos < node.pos) {
	                                return;
	                            }
	                        }
	                        error(n, ts.Diagnostics.Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it, ts.declarationNameToString(node.name), ts.declarationNameToString(n));
	                    }
	                }
	                else {
	                    ts.forEachChild(n, visit);
	                }
	            }
	        }
	        function checkVariableLikeDeclaration(node) {
	            checkDecorators(node);
	            checkSourceElement(node.type);
	            if (node.name.kind === 134) {
	                checkComputedPropertyName(node.name);
	                if (node.initializer) {
	                    checkExpressionCached(node.initializer);
	                }
	            }
	            if (ts.isBindingPattern(node.name)) {
	                ts.forEach(node.name.elements, checkSourceElement);
	            }
	            if (node.initializer && ts.getRootDeclaration(node).kind === 136 && ts.nodeIsMissing(ts.getContainingFunction(node).body)) {
	                error(node, ts.Diagnostics.A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation);
	                return;
	            }
	            if (ts.isBindingPattern(node.name)) {
	                if (node.initializer) {
	                    checkTypeAssignableTo(checkExpressionCached(node.initializer), getWidenedTypeForVariableLikeDeclaration(node), node, undefined);
	                    checkParameterInitializer(node);
	                }
	                return;
	            }
	            var symbol = getSymbolOfNode(node);
	            var type = getTypeOfVariableOrParameterOrProperty(symbol);
	            if (node === symbol.valueDeclaration) {
	                if (node.initializer) {
	                    checkTypeAssignableTo(checkExpressionCached(node.initializer), type, node, undefined);
	                    checkParameterInitializer(node);
	                }
	            }
	            else {
	                var declarationType = getWidenedTypeForVariableLikeDeclaration(node);
	                if (type !== unknownType && declarationType !== unknownType && !isTypeIdenticalTo(type, declarationType)) {
	                    error(node.name, ts.Diagnostics.Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2, ts.declarationNameToString(node.name), typeToString(type), typeToString(declarationType));
	                }
	                if (node.initializer) {
	                    checkTypeAssignableTo(checkExpressionCached(node.initializer), declarationType, node, undefined);
	                }
	            }
	            if (node.kind !== 139 && node.kind !== 138) {
	                checkExportsOnMergedDeclarations(node);
	                if (node.kind === 209 || node.kind === 161) {
	                    checkVarDeclaredNamesNotShadowed(node);
	                }
	                checkCollisionWithCapturedSuperVariable(node, node.name);
	                checkCollisionWithCapturedThisVariable(node, node.name);
	                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);
	            }
	        }
	        function checkVariableDeclaration(node) {
	            checkGrammarVariableDeclaration(node);
	            return checkVariableLikeDeclaration(node);
	        }
	        function checkBindingElement(node) {
	            checkGrammarBindingElement(node);
	            return checkVariableLikeDeclaration(node);
	        }
	        function checkVariableStatement(node) {
	            checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarVariableDeclarationList(node.declarationList) || checkGrammarForDisallowedLetOrConstStatement(node);
	            ts.forEach(node.declarationList.declarations, checkSourceElement);
	        }
	        function checkGrammarDisallowedModifiersOnObjectLiteralExpressionMethod(node) {
	            if (node.modifiers && node.parent.kind === 163) {
	                if (ts.isAsyncFunctionLike(node)) {
	                    if (node.modifiers.length > 1) {
	                        return grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_cannot_appear_here);
	                    }
	                }
	                else {
	                    return grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_cannot_appear_here);
	                }
	            }
	        }
	        function checkExpressionStatement(node) {
	            checkGrammarStatementInAmbientContext(node);
	            checkExpression(node.expression);
	        }
	        function checkIfStatement(node) {
	            checkGrammarStatementInAmbientContext(node);
	            checkExpression(node.expression);
	            checkSourceElement(node.thenStatement);
	            checkSourceElement(node.elseStatement);
	        }
	        function checkDoStatement(node) {
	            checkGrammarStatementInAmbientContext(node);
	            checkSourceElement(node.statement);
	            checkExpression(node.expression);
	        }
	        function checkWhileStatement(node) {
	            checkGrammarStatementInAmbientContext(node);
	            checkExpression(node.expression);
	            checkSourceElement(node.statement);
	        }
	        function checkForStatement(node) {
	            if (!checkGrammarStatementInAmbientContext(node)) {
	                if (node.initializer && node.initializer.kind === 210) {
	                    checkGrammarVariableDeclarationList(node.initializer);
	                }
	            }
	            if (node.initializer) {
	                if (node.initializer.kind === 210) {
	                    ts.forEach(node.initializer.declarations, checkVariableDeclaration);
	                }
	                else {
	                    checkExpression(node.initializer);
	                }
	            }
	            if (node.condition)
	                checkExpression(node.condition);
	            if (node.incrementor)
	                checkExpression(node.incrementor);
	            checkSourceElement(node.statement);
	        }
	        function checkForOfStatement(node) {
	            checkGrammarForInOrForOfStatement(node);
	            if (node.initializer.kind === 210) {
	                checkForInOrForOfVariableDeclaration(node);
	            }
	            else {
	                var varExpr = node.initializer;
	                var iteratedType = checkRightHandSideOfForOf(node.expression);
	                if (varExpr.kind === 162 || varExpr.kind === 163) {
	                    checkDestructuringAssignment(varExpr, iteratedType || unknownType);
	                }
	                else {
	                    var leftType = checkExpression(varExpr);
	                    checkReferenceExpression(varExpr, ts.Diagnostics.Invalid_left_hand_side_in_for_of_statement, ts.Diagnostics.The_left_hand_side_of_a_for_of_statement_cannot_be_a_previously_defined_constant);
	                    if (iteratedType) {
	                        checkTypeAssignableTo(iteratedType, leftType, varExpr, undefined);
	                    }
	                }
	            }
	            checkSourceElement(node.statement);
	        }
	        function checkForInStatement(node) {
	            checkGrammarForInOrForOfStatement(node);
	            if (node.initializer.kind === 210) {
	                var variable = node.initializer.declarations[0];
	                if (variable && ts.isBindingPattern(variable.name)) {
	                    error(variable.name, ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern);
	                }
	                checkForInOrForOfVariableDeclaration(node);
	            }
	            else {
	                var varExpr = node.initializer;
	                var leftType = checkExpression(varExpr);
	                if (varExpr.kind === 162 || varExpr.kind === 163) {
	                    error(varExpr, ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern);
	                }
	                else if (!isTypeAnyOrAllConstituentTypesHaveKind(leftType, 258)) {
	                    error(varExpr, ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any);
	                }
	                else {
	                    checkReferenceExpression(varExpr, ts.Diagnostics.Invalid_left_hand_side_in_for_in_statement, ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_previously_defined_constant);
	                }
	            }
	            var rightType = checkExpression(node.expression);
	            if (!isTypeAnyOrAllConstituentTypesHaveKind(rightType, 80896 | 512)) {
	                error(node.expression, ts.Diagnostics.The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter);
	            }
	            checkSourceElement(node.statement);
	        }
	        function checkForInOrForOfVariableDeclaration(iterationStatement) {
	            var variableDeclarationList = iterationStatement.initializer;
	            if (variableDeclarationList.declarations.length >= 1) {
	                var decl = variableDeclarationList.declarations[0];
	                checkVariableDeclaration(decl);
	            }
	        }
	        function checkRightHandSideOfForOf(rhsExpression) {
	            var expressionType = getTypeOfExpression(rhsExpression);
	            return checkIteratedTypeOrElementType(expressionType, rhsExpression, true);
	        }
	        function checkIteratedTypeOrElementType(inputType, errorNode, allowStringInput) {
	            if (isTypeAny(inputType)) {
	                return inputType;
	            }
	            if (languageVersion >= 2) {
	                return checkElementTypeOfIterable(inputType, errorNode);
	            }
	            if (allowStringInput) {
	                return checkElementTypeOfArrayOrString(inputType, errorNode);
	            }
	            if (isArrayLikeType(inputType)) {
	                var indexType = getIndexTypeOfType(inputType, 1);
	                if (indexType) {
	                    return indexType;
	                }
	            }
	            error(errorNode, ts.Diagnostics.Type_0_is_not_an_array_type, typeToString(inputType));
	            return unknownType;
	        }
	        function checkElementTypeOfIterable(iterable, errorNode) {
	            var elementType = getElementTypeOfIterable(iterable, errorNode);
	            if (errorNode && elementType) {
	                checkTypeAssignableTo(iterable, createIterableType(elementType), errorNode);
	            }
	            return elementType || anyType;
	        }
	        function getElementTypeOfIterable(type, errorNode) {
	            if (isTypeAny(type)) {
	                return undefined;
	            }
	            var typeAsIterable = type;
	            if (!typeAsIterable.iterableElementType) {
	                if ((type.flags & 4096) && type.target === globalIterableType) {
	                    typeAsIterable.iterableElementType = type.typeArguments[0];
	                }
	                else {
	                    var iteratorFunction = getTypeOfPropertyOfType(type, ts.getPropertyNameForKnownSymbolName("iterator"));
	                    if (isTypeAny(iteratorFunction)) {
	                        return undefined;
	                    }
	                    var iteratorFunctionSignatures = iteratorFunction ? getSignaturesOfType(iteratorFunction, 0) : emptyArray;
	                    if (iteratorFunctionSignatures.length === 0) {
	                        if (errorNode) {
	                            error(errorNode, ts.Diagnostics.Type_must_have_a_Symbol_iterator_method_that_returns_an_iterator);
	                        }
	                        return undefined;
	                    }
	                    typeAsIterable.iterableElementType = getElementTypeOfIterator(getUnionType(ts.map(iteratorFunctionSignatures, getReturnTypeOfSignature)), errorNode);
	                }
	            }
	            return typeAsIterable.iterableElementType;
	        }
	        function getElementTypeOfIterator(type, errorNode) {
	            if (isTypeAny(type)) {
	                return undefined;
	            }
	            var typeAsIterator = type;
	            if (!typeAsIterator.iteratorElementType) {
	                if ((type.flags & 4096) && type.target === globalIteratorType) {
	                    typeAsIterator.iteratorElementType = type.typeArguments[0];
	                }
	                else {
	                    var iteratorNextFunction = getTypeOfPropertyOfType(type, "next");
	                    if (isTypeAny(iteratorNextFunction)) {
	                        return undefined;
	                    }
	                    var iteratorNextFunctionSignatures = iteratorNextFunction ? getSignaturesOfType(iteratorNextFunction, 0) : emptyArray;
	                    if (iteratorNextFunctionSignatures.length === 0) {
	                        if (errorNode) {
	                            error(errorNode, ts.Diagnostics.An_iterator_must_have_a_next_method);
	                        }
	                        return undefined;
	                    }
	                    var iteratorNextResult = getUnionType(ts.map(iteratorNextFunctionSignatures, getReturnTypeOfSignature));
	                    if (isTypeAny(iteratorNextResult)) {
	                        return undefined;
	                    }
	                    var iteratorNextValue = getTypeOfPropertyOfType(iteratorNextResult, "value");
	                    if (!iteratorNextValue) {
	                        if (errorNode) {
	                            error(errorNode, ts.Diagnostics.The_type_returned_by_the_next_method_of_an_iterator_must_have_a_value_property);
	                        }
	                        return undefined;
	                    }
	                    typeAsIterator.iteratorElementType = iteratorNextValue;
	                }
	            }
	            return typeAsIterator.iteratorElementType;
	        }
	        function getElementTypeOfIterableIterator(type) {
	            if (isTypeAny(type)) {
	                return undefined;
	            }
	            if ((type.flags & 4096) && type.target === globalIterableIteratorType) {
	                return type.typeArguments[0];
	            }
	            return getElementTypeOfIterable(type, undefined) ||
	                getElementTypeOfIterator(type, undefined);
	        }
	        function checkElementTypeOfArrayOrString(arrayOrStringType, errorNode) {
	            ts.Debug.assert(languageVersion < 2);
	            var arrayType = removeTypesFromUnionType(arrayOrStringType, 258, true, true);
	            var hasStringConstituent = arrayOrStringType !== arrayType;
	            var reportedError = false;
	            if (hasStringConstituent) {
	                if (languageVersion < 1) {
	                    error(errorNode, ts.Diagnostics.Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher);
	                    reportedError = true;
	                }
	                if (arrayType === emptyObjectType) {
	                    return stringType;
	                }
	            }
	            if (!isArrayLikeType(arrayType)) {
	                if (!reportedError) {
	                    var diagnostic = hasStringConstituent
	                        ? ts.Diagnostics.Type_0_is_not_an_array_type
	                        : ts.Diagnostics.Type_0_is_not_an_array_type_or_a_string_type;
	                    error(errorNode, diagnostic, typeToString(arrayType));
	                }
	                return hasStringConstituent ? stringType : unknownType;
	            }
	            var arrayElementType = getIndexTypeOfType(arrayType, 1) || unknownType;
	            if (hasStringConstituent) {
	                if (arrayElementType.flags & 258) {
	                    return stringType;
	                }
	                return getUnionType([arrayElementType, stringType]);
	            }
	            return arrayElementType;
	        }
	        function checkBreakOrContinueStatement(node) {
	            checkGrammarStatementInAmbientContext(node) || checkGrammarBreakOrContinueStatement(node);
	        }
	        function isGetAccessorWithAnnotatatedSetAccessor(node) {
	            return !!(node.kind === 143 && ts.getSetAccessorTypeAnnotationNode(ts.getDeclarationOfKind(node.symbol, 144)));
	        }
	        function checkReturnStatement(node) {
	            if (!checkGrammarStatementInAmbientContext(node)) {
	                var functionBlock = ts.getContainingFunction(node);
	                if (!functionBlock) {
	                    grammarErrorOnFirstToken(node, ts.Diagnostics.A_return_statement_can_only_be_used_within_a_function_body);
	                }
	            }
	            if (node.expression) {
	                var func = ts.getContainingFunction(node);
	                if (func) {
	                    var signature = getSignatureFromDeclaration(func);
	                    var returnType = getReturnTypeOfSignature(signature);
	                    var exprType = checkExpressionCached(node.expression);
	                    if (func.asteriskToken) {
	                        return;
	                    }
	                    if (func.kind === 144) {
	                        error(node.expression, ts.Diagnostics.Setters_cannot_return_a_value);
	                    }
	                    else if (func.kind === 142) {
	                        if (!isTypeAssignableTo(exprType, returnType)) {
	                            error(node.expression, ts.Diagnostics.Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class);
	                        }
	                    }
	                    else if (func.type || isGetAccessorWithAnnotatatedSetAccessor(func) || signature.typePredicate) {
	                        if (ts.isAsyncFunctionLike(func)) {
	                            var promisedType = getPromisedType(returnType);
	                            var awaitedType = checkAwaitedType(exprType, node.expression, ts.Diagnostics.Return_expression_in_async_function_does_not_have_a_valid_callable_then_member);
	                            checkTypeAssignableTo(awaitedType, promisedType, node.expression);
	                        }
	                        else {
	                            checkTypeAssignableTo(exprType, returnType, node.expression);
	                        }
	                    }
	                }
	            }
	        }
	        function checkWithStatement(node) {
	            if (!checkGrammarStatementInAmbientContext(node)) {
	                if (node.parserContextFlags & 8) {
	                    grammarErrorOnFirstToken(node, ts.Diagnostics.with_statements_are_not_allowed_in_an_async_function_block);
	                }
	            }
	            checkExpression(node.expression);
	            error(node.expression, ts.Diagnostics.All_symbols_within_a_with_block_will_be_resolved_to_any);
	        }
	        function checkSwitchStatement(node) {
	            checkGrammarStatementInAmbientContext(node);
	            var firstDefaultClause;
	            var hasDuplicateDefaultClause = false;
	            var expressionType = checkExpression(node.expression);
	            ts.forEach(node.caseBlock.clauses, function (clause) {
	                if (clause.kind === 240 && !hasDuplicateDefaultClause) {
	                    if (firstDefaultClause === undefined) {
	                        firstDefaultClause = clause;
	                    }
	                    else {
	                        var sourceFile = ts.getSourceFileOfNode(node);
	                        var start = ts.skipTrivia(sourceFile.text, clause.pos);
	                        var end = clause.statements.length > 0 ? clause.statements[0].pos : clause.end;
	                        grammarErrorAtPos(sourceFile, start, end - start, ts.Diagnostics.A_default_clause_cannot_appear_more_than_once_in_a_switch_statement);
	                        hasDuplicateDefaultClause = true;
	                    }
	                }
	                if (produceDiagnostics && clause.kind === 239) {
	                    var caseClause = clause;
	                    var caseType = checkExpression(caseClause.expression);
	                    if (!isTypeAssignableTo(expressionType, caseType)) {
	                        checkTypeAssignableTo(caseType, expressionType, caseClause.expression, undefined);
	                    }
	                }
	                ts.forEach(clause.statements, checkSourceElement);
	            });
	        }
	        function checkLabeledStatement(node) {
	            if (!checkGrammarStatementInAmbientContext(node)) {
	                var current = node.parent;
	                while (current) {
	                    if (ts.isFunctionLike(current)) {
	                        break;
	                    }
	                    if (current.kind === 205 && current.label.text === node.label.text) {
	                        var sourceFile = ts.getSourceFileOfNode(node);
	                        grammarErrorOnNode(node.label, ts.Diagnostics.Duplicate_label_0, ts.getTextOfNodeFromSourceText(sourceFile.text, node.label));
	                        break;
	                    }
	                    current = current.parent;
	                }
	            }
	            checkSourceElement(node.statement);
	        }
	        function checkThrowStatement(node) {
	            if (!checkGrammarStatementInAmbientContext(node)) {
	                if (node.expression === undefined) {
	                    grammarErrorAfterFirstToken(node, ts.Diagnostics.Line_break_not_permitted_here);
	                }
	            }
	            if (node.expression) {
	                checkExpression(node.expression);
	            }
	        }
	        function checkTryStatement(node) {
	            checkGrammarStatementInAmbientContext(node);
	            checkBlock(node.tryBlock);
	            var catchClause = node.catchClause;
	            if (catchClause) {
	                if (catchClause.variableDeclaration) {
	                    if (catchClause.variableDeclaration.name.kind !== 67) {
	                        grammarErrorOnFirstToken(catchClause.variableDeclaration.name, ts.Diagnostics.Catch_clause_variable_name_must_be_an_identifier);
	                    }
	                    else if (catchClause.variableDeclaration.type) {
	                        grammarErrorOnFirstToken(catchClause.variableDeclaration.type, ts.Diagnostics.Catch_clause_variable_cannot_have_a_type_annotation);
	                    }
	                    else if (catchClause.variableDeclaration.initializer) {
	                        grammarErrorOnFirstToken(catchClause.variableDeclaration.initializer, ts.Diagnostics.Catch_clause_variable_cannot_have_an_initializer);
	                    }
	                    else {
	                        var identifierName = catchClause.variableDeclaration.name.text;
	                        var locals = catchClause.block.locals;
	                        if (locals && ts.hasProperty(locals, identifierName)) {
	                            var localSymbol = locals[identifierName];
	                            if (localSymbol && (localSymbol.flags & 2) !== 0) {
	                                grammarErrorOnNode(localSymbol.valueDeclaration, ts.Diagnostics.Cannot_redeclare_identifier_0_in_catch_clause, identifierName);
	                            }
	                        }
	                    }
	                }
	                checkBlock(catchClause.block);
	            }
	            if (node.finallyBlock) {
	                checkBlock(node.finallyBlock);
	            }
	        }
	        function checkIndexConstraints(type) {
	            var declaredNumberIndexer = getIndexDeclarationOfSymbol(type.symbol, 1);
	            var declaredStringIndexer = getIndexDeclarationOfSymbol(type.symbol, 0);
	            var stringIndexType = getIndexTypeOfType(type, 0);
	            var numberIndexType = getIndexTypeOfType(type, 1);
	            if (stringIndexType || numberIndexType) {
	                ts.forEach(getPropertiesOfObjectType(type), function (prop) {
	                    var propType = getTypeOfSymbol(prop);
	                    checkIndexConstraintForProperty(prop, propType, type, declaredStringIndexer, stringIndexType, 0);
	                    checkIndexConstraintForProperty(prop, propType, type, declaredNumberIndexer, numberIndexType, 1);
	                });
	                if (type.flags & 1024 && ts.isClassLike(type.symbol.valueDeclaration)) {
	                    var classDeclaration = type.symbol.valueDeclaration;
	                    for (var _i = 0, _a = classDeclaration.members; _i < _a.length; _i++) {
	                        var member = _a[_i];
	                        if (!(member.flags & 128) && ts.hasDynamicName(member)) {
	                            var propType = getTypeOfSymbol(member.symbol);
	                            checkIndexConstraintForProperty(member.symbol, propType, type, declaredStringIndexer, stringIndexType, 0);
	                            checkIndexConstraintForProperty(member.symbol, propType, type, declaredNumberIndexer, numberIndexType, 1);
	                        }
	                    }
	                }
	            }
	            var errorNode;
	            if (stringIndexType && numberIndexType) {
	                errorNode = declaredNumberIndexer || declaredStringIndexer;
	                if (!errorNode && (type.flags & 2048)) {
	                    var someBaseTypeHasBothIndexers = ts.forEach(getBaseTypes(type), function (base) { return getIndexTypeOfType(base, 0) && getIndexTypeOfType(base, 1); });
	                    errorNode = someBaseTypeHasBothIndexers ? undefined : type.symbol.declarations[0];
	                }
	            }
	            if (errorNode && !isTypeAssignableTo(numberIndexType, stringIndexType)) {
	                error(errorNode, ts.Diagnostics.Numeric_index_type_0_is_not_assignable_to_string_index_type_1, typeToString(numberIndexType), typeToString(stringIndexType));
	            }
	            function checkIndexConstraintForProperty(prop, propertyType, containingType, indexDeclaration, indexType, indexKind) {
	                if (!indexType) {
	                    return;
	                }
	                if (indexKind === 1 && !isNumericName(prop.valueDeclaration.name)) {
	                    return;
	                }
	                var errorNode;
	                if (prop.valueDeclaration.name.kind === 134 || prop.parent === containingType.symbol) {
	                    errorNode = prop.valueDeclaration;
	                }
	                else if (indexDeclaration) {
	                    errorNode = indexDeclaration;
	                }
	                else if (containingType.flags & 2048) {
	                    var someBaseClassHasBothPropertyAndIndexer = ts.forEach(getBaseTypes(containingType), function (base) { return getPropertyOfObjectType(base, prop.name) && getIndexTypeOfType(base, indexKind); });
	                    errorNode = someBaseClassHasBothPropertyAndIndexer ? undefined : containingType.symbol.declarations[0];
	                }
	                if (errorNode && !isTypeAssignableTo(propertyType, indexType)) {
	                    var errorMessage = indexKind === 0
	                        ? ts.Diagnostics.Property_0_of_type_1_is_not_assignable_to_string_index_type_2
	                        : ts.Diagnostics.Property_0_of_type_1_is_not_assignable_to_numeric_index_type_2;
	                    error(errorNode, errorMessage, symbolToString(prop), typeToString(propertyType), typeToString(indexType));
	                }
	            }
	        }
	        function checkTypeNameIsReserved(name, message) {
	            switch (name.text) {
	                case "any":
	                case "number":
	                case "boolean":
	                case "string":
	                case "symbol":
	                case "void":
	                    error(name, message, name.text);
	            }
	        }
	        function checkTypeParameters(typeParameterDeclarations) {
	            if (typeParameterDeclarations) {
	                for (var i = 0, n = typeParameterDeclarations.length; i < n; i++) {
	                    var node = typeParameterDeclarations[i];
	                    checkTypeParameter(node);
	                    if (produceDiagnostics) {
	                        for (var j = 0; j < i; j++) {
	                            if (typeParameterDeclarations[j].symbol === node.symbol) {
	                                error(node.name, ts.Diagnostics.Duplicate_identifier_0, ts.declarationNameToString(node.name));
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        function checkClassExpression(node) {
	            checkClassLikeDeclaration(node);
	            return getTypeOfSymbol(getSymbolOfNode(node));
	        }
	        function checkClassDeclaration(node) {
	            if (!node.name && !(node.flags & 1024)) {
	                grammarErrorOnFirstToken(node, ts.Diagnostics.A_class_declaration_without_the_default_modifier_must_have_a_name);
	            }
	            checkClassLikeDeclaration(node);
	            if (getSymbolOfNode(node).flags & 64 && !ts.isInAmbientContext(node)) {
	                error(node, ts.Diagnostics.Only_an_ambient_class_can_be_merged_with_an_interface);
	            }
	            ts.forEach(node.members, checkSourceElement);
	        }
	        function checkClassLikeDeclaration(node) {
	            checkGrammarClassDeclarationHeritageClauses(node);
	            checkDecorators(node);
	            if (node.name) {
	                checkTypeNameIsReserved(node.name, ts.Diagnostics.Class_name_cannot_be_0);
	                checkCollisionWithCapturedThisVariable(node, node.name);
	                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);
	            }
	            checkTypeParameters(node.typeParameters);
	            checkExportsOnMergedDeclarations(node);
	            var symbol = getSymbolOfNode(node);
	            var type = getDeclaredTypeOfSymbol(symbol);
	            var staticType = getTypeOfSymbol(symbol);
	            var baseTypeNode = ts.getClassExtendsHeritageClauseElement(node);
	            if (baseTypeNode) {
	                emitExtends = emitExtends || !ts.isInAmbientContext(node);
	                var baseTypes = getBaseTypes(type);
	                if (baseTypes.length && produceDiagnostics) {
	                    var baseType = baseTypes[0];
	                    var staticBaseType = getBaseConstructorTypeOfClass(type);
	                    checkSourceElement(baseTypeNode.expression);
	                    if (baseTypeNode.typeArguments) {
	                        ts.forEach(baseTypeNode.typeArguments, checkSourceElement);
	                        for (var _i = 0, _a = getConstructorsForTypeArguments(staticBaseType, baseTypeNode.typeArguments); _i < _a.length; _i++) {
	                            var constructor = _a[_i];
	                            if (!checkTypeArgumentConstraints(constructor.typeParameters, baseTypeNode.typeArguments)) {
	                                break;
	                            }
	                        }
	                    }
	                    checkTypeAssignableTo(type, baseType, node.name || node, ts.Diagnostics.Class_0_incorrectly_extends_base_class_1);
	                    checkTypeAssignableTo(staticType, getTypeWithoutSignatures(staticBaseType), node.name || node, ts.Diagnostics.Class_static_side_0_incorrectly_extends_base_class_static_side_1);
	                    if (!(staticBaseType.symbol && staticBaseType.symbol.flags & 32)) {
	                        var constructors = getInstantiatedConstructorsForTypeArguments(staticBaseType, baseTypeNode.typeArguments);
	                        if (ts.forEach(constructors, function (sig) { return getReturnTypeOfSignature(sig) !== baseType; })) {
	                            error(baseTypeNode.expression, ts.Diagnostics.Base_constructors_must_all_have_the_same_return_type);
	                        }
	                    }
	                    checkKindsOfPropertyMemberOverrides(type, baseType);
	                }
	            }
	            var implementedTypeNodes = ts.getClassImplementsHeritageClauseElements(node);
	            if (implementedTypeNodes) {
	                ts.forEach(implementedTypeNodes, function (typeRefNode) {
	                    if (!ts.isSupportedExpressionWithTypeArguments(typeRefNode)) {
	                        error(typeRefNode.expression, ts.Diagnostics.A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments);
	                    }
	                    checkTypeReferenceNode(typeRefNode);
	                    if (produceDiagnostics) {
	                        var t = getTypeFromTypeNode(typeRefNode);
	                        if (t !== unknownType) {
	                            var declaredType = (t.flags & 4096) ? t.target : t;
	                            if (declaredType.flags & (1024 | 2048)) {
	                                checkTypeAssignableTo(type, t, node.name || node, ts.Diagnostics.Class_0_incorrectly_implements_interface_1);
	                            }
	                            else {
	                                error(typeRefNode, ts.Diagnostics.A_class_may_only_implement_another_class_or_interface);
	                            }
	                        }
	                    }
	                });
	            }
	            if (produceDiagnostics) {
	                checkIndexConstraints(type);
	                checkTypeForDuplicateIndexSignatures(node);
	            }
	        }
	        function getTargetSymbol(s) {
	            return s.flags & 16777216 ? getSymbolLinks(s).target : s;
	        }
	        function checkKindsOfPropertyMemberOverrides(type, baseType) {
	            // TypeScript 1.0 spec (April 2014): 8.2.3
	            // A derived class inherits all members from its base class it doesn't override.
	            // Inheritance means that a derived class implicitly contains all non - overridden members of the base class.
	            // Both public and private property members are inherited, but only public property members can be overridden.
	            // A property member in a derived class is said to override a property member in a base class
	            // when the derived class property member has the same name and kind(instance or static)
	            // as the base class property member.
	            // The type of an overriding property member must be assignable(section 3.8.4)
	            // to the type of the overridden property member, or otherwise a compile - time error occurs.
	            // Base class instance member functions can be overridden by derived class instance member functions,
	            // but not by other kinds of members.
	            // Base class instance member variables and accessors can be overridden by
	            // derived class instance member variables and accessors, but not by other kinds of members.
	            var baseProperties = getPropertiesOfObjectType(baseType);
	            for (var _i = 0; _i < baseProperties.length; _i++) {
	                var baseProperty = baseProperties[_i];
	                var base = getTargetSymbol(baseProperty);
	                if (base.flags & 134217728) {
	                    continue;
	                }
	                var derived = getTargetSymbol(getPropertyOfObjectType(type, base.name));
	                var baseDeclarationFlags = getDeclarationFlagsFromSymbol(base);
	                ts.Debug.assert(!!derived, "derived should point to something, even if it is the base class' declaration.");
	                if (derived) {
	                    if (derived === base) {
	                        var derivedClassDecl = ts.getDeclarationOfKind(type.symbol, 212);
	                        if (baseDeclarationFlags & 256 && (!derivedClassDecl || !(derivedClassDecl.flags & 256))) {
	                            error(derivedClassDecl, ts.Diagnostics.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2, typeToString(type), symbolToString(baseProperty), typeToString(baseType));
	                        }
	                    }
	                    else {
	                        var derivedDeclarationFlags = getDeclarationFlagsFromSymbol(derived);
	                        if ((baseDeclarationFlags & 32) || (derivedDeclarationFlags & 32)) {
	                            continue;
	                        }
	                        if ((baseDeclarationFlags & 128) !== (derivedDeclarationFlags & 128)) {
	                            continue;
	                        }
	                        if ((base.flags & derived.flags & 8192) || ((base.flags & 98308) && (derived.flags & 98308))) {
	                            continue;
	                        }
	                        var errorMessage = void 0;
	                        if (base.flags & 8192) {
	                            if (derived.flags & 98304) {
	                                errorMessage = ts.Diagnostics.Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor;
	                            }
	                            else {
	                                ts.Debug.assert((derived.flags & 4) !== 0);
	                                errorMessage = ts.Diagnostics.Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property;
	                            }
	                        }
	                        else if (base.flags & 4) {
	                            ts.Debug.assert((derived.flags & 8192) !== 0);
	                            errorMessage = ts.Diagnostics.Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function;
	                        }
	                        else {
	                            ts.Debug.assert((base.flags & 98304) !== 0);
	                            ts.Debug.assert((derived.flags & 8192) !== 0);
	                            errorMessage = ts.Diagnostics.Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function;
	                        }
	                        error(derived.valueDeclaration.name, errorMessage, typeToString(baseType), symbolToString(base), typeToString(type));
	                    }
	                }
	            }
	        }
	        function isAccessor(kind) {
	            return kind === 143 || kind === 144;
	        }
	        function areTypeParametersIdentical(list1, list2) {
	            if (!list1 && !list2) {
	                return true;
	            }
	            if (!list1 || !list2 || list1.length !== list2.length) {
	                return false;
	            }
	            for (var i = 0, len = list1.length; i < len; i++) {
	                var tp1 = list1[i];
	                var tp2 = list2[i];
	                if (tp1.name.text !== tp2.name.text) {
	                    return false;
	                }
	                if (!tp1.constraint && !tp2.constraint) {
	                    continue;
	                }
	                if (!tp1.constraint || !tp2.constraint) {
	                    return false;
	                }
	                if (!isTypeIdenticalTo(getTypeFromTypeNode(tp1.constraint), getTypeFromTypeNode(tp2.constraint))) {
	                    return false;
	                }
	            }
	            return true;
	        }
	        function checkInheritedPropertiesAreIdentical(type, typeNode) {
	            var baseTypes = getBaseTypes(type);
	            if (baseTypes.length < 2) {
	                return true;
	            }
	            var seen = {};
	            ts.forEach(resolveDeclaredMembers(type).declaredProperties, function (p) { seen[p.name] = { prop: p, containingType: type }; });
	            var ok = true;
	            for (var _i = 0; _i < baseTypes.length; _i++) {
	                var base = baseTypes[_i];
	                var properties = getPropertiesOfObjectType(base);
	                for (var _a = 0; _a < properties.length; _a++) {
	                    var prop = properties[_a];
	                    if (!ts.hasProperty(seen, prop.name)) {
	                        seen[prop.name] = { prop: prop, containingType: base };
	                    }
	                    else {
	                        var existing = seen[prop.name];
	                        var isInheritedProperty = existing.containingType !== type;
	                        if (isInheritedProperty && !isPropertyIdenticalTo(existing.prop, prop)) {
	                            ok = false;
	                            var typeName1 = typeToString(existing.containingType);
	                            var typeName2 = typeToString(base);
	                            var errorInfo = ts.chainDiagnosticMessages(undefined, ts.Diagnostics.Named_property_0_of_types_1_and_2_are_not_identical, symbolToString(prop), typeName1, typeName2);
	                            errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.Interface_0_cannot_simultaneously_extend_types_1_and_2, typeToString(type), typeName1, typeName2);
	                            diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(typeNode, errorInfo));
	                        }
	                    }
	                }
	            }
	            return ok;
	        }
	        function checkInterfaceDeclaration(node) {
	            checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarInterfaceDeclaration(node);
	            checkTypeParameters(node.typeParameters);
	            if (produceDiagnostics) {
	                checkTypeNameIsReserved(node.name, ts.Diagnostics.Interface_name_cannot_be_0);
	                checkExportsOnMergedDeclarations(node);
	                var symbol = getSymbolOfNode(node);
	                var firstInterfaceDecl = ts.getDeclarationOfKind(symbol, 213);
	                if (symbol.declarations.length > 1) {
	                    if (node !== firstInterfaceDecl && !areTypeParametersIdentical(firstInterfaceDecl.typeParameters, node.typeParameters)) {
	                        error(node.name, ts.Diagnostics.All_declarations_of_an_interface_must_have_identical_type_parameters);
	                    }
	                }
	                if (node === firstInterfaceDecl) {
	                    var type = getDeclaredTypeOfSymbol(symbol);
	                    if (checkInheritedPropertiesAreIdentical(type, node.name)) {
	                        ts.forEach(getBaseTypes(type), function (baseType) {
	                            checkTypeAssignableTo(type, baseType, node.name, ts.Diagnostics.Interface_0_incorrectly_extends_interface_1);
	                        });
	                        checkIndexConstraints(type);
	                    }
	                }
	                if (symbol && symbol.declarations) {
	                    for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
	                        var declaration = _a[_i];
	                        if (declaration.kind === 212 && !ts.isInAmbientContext(declaration)) {
	                            error(node, ts.Diagnostics.Only_an_ambient_class_can_be_merged_with_an_interface);
	                            break;
	                        }
	                    }
	                }
	            }
	            ts.forEach(ts.getInterfaceBaseTypeNodes(node), function (heritageElement) {
	                if (!ts.isSupportedExpressionWithTypeArguments(heritageElement)) {
	                    error(heritageElement.expression, ts.Diagnostics.An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments);
	                }
	                checkTypeReferenceNode(heritageElement);
	            });
	            ts.forEach(node.members, checkSourceElement);
	            if (produceDiagnostics) {
	                checkTypeForDuplicateIndexSignatures(node);
	            }
	        }
	        function checkTypeAliasDeclaration(node) {
	            checkGrammarDecorators(node) || checkGrammarModifiers(node);
	            checkTypeNameIsReserved(node.name, ts.Diagnostics.Type_alias_name_cannot_be_0);
	            checkSourceElement(node.type);
	        }
	        function computeEnumMemberValues(node) {
	            var nodeLinks = getNodeLinks(node);
	            if (!(nodeLinks.flags & 8192)) {
	                var enumSymbol = getSymbolOfNode(node);
	                var enumType = getDeclaredTypeOfSymbol(enumSymbol);
	                var autoValue = 0;
	                var ambient = ts.isInAmbientContext(node);
	                var enumIsConst = ts.isConst(node);
	                ts.forEach(node.members, function (member) {
	                    if (member.name.kind !== 134 && isNumericLiteralName(member.name.text)) {
	                        error(member.name, ts.Diagnostics.An_enum_member_cannot_have_a_numeric_name);
	                    }
	                    var initializer = member.initializer;
	                    if (initializer) {
	                        autoValue = computeConstantValueForEnumMemberInitializer(initializer, enumType, enumIsConst, ambient);
	                    }
	                    else if (ambient && !enumIsConst) {
	                        autoValue = undefined;
	                    }
	                    if (autoValue !== undefined) {
	                        getNodeLinks(member).enumMemberValue = autoValue++;
	                    }
	                });
	                nodeLinks.flags |= 8192;
	            }
	            function computeConstantValueForEnumMemberInitializer(initializer, enumType, enumIsConst, ambient) {
	                var reportError = true;
	                var value = evalConstant(initializer);
	                if (reportError) {
	                    if (value === undefined) {
	                        if (enumIsConst) {
	                            error(initializer, ts.Diagnostics.In_const_enum_declarations_member_initializer_must_be_constant_expression);
	                        }
	                        else if (!ambient) {
	                            checkTypeAssignableTo(checkExpression(initializer), enumType, initializer, undefined);
	                        }
	                    }
	                    else if (enumIsConst) {
	                        if (isNaN(value)) {
	                            error(initializer, ts.Diagnostics.const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN);
	                        }
	                        else if (!isFinite(value)) {
	                            error(initializer, ts.Diagnostics.const_enum_member_initializer_was_evaluated_to_a_non_finite_value);
	                        }
	                    }
	                }
	                return value;
	                function evalConstant(e) {
	                    switch (e.kind) {
	                        case 177:
	                            var value_1 = evalConstant(e.operand);
	                            if (value_1 === undefined) {
	                                return undefined;
	                            }
	                            switch (e.operator) {
	                                case 35: return value_1;
	                                case 36: return -value_1;
	                                case 49: return ~value_1;
	                            }
	                            return undefined;
	                        case 179:
	                            var left = evalConstant(e.left);
	                            if (left === undefined) {
	                                return undefined;
	                            }
	                            var right = evalConstant(e.right);
	                            if (right === undefined) {
	                                return undefined;
	                            }
	                            switch (e.operatorToken.kind) {
	                                case 46: return left | right;
	                                case 45: return left & right;
	                                case 43: return left >> right;
	                                case 44: return left >>> right;
	                                case 42: return left << right;
	                                case 47: return left ^ right;
	                                case 37: return left * right;
	                                case 38: return left / right;
	                                case 35: return left + right;
	                                case 36: return left - right;
	                                case 39: return left % right;
	                            }
	                            return undefined;
	                        case 8:
	                            return +e.text;
	                        case 170:
	                            return evalConstant(e.expression);
	                        case 67:
	                        case 165:
	                        case 164:
	                            var member = initializer.parent;
	                            var currentType = getTypeOfSymbol(getSymbolOfNode(member.parent));
	                            var enumType_1;
	                            var propertyName;
	                            if (e.kind === 67) {
	                                enumType_1 = currentType;
	                                propertyName = e.text;
	                            }
	                            else {
	                                var expression;
	                                if (e.kind === 165) {
	                                    if (e.argumentExpression === undefined ||
	                                        e.argumentExpression.kind !== 9) {
	                                        return undefined;
	                                    }
	                                    expression = e.expression;
	                                    propertyName = e.argumentExpression.text;
	                                }
	                                else {
	                                    expression = e.expression;
	                                    propertyName = e.name.text;
	                                }
	                                var current = expression;
	                                while (current) {
	                                    if (current.kind === 67) {
	                                        break;
	                                    }
	                                    else if (current.kind === 164) {
	                                        current = current.expression;
	                                    }
	                                    else {
	                                        return undefined;
	                                    }
	                                }
	                                enumType_1 = checkExpression(expression);
	                                if (!(enumType_1.symbol && (enumType_1.symbol.flags & 384))) {
	                                    return undefined;
	                                }
	                            }
	                            if (propertyName === undefined) {
	                                return undefined;
	                            }
	                            var property = getPropertyOfObjectType(enumType_1, propertyName);
	                            if (!property || !(property.flags & 8)) {
	                                return undefined;
	                            }
	                            var propertyDecl = property.valueDeclaration;
	                            if (member === propertyDecl) {
	                                return undefined;
	                            }
	                            if (!isDefinedBefore(propertyDecl, member)) {
	                                reportError = false;
	                                error(e, ts.Diagnostics.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums);
	                                return undefined;
	                            }
	                            return getNodeLinks(propertyDecl).enumMemberValue;
	                    }
	                }
	            }
	        }
	        function checkEnumDeclaration(node) {
	            if (!produceDiagnostics) {
	                return;
	            }
	            checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarEnumDeclaration(node);
	            checkTypeNameIsReserved(node.name, ts.Diagnostics.Enum_name_cannot_be_0);
	            checkCollisionWithCapturedThisVariable(node, node.name);
	            checkCollisionWithRequireExportsInGeneratedCode(node, node.name);
	            checkExportsOnMergedDeclarations(node);
	            computeEnumMemberValues(node);
	            var enumIsConst = ts.isConst(node);
	            if (compilerOptions.isolatedModules && enumIsConst && ts.isInAmbientContext(node)) {
	                error(node.name, ts.Diagnostics.Ambient_const_enums_are_not_allowed_when_the_isolatedModules_flag_is_provided);
	            }
	            var enumSymbol = getSymbolOfNode(node);
	            var firstDeclaration = ts.getDeclarationOfKind(enumSymbol, node.kind);
	            if (node === firstDeclaration) {
	                if (enumSymbol.declarations.length > 1) {
	                    ts.forEach(enumSymbol.declarations, function (decl) {
	                        if (ts.isConstEnumDeclaration(decl) !== enumIsConst) {
	                            error(decl.name, ts.Diagnostics.Enum_declarations_must_all_be_const_or_non_const);
	                        }
	                    });
	                }
	                var seenEnumMissingInitialInitializer = false;
	                ts.forEach(enumSymbol.declarations, function (declaration) {
	                    if (declaration.kind !== 215) {
	                        return false;
	                    }
	                    var enumDeclaration = declaration;
	                    if (!enumDeclaration.members.length) {
	                        return false;
	                    }
	                    var firstEnumMember = enumDeclaration.members[0];
	                    if (!firstEnumMember.initializer) {
	                        if (seenEnumMissingInitialInitializer) {
	                            error(firstEnumMember.name, ts.Diagnostics.In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element);
	                        }
	                        else {
	                            seenEnumMissingInitialInitializer = true;
	                        }
	                    }
	                });
	            }
	        }
	        function getFirstNonAmbientClassOrFunctionDeclaration(symbol) {
	            var declarations = symbol.declarations;
	            for (var _i = 0; _i < declarations.length; _i++) {
	                var declaration = declarations[_i];
	                if ((declaration.kind === 212 ||
	                    (declaration.kind === 211 && ts.nodeIsPresent(declaration.body))) &&
	                    !ts.isInAmbientContext(declaration)) {
	                    return declaration;
	                }
	            }
	            return undefined;
	        }
	        function inSameLexicalScope(node1, node2) {
	            var container1 = ts.getEnclosingBlockScopeContainer(node1);
	            var container2 = ts.getEnclosingBlockScopeContainer(node2);
	            if (isGlobalSourceFile(container1)) {
	                return isGlobalSourceFile(container2);
	            }
	            else if (isGlobalSourceFile(container2)) {
	                return false;
	            }
	            else {
	                return container1 === container2;
	            }
	        }
	        function checkModuleDeclaration(node) {
	            if (produceDiagnostics) {
	                var isAmbientExternalModule = node.name.kind === 9;
	                var contextErrorMessage = isAmbientExternalModule
	                    ? ts.Diagnostics.An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file
	                    : ts.Diagnostics.A_namespace_declaration_is_only_allowed_in_a_namespace_or_module;
	                if (checkGrammarModuleElementContext(node, contextErrorMessage)) {
	                    return;
	                }
	                if (!checkGrammarDecorators(node) && !checkGrammarModifiers(node)) {
	                    if (!ts.isInAmbientContext(node) && node.name.kind === 9) {
	                        grammarErrorOnNode(node.name, ts.Diagnostics.Only_ambient_modules_can_use_quoted_names);
	                    }
	                }
	                checkCollisionWithCapturedThisVariable(node, node.name);
	                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);
	                checkExportsOnMergedDeclarations(node);
	                var symbol = getSymbolOfNode(node);
	                if (symbol.flags & 512
	                    && symbol.declarations.length > 1
	                    && !ts.isInAmbientContext(node)
	                    && ts.isInstantiatedModule(node, compilerOptions.preserveConstEnums || compilerOptions.isolatedModules)) {
	                    var firstNonAmbientClassOrFunc = getFirstNonAmbientClassOrFunctionDeclaration(symbol);
	                    if (firstNonAmbientClassOrFunc) {
	                        if (ts.getSourceFileOfNode(node) !== ts.getSourceFileOfNode(firstNonAmbientClassOrFunc)) {
	                            error(node.name, ts.Diagnostics.A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged);
	                        }
	                        else if (node.pos < firstNonAmbientClassOrFunc.pos) {
	                            error(node.name, ts.Diagnostics.A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged);
	                        }
	                    }
	                    var mergedClass = ts.getDeclarationOfKind(symbol, 212);
	                    if (mergedClass &&
	                        inSameLexicalScope(node, mergedClass)) {
	                        getNodeLinks(node).flags |= 32768;
	                    }
	                }
	                if (isAmbientExternalModule) {
	                    if (!isGlobalSourceFile(node.parent)) {
	                        error(node.name, ts.Diagnostics.Ambient_modules_cannot_be_nested_in_other_modules);
	                    }
	                    if (isExternalModuleNameRelative(node.name.text)) {
	                        error(node.name, ts.Diagnostics.Ambient_module_declaration_cannot_specify_relative_module_name);
	                    }
	                }
	            }
	            checkSourceElement(node.body);
	        }
	        function getFirstIdentifier(node) {
	            while (true) {
	                if (node.kind === 133) {
	                    node = node.left;
	                }
	                else if (node.kind === 164) {
	                    node = node.expression;
	                }
	                else {
	                    break;
	                }
	            }
	            ts.Debug.assert(node.kind === 67);
	            return node;
	        }
	        function checkExternalImportOrExportDeclaration(node) {
	            var moduleName = ts.getExternalModuleName(node);
	            if (!ts.nodeIsMissing(moduleName) && moduleName.kind !== 9) {
	                error(moduleName, ts.Diagnostics.String_literal_expected);
	                return false;
	            }
	            var inAmbientExternalModule = node.parent.kind === 217 && node.parent.parent.name.kind === 9;
	            if (node.parent.kind !== 246 && !inAmbientExternalModule) {
	                error(moduleName, node.kind === 226 ?
	                    ts.Diagnostics.Export_declarations_are_not_permitted_in_a_namespace :
	                    ts.Diagnostics.Import_declarations_in_a_namespace_cannot_reference_a_module);
	                return false;
	            }
	            if (inAmbientExternalModule && isExternalModuleNameRelative(moduleName.text)) {
	                error(node, ts.Diagnostics.Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relative_module_name);
	                return false;
	            }
	            return true;
	        }
	        function checkAliasSymbol(node) {
	            var symbol = getSymbolOfNode(node);
	            var target = resolveAlias(symbol);
	            if (target !== unknownSymbol) {
	                var excludedMeanings = (symbol.flags & 107455 ? 107455 : 0) |
	                    (symbol.flags & 793056 ? 793056 : 0) |
	                    (symbol.flags & 1536 ? 1536 : 0);
	                if (target.flags & excludedMeanings) {
	                    var message = node.kind === 228 ?
	                        ts.Diagnostics.Export_declaration_conflicts_with_exported_declaration_of_0 :
	                        ts.Diagnostics.Import_declaration_conflicts_with_local_declaration_of_0;
	                    error(node, message, symbolToString(symbol));
	                }
	            }
	        }
	        function checkImportBinding(node) {
	            checkCollisionWithCapturedThisVariable(node, node.name);
	            checkCollisionWithRequireExportsInGeneratedCode(node, node.name);
	            checkAliasSymbol(node);
	        }
	        function checkImportDeclaration(node) {
	            if (checkGrammarModuleElementContext(node, ts.Diagnostics.An_import_declaration_can_only_be_used_in_a_namespace_or_module)) {
	                return;
	            }
	            if (!checkGrammarDecorators(node) && !checkGrammarModifiers(node) && (node.flags & 2035)) {
	                grammarErrorOnFirstToken(node, ts.Diagnostics.An_import_declaration_cannot_have_modifiers);
	            }
	            if (checkExternalImportOrExportDeclaration(node)) {
	                var importClause = node.importClause;
	                if (importClause) {
	                    if (importClause.name) {
	                        checkImportBinding(importClause);
	                    }
	                    if (importClause.namedBindings) {
	                        if (importClause.namedBindings.kind === 222) {
	                            checkImportBinding(importClause.namedBindings);
	                        }
	                        else {
	                            ts.forEach(importClause.namedBindings.elements, checkImportBinding);
	                        }
	                    }
	                }
	            }
	        }
	        function checkImportEqualsDeclaration(node) {
	            if (checkGrammarModuleElementContext(node, ts.Diagnostics.An_import_declaration_can_only_be_used_in_a_namespace_or_module)) {
	                return;
	            }
	            checkGrammarDecorators(node) || checkGrammarModifiers(node);
	            if (ts.isInternalModuleImportEqualsDeclaration(node) || checkExternalImportOrExportDeclaration(node)) {
	                checkImportBinding(node);
	                if (node.flags & 1) {
	                    markExportAsReferenced(node);
	                }
	                if (ts.isInternalModuleImportEqualsDeclaration(node)) {
	                    var target = resolveAlias(getSymbolOfNode(node));
	                    if (target !== unknownSymbol) {
	                        if (target.flags & 107455) {
	                            var moduleName = getFirstIdentifier(node.moduleReference);
	                            if (!(resolveEntityName(moduleName, 107455 | 1536).flags & 1536)) {
	                                error(moduleName, ts.Diagnostics.Module_0_is_hidden_by_a_local_declaration_with_the_same_name, ts.declarationNameToString(moduleName));
	                            }
	                        }
	                        if (target.flags & 793056) {
	                            checkTypeNameIsReserved(node.name, ts.Diagnostics.Import_name_cannot_be_0);
	                        }
	                    }
	                }
	                else {
	                    if (languageVersion >= 2 && !ts.isInAmbientContext(node)) {
	                        grammarErrorOnNode(node, ts.Diagnostics.Import_assignment_cannot_be_used_when_targeting_ECMAScript_6_or_higher_Consider_using_import_Asterisk_as_ns_from_mod_import_a_from_mod_or_import_d_from_mod_instead);
	                    }
	                }
	            }
	        }
	        function checkExportDeclaration(node) {
	            if (checkGrammarModuleElementContext(node, ts.Diagnostics.An_export_declaration_can_only_be_used_in_a_module)) {
	                return;
	            }
	            if (!checkGrammarDecorators(node) && !checkGrammarModifiers(node) && (node.flags & 2035)) {
	                grammarErrorOnFirstToken(node, ts.Diagnostics.An_export_declaration_cannot_have_modifiers);
	            }
	            if (!node.moduleSpecifier || checkExternalImportOrExportDeclaration(node)) {
	                if (node.exportClause) {
	                    ts.forEach(node.exportClause.elements, checkExportSpecifier);
	                    var inAmbientExternalModule = node.parent.kind === 217 && node.parent.parent.name.kind === 9;
	                    if (node.parent.kind !== 246 && !inAmbientExternalModule) {
	                        error(node, ts.Diagnostics.Export_declarations_are_not_permitted_in_a_namespace);
	                    }
	                }
	                else {
	                    var moduleSymbol = resolveExternalModuleName(node, node.moduleSpecifier);
	                    if (moduleSymbol && moduleSymbol.exports["export="]) {
	                        error(node.moduleSpecifier, ts.Diagnostics.Module_0_uses_export_and_cannot_be_used_with_export_Asterisk, symbolToString(moduleSymbol));
	                    }
	                }
	            }
	        }
	        function checkGrammarModuleElementContext(node, errorMessage) {
	            if (node.parent.kind !== 246 && node.parent.kind !== 217 && node.parent.kind !== 216) {
	                return grammarErrorOnFirstToken(node, errorMessage);
	            }
	        }
	        function checkExportSpecifier(node) {
	            checkAliasSymbol(node);
	            if (!node.parent.parent.moduleSpecifier) {
	                markExportAsReferenced(node);
	            }
	        }
	        function checkExportAssignment(node) {
	            if (checkGrammarModuleElementContext(node, ts.Diagnostics.An_export_assignment_can_only_be_used_in_a_module)) {
	                return;
	            }
	            var container = node.parent.kind === 246 ? node.parent : node.parent.parent;
	            if (container.kind === 216 && container.name.kind === 67) {
	                error(node, ts.Diagnostics.An_export_assignment_cannot_be_used_in_a_namespace);
	                return;
	            }
	            if (!checkGrammarDecorators(node) && !checkGrammarModifiers(node) && (node.flags & 2035)) {
	                grammarErrorOnFirstToken(node, ts.Diagnostics.An_export_assignment_cannot_have_modifiers);
	            }
	            if (node.expression.kind === 67) {
	                markExportAsReferenced(node);
	            }
	            else {
	                checkExpressionCached(node.expression);
	            }
	            checkExternalModuleExports(container);
	            if (node.isExportEquals && !ts.isInAmbientContext(node)) {
	                if (languageVersion >= 2) {
	                    grammarErrorOnNode(node, ts.Diagnostics.Export_assignment_cannot_be_used_when_targeting_ECMAScript_6_or_higher_Consider_using_export_default_instead);
	                }
	                else if (compilerOptions.module === 4) {
	                    grammarErrorOnNode(node, ts.Diagnostics.Export_assignment_is_not_supported_when_module_flag_is_system);
	                }
	            }
	        }
	        function getModuleStatements(node) {
	            if (node.kind === 246) {
	                return node.statements;
	            }
	            if (node.kind === 216 && node.body.kind === 217) {
	                return node.body.statements;
	            }
	            return emptyArray;
	        }
	        function hasExportedMembers(moduleSymbol) {
	            for (var id in moduleSymbol.exports) {
	                if (id !== "export=") {
	                    return true;
	                }
	            }
	            return false;
	        }
	        function checkExternalModuleExports(node) {
	            var moduleSymbol = getSymbolOfNode(node);
	            var links = getSymbolLinks(moduleSymbol);
	            if (!links.exportsChecked) {
	                var exportEqualsSymbol = moduleSymbol.exports["export="];
	                if (exportEqualsSymbol && hasExportedMembers(moduleSymbol)) {
	                    var declaration = getDeclarationOfAliasSymbol(exportEqualsSymbol) || exportEqualsSymbol.valueDeclaration;
	                    error(declaration, ts.Diagnostics.An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements);
	                }
	                links.exportsChecked = true;
	            }
	        }
	        function checkTypePredicate(node) {
	            if (!isInLegalTypePredicatePosition(node)) {
	                error(node, ts.Diagnostics.A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods);
	            }
	        }
	        function checkSourceElement(node) {
	            if (!node) {
	                return;
	            }
	            var kind = node.kind;
	            if (cancellationToken) {
	                switch (kind) {
	                    case 216:
	                    case 212:
	                    case 213:
	                    case 211:
	                        cancellationToken.throwIfCancellationRequested();
	                }
	            }
	            switch (kind) {
	                case 135:
	                    return checkTypeParameter(node);
	                case 136:
	                    return checkParameter(node);
	                case 139:
	                case 138:
	                    return checkPropertyDeclaration(node);
	                case 150:
	                case 151:
	                case 145:
	                case 146:
	                    return checkSignatureDeclaration(node);
	                case 147:
	                    return checkSignatureDeclaration(node);
	                case 141:
	                case 140:
	                    return checkMethodDeclaration(node);
	                case 142:
	                    return checkConstructorDeclaration(node);
	                case 143:
	                case 144:
	                    return checkAccessorDeclaration(node);
	                case 149:
	                    return checkTypeReferenceNode(node);
	                case 148:
	                    return checkTypePredicate(node);
	                case 152:
	                    return checkTypeQuery(node);
	                case 153:
	                    return checkTypeLiteral(node);
	                case 154:
	                    return checkArrayType(node);
	                case 155:
	                    return checkTupleType(node);
	                case 156:
	                case 157:
	                    return checkUnionOrIntersectionType(node);
	                case 158:
	                    return checkSourceElement(node.type);
	                case 211:
	                    return checkFunctionDeclaration(node);
	                case 190:
	                case 217:
	                    return checkBlock(node);
	                case 191:
	                    return checkVariableStatement(node);
	                case 193:
	                    return checkExpressionStatement(node);
	                case 194:
	                    return checkIfStatement(node);
	                case 195:
	                    return checkDoStatement(node);
	                case 196:
	                    return checkWhileStatement(node);
	                case 197:
	                    return checkForStatement(node);
	                case 198:
	                    return checkForInStatement(node);
	                case 199:
	                    return checkForOfStatement(node);
	                case 200:
	                case 201:
	                    return checkBreakOrContinueStatement(node);
	                case 202:
	                    return checkReturnStatement(node);
	                case 203:
	                    return checkWithStatement(node);
	                case 204:
	                    return checkSwitchStatement(node);
	                case 205:
	                    return checkLabeledStatement(node);
	                case 206:
	                    return checkThrowStatement(node);
	                case 207:
	                    return checkTryStatement(node);
	                case 209:
	                    return checkVariableDeclaration(node);
	                case 161:
	                    return checkBindingElement(node);
	                case 212:
	                    return checkClassDeclaration(node);
	                case 213:
	                    return checkInterfaceDeclaration(node);
	                case 214:
	                    return checkTypeAliasDeclaration(node);
	                case 215:
	                    return checkEnumDeclaration(node);
	                case 216:
	                    return checkModuleDeclaration(node);
	                case 220:
	                    return checkImportDeclaration(node);
	                case 219:
	                    return checkImportEqualsDeclaration(node);
	                case 226:
	                    return checkExportDeclaration(node);
	                case 225:
	                    return checkExportAssignment(node);
	                case 192:
	                    checkGrammarStatementInAmbientContext(node);
	                    return;
	                case 208:
	                    checkGrammarStatementInAmbientContext(node);
	                    return;
	                case 229:
	                    return checkMissingDeclaration(node);
	            }
	        }
	        function checkFunctionAndClassExpressionBodies(node) {
	            switch (node.kind) {
	                case 171:
	                case 172:
	                    ts.forEach(node.parameters, checkFunctionAndClassExpressionBodies);
	                    checkFunctionExpressionOrObjectLiteralMethodBody(node);
	                    break;
	                case 184:
	                    ts.forEach(node.members, checkSourceElement);
	                    break;
	                case 141:
	                case 140:
	                    ts.forEach(node.decorators, checkFunctionAndClassExpressionBodies);
	                    ts.forEach(node.parameters, checkFunctionAndClassExpressionBodies);
	                    if (ts.isObjectLiteralMethod(node)) {
	                        checkFunctionExpressionOrObjectLiteralMethodBody(node);
	                    }
	                    break;
	                case 142:
	                case 143:
	                case 144:
	                case 211:
	                    ts.forEach(node.parameters, checkFunctionAndClassExpressionBodies);
	                    break;
	                case 203:
	                    checkFunctionAndClassExpressionBodies(node.expression);
	                    break;
	                case 137:
	                case 136:
	                case 139:
	                case 138:
	                case 159:
	                case 160:
	                case 161:
	                case 162:
	                case 163:
	                case 243:
	                case 164:
	                case 165:
	                case 166:
	                case 167:
	                case 168:
	                case 181:
	                case 188:
	                case 169:
	                case 187:
	                case 170:
	                case 174:
	                case 175:
	                case 176:
	                case 173:
	                case 177:
	                case 178:
	                case 179:
	                case 180:
	                case 183:
	                case 182:
	                case 190:
	                case 217:
	                case 191:
	                case 193:
	                case 194:
	                case 195:
	                case 196:
	                case 197:
	                case 198:
	                case 199:
	                case 200:
	                case 201:
	                case 202:
	                case 204:
	                case 218:
	                case 239:
	                case 240:
	                case 205:
	                case 206:
	                case 207:
	                case 242:
	                case 209:
	                case 210:
	                case 212:
	                case 241:
	                case 186:
	                case 215:
	                case 245:
	                case 225:
	                case 246:
	                case 238:
	                case 231:
	                case 232:
	                case 236:
	                case 237:
	                case 233:
	                    ts.forEachChild(node, checkFunctionAndClassExpressionBodies);
	                    break;
	            }
	        }
	        function checkSourceFile(node) {
	            var start = new Date().getTime();
	            checkSourceFileWorker(node);
	            ts.checkTime += new Date().getTime() - start;
	        }
	        function checkSourceFileWorker(node) {
	            var links = getNodeLinks(node);
	            if (!(links.flags & 1)) {
	                if (node.isDefaultLib && compilerOptions.skipDefaultLibCheck) {
	                    return;
	                }
	                checkGrammarSourceFile(node);
	                emitExtends = false;
	                emitDecorate = false;
	                emitParam = false;
	                potentialThisCollisions.length = 0;
	                ts.forEach(node.statements, checkSourceElement);
	                checkFunctionAndClassExpressionBodies(node);
	                if (ts.isExternalModule(node)) {
	                    checkExternalModuleExports(node);
	                }
	                if (potentialThisCollisions.length) {
	                    ts.forEach(potentialThisCollisions, checkIfThisIsCapturedInEnclosingScope);
	                    potentialThisCollisions.length = 0;
	                }
	                if (emitExtends) {
	                    links.flags |= 8;
	                }
	                if (emitDecorate) {
	                    links.flags |= 16;
	                }
	                if (emitParam) {
	                    links.flags |= 32;
	                }
	                if (emitAwaiter) {
	                    links.flags |= 64;
	                }
	                if (emitGenerator || (emitAwaiter && languageVersion < 2)) {
	                    links.flags |= 128;
	                }
	                links.flags |= 1;
	            }
	        }
	        function getDiagnostics(sourceFile, ct) {
	            try {
	                cancellationToken = ct;
	                return getDiagnosticsWorker(sourceFile);
	            }
	            finally {
	                cancellationToken = undefined;
	            }
	        }
	        function getDiagnosticsWorker(sourceFile) {
	            throwIfNonDiagnosticsProducing();
	            if (sourceFile) {
	                checkSourceFile(sourceFile);
	                return diagnostics.getDiagnostics(sourceFile.fileName);
	            }
	            ts.forEach(host.getSourceFiles(), checkSourceFile);
	            return diagnostics.getDiagnostics();
	        }
	        function getGlobalDiagnostics() {
	            throwIfNonDiagnosticsProducing();
	            return diagnostics.getGlobalDiagnostics();
	        }
	        function throwIfNonDiagnosticsProducing() {
	            if (!produceDiagnostics) {
	                throw new Error("Trying to get diagnostics from a type checker that does not produce them.");
	            }
	        }
	        function isInsideWithStatementBody(node) {
	            if (node) {
	                while (node.parent) {
	                    if (node.parent.kind === 203 && node.parent.statement === node) {
	                        return true;
	                    }
	                    node = node.parent;
	                }
	            }
	            return false;
	        }
	        function getSymbolsInScope(location, meaning) {
	            var symbols = {};
	            var memberFlags = 0;
	            if (isInsideWithStatementBody(location)) {
	                return [];
	            }
	            populateSymbols();
	            return symbolsToArray(symbols);
	            function populateSymbols() {
	                while (location) {
	                    if (location.locals && !isGlobalSourceFile(location)) {
	                        copySymbols(location.locals, meaning);
	                    }
	                    switch (location.kind) {
	                        case 246:
	                            if (!ts.isExternalModule(location)) {
	                                break;
	                            }
	                        case 216:
	                            copySymbols(getSymbolOfNode(location).exports, meaning & 8914931);
	                            break;
	                        case 215:
	                            copySymbols(getSymbolOfNode(location).exports, meaning & 8);
	                            break;
	                        case 184:
	                            var className = location.name;
	                            if (className) {
	                                copySymbol(location.symbol, meaning);
	                            }
	                        case 212:
	                        case 213:
	                            if (!(memberFlags & 128)) {
	                                copySymbols(getSymbolOfNode(location).members, meaning & 793056);
	                            }
	                            break;
	                        case 171:
	                            var funcName = location.name;
	                            if (funcName) {
	                                copySymbol(location.symbol, meaning);
	                            }
	                            break;
	                    }
	                    if (ts.introducesArgumentsExoticObject(location)) {
	                        copySymbol(argumentsSymbol, meaning);
	                    }
	                    memberFlags = location.flags;
	                    location = location.parent;
	                }
	                copySymbols(globals, meaning);
	            }
	            function copySymbol(symbol, meaning) {
	                if (symbol.flags & meaning) {
	                    var id = symbol.name;
	                    if (!ts.hasProperty(symbols, id)) {
	                        symbols[id] = symbol;
	                    }
	                }
	            }
	            function copySymbols(source, meaning) {
	                if (meaning) {
	                    for (var id in source) {
	                        var symbol = source[id];
	                        copySymbol(symbol, meaning);
	                    }
	                }
	            }
	        }
	        function isTypeDeclarationName(name) {
	            return name.kind === 67 &&
	                isTypeDeclaration(name.parent) &&
	                name.parent.name === name;
	        }
	        function isTypeDeclaration(node) {
	            switch (node.kind) {
	                case 135:
	                case 212:
	                case 213:
	                case 214:
	                case 215:
	                    return true;
	            }
	        }
	        function isTypeReferenceIdentifier(entityName) {
	            var node = entityName;
	            while (node.parent && node.parent.kind === 133) {
	                node = node.parent;
	            }
	            return node.parent && node.parent.kind === 149;
	        }
	        function isHeritageClauseElementIdentifier(entityName) {
	            var node = entityName;
	            while (node.parent && node.parent.kind === 164) {
	                node = node.parent;
	            }
	            return node.parent && node.parent.kind === 186;
	        }
	        function getLeftSideOfImportEqualsOrExportAssignment(nodeOnRightSide) {
	            while (nodeOnRightSide.parent.kind === 133) {
	                nodeOnRightSide = nodeOnRightSide.parent;
	            }
	            if (nodeOnRightSide.parent.kind === 219) {
	                return nodeOnRightSide.parent.moduleReference === nodeOnRightSide && nodeOnRightSide.parent;
	            }
	            if (nodeOnRightSide.parent.kind === 225) {
	                return nodeOnRightSide.parent.expression === nodeOnRightSide && nodeOnRightSide.parent;
	            }
	            return undefined;
	        }
	        function isInRightSideOfImportOrExportAssignment(node) {
	            return getLeftSideOfImportEqualsOrExportAssignment(node) !== undefined;
	        }
	        function getSymbolOfEntityNameOrPropertyAccessExpression(entityName) {
	            if (ts.isDeclarationName(entityName)) {
	                return getSymbolOfNode(entityName.parent);
	            }
	            if (entityName.parent.kind === 225) {
	                return resolveEntityName(entityName, 107455 | 793056 | 1536 | 8388608);
	            }
	            if (entityName.kind !== 164) {
	                if (isInRightSideOfImportOrExportAssignment(entityName)) {
	                    return getSymbolOfPartOfRightHandSideOfImportEquals(entityName);
	                }
	            }
	            if (ts.isRightSideOfQualifiedNameOrPropertyAccess(entityName)) {
	                entityName = entityName.parent;
	            }
	            if (isHeritageClauseElementIdentifier(entityName)) {
	                var meaning = entityName.parent.kind === 186 ? 793056 : 1536;
	                meaning |= 8388608;
	                return resolveEntityName(entityName, meaning);
	            }
	            else if ((entityName.parent.kind === 233) ||
	                (entityName.parent.kind === 232) ||
	                (entityName.parent.kind === 235)) {
	                return getJsxElementTagSymbol(entityName.parent);
	            }
	            else if (ts.isExpression(entityName)) {
	                if (ts.nodeIsMissing(entityName)) {
	                    return undefined;
	                }
	                if (entityName.kind === 67) {
	                    var meaning = 107455 | 8388608;
	                    return resolveEntityName(entityName, meaning);
	                }
	                else if (entityName.kind === 164) {
	                    var symbol = getNodeLinks(entityName).resolvedSymbol;
	                    if (!symbol) {
	                        checkPropertyAccessExpression(entityName);
	                    }
	                    return getNodeLinks(entityName).resolvedSymbol;
	                }
	                else if (entityName.kind === 133) {
	                    var symbol = getNodeLinks(entityName).resolvedSymbol;
	                    if (!symbol) {
	                        checkQualifiedName(entityName);
	                    }
	                    return getNodeLinks(entityName).resolvedSymbol;
	                }
	            }
	            else if (isTypeReferenceIdentifier(entityName)) {
	                var meaning = entityName.parent.kind === 149 ? 793056 : 1536;
	                meaning |= 8388608;
	                return resolveEntityName(entityName, meaning);
	            }
	            else if (entityName.parent.kind === 236) {
	                return getJsxAttributePropertySymbol(entityName.parent);
	            }
	            if (entityName.parent.kind === 148) {
	                return resolveEntityName(entityName, 1);
	            }
	            return undefined;
	        }
	        function getSymbolAtLocation(node) {
	            if (isInsideWithStatementBody(node)) {
	                return undefined;
	            }
	            if (ts.isDeclarationName(node)) {
	                return getSymbolOfNode(node.parent);
	            }
	            if (node.kind === 67) {
	                if (isInRightSideOfImportOrExportAssignment(node)) {
	                    return node.parent.kind === 225
	                        ? getSymbolOfEntityNameOrPropertyAccessExpression(node)
	                        : getSymbolOfPartOfRightHandSideOfImportEquals(node);
	                }
	                else if (node.parent.kind === 161 &&
	                    node.parent.parent.kind === 159 &&
	                    node === node.parent.propertyName) {
	                    var typeOfPattern = getTypeOfNode(node.parent.parent);
	                    var propertyDeclaration = typeOfPattern && getPropertyOfType(typeOfPattern, node.text);
	                    if (propertyDeclaration) {
	                        return propertyDeclaration;
	                    }
	                }
	            }
	            switch (node.kind) {
	                case 67:
	                case 164:
	                case 133:
	                    return getSymbolOfEntityNameOrPropertyAccessExpression(node);
	                case 95:
	                case 93:
	                    var type = checkExpression(node);
	                    return type.symbol;
	                case 119:
	                    var constructorDeclaration = node.parent;
	                    if (constructorDeclaration && constructorDeclaration.kind === 142) {
	                        return constructorDeclaration.parent.symbol;
	                    }
	                    return undefined;
	                case 9:
	                    if ((ts.isExternalModuleImportEqualsDeclaration(node.parent.parent) &&
	                        ts.getExternalModuleImportEqualsDeclarationExpression(node.parent.parent) === node) ||
	                        ((node.parent.kind === 220 || node.parent.kind === 226) &&
	                            node.parent.moduleSpecifier === node)) {
	                        return resolveExternalModuleName(node, node);
	                    }
	                case 8:
	                    if (node.parent.kind === 165 && node.parent.argumentExpression === node) {
	                        var objectType = checkExpression(node.parent.expression);
	                        if (objectType === unknownType)
	                            return undefined;
	                        var apparentType = getApparentType(objectType);
	                        if (apparentType === unknownType)
	                            return undefined;
	                        return getPropertyOfType(apparentType, node.text);
	                    }
	                    break;
	            }
	            return undefined;
	        }
	        function getShorthandAssignmentValueSymbol(location) {
	            if (location && location.kind === 244) {
	                return resolveEntityName(location.name, 107455);
	            }
	            return undefined;
	        }
	        function getTypeOfNode(node) {
	            if (isInsideWithStatementBody(node)) {
	                return unknownType;
	            }
	            if (ts.isTypeNode(node)) {
	                return getTypeFromTypeNode(node);
	            }
	            if (ts.isExpression(node)) {
	                return getTypeOfExpression(node);
	            }
	            if (ts.isExpressionWithTypeArgumentsInClassExtendsClause(node)) {
	                return getBaseTypes(getDeclaredTypeOfSymbol(getSymbolOfNode(node.parent.parent)))[0];
	            }
	            if (isTypeDeclaration(node)) {
	                var symbol = getSymbolOfNode(node);
	                return getDeclaredTypeOfSymbol(symbol);
	            }
	            if (isTypeDeclarationName(node)) {
	                var symbol = getSymbolAtLocation(node);
	                return symbol && getDeclaredTypeOfSymbol(symbol);
	            }
	            if (ts.isDeclaration(node)) {
	                var symbol = getSymbolOfNode(node);
	                return getTypeOfSymbol(symbol);
	            }
	            if (ts.isDeclarationName(node)) {
	                var symbol = getSymbolAtLocation(node);
	                return symbol && getTypeOfSymbol(symbol);
	            }
	            if (ts.isBindingPattern(node)) {
	                return getTypeForVariableLikeDeclaration(node.parent);
	            }
	            if (isInRightSideOfImportOrExportAssignment(node)) {
	                var symbol = getSymbolAtLocation(node);
	                var declaredType = symbol && getDeclaredTypeOfSymbol(symbol);
	                return declaredType !== unknownType ? declaredType : getTypeOfSymbol(symbol);
	            }
	            return unknownType;
	        }
	        function getTypeOfExpression(expr) {
	            if (ts.isRightSideOfQualifiedNameOrPropertyAccess(expr)) {
	                expr = expr.parent;
	            }
	            return checkExpression(expr);
	        }
	        function getParentTypeOfClassElement(node) {
	            var classSymbol = getSymbolOfNode(node.parent);
	            return node.flags & 128
	                ? getTypeOfSymbol(classSymbol)
	                : getDeclaredTypeOfSymbol(classSymbol);
	        }
	        function getAugmentedPropertiesOfType(type) {
	            type = getApparentType(type);
	            var propsByName = createSymbolTable(getPropertiesOfType(type));
	            if (getSignaturesOfType(type, 0).length || getSignaturesOfType(type, 1).length) {
	                ts.forEach(getPropertiesOfType(globalFunctionType), function (p) {
	                    if (!ts.hasProperty(propsByName, p.name)) {
	                        propsByName[p.name] = p;
	                    }
	                });
	            }
	            return getNamedMembers(propsByName);
	        }
	        function getRootSymbols(symbol) {
	            if (symbol.flags & 268435456) {
	                var symbols = [];
	                var name_15 = symbol.name;
	                ts.forEach(getSymbolLinks(symbol).containingType.types, function (t) {
	                    symbols.push(getPropertyOfType(t, name_15));
	                });
	                return symbols;
	            }
	            else if (symbol.flags & 67108864) {
	                var target = getSymbolLinks(symbol).target;
	                if (target) {
	                    return [target];
	                }
	            }
	            return [symbol];
	        }
	        function getReferencedExportContainer(node) {
	            var symbol = getReferencedValueSymbol(node);
	            if (symbol) {
	                if (symbol.flags & 1048576) {
	                    var exportSymbol = getMergedSymbol(symbol.exportSymbol);
	                    if (exportSymbol.flags & 944) {
	                        return undefined;
	                    }
	                    symbol = exportSymbol;
	                }
	                var parentSymbol = getParentOfSymbol(symbol);
	                if (parentSymbol) {
	                    if (parentSymbol.flags & 512 && parentSymbol.valueDeclaration.kind === 246) {
	                        return parentSymbol.valueDeclaration;
	                    }
	                    for (var n = node.parent; n; n = n.parent) {
	                        if ((n.kind === 216 || n.kind === 215) && getSymbolOfNode(n) === parentSymbol) {
	                            return n;
	                        }
	                    }
	                }
	            }
	        }
	        function getReferencedImportDeclaration(node) {
	            var symbol = getReferencedValueSymbol(node);
	            return symbol && symbol.flags & 8388608 ? getDeclarationOfAliasSymbol(symbol) : undefined;
	        }
	        function isStatementWithLocals(node) {
	            switch (node.kind) {
	                case 190:
	                case 218:
	                case 197:
	                case 198:
	                case 199:
	                    return true;
	            }
	            return false;
	        }
	        function isNestedRedeclarationSymbol(symbol) {
	            if (symbol.flags & 418) {
	                var links = getSymbolLinks(symbol);
	                if (links.isNestedRedeclaration === undefined) {
	                    var container = ts.getEnclosingBlockScopeContainer(symbol.valueDeclaration);
	                    links.isNestedRedeclaration = isStatementWithLocals(container) &&
	                        !!resolveName(container.parent, symbol.name, 107455, undefined, undefined);
	                }
	                return links.isNestedRedeclaration;
	            }
	            return false;
	        }
	        function getReferencedNestedRedeclaration(node) {
	            var symbol = getReferencedValueSymbol(node);
	            return symbol && isNestedRedeclarationSymbol(symbol) ? symbol.valueDeclaration : undefined;
	        }
	        function isNestedRedeclaration(node) {
	            return isNestedRedeclarationSymbol(getSymbolOfNode(node));
	        }
	        function isValueAliasDeclaration(node) {
	            switch (node.kind) {
	                case 219:
	                case 221:
	                case 222:
	                case 224:
	                case 228:
	                    return isAliasResolvedToValue(getSymbolOfNode(node));
	                case 226:
	                    var exportClause = node.exportClause;
	                    return exportClause && ts.forEach(exportClause.elements, isValueAliasDeclaration);
	                case 225:
	                    return node.expression && node.expression.kind === 67 ? isAliasResolvedToValue(getSymbolOfNode(node)) : true;
	            }
	            return false;
	        }
	        function isTopLevelValueImportEqualsWithEntityName(node) {
	            if (node.parent.kind !== 246 || !ts.isInternalModuleImportEqualsDeclaration(node)) {
	                return false;
	            }
	            var isValue = isAliasResolvedToValue(getSymbolOfNode(node));
	            return isValue && node.moduleReference && !ts.nodeIsMissing(node.moduleReference);
	        }
	        function isAliasResolvedToValue(symbol) {
	            var target = resolveAlias(symbol);
	            if (target === unknownSymbol && compilerOptions.isolatedModules) {
	                return true;
	            }
	            return target !== unknownSymbol &&
	                target &&
	                target.flags & 107455 &&
	                (compilerOptions.preserveConstEnums || !isConstEnumOrConstEnumOnlyModule(target));
	        }
	        function isConstEnumOrConstEnumOnlyModule(s) {
	            return isConstEnumSymbol(s) || s.constEnumOnlyModule;
	        }
	        function isReferencedAliasDeclaration(node, checkChildren) {
	            if (ts.isAliasSymbolDeclaration(node)) {
	                var symbol = getSymbolOfNode(node);
	                if (getSymbolLinks(symbol).referenced) {
	                    return true;
	                }
	            }
	            if (checkChildren) {
	                return ts.forEachChild(node, function (node) { return isReferencedAliasDeclaration(node, checkChildren); });
	            }
	            return false;
	        }
	        function isImplementationOfOverload(node) {
	            if (ts.nodeIsPresent(node.body)) {
	                var symbol = getSymbolOfNode(node);
	                var signaturesOfSymbol = getSignaturesOfSymbol(symbol);
	                return signaturesOfSymbol.length > 1 ||
	                    (signaturesOfSymbol.length === 1 && signaturesOfSymbol[0].declaration !== node);
	            }
	            return false;
	        }
	        function getNodeCheckFlags(node) {
	            return getNodeLinks(node).flags;
	        }
	        function getEnumMemberValue(node) {
	            computeEnumMemberValues(node.parent);
	            return getNodeLinks(node).enumMemberValue;
	        }
	        function getConstantValue(node) {
	            if (node.kind === 245) {
	                return getEnumMemberValue(node);
	            }
	            var symbol = getNodeLinks(node).resolvedSymbol;
	            if (symbol && (symbol.flags & 8)) {
	                if (ts.isConstEnumDeclaration(symbol.valueDeclaration.parent)) {
	                    return getEnumMemberValue(symbol.valueDeclaration);
	                }
	            }
	            return undefined;
	        }
	        function isFunctionType(type) {
	            return type.flags & 80896 && getSignaturesOfType(type, 0).length > 0;
	        }
	        function getTypeReferenceSerializationKind(typeName) {
	            var valueSymbol = resolveEntityName(typeName, 107455, true);
	            var constructorType = valueSymbol ? getTypeOfSymbol(valueSymbol) : undefined;
	            if (constructorType && isConstructorType(constructorType)) {
	                return ts.TypeReferenceSerializationKind.TypeWithConstructSignatureAndValue;
	            }
	            var typeSymbol = resolveEntityName(typeName, 793056, true);
	            if (!typeSymbol) {
	                return ts.TypeReferenceSerializationKind.ObjectType;
	            }
	            var type = getDeclaredTypeOfSymbol(typeSymbol);
	            if (type === unknownType) {
	                return ts.TypeReferenceSerializationKind.Unknown;
	            }
	            else if (type.flags & 1) {
	                return ts.TypeReferenceSerializationKind.ObjectType;
	            }
	            else if (allConstituentTypesHaveKind(type, 16)) {
	                return ts.TypeReferenceSerializationKind.VoidType;
	            }
	            else if (allConstituentTypesHaveKind(type, 8)) {
	                return ts.TypeReferenceSerializationKind.BooleanType;
	            }
	            else if (allConstituentTypesHaveKind(type, 132)) {
	                return ts.TypeReferenceSerializationKind.NumberLikeType;
	            }
	            else if (allConstituentTypesHaveKind(type, 258)) {
	                return ts.TypeReferenceSerializationKind.StringLikeType;
	            }
	            else if (allConstituentTypesHaveKind(type, 8192)) {
	                return ts.TypeReferenceSerializationKind.ArrayLikeType;
	            }
	            else if (allConstituentTypesHaveKind(type, 16777216)) {
	                return ts.TypeReferenceSerializationKind.ESSymbolType;
	            }
	            else if (isFunctionType(type)) {
	                return ts.TypeReferenceSerializationKind.TypeWithCallSignature;
	            }
	            else if (isArrayType(type)) {
	                return ts.TypeReferenceSerializationKind.ArrayLikeType;
	            }
	            else {
	                return ts.TypeReferenceSerializationKind.ObjectType;
	            }
	        }
	        function writeTypeOfDeclaration(declaration, enclosingDeclaration, flags, writer) {
	            var symbol = getSymbolOfNode(declaration);
	            var type = symbol && !(symbol.flags & (2048 | 131072))
	                ? getTypeOfSymbol(symbol)
	                : unknownType;
	            getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);
	        }
	        function writeReturnTypeOfSignatureDeclaration(signatureDeclaration, enclosingDeclaration, flags, writer) {
	            var signature = getSignatureFromDeclaration(signatureDeclaration);
	            getSymbolDisplayBuilder().buildTypeDisplay(getReturnTypeOfSignature(signature), writer, enclosingDeclaration, flags);
	        }
	        function writeTypeOfExpression(expr, enclosingDeclaration, flags, writer) {
	            var type = getTypeOfExpression(expr);
	            getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);
	        }
	        function hasGlobalName(name) {
	            return ts.hasProperty(globals, name);
	        }
	        function getReferencedValueSymbol(reference) {
	            return getNodeLinks(reference).resolvedSymbol ||
	                resolveName(reference, reference.text, 107455 | 1048576 | 8388608, undefined, undefined);
	        }
	        function getReferencedValueDeclaration(reference) {
	            ts.Debug.assert(!ts.nodeIsSynthesized(reference));
	            var symbol = getReferencedValueSymbol(reference);
	            return symbol && getExportSymbolOfValueSymbolIfExported(symbol).valueDeclaration;
	        }
	        function getBlockScopedVariableId(n) {
	            ts.Debug.assert(!ts.nodeIsSynthesized(n));
	            var isVariableDeclarationOrBindingElement = n.parent.kind === 161 || (n.parent.kind === 209 && n.parent.name === n);
	            var symbol = (isVariableDeclarationOrBindingElement ? getSymbolOfNode(n.parent) : undefined) ||
	                getNodeLinks(n).resolvedSymbol ||
	                resolveName(n, n.text, 107455 | 8388608, undefined, undefined);
	            var isLetOrConst = symbol &&
	                (symbol.flags & 2) &&
	                symbol.valueDeclaration.parent.kind !== 242;
	            if (isLetOrConst) {
	                getSymbolLinks(symbol);
	                return symbol.id;
	            }
	            return undefined;
	        }
	        function instantiateSingleCallFunctionType(functionType, typeArguments) {
	            if (functionType === unknownType) {
	                return unknownType;
	            }
	            var signature = getSingleCallSignature(functionType);
	            if (!signature) {
	                return unknownType;
	            }
	            var instantiatedSignature = getSignatureInstantiation(signature, typeArguments);
	            return getOrCreateTypeFromSignature(instantiatedSignature);
	        }
	        function createResolver() {
	            return {
	                getReferencedExportContainer: getReferencedExportContainer,
	                getReferencedImportDeclaration: getReferencedImportDeclaration,
	                getReferencedNestedRedeclaration: getReferencedNestedRedeclaration,
	                isNestedRedeclaration: isNestedRedeclaration,
	                isValueAliasDeclaration: isValueAliasDeclaration,
	                hasGlobalName: hasGlobalName,
	                isReferencedAliasDeclaration: isReferencedAliasDeclaration,
	                getNodeCheckFlags: getNodeCheckFlags,
	                isTopLevelValueImportEqualsWithEntityName: isTopLevelValueImportEqualsWithEntityName,
	                isDeclarationVisible: isDeclarationVisible,
	                isImplementationOfOverload: isImplementationOfOverload,
	                writeTypeOfDeclaration: writeTypeOfDeclaration,
	                writeReturnTypeOfSignatureDeclaration: writeReturnTypeOfSignatureDeclaration,
	                writeTypeOfExpression: writeTypeOfExpression,
	                isSymbolAccessible: isSymbolAccessible,
	                isEntityNameVisible: isEntityNameVisible,
	                getConstantValue: getConstantValue,
	                collectLinkedAliases: collectLinkedAliases,
	                getBlockScopedVariableId: getBlockScopedVariableId,
	                getReferencedValueDeclaration: getReferencedValueDeclaration,
	                getTypeReferenceSerializationKind: getTypeReferenceSerializationKind,
	                isOptionalParameter: isOptionalParameter
	            };
	        }
	        function initializeTypeChecker() {
	            ts.forEach(host.getSourceFiles(), function (file) {
	                ts.bindSourceFile(file);
	            });
	            ts.forEach(host.getSourceFiles(), function (file) {
	                if (!ts.isExternalModule(file)) {
	                    mergeSymbolTable(globals, file.locals);
	                }
	            });
	            getSymbolLinks(undefinedSymbol).type = undefinedType;
	            getSymbolLinks(argumentsSymbol).type = getGlobalType("IArguments");
	            getSymbolLinks(unknownSymbol).type = unknownType;
	            globals[undefinedSymbol.name] = undefinedSymbol;
	            globalArrayType = getGlobalType("Array", 1);
	            globalObjectType = getGlobalType("Object");
	            globalFunctionType = getGlobalType("Function");
	            globalStringType = getGlobalType("String");
	            globalNumberType = getGlobalType("Number");
	            globalBooleanType = getGlobalType("Boolean");
	            globalRegExpType = getGlobalType("RegExp");
	            jsxElementType = getExportedTypeFromNamespace("JSX", JsxNames.Element);
	            getGlobalClassDecoratorType = ts.memoize(function () { return getGlobalType("ClassDecorator"); });
	            getGlobalPropertyDecoratorType = ts.memoize(function () { return getGlobalType("PropertyDecorator"); });
	            getGlobalMethodDecoratorType = ts.memoize(function () { return getGlobalType("MethodDecorator"); });
	            getGlobalParameterDecoratorType = ts.memoize(function () { return getGlobalType("ParameterDecorator"); });
	            getGlobalTypedPropertyDescriptorType = ts.memoize(function () { return getGlobalType("TypedPropertyDescriptor", 1); });
	            getGlobalPromiseType = ts.memoize(function () { return getGlobalType("Promise", 1); });
	            tryGetGlobalPromiseType = ts.memoize(function () { return getGlobalSymbol("Promise", 793056, undefined) && getGlobalPromiseType(); });
	            getGlobalPromiseLikeType = ts.memoize(function () { return getGlobalType("PromiseLike", 1); });
	            getInstantiatedGlobalPromiseLikeType = ts.memoize(createInstantiatedPromiseLikeType);
	            getGlobalPromiseConstructorSymbol = ts.memoize(function () { return getGlobalValueSymbol("Promise"); });
	            getGlobalPromiseConstructorLikeType = ts.memoize(function () { return getGlobalType("PromiseConstructorLike"); });
	            getGlobalThenableType = ts.memoize(createThenableType);
	            if (languageVersion >= 2) {
	                globalTemplateStringsArrayType = getGlobalType("TemplateStringsArray");
	                globalESSymbolType = getGlobalType("Symbol");
	                globalESSymbolConstructorSymbol = getGlobalValueSymbol("Symbol");
	                globalIterableType = getGlobalType("Iterable", 1);
	                globalIteratorType = getGlobalType("Iterator", 1);
	                globalIterableIteratorType = getGlobalType("IterableIterator", 1);
	            }
	            else {
	                globalTemplateStringsArrayType = unknownType;
	                globalESSymbolType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);
	                globalESSymbolConstructorSymbol = undefined;
	                globalIterableType = emptyGenericType;
	                globalIteratorType = emptyGenericType;
	                globalIterableIteratorType = emptyGenericType;
	            }
	            anyArrayType = createArrayType(anyType);
	        }
	        function createInstantiatedPromiseLikeType() {
	            var promiseLikeType = getGlobalPromiseLikeType();
	            if (promiseLikeType !== emptyGenericType) {
	                return createTypeReference(promiseLikeType, [anyType]);
	            }
	            return emptyObjectType;
	        }
	        function createThenableType() {
	            var thenPropertySymbol = createSymbol(67108864 | 4, "then");
	            getSymbolLinks(thenPropertySymbol).type = globalFunctionType;
	            var thenableType = createObjectType(65536);
	            thenableType.properties = [thenPropertySymbol];
	            thenableType.members = createSymbolTable(thenableType.properties);
	            thenableType.callSignatures = [];
	            thenableType.constructSignatures = [];
	            return thenableType;
	        }
	        function checkGrammarDecorators(node) {
	            if (!node.decorators) {
	                return false;
	            }
	            if (!ts.nodeCanBeDecorated(node)) {
	                return grammarErrorOnFirstToken(node, ts.Diagnostics.Decorators_are_not_valid_here);
	            }
	            else if (languageVersion < 1) {
	                return grammarErrorOnFirstToken(node, ts.Diagnostics.Decorators_are_only_available_when_targeting_ECMAScript_5_and_higher);
	            }
	            else if (node.kind === 143 || node.kind === 144) {
	                var accessors = ts.getAllAccessorDeclarations(node.parent.members, node);
	                if (accessors.firstAccessor.decorators && node === accessors.secondAccessor) {
	                    return grammarErrorOnFirstToken(node, ts.Diagnostics.Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name);
	                }
	            }
	            return false;
	        }
	        function checkGrammarModifiers(node) {
	            switch (node.kind) {
	                case 143:
	                case 144:
	                case 142:
	                case 139:
	                case 138:
	                case 141:
	                case 140:
	                case 147:
	                case 216:
	                case 220:
	                case 219:
	                case 226:
	                case 225:
	                case 136:
	                    break;
	                case 211:
	                    if (node.modifiers && (node.modifiers.length > 1 || node.modifiers[0].kind !== 116) &&
	                        node.parent.kind !== 217 && node.parent.kind !== 246) {
	                        return grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_cannot_appear_here);
	                    }
	                    break;
	                case 212:
	                case 213:
	                case 191:
	                case 214:
	                    if (node.modifiers && node.parent.kind !== 217 && node.parent.kind !== 246) {
	                        return grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_cannot_appear_here);
	                    }
	                    break;
	                case 215:
	                    if (node.modifiers && (node.modifiers.length > 1 || node.modifiers[0].kind !== 72) &&
	                        node.parent.kind !== 217 && node.parent.kind !== 246) {
	                        return grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_cannot_appear_here);
	                    }
	                    break;
	                default:
	                    return false;
	            }
	            if (!node.modifiers) {
	                return;
	            }
	            var lastStatic, lastPrivate, lastProtected, lastDeclare, lastAsync;
	            var flags = 0;
	            for (var _i = 0, _a = node.modifiers; _i < _a.length; _i++) {
	                var modifier = _a[_i];
	                switch (modifier.kind) {
	                    case 110:
	                    case 109:
	                    case 108:
	                        var text = void 0;
	                        if (modifier.kind === 110) {
	                            text = "public";
	                        }
	                        else if (modifier.kind === 109) {
	                            text = "protected";
	                            lastProtected = modifier;
	                        }
	                        else {
	                            text = "private";
	                            lastPrivate = modifier;
	                        }
	                        if (flags & 112) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics.Accessibility_modifier_already_seen);
	                        }
	                        else if (flags & 128) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, text, "static");
	                        }
	                        else if (flags & 512) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, text, "async");
	                        }
	                        else if (node.parent.kind === 217 || node.parent.kind === 246) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_module_element, text);
	                        }
	                        else if (flags & 256) {
	                            if (modifier.kind === 108) {
	                                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, text, "abstract");
	                            }
	                            else {
	                                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, text, "abstract");
	                            }
	                        }
	                        flags |= ts.modifierToFlag(modifier.kind);
	                        break;
	                    case 111:
	                        if (flags & 128) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "static");
	                        }
	                        else if (flags & 512) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "static", "async");
	                        }
	                        else if (node.parent.kind === 217 || node.parent.kind === 246) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_module_element, "static");
	                        }
	                        else if (node.kind === 136) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "static");
	                        }
	                        else if (flags & 256) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "static", "abstract");
	                        }
	                        flags |= 128;
	                        lastStatic = modifier;
	                        break;
	                    case 80:
	                        if (flags & 1) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "export");
	                        }
	                        else if (flags & 2) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "export", "declare");
	                        }
	                        else if (flags & 256) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "export", "abstract");
	                        }
	                        else if (flags & 512) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "export", "async");
	                        }
	                        else if (node.parent.kind === 212) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_class_element, "export");
	                        }
	                        else if (node.kind === 136) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "export");
	                        }
	                        flags |= 1;
	                        break;
	                    case 120:
	                        if (flags & 2) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "declare");
	                        }
	                        else if (flags & 512) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_in_an_ambient_context, "async");
	                        }
	                        else if (node.parent.kind === 212) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_class_element, "declare");
	                        }
	                        else if (node.kind === 136) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "declare");
	                        }
	                        else if (ts.isInAmbientContext(node.parent) && node.parent.kind === 217) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics.A_declare_modifier_cannot_be_used_in_an_already_ambient_context);
	                        }
	                        flags |= 2;
	                        lastDeclare = modifier;
	                        break;
	                    case 113:
	                        if (flags & 256) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "abstract");
	                        }
	                        if (node.kind !== 212) {
	                            if (node.kind !== 141) {
	                                return grammarErrorOnNode(modifier, ts.Diagnostics.abstract_modifier_can_only_appear_on_a_class_or_method_declaration);
	                            }
	                            if (!(node.parent.kind === 212 && node.parent.flags & 256)) {
	                                return grammarErrorOnNode(modifier, ts.Diagnostics.Abstract_methods_can_only_appear_within_an_abstract_class);
	                            }
	                            if (flags & 128) {
	                                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "static", "abstract");
	                            }
	                            if (flags & 32) {
	                                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "private", "abstract");
	                            }
	                        }
	                        flags |= 256;
	                        break;
	                    case 116:
	                        if (flags & 512) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "async");
	                        }
	                        else if (flags & 2 || ts.isInAmbientContext(node.parent)) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_in_an_ambient_context, "async");
	                        }
	                        else if (node.kind === 136) {
	                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "async");
	                        }
	                        flags |= 512;
	                        lastAsync = modifier;
	                        break;
	                }
	            }
	            if (node.kind === 142) {
	                if (flags & 128) {
	                    return grammarErrorOnNode(lastStatic, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "static");
	                }
	                if (flags & 256) {
	                    return grammarErrorOnNode(lastStatic, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "abstract");
	                }
	                else if (flags & 64) {
	                    return grammarErrorOnNode(lastProtected, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "protected");
	                }
	                else if (flags & 32) {
	                    return grammarErrorOnNode(lastPrivate, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "private");
	                }
	                else if (flags & 512) {
	                    return grammarErrorOnNode(lastAsync, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "async");
	                }
	                return;
	            }
	            else if ((node.kind === 220 || node.kind === 219) && flags & 2) {
	                return grammarErrorOnNode(lastDeclare, ts.Diagnostics.A_0_modifier_cannot_be_used_with_an_import_declaration, "declare");
	            }
	            else if (node.kind === 136 && (flags & 112) && ts.isBindingPattern(node.name)) {
	                return grammarErrorOnNode(node, ts.Diagnostics.A_parameter_property_may_not_be_a_binding_pattern);
	            }
	            if (flags & 512) {
	                return checkGrammarAsyncModifier(node, lastAsync);
	            }
	        }
	        function checkGrammarAsyncModifier(node, asyncModifier) {
	            if (languageVersion < 2) {
	                return grammarErrorOnNode(asyncModifier, ts.Diagnostics.Async_functions_are_only_available_when_targeting_ECMAScript_6_and_higher);
	            }
	            switch (node.kind) {
	                case 141:
	                case 211:
	                case 171:
	                case 172:
	                    if (!node.asteriskToken) {
	                        return false;
	                    }
	                    break;
	            }
	            return grammarErrorOnNode(asyncModifier, ts.Diagnostics._0_modifier_cannot_be_used_here, "async");
	        }
	        function checkGrammarForDisallowedTrailingComma(list) {
	            if (list && list.hasTrailingComma) {
	                var start = list.end - ",".length;
	                var end = list.end;
	                var sourceFile = ts.getSourceFileOfNode(list[0]);
	                return grammarErrorAtPos(sourceFile, start, end - start, ts.Diagnostics.Trailing_comma_not_allowed);
	            }
	        }
	        function checkGrammarTypeParameterList(node, typeParameters, file) {
	            if (checkGrammarForDisallowedTrailingComma(typeParameters)) {
	                return true;
	            }
	            if (typeParameters && typeParameters.length === 0) {
	                var start = typeParameters.pos - "<".length;
	                var end = ts.skipTrivia(file.text, typeParameters.end) + ">".length;
	                return grammarErrorAtPos(file, start, end - start, ts.Diagnostics.Type_parameter_list_cannot_be_empty);
	            }
	        }
	        function checkGrammarParameterList(parameters) {
	            if (checkGrammarForDisallowedTrailingComma(parameters)) {
	                return true;
	            }
	            var seenOptionalParameter = false;
	            var parameterCount = parameters.length;
	            for (var i = 0; i < parameterCount; i++) {
	                var parameter = parameters[i];
	                if (parameter.dotDotDotToken) {
	                    if (i !== (parameterCount - 1)) {
	                        return grammarErrorOnNode(parameter.dotDotDotToken, ts.Diagnostics.A_rest_parameter_must_be_last_in_a_parameter_list);
	                    }
	                    if (ts.isBindingPattern(parameter.name)) {
	                        return grammarErrorOnNode(parameter.name, ts.Diagnostics.A_rest_element_cannot_contain_a_binding_pattern);
	                    }
	                    if (parameter.questionToken) {
	                        return grammarErrorOnNode(parameter.questionToken, ts.Diagnostics.A_rest_parameter_cannot_be_optional);
	                    }
	                    if (parameter.initializer) {
	                        return grammarErrorOnNode(parameter.name, ts.Diagnostics.A_rest_parameter_cannot_have_an_initializer);
	                    }
	                }
	                else if (parameter.questionToken) {
	                    seenOptionalParameter = true;
	                    if (parameter.initializer) {
	                        return grammarErrorOnNode(parameter.name, ts.Diagnostics.Parameter_cannot_have_question_mark_and_initializer);
	                    }
	                }
	                else if (seenOptionalParameter && !parameter.initializer) {
	                    return grammarErrorOnNode(parameter.name, ts.Diagnostics.A_required_parameter_cannot_follow_an_optional_parameter);
	                }
	            }
	        }
	        function checkGrammarFunctionLikeDeclaration(node) {
	            var file = ts.getSourceFileOfNode(node);
	            return checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarTypeParameterList(node, node.typeParameters, file) ||
	                checkGrammarParameterList(node.parameters) || checkGrammarArrowFunction(node, file);
	        }
	        function checkGrammarArrowFunction(node, file) {
	            if (node.kind === 172) {
	                var arrowFunction = node;
	                var startLine = ts.getLineAndCharacterOfPosition(file, arrowFunction.equalsGreaterThanToken.pos).line;
	                var endLine = ts.getLineAndCharacterOfPosition(file, arrowFunction.equalsGreaterThanToken.end).line;
	                if (startLine !== endLine) {
	                    return grammarErrorOnNode(arrowFunction.equalsGreaterThanToken, ts.Diagnostics.Line_terminator_not_permitted_before_arrow);
	                }
	            }
	            return false;
	        }
	        function checkGrammarIndexSignatureParameters(node) {
	            var parameter = node.parameters[0];
	            if (node.parameters.length !== 1) {
	                if (parameter) {
	                    return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_must_have_exactly_one_parameter);
	                }
	                else {
	                    return grammarErrorOnNode(node, ts.Diagnostics.An_index_signature_must_have_exactly_one_parameter);
	                }
	            }
	            if (parameter.dotDotDotToken) {
	                return grammarErrorOnNode(parameter.dotDotDotToken, ts.Diagnostics.An_index_signature_cannot_have_a_rest_parameter);
	            }
	            if (parameter.flags & 2035) {
	                return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_cannot_have_an_accessibility_modifier);
	            }
	            if (parameter.questionToken) {
	                return grammarErrorOnNode(parameter.questionToken, ts.Diagnostics.An_index_signature_parameter_cannot_have_a_question_mark);
	            }
	            if (parameter.initializer) {
	                return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_cannot_have_an_initializer);
	            }
	            if (!parameter.type) {
	                return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_must_have_a_type_annotation);
	            }
	            if (parameter.type.kind !== 128 && parameter.type.kind !== 126) {
	                return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_type_must_be_string_or_number);
	            }
	            if (!node.type) {
	                return grammarErrorOnNode(node, ts.Diagnostics.An_index_signature_must_have_a_type_annotation);
	            }
	        }
	        function checkGrammarForIndexSignatureModifier(node) {
	            if (node.flags & 2035) {
	                grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_not_permitted_on_index_signature_members);
	            }
	        }
	        function checkGrammarIndexSignature(node) {
	            return checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarIndexSignatureParameters(node) || checkGrammarForIndexSignatureModifier(node);
	        }
	        function checkGrammarForAtLeastOneTypeArgument(node, typeArguments) {
	            if (typeArguments && typeArguments.length === 0) {
	                var sourceFile = ts.getSourceFileOfNode(node);
	                var start = typeArguments.pos - "<".length;
	                var end = ts.skipTrivia(sourceFile.text, typeArguments.end) + ">".length;
	                return grammarErrorAtPos(sourceFile, start, end - start, ts.Diagnostics.Type_argument_list_cannot_be_empty);
	            }
	        }
	        function checkGrammarTypeArguments(node, typeArguments) {
	            return checkGrammarForDisallowedTrailingComma(typeArguments) ||
	                checkGrammarForAtLeastOneTypeArgument(node, typeArguments);
	        }
	        function checkGrammarForOmittedArgument(node, args) {
	            if (args) {
	                var sourceFile = ts.getSourceFileOfNode(node);
	                for (var _i = 0; _i < args.length; _i++) {
	                    var arg = args[_i];
	                    if (arg.kind === 185) {
	                        return grammarErrorAtPos(sourceFile, arg.pos, 0, ts.Diagnostics.Argument_expression_expected);
	                    }
	                }
	            }
	        }
	        function checkGrammarArguments(node, args) {
	            return checkGrammarForDisallowedTrailingComma(args) ||
	                checkGrammarForOmittedArgument(node, args);
	        }
	        function checkGrammarHeritageClause(node) {
	            var types = node.types;
	            if (checkGrammarForDisallowedTrailingComma(types)) {
	                return true;
	            }
	            if (types && types.length === 0) {
	                var listType = ts.tokenToString(node.token);
	                var sourceFile = ts.getSourceFileOfNode(node);
	                return grammarErrorAtPos(sourceFile, types.pos, 0, ts.Diagnostics._0_list_cannot_be_empty, listType);
	            }
	        }
	        function checkGrammarClassDeclarationHeritageClauses(node) {
	            var seenExtendsClause = false;
	            var seenImplementsClause = false;
	            if (!checkGrammarDecorators(node) && !checkGrammarModifiers(node) && node.heritageClauses) {
	                for (var _i = 0, _a = node.heritageClauses; _i < _a.length; _i++) {
	                    var heritageClause = _a[_i];
	                    if (heritageClause.token === 81) {
	                        if (seenExtendsClause) {
	                            return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.extends_clause_already_seen);
	                        }
	                        if (seenImplementsClause) {
	                            return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.extends_clause_must_precede_implements_clause);
	                        }
	                        if (heritageClause.types.length > 1) {
	                            return grammarErrorOnFirstToken(heritageClause.types[1], ts.Diagnostics.Classes_can_only_extend_a_single_class);
	                        }
	                        seenExtendsClause = true;
	                    }
	                    else {
	                        ts.Debug.assert(heritageClause.token === 104);
	                        if (seenImplementsClause) {
	                            return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.implements_clause_already_seen);
	                        }
	                        seenImplementsClause = true;
	                    }
	                    checkGrammarHeritageClause(heritageClause);
	                }
	            }
	        }
	        function checkGrammarInterfaceDeclaration(node) {
	            var seenExtendsClause = false;
	            if (node.heritageClauses) {
	                for (var _i = 0, _a = node.heritageClauses; _i < _a.length; _i++) {
	                    var heritageClause = _a[_i];
	                    if (heritageClause.token === 81) {
	                        if (seenExtendsClause) {
	                            return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.extends_clause_already_seen);
	                        }
	                        seenExtendsClause = true;
	                    }
	                    else {
	                        ts.Debug.assert(heritageClause.token === 104);
	                        return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.Interface_declaration_cannot_have_implements_clause);
	                    }
	                    checkGrammarHeritageClause(heritageClause);
	                }
	            }
	            return false;
	        }
	        function checkGrammarComputedPropertyName(node) {
	            if (node.kind !== 134) {
	                return false;
	            }
	            var computedPropertyName = node;
	            if (computedPropertyName.expression.kind === 179 && computedPropertyName.expression.operatorToken.kind === 24) {
	                return grammarErrorOnNode(computedPropertyName.expression, ts.Diagnostics.A_comma_expression_is_not_allowed_in_a_computed_property_name);
	            }
	        }
	        function checkGrammarForGenerator(node) {
	            if (node.asteriskToken) {
	                ts.Debug.assert(node.kind === 211 ||
	                    node.kind === 171 ||
	                    node.kind === 141);
	                if (ts.isInAmbientContext(node)) {
	                    return grammarErrorOnNode(node.asteriskToken, ts.Diagnostics.Generators_are_not_allowed_in_an_ambient_context);
	                }
	                if (!node.body) {
	                    return grammarErrorOnNode(node.asteriskToken, ts.Diagnostics.An_overload_signature_cannot_be_declared_as_a_generator);
	                }
	                if (languageVersion < 2) {
	                    return grammarErrorOnNode(node.asteriskToken, ts.Diagnostics.Generators_are_only_available_when_targeting_ECMAScript_6_or_higher);
	                }
	            }
	        }
	        function checkGrammarForInvalidQuestionMark(node, questionToken, message) {
	            if (questionToken) {
	                return grammarErrorOnNode(questionToken, message);
	            }
	        }
	        function checkGrammarObjectLiteralExpression(node) {
	            var seen = {};
	            var Property = 1;
	            var GetAccessor = 2;
	            var SetAccesor = 4;
	            var GetOrSetAccessor = GetAccessor | SetAccesor;
	            for (var _i = 0, _a = node.properties; _i < _a.length; _i++) {
	                var prop = _a[_i];
	                var name_16 = prop.name;
	                if (prop.kind === 185 ||
	                    name_16.kind === 134) {
	                    checkGrammarComputedPropertyName(name_16);
	                    continue;
	                }
	                var currentKind = void 0;
	                if (prop.kind === 243 || prop.kind === 244) {
	                    checkGrammarForInvalidQuestionMark(prop, prop.questionToken, ts.Diagnostics.An_object_member_cannot_be_declared_optional);
	                    if (name_16.kind === 8) {
	                        checkGrammarNumericLiteral(name_16);
	                    }
	                    currentKind = Property;
	                }
	                else if (prop.kind === 141) {
	                    currentKind = Property;
	                }
	                else if (prop.kind === 143) {
	                    currentKind = GetAccessor;
	                }
	                else if (prop.kind === 144) {
	                    currentKind = SetAccesor;
	                }
	                else {
	                    ts.Debug.fail("Unexpected syntax kind:" + prop.kind);
	                }
	                if (!ts.hasProperty(seen, name_16.text)) {
	                    seen[name_16.text] = currentKind;
	                }
	                else {
	                    var existingKind = seen[name_16.text];
	                    if (currentKind === Property && existingKind === Property) {
	                        continue;
	                    }
	                    else if ((currentKind & GetOrSetAccessor) && (existingKind & GetOrSetAccessor)) {
	                        if (existingKind !== GetOrSetAccessor && currentKind !== existingKind) {
	                            seen[name_16.text] = currentKind | existingKind;
	                        }
	                        else {
	                            return grammarErrorOnNode(name_16, ts.Diagnostics.An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name);
	                        }
	                    }
	                    else {
	                        return grammarErrorOnNode(name_16, ts.Diagnostics.An_object_literal_cannot_have_property_and_accessor_with_the_same_name);
	                    }
	                }
	            }
	        }
	        function checkGrammarJsxElement(node) {
	            var seen = {};
	            for (var _i = 0, _a = node.attributes; _i < _a.length; _i++) {
	                var attr = _a[_i];
	                if (attr.kind === 237) {
	                    continue;
	                }
	                var jsxAttr = attr;
	                var name_17 = jsxAttr.name;
	                if (!ts.hasProperty(seen, name_17.text)) {
	                    seen[name_17.text] = true;
	                }
	                else {
	                    return grammarErrorOnNode(name_17, ts.Diagnostics.JSX_elements_cannot_have_multiple_attributes_with_the_same_name);
	                }
	                var initializer = jsxAttr.initializer;
	                if (initializer && initializer.kind === 238 && !initializer.expression) {
	                    return grammarErrorOnNode(jsxAttr.initializer, ts.Diagnostics.JSX_attributes_must_only_be_assigned_a_non_empty_expression);
	                }
	            }
	        }
	        function checkGrammarForInOrForOfStatement(forInOrOfStatement) {
	            if (checkGrammarStatementInAmbientContext(forInOrOfStatement)) {
	                return true;
	            }
	            if (forInOrOfStatement.initializer.kind === 210) {
	                var variableList = forInOrOfStatement.initializer;
	                if (!checkGrammarVariableDeclarationList(variableList)) {
	                    if (variableList.declarations.length > 1) {
	                        var diagnostic = forInOrOfStatement.kind === 198
	                            ? ts.Diagnostics.Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement
	                            : ts.Diagnostics.Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement;
	                        return grammarErrorOnFirstToken(variableList.declarations[1], diagnostic);
	                    }
	                    var firstDeclaration = variableList.declarations[0];
	                    if (firstDeclaration.initializer) {
	                        var diagnostic = forInOrOfStatement.kind === 198
	                            ? ts.Diagnostics.The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer
	                            : ts.Diagnostics.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer;
	                        return grammarErrorOnNode(firstDeclaration.name, diagnostic);
	                    }
	                    if (firstDeclaration.type) {
	                        var diagnostic = forInOrOfStatement.kind === 198
	                            ? ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation
	                            : ts.Diagnostics.The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation;
	                        return grammarErrorOnNode(firstDeclaration, diagnostic);
	                    }
	                }
	            }
	            return false;
	        }
	        function checkGrammarAccessor(accessor) {
	            var kind = accessor.kind;
	            if (languageVersion < 1) {
	                return grammarErrorOnNode(accessor.name, ts.Diagnostics.Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher);
	            }
	            else if (ts.isInAmbientContext(accessor)) {
	                return grammarErrorOnNode(accessor.name, ts.Diagnostics.An_accessor_cannot_be_declared_in_an_ambient_context);
	            }
	            else if (accessor.body === undefined) {
	                return grammarErrorAtPos(ts.getSourceFileOfNode(accessor), accessor.end - 1, ";".length, ts.Diagnostics._0_expected, "{");
	            }
	            else if (accessor.typeParameters) {
	                return grammarErrorOnNode(accessor.name, ts.Diagnostics.An_accessor_cannot_have_type_parameters);
	            }
	            else if (kind === 143 && accessor.parameters.length) {
	                return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_get_accessor_cannot_have_parameters);
	            }
	            else if (kind === 144) {
	                if (accessor.type) {
	                    return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_set_accessor_cannot_have_a_return_type_annotation);
	                }
	                else if (accessor.parameters.length !== 1) {
	                    return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_set_accessor_must_have_exactly_one_parameter);
	                }
	                else {
	                    var parameter = accessor.parameters[0];
	                    if (parameter.dotDotDotToken) {
	                        return grammarErrorOnNode(parameter.dotDotDotToken, ts.Diagnostics.A_set_accessor_cannot_have_rest_parameter);
	                    }
	                    else if (parameter.flags & 2035) {
	                        return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_parameter_property_is_only_allowed_in_a_constructor_implementation);
	                    }
	                    else if (parameter.questionToken) {
	                        return grammarErrorOnNode(parameter.questionToken, ts.Diagnostics.A_set_accessor_cannot_have_an_optional_parameter);
	                    }
	                    else if (parameter.initializer) {
	                        return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_set_accessor_parameter_cannot_have_an_initializer);
	                    }
	                }
	            }
	        }
	        function checkGrammarForNonSymbolComputedProperty(node, message) {
	            if (node.kind === 134 && !ts.isWellKnownSymbolSyntactically(node.expression)) {
	                return grammarErrorOnNode(node, message);
	            }
	        }
	        function checkGrammarMethod(node) {
	            if (checkGrammarDisallowedModifiersOnObjectLiteralExpressionMethod(node) ||
	                checkGrammarFunctionLikeDeclaration(node) ||
	                checkGrammarForGenerator(node)) {
	                return true;
	            }
	            if (node.parent.kind === 163) {
	                if (checkGrammarForInvalidQuestionMark(node, node.questionToken, ts.Diagnostics.A_class_member_cannot_be_declared_optional)) {
	                    return true;
	                }
	                else if (node.body === undefined) {
	                    return grammarErrorAtPos(getSourceFile(node), node.end - 1, ";".length, ts.Diagnostics._0_expected, "{");
	                }
	            }
	            if (ts.isClassLike(node.parent)) {
	                if (checkGrammarForInvalidQuestionMark(node, node.questionToken, ts.Diagnostics.A_class_member_cannot_be_declared_optional)) {
	                    return true;
	                }
	                if (ts.isInAmbientContext(node)) {
	                    return checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_an_ambient_context_must_directly_refer_to_a_built_in_symbol);
	                }
	                else if (!node.body) {
	                    return checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_a_method_overload_must_directly_refer_to_a_built_in_symbol);
	                }
	            }
	            else if (node.parent.kind === 213) {
	                return checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_an_interface_must_directly_refer_to_a_built_in_symbol);
	            }
	            else if (node.parent.kind === 153) {
	                return checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_a_type_literal_must_directly_refer_to_a_built_in_symbol);
	            }
	        }
	        function isIterationStatement(node, lookInLabeledStatements) {
	            switch (node.kind) {
	                case 197:
	                case 198:
	                case 199:
	                case 195:
	                case 196:
	                    return true;
	                case 205:
	                    return lookInLabeledStatements && isIterationStatement(node.statement, lookInLabeledStatements);
	            }
	            return false;
	        }
	        function checkGrammarBreakOrContinueStatement(node) {
	            var current = node;
	            while (current) {
	                if (ts.isFunctionLike(current)) {
	                    return grammarErrorOnNode(node, ts.Diagnostics.Jump_target_cannot_cross_function_boundary);
	                }
	                switch (current.kind) {
	                    case 205:
	                        if (node.label && current.label.text === node.label.text) {
	                            var isMisplacedContinueLabel = node.kind === 200
	                                && !isIterationStatement(current.statement, true);
	                            if (isMisplacedContinueLabel) {
	                                return grammarErrorOnNode(node, ts.Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement);
	                            }
	                            return false;
	                        }
	                        break;
	                    case 204:
	                        if (node.kind === 201 && !node.label) {
	                            return false;
	                        }
	                        break;
	                    default:
	                        if (isIterationStatement(current, false) && !node.label) {
	                            return false;
	                        }
	                        break;
	                }
	                current = current.parent;
	            }
	            if (node.label) {
	                var message = node.kind === 201
	                    ? ts.Diagnostics.A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement
	                    : ts.Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement;
	                return grammarErrorOnNode(node, message);
	            }
	            else {
	                var message = node.kind === 201
	                    ? ts.Diagnostics.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement
	                    : ts.Diagnostics.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement;
	                return grammarErrorOnNode(node, message);
	            }
	        }
	        function checkGrammarBindingElement(node) {
	            if (node.dotDotDotToken) {
	                var elements = node.parent.elements;
	                if (node !== ts.lastOrUndefined(elements)) {
	                    return grammarErrorOnNode(node, ts.Diagnostics.A_rest_element_must_be_last_in_an_array_destructuring_pattern);
	                }
	                if (node.name.kind === 160 || node.name.kind === 159) {
	                    return grammarErrorOnNode(node.name, ts.Diagnostics.A_rest_element_cannot_contain_a_binding_pattern);
	                }
	                if (node.initializer) {
	                    return grammarErrorAtPos(ts.getSourceFileOfNode(node), node.initializer.pos - 1, 1, ts.Diagnostics.A_rest_element_cannot_have_an_initializer);
	                }
	            }
	        }
	        function checkGrammarVariableDeclaration(node) {
	            if (node.parent.parent.kind !== 198 && node.parent.parent.kind !== 199) {
	                if (ts.isInAmbientContext(node)) {
	                    if (node.initializer) {
	                        var equalsTokenLength = "=".length;
	                        return grammarErrorAtPos(ts.getSourceFileOfNode(node), node.initializer.pos - equalsTokenLength, equalsTokenLength, ts.Diagnostics.Initializers_are_not_allowed_in_ambient_contexts);
	                    }
	                }
	                else if (!node.initializer) {
	                    if (ts.isBindingPattern(node.name) && !ts.isBindingPattern(node.parent)) {
	                        return grammarErrorOnNode(node, ts.Diagnostics.A_destructuring_declaration_must_have_an_initializer);
	                    }
	                    if (ts.isConst(node)) {
	                        return grammarErrorOnNode(node, ts.Diagnostics.const_declarations_must_be_initialized);
	                    }
	                }
	            }
	            var checkLetConstNames = languageVersion >= 2 && (ts.isLet(node) || ts.isConst(node));
	            return checkLetConstNames && checkGrammarNameInLetOrConstDeclarations(node.name);
	        }
	        function checkGrammarNameInLetOrConstDeclarations(name) {
	            if (name.kind === 67) {
	                if (name.text === "let") {
	                    return grammarErrorOnNode(name, ts.Diagnostics.let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations);
	                }
	            }
	            else {
	                var elements = name.elements;
	                for (var _i = 0; _i < elements.length; _i++) {
	                    var element = elements[_i];
	                    if (element.kind !== 185) {
	                        checkGrammarNameInLetOrConstDeclarations(element.name);
	                    }
	                }
	            }
	        }
	        function checkGrammarVariableDeclarationList(declarationList) {
	            var declarations = declarationList.declarations;
	            if (checkGrammarForDisallowedTrailingComma(declarationList.declarations)) {
	                return true;
	            }
	            if (!declarationList.declarations.length) {
	                return grammarErrorAtPos(ts.getSourceFileOfNode(declarationList), declarations.pos, declarations.end - declarations.pos, ts.Diagnostics.Variable_declaration_list_cannot_be_empty);
	            }
	        }
	        function allowLetAndConstDeclarations(parent) {
	            switch (parent.kind) {
	                case 194:
	                case 195:
	                case 196:
	                case 203:
	                case 197:
	                case 198:
	                case 199:
	                    return false;
	                case 205:
	                    return allowLetAndConstDeclarations(parent.parent);
	            }
	            return true;
	        }
	        function checkGrammarForDisallowedLetOrConstStatement(node) {
	            if (!allowLetAndConstDeclarations(node.parent)) {
	                if (ts.isLet(node.declarationList)) {
	                    return grammarErrorOnNode(node, ts.Diagnostics.let_declarations_can_only_be_declared_inside_a_block);
	                }
	                else if (ts.isConst(node.declarationList)) {
	                    return grammarErrorOnNode(node, ts.Diagnostics.const_declarations_can_only_be_declared_inside_a_block);
	                }
	            }
	        }
	        function isIntegerLiteral(expression) {
	            if (expression.kind === 177) {
	                var unaryExpression = expression;
	                if (unaryExpression.operator === 35 || unaryExpression.operator === 36) {
	                    expression = unaryExpression.operand;
	                }
	            }
	            if (expression.kind === 8) {
	                return /^[0-9]+([eE]\+?[0-9]+)?$/.test(expression.text);
	            }
	            return false;
	        }
	        function checkGrammarEnumDeclaration(enumDecl) {
	            var enumIsConst = (enumDecl.flags & 32768) !== 0;
	            var hasError = false;
	            if (!enumIsConst) {
	                var inConstantEnumMemberSection = true;
	                var inAmbientContext = ts.isInAmbientContext(enumDecl);
	                for (var _i = 0, _a = enumDecl.members; _i < _a.length; _i++) {
	                    var node = _a[_i];
	                    if (node.name.kind === 134) {
	                        hasError = grammarErrorOnNode(node.name, ts.Diagnostics.Computed_property_names_are_not_allowed_in_enums);
	                    }
	                    else if (inAmbientContext) {
	                        if (node.initializer && !isIntegerLiteral(node.initializer)) {
	                            hasError = grammarErrorOnNode(node.name, ts.Diagnostics.Ambient_enum_elements_can_only_have_integer_literal_initializers) || hasError;
	                        }
	                    }
	                    else if (node.initializer) {
	                        inConstantEnumMemberSection = isIntegerLiteral(node.initializer);
	                    }
	                    else if (!inConstantEnumMemberSection) {
	                        hasError = grammarErrorOnNode(node.name, ts.Diagnostics.Enum_member_must_have_initializer) || hasError;
	                    }
	                }
	            }
	            return hasError;
	        }
	        function hasParseDiagnostics(sourceFile) {
	            return sourceFile.parseDiagnostics.length > 0;
	        }
	        function grammarErrorOnFirstToken(node, message, arg0, arg1, arg2) {
	            var sourceFile = ts.getSourceFileOfNode(node);
	            if (!hasParseDiagnostics(sourceFile)) {
	                var span = ts.getSpanOfTokenAtPosition(sourceFile, node.pos);
	                diagnostics.add(ts.createFileDiagnostic(sourceFile, span.start, span.length, message, arg0, arg1, arg2));
	                return true;
	            }
	        }
	        function grammarErrorAtPos(sourceFile, start, length, message, arg0, arg1, arg2) {
	            if (!hasParseDiagnostics(sourceFile)) {
	                diagnostics.add(ts.createFileDiagnostic(sourceFile, start, length, message, arg0, arg1, arg2));
	                return true;
	            }
	        }
	        function grammarErrorOnNode(node, message, arg0, arg1, arg2) {
	            var sourceFile = ts.getSourceFileOfNode(node);
	            if (!hasParseDiagnostics(sourceFile)) {
	                diagnostics.add(ts.createDiagnosticForNode(node, message, arg0, arg1, arg2));
	                return true;
	            }
	        }
	        function isEvalOrArgumentsIdentifier(node) {
	            return node.kind === 67 &&
	                (node.text === "eval" || node.text === "arguments");
	        }
	        function checkGrammarConstructorTypeParameters(node) {
	            if (node.typeParameters) {
	                return grammarErrorAtPos(ts.getSourceFileOfNode(node), node.typeParameters.pos, node.typeParameters.end - node.typeParameters.pos, ts.Diagnostics.Type_parameters_cannot_appear_on_a_constructor_declaration);
	            }
	        }
	        function checkGrammarConstructorTypeAnnotation(node) {
	            if (node.type) {
	                return grammarErrorOnNode(node.type, ts.Diagnostics.Type_annotation_cannot_appear_on_a_constructor_declaration);
	            }
	        }
	        function checkGrammarProperty(node) {
	            if (ts.isClassLike(node.parent)) {
	                if (checkGrammarForInvalidQuestionMark(node, node.questionToken, ts.Diagnostics.A_class_member_cannot_be_declared_optional) ||
	                    checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_a_class_property_declaration_must_directly_refer_to_a_built_in_symbol)) {
	                    return true;
	                }
	            }
	            else if (node.parent.kind === 213) {
	                if (checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_an_interface_must_directly_refer_to_a_built_in_symbol)) {
	                    return true;
	                }
	            }
	            else if (node.parent.kind === 153) {
	                if (checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_a_type_literal_must_directly_refer_to_a_built_in_symbol)) {
	                    return true;
	                }
	            }
	            if (ts.isInAmbientContext(node) && node.initializer) {
	                return grammarErrorOnFirstToken(node.initializer, ts.Diagnostics.Initializers_are_not_allowed_in_ambient_contexts);
	            }
	        }
	        function checkGrammarTopLevelElementForRequiredDeclareModifier(node) {
	            if (node.kind === 213 ||
	                node.kind === 220 ||
	                node.kind === 219 ||
	                node.kind === 226 ||
	                node.kind === 225 ||
	                (node.flags & 2) ||
	                (node.flags & (1 | 1024))) {
	                return false;
	            }
	            return grammarErrorOnFirstToken(node, ts.Diagnostics.A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file);
	        }
	        function checkGrammarTopLevelElementsForRequiredDeclareModifier(file) {
	            for (var _i = 0, _a = file.statements; _i < _a.length; _i++) {
	                var decl = _a[_i];
	                if (ts.isDeclaration(decl) || decl.kind === 191) {
	                    if (checkGrammarTopLevelElementForRequiredDeclareModifier(decl)) {
	                        return true;
	                    }
	                }
	            }
	        }
	        function checkGrammarSourceFile(node) {
	            return ts.isInAmbientContext(node) && checkGrammarTopLevelElementsForRequiredDeclareModifier(node);
	        }
	        function checkGrammarStatementInAmbientContext(node) {
	            if (ts.isInAmbientContext(node)) {
	                if (isAccessor(node.parent.kind)) {
	                    return getNodeLinks(node).hasReportedStatementInAmbientContext = true;
	                }
	                var links = getNodeLinks(node);
	                if (!links.hasReportedStatementInAmbientContext && ts.isFunctionLike(node.parent)) {
	                    return getNodeLinks(node).hasReportedStatementInAmbientContext = grammarErrorOnFirstToken(node, ts.Diagnostics.An_implementation_cannot_be_declared_in_ambient_contexts);
	                }
	                if (node.parent.kind === 190 || node.parent.kind === 217 || node.parent.kind === 246) {
	                    var links_1 = getNodeLinks(node.parent);
	                    if (!links_1.hasReportedStatementInAmbientContext) {
	                        return links_1.hasReportedStatementInAmbientContext = grammarErrorOnFirstToken(node, ts.Diagnostics.Statements_are_not_allowed_in_ambient_contexts);
	                    }
	                }
	                else {
	                }
	            }
	        }
	        function checkGrammarNumericLiteral(node) {
	            if (node.flags & 65536 && languageVersion >= 1) {
	                return grammarErrorOnNode(node, ts.Diagnostics.Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher);
	            }
	        }
	        function grammarErrorAfterFirstToken(node, message, arg0, arg1, arg2) {
	            var sourceFile = ts.getSourceFileOfNode(node);
	            if (!hasParseDiagnostics(sourceFile)) {
	                var span = ts.getSpanOfTokenAtPosition(sourceFile, node.pos);
	                diagnostics.add(ts.createFileDiagnostic(sourceFile, ts.textSpanEnd(span), 0, message, arg0, arg1, arg2));
	                return true;
	            }
	        }
	    }
	    ts.createTypeChecker = createTypeChecker;
	})(ts || (ts = {}));
	/// <reference path="checker.ts"/>
	var ts;
	(function (ts) {
	    function getDeclarationDiagnostics(host, resolver, targetSourceFile) {
	        var diagnostics = [];
	        var jsFilePath = ts.getOwnEmitOutputFilePath(targetSourceFile, host, ".js");
	        emitDeclarations(host, resolver, diagnostics, jsFilePath, targetSourceFile);
	        return diagnostics;
	    }
	    ts.getDeclarationDiagnostics = getDeclarationDiagnostics;
	    function emitDeclarations(host, resolver, diagnostics, jsFilePath, root) {
	        var newLine = host.getNewLine();
	        var compilerOptions = host.getCompilerOptions();
	        var write;
	        var writeLine;
	        var increaseIndent;
	        var decreaseIndent;
	        var writeTextOfNode;
	        var writer = createAndSetNewTextWriterWithSymbolWriter();
	        var enclosingDeclaration;
	        var currentSourceFile;
	        var reportedDeclarationError = false;
	        var emitJsDocComments = compilerOptions.removeComments ? function (declaration) { } : writeJsDocComments;
	        var emit = compilerOptions.stripInternal ? stripInternal : emitNode;
	        var moduleElementDeclarationEmitInfo = [];
	        var asynchronousSubModuleDeclarationEmitInfo;
	        var referencePathsOutput = "";
	        if (root) {
	            if (!compilerOptions.noResolve) {
	                var addedGlobalFileReference = false;
	                ts.forEach(root.referencedFiles, function (fileReference) {
	                    var referencedFile = ts.tryResolveScriptReference(host, root, fileReference);
	                    if (referencedFile && ((referencedFile.flags & 8192) ||
	                        ts.shouldEmitToOwnFile(referencedFile, compilerOptions) ||
	                        !addedGlobalFileReference)) {
	                        writeReferencePath(referencedFile);
	                        if (!ts.isExternalModuleOrDeclarationFile(referencedFile)) {
	                            addedGlobalFileReference = true;
	                        }
	                    }
	                });
	            }
	            emitSourceFile(root);
	            if (moduleElementDeclarationEmitInfo.length) {
	                var oldWriter = writer;
	                ts.forEach(moduleElementDeclarationEmitInfo, function (aliasEmitInfo) {
	                    if (aliasEmitInfo.isVisible) {
	                        ts.Debug.assert(aliasEmitInfo.node.kind === 220);
	                        createAndSetNewTextWriterWithSymbolWriter();
	                        ts.Debug.assert(aliasEmitInfo.indent === 0);
	                        writeImportDeclaration(aliasEmitInfo.node);
	                        aliasEmitInfo.asynchronousOutput = writer.getText();
	                    }
	                });
	                setWriter(oldWriter);
	            }
	        }
	        else {
	            var emittedReferencedFiles = [];
	            ts.forEach(host.getSourceFiles(), function (sourceFile) {
	                if (!ts.isExternalModuleOrDeclarationFile(sourceFile)) {
	                    if (!compilerOptions.noResolve) {
	                        ts.forEach(sourceFile.referencedFiles, function (fileReference) {
	                            var referencedFile = ts.tryResolveScriptReference(host, sourceFile, fileReference);
	                            if (referencedFile && (ts.isExternalModuleOrDeclarationFile(referencedFile) &&
	                                !ts.contains(emittedReferencedFiles, referencedFile))) {
	                                writeReferencePath(referencedFile);
	                                emittedReferencedFiles.push(referencedFile);
	                            }
	                        });
	                    }
	                    emitSourceFile(sourceFile);
	                }
	            });
	        }
	        return {
	            reportedDeclarationError: reportedDeclarationError,
	            moduleElementDeclarationEmitInfo: moduleElementDeclarationEmitInfo,
	            synchronousDeclarationOutput: writer.getText(),
	            referencePathsOutput: referencePathsOutput
	        };
	        function hasInternalAnnotation(range) {
	            var text = currentSourceFile.text;
	            var comment = text.substring(range.pos, range.end);
	            return comment.indexOf("@internal") >= 0;
	        }
	        function stripInternal(node) {
	            if (node) {
	                var leadingCommentRanges = ts.getLeadingCommentRanges(currentSourceFile.text, node.pos);
	                if (ts.forEach(leadingCommentRanges, hasInternalAnnotation)) {
	                    return;
	                }
	                emitNode(node);
	            }
	        }
	        function createAndSetNewTextWriterWithSymbolWriter() {
	            var writer = ts.createTextWriter(newLine);
	            writer.trackSymbol = trackSymbol;
	            writer.writeKeyword = writer.write;
	            writer.writeOperator = writer.write;
	            writer.writePunctuation = writer.write;
	            writer.writeSpace = writer.write;
	            writer.writeStringLiteral = writer.writeLiteral;
	            writer.writeParameter = writer.write;
	            writer.writeSymbol = writer.write;
	            setWriter(writer);
	            return writer;
	        }
	        function setWriter(newWriter) {
	            writer = newWriter;
	            write = newWriter.write;
	            writeTextOfNode = newWriter.writeTextOfNode;
	            writeLine = newWriter.writeLine;
	            increaseIndent = newWriter.increaseIndent;
	            decreaseIndent = newWriter.decreaseIndent;
	        }
	        function writeAsynchronousModuleElements(nodes) {
	            var oldWriter = writer;
	            ts.forEach(nodes, function (declaration) {
	                var nodeToCheck;
	                if (declaration.kind === 209) {
	                    nodeToCheck = declaration.parent.parent;
	                }
	                else if (declaration.kind === 223 || declaration.kind === 224 || declaration.kind === 221) {
	                    ts.Debug.fail("We should be getting ImportDeclaration instead to write");
	                }
	                else {
	                    nodeToCheck = declaration;
	                }
	                var moduleElementEmitInfo = ts.forEach(moduleElementDeclarationEmitInfo, function (declEmitInfo) { return declEmitInfo.node === nodeToCheck ? declEmitInfo : undefined; });
	                if (!moduleElementEmitInfo && asynchronousSubModuleDeclarationEmitInfo) {
	                    moduleElementEmitInfo = ts.forEach(asynchronousSubModuleDeclarationEmitInfo, function (declEmitInfo) { return declEmitInfo.node === nodeToCheck ? declEmitInfo : undefined; });
	                }
	                if (moduleElementEmitInfo) {
	                    if (moduleElementEmitInfo.node.kind === 220) {
	                        moduleElementEmitInfo.isVisible = true;
	                    }
	                    else {
	                        createAndSetNewTextWriterWithSymbolWriter();
	                        for (var declarationIndent = moduleElementEmitInfo.indent; declarationIndent; declarationIndent--) {
	                            increaseIndent();
	                        }
	                        if (nodeToCheck.kind === 216) {
	                            ts.Debug.assert(asynchronousSubModuleDeclarationEmitInfo === undefined);
	                            asynchronousSubModuleDeclarationEmitInfo = [];
	                        }
	                        writeModuleElement(nodeToCheck);
	                        if (nodeToCheck.kind === 216) {
	                            moduleElementEmitInfo.subModuleElementDeclarationEmitInfo = asynchronousSubModuleDeclarationEmitInfo;
	                            asynchronousSubModuleDeclarationEmitInfo = undefined;
	                        }
	                        moduleElementEmitInfo.asynchronousOutput = writer.getText();
	                    }
	                }
	            });
	            setWriter(oldWriter);
	        }
	        function handleSymbolAccessibilityError(symbolAccesibilityResult) {
	            if (symbolAccesibilityResult.accessibility === 0) {
	                if (symbolAccesibilityResult && symbolAccesibilityResult.aliasesToMakeVisible) {
	                    writeAsynchronousModuleElements(symbolAccesibilityResult.aliasesToMakeVisible);
	                }
	            }
	            else {
	                reportedDeclarationError = true;
	                var errorInfo = writer.getSymbolAccessibilityDiagnostic(symbolAccesibilityResult);
	                if (errorInfo) {
	                    if (errorInfo.typeName) {
	                        diagnostics.push(ts.createDiagnosticForNode(symbolAccesibilityResult.errorNode || errorInfo.errorNode, errorInfo.diagnosticMessage, ts.getSourceTextOfNodeFromSourceFile(currentSourceFile, errorInfo.typeName), symbolAccesibilityResult.errorSymbolName, symbolAccesibilityResult.errorModuleName));
	                    }
	                    else {
	                        diagnostics.push(ts.createDiagnosticForNode(symbolAccesibilityResult.errorNode || errorInfo.errorNode, errorInfo.diagnosticMessage, symbolAccesibilityResult.errorSymbolName, symbolAccesibilityResult.errorModuleName));
	                    }
	                }
	            }
	        }
	        function trackSymbol(symbol, enclosingDeclaration, meaning) {
	            handleSymbolAccessibilityError(resolver.isSymbolAccessible(symbol, enclosingDeclaration, meaning));
	        }
	        function writeTypeOfDeclaration(declaration, type, getSymbolAccessibilityDiagnostic) {
	            writer.getSymbolAccessibilityDiagnostic = getSymbolAccessibilityDiagnostic;
	            write(": ");
	            if (type) {
	                emitType(type);
	            }
	            else {
	                resolver.writeTypeOfDeclaration(declaration, enclosingDeclaration, 2, writer);
	            }
	        }
	        function writeReturnTypeAtSignature(signature, getSymbolAccessibilityDiagnostic) {
	            writer.getSymbolAccessibilityDiagnostic = getSymbolAccessibilityDiagnostic;
	            write(": ");
	            if (signature.type) {
	                emitType(signature.type);
	            }
	            else {
	                resolver.writeReturnTypeOfSignatureDeclaration(signature, enclosingDeclaration, 2, writer);
	            }
	        }
	        function emitLines(nodes) {
	            for (var _i = 0; _i < nodes.length; _i++) {
	                var node = nodes[_i];
	                emit(node);
	            }
	        }
	        function emitSeparatedList(nodes, separator, eachNodeEmitFn, canEmitFn) {
	            var currentWriterPos = writer.getTextPos();
	            for (var _i = 0; _i < nodes.length; _i++) {
	                var node = nodes[_i];
	                if (!canEmitFn || canEmitFn(node)) {
	                    if (currentWriterPos !== writer.getTextPos()) {
	                        write(separator);
	                    }
	                    currentWriterPos = writer.getTextPos();
	                    eachNodeEmitFn(node);
	                }
	            }
	        }
	        function emitCommaList(nodes, eachNodeEmitFn, canEmitFn) {
	            emitSeparatedList(nodes, ", ", eachNodeEmitFn, canEmitFn);
	        }
	        function writeJsDocComments(declaration) {
	            if (declaration) {
	                var jsDocComments = ts.getJsDocComments(declaration, currentSourceFile);
	                ts.emitNewLineBeforeLeadingComments(currentSourceFile, writer, declaration, jsDocComments);
	                ts.emitComments(currentSourceFile, writer, jsDocComments, true, newLine, ts.writeCommentRange);
	            }
	        }
	        function emitTypeWithNewGetSymbolAccessibilityDiagnostic(type, getSymbolAccessibilityDiagnostic) {
	            writer.getSymbolAccessibilityDiagnostic = getSymbolAccessibilityDiagnostic;
	            emitType(type);
	        }
	        function emitType(type) {
	            switch (type.kind) {
	                case 115:
	                case 128:
	                case 126:
	                case 118:
	                case 129:
	                case 101:
	                case 9:
	                    return writeTextOfNode(currentSourceFile, type);
	                case 186:
	                    return emitExpressionWithTypeArguments(type);
	                case 149:
	                    return emitTypeReference(type);
	                case 152:
	                    return emitTypeQuery(type);
	                case 154:
	                    return emitArrayType(type);
	                case 155:
	                    return emitTupleType(type);
	                case 156:
	                    return emitUnionType(type);
	                case 157:
	                    return emitIntersectionType(type);
	                case 158:
	                    return emitParenType(type);
	                case 150:
	                case 151:
	                    return emitSignatureDeclarationWithJsDocComments(type);
	                case 153:
	                    return emitTypeLiteral(type);
	                case 67:
	                    return emitEntityName(type);
	                case 133:
	                    return emitEntityName(type);
	                case 148:
	                    return emitTypePredicate(type);
	            }
	            function writeEntityName(entityName) {
	                if (entityName.kind === 67) {
	                    writeTextOfNode(currentSourceFile, entityName);
	                }
	                else {
	                    var left = entityName.kind === 133 ? entityName.left : entityName.expression;
	                    var right = entityName.kind === 133 ? entityName.right : entityName.name;
	                    writeEntityName(left);
	                    write(".");
	                    writeTextOfNode(currentSourceFile, right);
	                }
	            }
	            function emitEntityName(entityName) {
	                var visibilityResult = resolver.isEntityNameVisible(entityName, entityName.parent.kind === 219 ? entityName.parent : enclosingDeclaration);
	                handleSymbolAccessibilityError(visibilityResult);
	                writeEntityName(entityName);
	            }
	            function emitExpressionWithTypeArguments(node) {
	                if (ts.isSupportedExpressionWithTypeArguments(node)) {
	                    ts.Debug.assert(node.expression.kind === 67 || node.expression.kind === 164);
	                    emitEntityName(node.expression);
	                    if (node.typeArguments) {
	                        write("<");
	                        emitCommaList(node.typeArguments, emitType);
	                        write(">");
	                    }
	                }
	            }
	            function emitTypeReference(type) {
	                emitEntityName(type.typeName);
	                if (type.typeArguments) {
	                    write("<");
	                    emitCommaList(type.typeArguments, emitType);
	                    write(">");
	                }
	            }
	            function emitTypePredicate(type) {
	                writeTextOfNode(currentSourceFile, type.parameterName);
	                write(" is ");
	                emitType(type.type);
	            }
	            function emitTypeQuery(type) {
	                write("typeof ");
	                emitEntityName(type.exprName);
	            }
	            function emitArrayType(type) {
	                emitType(type.elementType);
	                write("[]");
	            }
	            function emitTupleType(type) {
	                write("[");
	                emitCommaList(type.elementTypes, emitType);
	                write("]");
	            }
	            function emitUnionType(type) {
	                emitSeparatedList(type.types, " | ", emitType);
	            }
	            function emitIntersectionType(type) {
	                emitSeparatedList(type.types, " & ", emitType);
	            }
	            function emitParenType(type) {
	                write("(");
	                emitType(type.type);
	                write(")");
	            }
	            function emitTypeLiteral(type) {
	                write("{");
	                if (type.members.length) {
	                    writeLine();
	                    increaseIndent();
	                    emitLines(type.members);
	                    decreaseIndent();
	                }
	                write("}");
	            }
	        }
	        function emitSourceFile(node) {
	            currentSourceFile = node;
	            enclosingDeclaration = node;
	            emitLines(node.statements);
	        }
	        function getExportDefaultTempVariableName() {
	            var baseName = "_default";
	            if (!ts.hasProperty(currentSourceFile.identifiers, baseName)) {
	                return baseName;
	            }
	            var count = 0;
	            while (true) {
	                var name_18 = baseName + "_" + (++count);
	                if (!ts.hasProperty(currentSourceFile.identifiers, name_18)) {
	                    return name_18;
	                }
	            }
	        }
	        function emitExportAssignment(node) {
	            if (node.expression.kind === 67) {
	                write(node.isExportEquals ? "export = " : "export default ");
	                writeTextOfNode(currentSourceFile, node.expression);
	            }
	            else {
	                var tempVarName = getExportDefaultTempVariableName();
	                write("declare var ");
	                write(tempVarName);
	                write(": ");
	                writer.getSymbolAccessibilityDiagnostic = getDefaultExportAccessibilityDiagnostic;
	                resolver.writeTypeOfExpression(node.expression, enclosingDeclaration, 2, writer);
	                write(";");
	                writeLine();
	                write(node.isExportEquals ? "export = " : "export default ");
	                write(tempVarName);
	            }
	            write(";");
	            writeLine();
	            if (node.expression.kind === 67) {
	                var nodes = resolver.collectLinkedAliases(node.expression);
	                writeAsynchronousModuleElements(nodes);
	            }
	            function getDefaultExportAccessibilityDiagnostic(diagnostic) {
	                return {
	                    diagnosticMessage: ts.Diagnostics.Default_export_of_the_module_has_or_is_using_private_name_0,
	                    errorNode: node
	                };
	            }
	        }
	        function isModuleElementVisible(node) {
	            return resolver.isDeclarationVisible(node);
	        }
	        function emitModuleElement(node, isModuleElementVisible) {
	            if (isModuleElementVisible) {
	                writeModuleElement(node);
	            }
	            else if (node.kind === 219 ||
	                (node.parent.kind === 246 && ts.isExternalModule(currentSourceFile))) {
	                var isVisible;
	                if (asynchronousSubModuleDeclarationEmitInfo && node.parent.kind !== 246) {
	                    asynchronousSubModuleDeclarationEmitInfo.push({
	                        node: node,
	                        outputPos: writer.getTextPos(),
	                        indent: writer.getIndent(),
	                        isVisible: isVisible
	                    });
	                }
	                else {
	                    if (node.kind === 220) {
	                        var importDeclaration = node;
	                        if (importDeclaration.importClause) {
	                            isVisible = (importDeclaration.importClause.name && resolver.isDeclarationVisible(importDeclaration.importClause)) ||
	                                isVisibleNamedBinding(importDeclaration.importClause.namedBindings);
	                        }
	                    }
	                    moduleElementDeclarationEmitInfo.push({
	                        node: node,
	                        outputPos: writer.getTextPos(),
	                        indent: writer.getIndent(),
	                        isVisible: isVisible
	                    });
	                }
	            }
	        }
	        function writeModuleElement(node) {
	            switch (node.kind) {
	                case 211:
	                    return writeFunctionDeclaration(node);
	                case 191:
	                    return writeVariableStatement(node);
	                case 213:
	                    return writeInterfaceDeclaration(node);
	                case 212:
	                    return writeClassDeclaration(node);
	                case 214:
	                    return writeTypeAliasDeclaration(node);
	                case 215:
	                    return writeEnumDeclaration(node);
	                case 216:
	                    return writeModuleDeclaration(node);
	                case 219:
	                    return writeImportEqualsDeclaration(node);
	                case 220:
	                    return writeImportDeclaration(node);
	                default:
	                    ts.Debug.fail("Unknown symbol kind");
	            }
	        }
	        function emitModuleElementDeclarationFlags(node) {
	            if (node.parent === currentSourceFile) {
	                if (node.flags & 1) {
	                    write("export ");
	                }
	                if (node.flags & 1024) {
	                    write("default ");
	                }
	                else if (node.kind !== 213) {
	                    write("declare ");
	                }
	            }
	        }
	        function emitClassMemberDeclarationFlags(node) {
	            if (node.flags & 32) {
	                write("private ");
	            }
	            else if (node.flags & 64) {
	                write("protected ");
	            }
	            if (node.flags & 128) {
	                write("static ");
	            }
	            if (node.flags & 256) {
	                write("abstract ");
	            }
	        }
	        function writeImportEqualsDeclaration(node) {
	            emitJsDocComments(node);
	            if (node.flags & 1) {
	                write("export ");
	            }
	            write("import ");
	            writeTextOfNode(currentSourceFile, node.name);
	            write(" = ");
	            if (ts.isInternalModuleImportEqualsDeclaration(node)) {
	                emitTypeWithNewGetSymbolAccessibilityDiagnostic(node.moduleReference, getImportEntityNameVisibilityError);
	                write(";");
	            }
	            else {
	                write("require(");
	                writeTextOfNode(currentSourceFile, ts.getExternalModuleImportEqualsDeclarationExpression(node));
	                write(");");
	            }
	            writer.writeLine();
	            function getImportEntityNameVisibilityError(symbolAccesibilityResult) {
	                return {
	                    diagnosticMessage: ts.Diagnostics.Import_declaration_0_is_using_private_name_1,
	                    errorNode: node,
	                    typeName: node.name
	                };
	            }
	        }
	        function isVisibleNamedBinding(namedBindings) {
	            if (namedBindings) {
	                if (namedBindings.kind === 222) {
	                    return resolver.isDeclarationVisible(namedBindings);
	                }
	                else {
	                    return ts.forEach(namedBindings.elements, function (namedImport) { return resolver.isDeclarationVisible(namedImport); });
	                }
	            }
	        }
	        function writeImportDeclaration(node) {
	            if (!node.importClause && !(node.flags & 1)) {
	                return;
	            }
	            emitJsDocComments(node);
	            if (node.flags & 1) {
	                write("export ");
	            }
	            write("import ");
	            if (node.importClause) {
	                var currentWriterPos = writer.getTextPos();
	                if (node.importClause.name && resolver.isDeclarationVisible(node.importClause)) {
	                    writeTextOfNode(currentSourceFile, node.importClause.name);
	                }
	                if (node.importClause.namedBindings && isVisibleNamedBinding(node.importClause.namedBindings)) {
	                    if (currentWriterPos !== writer.getTextPos()) {
	                        write(", ");
	                    }
	                    if (node.importClause.namedBindings.kind === 222) {
	                        write("* as ");
	                        writeTextOfNode(currentSourceFile, node.importClause.namedBindings.name);
	                    }
	                    else {
	                        write("{ ");
	                        emitCommaList(node.importClause.namedBindings.elements, emitImportOrExportSpecifier, resolver.isDeclarationVisible);
	                        write(" }");
	                    }
	                }
	                write(" from ");
	            }
	            writeTextOfNode(currentSourceFile, node.moduleSpecifier);
	            write(";");
	            writer.writeLine();
	        }
	        function emitImportOrExportSpecifier(node) {
	            if (node.propertyName) {
	                writeTextOfNode(currentSourceFile, node.propertyName);
	                write(" as ");
	            }
	            writeTextOfNode(currentSourceFile, node.name);
	        }
	        function emitExportSpecifier(node) {
	            emitImportOrExportSpecifier(node);
	            var nodes = resolver.collectLinkedAliases(node.propertyName || node.name);
	            writeAsynchronousModuleElements(nodes);
	        }
	        function emitExportDeclaration(node) {
	            emitJsDocComments(node);
	            write("export ");
	            if (node.exportClause) {
	                write("{ ");
	                emitCommaList(node.exportClause.elements, emitExportSpecifier);
	                write(" }");
	            }
	            else {
	                write("*");
	            }
	            if (node.moduleSpecifier) {
	                write(" from ");
	                writeTextOfNode(currentSourceFile, node.moduleSpecifier);
	            }
	            write(";");
	            writer.writeLine();
	        }
	        function writeModuleDeclaration(node) {
	            emitJsDocComments(node);
	            emitModuleElementDeclarationFlags(node);
	            if (node.flags & 131072) {
	                write("namespace ");
	            }
	            else {
	                write("module ");
	            }
	            writeTextOfNode(currentSourceFile, node.name);
	            while (node.body.kind !== 217) {
	                node = node.body;
	                write(".");
	                writeTextOfNode(currentSourceFile, node.name);
	            }
	            var prevEnclosingDeclaration = enclosingDeclaration;
	            enclosingDeclaration = node;
	            write(" {");
	            writeLine();
	            increaseIndent();
	            emitLines(node.body.statements);
	            decreaseIndent();
	            write("}");
	            writeLine();
	            enclosingDeclaration = prevEnclosingDeclaration;
	        }
	        function writeTypeAliasDeclaration(node) {
	            var prevEnclosingDeclaration = enclosingDeclaration;
	            enclosingDeclaration = node;
	            emitJsDocComments(node);
	            emitModuleElementDeclarationFlags(node);
	            write("type ");
	            writeTextOfNode(currentSourceFile, node.name);
	            emitTypeParameters(node.typeParameters);
	            write(" = ");
	            emitTypeWithNewGetSymbolAccessibilityDiagnostic(node.type, getTypeAliasDeclarationVisibilityError);
	            write(";");
	            writeLine();
	            enclosingDeclaration = prevEnclosingDeclaration;
	            function getTypeAliasDeclarationVisibilityError(symbolAccesibilityResult) {
	                return {
	                    diagnosticMessage: ts.Diagnostics.Exported_type_alias_0_has_or_is_using_private_name_1,
	                    errorNode: node.type,
	                    typeName: node.name
	                };
	            }
	        }
	        function writeEnumDeclaration(node) {
	            emitJsDocComments(node);
	            emitModuleElementDeclarationFlags(node);
	            if (ts.isConst(node)) {
	                write("const ");
	            }
	            write("enum ");
	            writeTextOfNode(currentSourceFile, node.name);
	            write(" {");
	            writeLine();
	            increaseIndent();
	            emitLines(node.members);
	            decreaseIndent();
	            write("}");
	            writeLine();
	        }
	        function emitEnumMemberDeclaration(node) {
	            emitJsDocComments(node);
	            writeTextOfNode(currentSourceFile, node.name);
	            var enumMemberValue = resolver.getConstantValue(node);
	            if (enumMemberValue !== undefined) {
	                write(" = ");
	                write(enumMemberValue.toString());
	            }
	            write(",");
	            writeLine();
	        }
	        function isPrivateMethodTypeParameter(node) {
	            return node.parent.kind === 141 && (node.parent.flags & 32);
	        }
	        function emitTypeParameters(typeParameters) {
	            function emitTypeParameter(node) {
	                increaseIndent();
	                emitJsDocComments(node);
	                decreaseIndent();
	                writeTextOfNode(currentSourceFile, node.name);
	                if (node.constraint && !isPrivateMethodTypeParameter(node)) {
	                    write(" extends ");
	                    if (node.parent.kind === 150 ||
	                        node.parent.kind === 151 ||
	                        (node.parent.parent && node.parent.parent.kind === 153)) {
	                        ts.Debug.assert(node.parent.kind === 141 ||
	                            node.parent.kind === 140 ||
	                            node.parent.kind === 150 ||
	                            node.parent.kind === 151 ||
	                            node.parent.kind === 145 ||
	                            node.parent.kind === 146);
	                        emitType(node.constraint);
	                    }
	                    else {
	                        emitTypeWithNewGetSymbolAccessibilityDiagnostic(node.constraint, getTypeParameterConstraintVisibilityError);
	                    }
	                }
	                function getTypeParameterConstraintVisibilityError(symbolAccesibilityResult) {
	                    var diagnosticMessage;
	                    switch (node.parent.kind) {
	                        case 212:
	                            diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_exported_class_has_or_is_using_private_name_1;
	                            break;
	                        case 213:
	                            diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1;
	                            break;
	                        case 146:
	                            diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1;
	                            break;
	                        case 145:
	                            diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1;
	                            break;
	                        case 141:
	                        case 140:
	                            if (node.parent.flags & 128) {
	                                diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1;
	                            }
	                            else if (node.parent.parent.kind === 212) {
	                                diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1;
	                            }
	                            else {
	                                diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1;
	                            }
	                            break;
	                        case 211:
	                            diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_exported_function_has_or_is_using_private_name_1;
	                            break;
	                        default:
	                            ts.Debug.fail("This is unknown parent for type parameter: " + node.parent.kind);
	                    }
	                    return {
	                        diagnosticMessage: diagnosticMessage,
	                        errorNode: node,
	                        typeName: node.name
	                    };
	                }
	            }
	            if (typeParameters) {
	                write("<");
	                emitCommaList(typeParameters, emitTypeParameter);
	                write(">");
	            }
	        }
	        function emitHeritageClause(typeReferences, isImplementsList) {
	            if (typeReferences) {
	                write(isImplementsList ? " implements " : " extends ");
	                emitCommaList(typeReferences, emitTypeOfTypeReference);
	            }
	            function emitTypeOfTypeReference(node) {
	                if (ts.isSupportedExpressionWithTypeArguments(node)) {
	                    emitTypeWithNewGetSymbolAccessibilityDiagnostic(node, getHeritageClauseVisibilityError);
	                }
	                else if (!isImplementsList && node.expression.kind === 91) {
	                    write("null");
	                }
	                function getHeritageClauseVisibilityError(symbolAccesibilityResult) {
	                    var diagnosticMessage;
	                    if (node.parent.parent.kind === 212) {
	                        diagnosticMessage = isImplementsList ?
	                            ts.Diagnostics.Implements_clause_of_exported_class_0_has_or_is_using_private_name_1 :
	                            ts.Diagnostics.Extends_clause_of_exported_class_0_has_or_is_using_private_name_1;
	                    }
	                    else {
	                        diagnosticMessage = ts.Diagnostics.Extends_clause_of_exported_interface_0_has_or_is_using_private_name_1;
	                    }
	                    return {
	                        diagnosticMessage: diagnosticMessage,
	                        errorNode: node,
	                        typeName: node.parent.parent.name
	                    };
	                }
	            }
	        }
	        function writeClassDeclaration(node) {
	            function emitParameterProperties(constructorDeclaration) {
	                if (constructorDeclaration) {
	                    ts.forEach(constructorDeclaration.parameters, function (param) {
	                        if (param.flags & 112) {
	                            emitPropertyDeclaration(param);
	                        }
	                    });
	                }
	            }
	            emitJsDocComments(node);
	            emitModuleElementDeclarationFlags(node);
	            if (node.flags & 256) {
	                write("abstract ");
	            }
	            write("class ");
	            writeTextOfNode(currentSourceFile, node.name);
	            var prevEnclosingDeclaration = enclosingDeclaration;
	            enclosingDeclaration = node;
	            emitTypeParameters(node.typeParameters);
	            var baseTypeNode = ts.getClassExtendsHeritageClauseElement(node);
	            if (baseTypeNode) {
	                emitHeritageClause([baseTypeNode], false);
	            }
	            emitHeritageClause(ts.getClassImplementsHeritageClauseElements(node), true);
	            write(" {");
	            writeLine();
	            increaseIndent();
	            emitParameterProperties(ts.getFirstConstructorWithBody(node));
	            emitLines(node.members);
	            decreaseIndent();
	            write("}");
	            writeLine();
	            enclosingDeclaration = prevEnclosingDeclaration;
	        }
	        function writeInterfaceDeclaration(node) {
	            emitJsDocComments(node);
	            emitModuleElementDeclarationFlags(node);
	            write("interface ");
	            writeTextOfNode(currentSourceFile, node.name);
	            var prevEnclosingDeclaration = enclosingDeclaration;
	            enclosingDeclaration = node;
	            emitTypeParameters(node.typeParameters);
	            emitHeritageClause(ts.getInterfaceBaseTypeNodes(node), false);
	            write(" {");
	            writeLine();
	            increaseIndent();
	            emitLines(node.members);
	            decreaseIndent();
	            write("}");
	            writeLine();
	            enclosingDeclaration = prevEnclosingDeclaration;
	        }
	        function emitPropertyDeclaration(node) {
	            if (ts.hasDynamicName(node)) {
	                return;
	            }
	            emitJsDocComments(node);
	            emitClassMemberDeclarationFlags(node);
	            emitVariableDeclaration(node);
	            write(";");
	            writeLine();
	        }
	        function emitVariableDeclaration(node) {
	            if (node.kind !== 209 || resolver.isDeclarationVisible(node)) {
	                if (ts.isBindingPattern(node.name)) {
	                    emitBindingPattern(node.name);
	                }
	                else {
	                    writeTextOfNode(currentSourceFile, node.name);
	                    if ((node.kind === 139 || node.kind === 138) && ts.hasQuestionToken(node)) {
	                        write("?");
	                    }
	                    if ((node.kind === 139 || node.kind === 138) && node.parent.kind === 153) {
	                        emitTypeOfVariableDeclarationFromTypeLiteral(node);
	                    }
	                    else if (!(node.flags & 32)) {
	                        writeTypeOfDeclaration(node, node.type, getVariableDeclarationTypeVisibilityError);
	                    }
	                }
	            }
	            function getVariableDeclarationTypeVisibilityDiagnosticMessage(symbolAccesibilityResult) {
	                if (node.kind === 209) {
	                    return symbolAccesibilityResult.errorModuleName ?
	                        symbolAccesibilityResult.accessibility === 2 ?
	                            ts.Diagnostics.Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named :
	                            ts.Diagnostics.Exported_variable_0_has_or_is_using_name_1_from_private_module_2 :
	                        ts.Diagnostics.Exported_variable_0_has_or_is_using_private_name_1;
	                }
	                else if (node.kind === 139 || node.kind === 138) {
	                    if (node.flags & 128) {
	                        return symbolAccesibilityResult.errorModuleName ?
	                            symbolAccesibilityResult.accessibility === 2 ?
	                                ts.Diagnostics.Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named :
	                                ts.Diagnostics.Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2 :
	                            ts.Diagnostics.Public_static_property_0_of_exported_class_has_or_is_using_private_name_1;
	                    }
	                    else if (node.parent.kind === 212) {
	                        return symbolAccesibilityResult.errorModuleName ?
	                            symbolAccesibilityResult.accessibility === 2 ?
	                                ts.Diagnostics.Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named :
	                                ts.Diagnostics.Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2 :
	                            ts.Diagnostics.Public_property_0_of_exported_class_has_or_is_using_private_name_1;
	                    }
	                    else {
	                        return symbolAccesibilityResult.errorModuleName ?
	                            ts.Diagnostics.Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2 :
	                            ts.Diagnostics.Property_0_of_exported_interface_has_or_is_using_private_name_1;
	                    }
	                }
	            }
	            function getVariableDeclarationTypeVisibilityError(symbolAccesibilityResult) {
	                var diagnosticMessage = getVariableDeclarationTypeVisibilityDiagnosticMessage(symbolAccesibilityResult);
	                return diagnosticMessage !== undefined ? {
	                    diagnosticMessage: diagnosticMessage,
	                    errorNode: node,
	                    typeName: node.name
	                } : undefined;
	            }
	            function emitBindingPattern(bindingPattern) {
	                var elements = [];
	                for (var _i = 0, _a = bindingPattern.elements; _i < _a.length; _i++) {
	                    var element = _a[_i];
	                    if (element.kind !== 185) {
	                        elements.push(element);
	                    }
	                }
	                emitCommaList(elements, emitBindingElement);
	            }
	            function emitBindingElement(bindingElement) {
	                function getBindingElementTypeVisibilityError(symbolAccesibilityResult) {
	                    var diagnosticMessage = getVariableDeclarationTypeVisibilityDiagnosticMessage(symbolAccesibilityResult);
	                    return diagnosticMessage !== undefined ? {
	                        diagnosticMessage: diagnosticMessage,
	                        errorNode: bindingElement,
	                        typeName: bindingElement.name
	                    } : undefined;
	                }
	                if (bindingElement.name) {
	                    if (ts.isBindingPattern(bindingElement.name)) {
	                        emitBindingPattern(bindingElement.name);
	                    }
	                    else {
	                        writeTextOfNode(currentSourceFile, bindingElement.name);
	                        writeTypeOfDeclaration(bindingElement, undefined, getBindingElementTypeVisibilityError);
	                    }
	                }
	            }
	        }
	        function emitTypeOfVariableDeclarationFromTypeLiteral(node) {
	            if (node.type) {
	                write(": ");
	                emitType(node.type);
	            }
	        }
	        function isVariableStatementVisible(node) {
	            return ts.forEach(node.declarationList.declarations, function (varDeclaration) { return resolver.isDeclarationVisible(varDeclaration); });
	        }
	        function writeVariableStatement(node) {
	            emitJsDocComments(node);
	            emitModuleElementDeclarationFlags(node);
	            if (ts.isLet(node.declarationList)) {
	                write("let ");
	            }
	            else if (ts.isConst(node.declarationList)) {
	                write("const ");
	            }
	            else {
	                write("var ");
	            }
	            emitCommaList(node.declarationList.declarations, emitVariableDeclaration, resolver.isDeclarationVisible);
	            write(";");
	            writeLine();
	        }
	        function emitAccessorDeclaration(node) {
	            if (ts.hasDynamicName(node)) {
	                return;
	            }
	            var accessors = ts.getAllAccessorDeclarations(node.parent.members, node);
	            var accessorWithTypeAnnotation;
	            if (node === accessors.firstAccessor) {
	                emitJsDocComments(accessors.getAccessor);
	                emitJsDocComments(accessors.setAccessor);
	                emitClassMemberDeclarationFlags(node);
	                writeTextOfNode(currentSourceFile, node.name);
	                if (!(node.flags & 32)) {
	                    accessorWithTypeAnnotation = node;
	                    var type = getTypeAnnotationFromAccessor(node);
	                    if (!type) {
	                        var anotherAccessor = node.kind === 143 ? accessors.setAccessor : accessors.getAccessor;
	                        type = getTypeAnnotationFromAccessor(anotherAccessor);
	                        if (type) {
	                            accessorWithTypeAnnotation = anotherAccessor;
	                        }
	                    }
	                    writeTypeOfDeclaration(node, type, getAccessorDeclarationTypeVisibilityError);
	                }
	                write(";");
	                writeLine();
	            }
	            function getTypeAnnotationFromAccessor(accessor) {
	                if (accessor) {
	                    return accessor.kind === 143
	                        ? accessor.type
	                        : accessor.parameters.length > 0
	                            ? accessor.parameters[0].type
	                            : undefined;
	                }
	            }
	            function getAccessorDeclarationTypeVisibilityError(symbolAccesibilityResult) {
	                var diagnosticMessage;
	                if (accessorWithTypeAnnotation.kind === 144) {
	                    if (accessorWithTypeAnnotation.parent.flags & 128) {
	                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ?
	                            ts.Diagnostics.Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2 :
	                            ts.Diagnostics.Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_name_1;
	                    }
	                    else {
	                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ?
	                            ts.Diagnostics.Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2 :
	                            ts.Diagnostics.Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_name_1;
	                    }
	                    return {
	                        diagnosticMessage: diagnosticMessage,
	                        errorNode: accessorWithTypeAnnotation.parameters[0],
	                        typeName: accessorWithTypeAnnotation.name
	                    };
	                }
	                else {
	                    if (accessorWithTypeAnnotation.flags & 128) {
	                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ?
	                            symbolAccesibilityResult.accessibility === 2 ?
	                                ts.Diagnostics.Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named :
	                                ts.Diagnostics.Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1 :
	                            ts.Diagnostics.Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_name_0;
	                    }
	                    else {
	                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ?
	                            symbolAccesibilityResult.accessibility === 2 ?
	                                ts.Diagnostics.Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named :
	                                ts.Diagnostics.Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1 :
	                            ts.Diagnostics.Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_name_0;
	                    }
	                    return {
	                        diagnosticMessage: diagnosticMessage,
	                        errorNode: accessorWithTypeAnnotation.name,
	                        typeName: undefined
	                    };
	                }
	            }
	        }
	        function writeFunctionDeclaration(node) {
	            if (ts.hasDynamicName(node)) {
	                return;
	            }
	            if (!resolver.isImplementationOfOverload(node)) {
	                emitJsDocComments(node);
	                if (node.kind === 211) {
	                    emitModuleElementDeclarationFlags(node);
	                }
	                else if (node.kind === 141) {
	                    emitClassMemberDeclarationFlags(node);
	                }
	                if (node.kind === 211) {
	                    write("function ");
	                    writeTextOfNode(currentSourceFile, node.name);
	                }
	                else if (node.kind === 142) {
	                    write("constructor");
	                }
	                else {
	                    writeTextOfNode(currentSourceFile, node.name);
	                    if (ts.hasQuestionToken(node)) {
	                        write("?");
	                    }
	                }
	                emitSignatureDeclaration(node);
	            }
	        }
	        function emitSignatureDeclarationWithJsDocComments(node) {
	            emitJsDocComments(node);
	            emitSignatureDeclaration(node);
	        }
	        function emitSignatureDeclaration(node) {
	            if (node.kind === 146 || node.kind === 151) {
	                write("new ");
	            }
	            emitTypeParameters(node.typeParameters);
	            if (node.kind === 147) {
	                write("[");
	            }
	            else {
	                write("(");
	            }
	            var prevEnclosingDeclaration = enclosingDeclaration;
	            enclosingDeclaration = node;
	            emitCommaList(node.parameters, emitParameterDeclaration);
	            if (node.kind === 147) {
	                write("]");
	            }
	            else {
	                write(")");
	            }
	            var isFunctionTypeOrConstructorType = node.kind === 150 || node.kind === 151;
	            if (isFunctionTypeOrConstructorType || node.parent.kind === 153) {
	                if (node.type) {
	                    write(isFunctionTypeOrConstructorType ? " => " : ": ");
	                    emitType(node.type);
	                }
	            }
	            else if (node.kind !== 142 && !(node.flags & 32)) {
	                writeReturnTypeAtSignature(node, getReturnTypeVisibilityError);
	            }
	            enclosingDeclaration = prevEnclosingDeclaration;
	            if (!isFunctionTypeOrConstructorType) {
	                write(";");
	                writeLine();
	            }
	            function getReturnTypeVisibilityError(symbolAccesibilityResult) {
	                var diagnosticMessage;
	                switch (node.kind) {
	                    case 146:
	                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ?
	                            ts.Diagnostics.Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1 :
	                            ts.Diagnostics.Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0;
	                        break;
	                    case 145:
	                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ?
	                            ts.Diagnostics.Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1 :
	                            ts.Diagnostics.Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0;
	                        break;
	                    case 147:
	                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ?
	                            ts.Diagnostics.Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1 :
	                            ts.Diagnostics.Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0;
	                        break;
	                    case 141:
	                    case 140:
	                        if (node.flags & 128) {
	                            diagnosticMessage = symbolAccesibilityResult.errorModuleName ?
	                                symbolAccesibilityResult.accessibility === 2 ?
	                                    ts.Diagnostics.Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named :
	                                    ts.Diagnostics.Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1 :
	                                ts.Diagnostics.Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0;
	                        }
	                        else if (node.parent.kind === 212) {
	                            diagnosticMessage = symbolAccesibilityResult.errorModuleName ?
	                                symbolAccesibilityResult.accessibility === 2 ?
	                                    ts.Diagnostics.Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named :
	                                    ts.Diagnostics.Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1 :
	                                ts.Diagnostics.Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0;
	                        }
	                        else {
	                            diagnosticMessage = symbolAccesibilityResult.errorModuleName ?
	                                ts.Diagnostics.Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1 :
	                                ts.Diagnostics.Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0;
	                        }
	                        break;
	                    case 211:
	                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ?
	                            symbolAccesibilityResult.accessibility === 2 ?
	                                ts.Diagnostics.Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named :
	                                ts.Diagnostics.Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1 :
	                            ts.Diagnostics.Return_type_of_exported_function_has_or_is_using_private_name_0;
	                        break;
	                    default:
	                        ts.Debug.fail("This is unknown kind for signature: " + node.kind);
	                }
	                return {
	                    diagnosticMessage: diagnosticMessage,
	                    errorNode: node.name || node
	                };
	            }
	        }
	        function emitParameterDeclaration(node) {
	            increaseIndent();
	            emitJsDocComments(node);
	            if (node.dotDotDotToken) {
	                write("...");
	            }
	            if (ts.isBindingPattern(node.name)) {
	                emitBindingPattern(node.name);
	            }
	            else {
	                writeTextOfNode(currentSourceFile, node.name);
	            }
	            if (resolver.isOptionalParameter(node)) {
	                write("?");
	            }
	            decreaseIndent();
	            if (node.parent.kind === 150 ||
	                node.parent.kind === 151 ||
	                node.parent.parent.kind === 153) {
	                emitTypeOfVariableDeclarationFromTypeLiteral(node);
	            }
	            else if (!(node.parent.flags & 32)) {
	                writeTypeOfDeclaration(node, node.type, getParameterDeclarationTypeVisibilityError);
	            }
	            function getParameterDeclarationTypeVisibilityError(symbolAccesibilityResult) {
	                var diagnosticMessage = getParameterDeclarationTypeVisibilityDiagnosticMessage(symbolAccesibilityResult);
	                return diagnosticMessage !== undefined ? {
	                    diagnosticMessage: diagnosticMessage,
	                    errorNode: node,
	                    typeName: node.name
	                } : undefined;
	            }
	            function getParameterDeclarationTypeVisibilityDiagnosticMessage(symbolAccesibilityResult) {
	                switch (node.parent.kind) {
	                    case 142:
	                        return symbolAccesibilityResult.errorModuleName ?
	                            symbolAccesibilityResult.accessibility === 2 ?
	                                ts.Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named :
	                                ts.Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2 :
	                            ts.Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1;
	                    case 146:
	                        return symbolAccesibilityResult.errorModuleName ?
	                            ts.Diagnostics.Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2 :
	                            ts.Diagnostics.Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1;
	                    case 145:
	                        return symbolAccesibilityResult.errorModuleName ?
	                            ts.Diagnostics.Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2 :
	                            ts.Diagnostics.Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1;
	                    case 141:
	                    case 140:
	                        if (node.parent.flags & 128) {
	                            return symbolAccesibilityResult.errorModuleName ?
	                                symbolAccesibilityResult.accessibility === 2 ?
	                                    ts.Diagnostics.Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named :
	                                    ts.Diagnostics.Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2 :
	                                ts.Diagnostics.Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1;
	                        }
	                        else if (node.parent.parent.kind === 212) {
	                            return symbolAccesibilityResult.errorModuleName ?
	                                symbolAccesibilityResult.accessibility === 2 ?
	                                    ts.Diagnostics.Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named :
	                                    ts.Diagnostics.Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2 :
	                                ts.Diagnostics.Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1;
	                        }
	                        else {
	                            return symbolAccesibilityResult.errorModuleName ?
	                                ts.Diagnostics.Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2 :
	                                ts.Diagnostics.Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1;
	                        }
	                    case 211:
	                        return symbolAccesibilityResult.errorModuleName ?
	                            symbolAccesibilityResult.accessibility === 2 ?
	                                ts.Diagnostics.Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named :
	                                ts.Diagnostics.Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2 :
	                            ts.Diagnostics.Parameter_0_of_exported_function_has_or_is_using_private_name_1;
	                    default:
	                        ts.Debug.fail("This is unknown parent for parameter: " + node.parent.kind);
	                }
	            }
	            function emitBindingPattern(bindingPattern) {
	                if (bindingPattern.kind === 159) {
	                    write("{");
	                    emitCommaList(bindingPattern.elements, emitBindingElement);
	                    write("}");
	                }
	                else if (bindingPattern.kind === 160) {
	                    write("[");
	                    var elements = bindingPattern.elements;
	                    emitCommaList(elements, emitBindingElement);
	                    if (elements && elements.hasTrailingComma) {
	                        write(", ");
	                    }
	                    write("]");
	                }
	            }
	            function emitBindingElement(bindingElement) {
	                function getBindingElementTypeVisibilityError(symbolAccesibilityResult) {
	                    var diagnosticMessage = getParameterDeclarationTypeVisibilityDiagnosticMessage(symbolAccesibilityResult);
	                    return diagnosticMessage !== undefined ? {
	                        diagnosticMessage: diagnosticMessage,
	                        errorNode: bindingElement,
	                        typeName: bindingElement.name
	                    } : undefined;
	                }
	                if (bindingElement.kind === 185) {
	                    write(" ");
	                }
	                else if (bindingElement.kind === 161) {
	                    if (bindingElement.propertyName) {
	                        writeTextOfNode(currentSourceFile, bindingElement.propertyName);
	                        write(": ");
	                    }
	                    if (bindingElement.name) {
	                        if (ts.isBindingPattern(bindingElement.name)) {
	                            emitBindingPattern(bindingElement.name);
	                        }
	                        else {
	                            ts.Debug.assert(bindingElement.name.kind === 67);
	                            if (bindingElement.dotDotDotToken) {
	                                write("...");
	                            }
	                            writeTextOfNode(currentSourceFile, bindingElement.name);
	                        }
	                    }
	                }
	            }
	        }
	        function emitNode(node) {
	            switch (node.kind) {
	                case 211:
	                case 216:
	                case 219:
	                case 213:
	                case 212:
	                case 214:
	                case 215:
	                    return emitModuleElement(node, isModuleElementVisible(node));
	                case 191:
	                    return emitModuleElement(node, isVariableStatementVisible(node));
	                case 220:
	                    return emitModuleElement(node, !node.importClause);
	                case 226:
	                    return emitExportDeclaration(node);
	                case 142:
	                case 141:
	                case 140:
	                    return writeFunctionDeclaration(node);
	                case 146:
	                case 145:
	                case 147:
	                    return emitSignatureDeclarationWithJsDocComments(node);
	                case 143:
	                case 144:
	                    return emitAccessorDeclaration(node);
	                case 139:
	                case 138:
	                    return emitPropertyDeclaration(node);
	                case 245:
	                    return emitEnumMemberDeclaration(node);
	                case 225:
	                    return emitExportAssignment(node);
	                case 246:
	                    return emitSourceFile(node);
	            }
	        }
	        function writeReferencePath(referencedFile) {
	            var declFileName = referencedFile.flags & 8192
	                ? referencedFile.fileName
	                : ts.shouldEmitToOwnFile(referencedFile, compilerOptions)
	                    ? ts.getOwnEmitOutputFilePath(referencedFile, host, ".d.ts")
	                    : ts.removeFileExtension(compilerOptions.outFile || compilerOptions.out) + ".d.ts";
	            declFileName = ts.getRelativePathToDirectoryOrUrl(ts.getDirectoryPath(ts.normalizeSlashes(jsFilePath)), declFileName, host.getCurrentDirectory(), host.getCanonicalFileName, false);
	            referencePathsOutput += "/// <reference path=\"" + declFileName + "\" />" + newLine;
	        }
	    }
	    function writeDeclarationFile(jsFilePath, sourceFile, host, resolver, diagnostics) {
	        var emitDeclarationResult = emitDeclarations(host, resolver, diagnostics, jsFilePath, sourceFile);
	        if (!emitDeclarationResult.reportedDeclarationError) {
	            var declarationOutput = emitDeclarationResult.referencePathsOutput
	                + getDeclarationOutput(emitDeclarationResult.synchronousDeclarationOutput, emitDeclarationResult.moduleElementDeclarationEmitInfo);
	            ts.writeFile(host, diagnostics, ts.removeFileExtension(jsFilePath) + ".d.ts", declarationOutput, host.getCompilerOptions().emitBOM);
	        }
	        function getDeclarationOutput(synchronousDeclarationOutput, moduleElementDeclarationEmitInfo) {
	            var appliedSyncOutputPos = 0;
	            var declarationOutput = "";
	            ts.forEach(moduleElementDeclarationEmitInfo, function (aliasEmitInfo) {
	                if (aliasEmitInfo.asynchronousOutput) {
	                    declarationOutput += synchronousDeclarationOutput.substring(appliedSyncOutputPos, aliasEmitInfo.outputPos);
	                    declarationOutput += getDeclarationOutput(aliasEmitInfo.asynchronousOutput, aliasEmitInfo.subModuleElementDeclarationEmitInfo);
	                    appliedSyncOutputPos = aliasEmitInfo.outputPos;
	                }
	            });
	            declarationOutput += synchronousDeclarationOutput.substring(appliedSyncOutputPos);
	            return declarationOutput;
	        }
	    }
	    ts.writeDeclarationFile = writeDeclarationFile;
	})(ts || (ts = {}));
	/// <reference path="checker.ts"/>
	/// <reference path="declarationEmitter.ts"/>
	var ts;
	(function (ts) {
	    function isExternalModuleOrDeclarationFile(sourceFile) {
	        return ts.isExternalModule(sourceFile) || ts.isDeclarationFile(sourceFile);
	    }
	    ts.isExternalModuleOrDeclarationFile = isExternalModuleOrDeclarationFile;
	    function emitFiles(resolver, host, targetSourceFile) {
	        var extendsHelper = "\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};";
	        var decorateHelper = "\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") return Reflect.decorate(decorators, target, key, desc);\n    switch (arguments.length) {\n        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);\n        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);\n        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);\n    }\n};";
	        var metadataHelper = "\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};";
	        var paramHelper = "\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};";
	        var awaiterHelper = "\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, Promise, generator) {\n    return new Promise(function (resolve, reject) {\n        generator = generator.call(thisArg, _arguments);\n        function cast(value) { return value instanceof Promise && value.constructor === Promise ? value : new Promise(function (resolve) { resolve(value); }); }\n        function onfulfill(value) { try { step(\"next\", value); } catch (e) { reject(e); } }\n        function onreject(value) { try { step(\"throw\", value); } catch (e) { reject(e); } }\n        function step(verb, value) {\n            var result = generator[verb](value);\n            result.done ? resolve(result.value) : cast(result.value).then(onfulfill, onreject);\n        }\n        step(\"next\", void 0);\n    });\n};";
	        var compilerOptions = host.getCompilerOptions();
	        var languageVersion = compilerOptions.target || 0;
	        var sourceMapDataList = compilerOptions.sourceMap || compilerOptions.inlineSourceMap ? [] : undefined;
	        var diagnostics = [];
	        var newLine = host.getNewLine();
	        var jsxDesugaring = host.getCompilerOptions().jsx !== 1;
	        var shouldEmitJsx = function (s) { return (s.languageVariant === 1 && !jsxDesugaring); };
	        if (targetSourceFile === undefined) {
	            ts.forEach(host.getSourceFiles(), function (sourceFile) {
	                if (ts.shouldEmitToOwnFile(sourceFile, compilerOptions)) {
	                    var jsFilePath = ts.getOwnEmitOutputFilePath(sourceFile, host, shouldEmitJsx(sourceFile) ? ".jsx" : ".js");
	                    emitFile(jsFilePath, sourceFile);
	                }
	            });
	            if (compilerOptions.outFile || compilerOptions.out) {
	                emitFile(compilerOptions.outFile || compilerOptions.out);
	            }
	        }
	        else {
	            if (ts.shouldEmitToOwnFile(targetSourceFile, compilerOptions)) {
	                var jsFilePath = ts.getOwnEmitOutputFilePath(targetSourceFile, host, shouldEmitJsx(targetSourceFile) ? ".jsx" : ".js");
	                emitFile(jsFilePath, targetSourceFile);
	            }
	            else if (!ts.isDeclarationFile(targetSourceFile) && (compilerOptions.outFile || compilerOptions.out)) {
	                emitFile(compilerOptions.outFile || compilerOptions.out);
	            }
	        }
	        diagnostics = ts.sortAndDeduplicateDiagnostics(diagnostics);
	        return {
	            emitSkipped: false,
	            diagnostics: diagnostics,
	            sourceMaps: sourceMapDataList
	        };
	        function isNodeDescendentOf(node, ancestor) {
	            while (node) {
	                if (node === ancestor)
	                    return true;
	                node = node.parent;
	            }
	            return false;
	        }
	        function isUniqueLocalName(name, container) {
	            for (var node = container; isNodeDescendentOf(node, container); node = node.nextContainer) {
	                if (node.locals && ts.hasProperty(node.locals, name)) {
	                    if (node.locals[name].flags & (107455 | 1048576 | 8388608)) {
	                        return false;
	                    }
	                }
	            }
	            return true;
	        }
	        function emitJavaScript(jsFilePath, root) {
	            var writer = ts.createTextWriter(newLine);
	            var write = writer.write, writeTextOfNode = writer.writeTextOfNode, writeLine = writer.writeLine, increaseIndent = writer.increaseIndent, decreaseIndent = writer.decreaseIndent;
	            var currentSourceFile;
	            var exportFunctionForFile;
	            var generatedNameSet = {};
	            var nodeToGeneratedName = [];
	            var computedPropertyNamesToGeneratedNames;
	            var extendsEmitted = false;
	            var decorateEmitted = false;
	            var paramEmitted = false;
	            var awaiterEmitted = false;
	            var tempFlags = 0;
	            var tempVariables;
	            var tempParameters;
	            var externalImports;
	            var exportSpecifiers;
	            var exportEquals;
	            var hasExportStars;
	            var writeEmittedFiles = writeJavaScriptFile;
	            var detachedCommentsInfo;
	            var writeComment = ts.writeCommentRange;
	            var emit = emitNodeWithCommentsAndWithoutSourcemap;
	            var emitStart = function (node) { };
	            var emitEnd = function (node) { };
	            var emitToken = emitTokenText;
	            var scopeEmitStart = function (scopeDeclaration, scopeName) { };
	            var scopeEmitEnd = function () { };
	            var sourceMapData;
	            if (compilerOptions.sourceMap || compilerOptions.inlineSourceMap) {
	                initializeEmitterWithSourceMaps();
	            }
	            if (root) {
	                emitSourceFile(root);
	            }
	            else {
	                ts.forEach(host.getSourceFiles(), function (sourceFile) {
	                    if (!isExternalModuleOrDeclarationFile(sourceFile)) {
	                        emitSourceFile(sourceFile);
	                    }
	                });
	            }
	            writeLine();
	            writeEmittedFiles(writer.getText(), compilerOptions.emitBOM);
	            return;
	            function emitSourceFile(sourceFile) {
	                currentSourceFile = sourceFile;
	                exportFunctionForFile = undefined;
	                emit(sourceFile);
	            }
	            function isUniqueName(name) {
	                return !resolver.hasGlobalName(name) &&
	                    !ts.hasProperty(currentSourceFile.identifiers, name) &&
	                    !ts.hasProperty(generatedNameSet, name);
	            }
	            function makeTempVariableName(flags) {
	                if (flags && !(tempFlags & flags)) {
	                    var name_19 = flags === 268435456 ? "_i" : "_n";
	                    if (isUniqueName(name_19)) {
	                        tempFlags |= flags;
	                        return name_19;
	                    }
	                }
	                while (true) {
	                    var count = tempFlags & 268435455;
	                    tempFlags++;
	                    if (count !== 8 && count !== 13) {
	                        var name_20 = count < 26 ? "_" + String.fromCharCode(97 + count) : "_" + (count - 26);
	                        if (isUniqueName(name_20)) {
	                            return name_20;
	                        }
	                    }
	                }
	            }
	            function makeUniqueName(baseName) {
	                if (baseName.charCodeAt(baseName.length - 1) !== 95) {
	                    baseName += "_";
	                }
	                var i = 1;
	                while (true) {
	                    var generatedName = baseName + i;
	                    if (isUniqueName(generatedName)) {
	                        return generatedNameSet[generatedName] = generatedName;
	                    }
	                    i++;
	                }
	            }
	            function generateNameForModuleOrEnum(node) {
	                var name = node.name.text;
	                return isUniqueLocalName(name, node) ? name : makeUniqueName(name);
	            }
	            function generateNameForImportOrExportDeclaration(node) {
	                var expr = ts.getExternalModuleName(node);
	                var baseName = expr.kind === 9 ?
	                    ts.escapeIdentifier(ts.makeIdentifierFromModuleName(expr.text)) : "module";
	                return makeUniqueName(baseName);
	            }
	            function generateNameForExportDefault() {
	                return makeUniqueName("default");
	            }
	            function generateNameForClassExpression() {
	                return makeUniqueName("class");
	            }
	            function generateNameForNode(node) {
	                switch (node.kind) {
	                    case 67:
	                        return makeUniqueName(node.text);
	                    case 216:
	                    case 215:
	                        return generateNameForModuleOrEnum(node);
	                    case 220:
	                    case 226:
	                        return generateNameForImportOrExportDeclaration(node);
	                    case 211:
	                    case 212:
	                    case 225:
	                        return generateNameForExportDefault();
	                    case 184:
	                        return generateNameForClassExpression();
	                }
	            }
	            function getGeneratedNameForNode(node) {
	                var id = ts.getNodeId(node);
	                return nodeToGeneratedName[id] || (nodeToGeneratedName[id] = ts.unescapeIdentifier(generateNameForNode(node)));
	            }
	            function initializeEmitterWithSourceMaps() {
	                var sourceMapDir;
	                var sourceMapSourceIndex = -1;
	                var sourceMapNameIndexMap = {};
	                var sourceMapNameIndices = [];
	                function getSourceMapNameIndex() {
	                    return sourceMapNameIndices.length ? ts.lastOrUndefined(sourceMapNameIndices) : -1;
	                }
	                var lastRecordedSourceMapSpan;
	                var lastEncodedSourceMapSpan = {
	                    emittedLine: 1,
	                    emittedColumn: 1,
	                    sourceLine: 1,
	                    sourceColumn: 1,
	                    sourceIndex: 0
	                };
	                var lastEncodedNameIndex = 0;
	                function encodeLastRecordedSourceMapSpan() {
	                    if (!lastRecordedSourceMapSpan || lastRecordedSourceMapSpan === lastEncodedSourceMapSpan) {
	                        return;
	                    }
	                    var prevEncodedEmittedColumn = lastEncodedSourceMapSpan.emittedColumn;
	                    if (lastEncodedSourceMapSpan.emittedLine === lastRecordedSourceMapSpan.emittedLine) {
	                        if (sourceMapData.sourceMapMappings) {
	                            sourceMapData.sourceMapMappings += ",";
	                        }
	                    }
	                    else {
	                        for (var encodedLine = lastEncodedSourceMapSpan.emittedLine; encodedLine < lastRecordedSourceMapSpan.emittedLine; encodedLine++) {
	                            sourceMapData.sourceMapMappings += ";";
	                        }
	                        prevEncodedEmittedColumn = 1;
	                    }
	                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.emittedColumn - prevEncodedEmittedColumn);
	                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceIndex - lastEncodedSourceMapSpan.sourceIndex);
	                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceLine - lastEncodedSourceMapSpan.sourceLine);
	                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceColumn - lastEncodedSourceMapSpan.sourceColumn);
	                    if (lastRecordedSourceMapSpan.nameIndex >= 0) {
	                        sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.nameIndex - lastEncodedNameIndex);
	                        lastEncodedNameIndex = lastRecordedSourceMapSpan.nameIndex;
	                    }
	                    lastEncodedSourceMapSpan = lastRecordedSourceMapSpan;
	                    sourceMapData.sourceMapDecodedMappings.push(lastEncodedSourceMapSpan);
	                    function base64VLQFormatEncode(inValue) {
	                        function base64FormatEncode(inValue) {
	                            if (inValue < 64) {
	                                return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(inValue);
	                            }
	                            throw TypeError(inValue + ": not a 64 based value");
	                        }
	                        if (inValue < 0) {
	                            inValue = ((-inValue) << 1) + 1;
	                        }
	                        else {
	                            inValue = inValue << 1;
	                        }
	                        var encodedStr = "";
	                        do {
	                            var currentDigit = inValue & 31;
	                            inValue = inValue >> 5;
	                            if (inValue > 0) {
	                                currentDigit = currentDigit | 32;
	                            }
	                            encodedStr = encodedStr + base64FormatEncode(currentDigit);
	                        } while (inValue > 0);
	                        return encodedStr;
	                    }
	                }
	                function recordSourceMapSpan(pos) {
	                    var sourceLinePos = ts.getLineAndCharacterOfPosition(currentSourceFile, pos);
	                    sourceLinePos.line++;
	                    sourceLinePos.character++;
	                    var emittedLine = writer.getLine();
	                    var emittedColumn = writer.getColumn();
	                    if (!lastRecordedSourceMapSpan ||
	                        lastRecordedSourceMapSpan.emittedLine !== emittedLine ||
	                        lastRecordedSourceMapSpan.emittedColumn !== emittedColumn ||
	                        (lastRecordedSourceMapSpan.sourceIndex === sourceMapSourceIndex &&
	                            (lastRecordedSourceMapSpan.sourceLine > sourceLinePos.line ||
	                                (lastRecordedSourceMapSpan.sourceLine === sourceLinePos.line && lastRecordedSourceMapSpan.sourceColumn > sourceLinePos.character)))) {
	                        encodeLastRecordedSourceMapSpan();
	                        lastRecordedSourceMapSpan = {
	                            emittedLine: emittedLine,
	                            emittedColumn: emittedColumn,
	                            sourceLine: sourceLinePos.line,
	                            sourceColumn: sourceLinePos.character,
	                            nameIndex: getSourceMapNameIndex(),
	                            sourceIndex: sourceMapSourceIndex
	                        };
	                    }
	                    else {
	                        lastRecordedSourceMapSpan.sourceLine = sourceLinePos.line;
	                        lastRecordedSourceMapSpan.sourceColumn = sourceLinePos.character;
	                        lastRecordedSourceMapSpan.sourceIndex = sourceMapSourceIndex;
	                    }
	                }
	                function recordEmitNodeStartSpan(node) {
	                    recordSourceMapSpan(ts.skipTrivia(currentSourceFile.text, node.pos));
	                }
	                function recordEmitNodeEndSpan(node) {
	                    recordSourceMapSpan(node.end);
	                }
	                function writeTextWithSpanRecord(tokenKind, startPos, emitFn) {
	                    var tokenStartPos = ts.skipTrivia(currentSourceFile.text, startPos);
	                    recordSourceMapSpan(tokenStartPos);
	                    var tokenEndPos = emitTokenText(tokenKind, tokenStartPos, emitFn);
	                    recordSourceMapSpan(tokenEndPos);
	                    return tokenEndPos;
	                }
	                function recordNewSourceFileStart(node) {
	                    var sourcesDirectoryPath = compilerOptions.sourceRoot ? host.getCommonSourceDirectory() : sourceMapDir;
	                    sourceMapData.sourceMapSources.push(ts.getRelativePathToDirectoryOrUrl(sourcesDirectoryPath, node.fileName, host.getCurrentDirectory(), host.getCanonicalFileName, true));
	                    sourceMapSourceIndex = sourceMapData.sourceMapSources.length - 1;
	                    sourceMapData.inputSourceFileNames.push(node.fileName);
	                    if (compilerOptions.inlineSources) {
	                        if (!sourceMapData.sourceMapSourcesContent) {
	                            sourceMapData.sourceMapSourcesContent = [];
	                        }
	                        sourceMapData.sourceMapSourcesContent.push(node.text);
	                    }
	                }
	                function recordScopeNameOfNode(node, scopeName) {
	                    function recordScopeNameIndex(scopeNameIndex) {
	                        sourceMapNameIndices.push(scopeNameIndex);
	                    }
	                    function recordScopeNameStart(scopeName) {
	                        var scopeNameIndex = -1;
	                        if (scopeName) {
	                            var parentIndex = getSourceMapNameIndex();
	                            if (parentIndex !== -1) {
	                                var name_21 = node.name;
	                                if (!name_21 || name_21.kind !== 134) {
	                                    scopeName = "." + scopeName;
	                                }
	                                scopeName = sourceMapData.sourceMapNames[parentIndex] + scopeName;
	                            }
	                            scopeNameIndex = ts.getProperty(sourceMapNameIndexMap, scopeName);
	                            if (scopeNameIndex === undefined) {
	                                scopeNameIndex = sourceMapData.sourceMapNames.length;
	                                sourceMapData.sourceMapNames.push(scopeName);
	                                sourceMapNameIndexMap[scopeName] = scopeNameIndex;
	                            }
	                        }
	                        recordScopeNameIndex(scopeNameIndex);
	                    }
	                    if (scopeName) {
	                        recordScopeNameStart(scopeName);
	                    }
	                    else if (node.kind === 211 ||
	                        node.kind === 171 ||
	                        node.kind === 141 ||
	                        node.kind === 140 ||
	                        node.kind === 143 ||
	                        node.kind === 144 ||
	                        node.kind === 216 ||
	                        node.kind === 212 ||
	                        node.kind === 215) {
	                        if (node.name) {
	                            var name_22 = node.name;
	                            scopeName = name_22.kind === 134
	                                ? ts.getTextOfNode(name_22)
	                                : node.name.text;
	                        }
	                        recordScopeNameStart(scopeName);
	                    }
	                    else {
	                        recordScopeNameIndex(getSourceMapNameIndex());
	                    }
	                }
	                function recordScopeNameEnd() {
	                    sourceMapNameIndices.pop();
	                }
	                ;
	                function writeCommentRangeWithMap(curentSourceFile, writer, comment, newLine) {
	                    recordSourceMapSpan(comment.pos);
	                    ts.writeCommentRange(currentSourceFile, writer, comment, newLine);
	                    recordSourceMapSpan(comment.end);
	                }
	                function serializeSourceMapContents(version, file, sourceRoot, sources, names, mappings, sourcesContent) {
	                    if (typeof JSON !== "undefined") {
	                        var map_1 = {
	                            version: version,
	                            file: file,
	                            sourceRoot: sourceRoot,
	                            sources: sources,
	                            names: names,
	                            mappings: mappings
	                        };
	                        if (sourcesContent !== undefined) {
	                            map_1.sourcesContent = sourcesContent;
	                        }
	                        return JSON.stringify(map_1);
	                    }
	                    return "{\"version\":" + version + ",\"file\":\"" + ts.escapeString(file) + "\",\"sourceRoot\":\"" + ts.escapeString(sourceRoot) + "\",\"sources\":[" + serializeStringArray(sources) + "],\"names\":[" + serializeStringArray(names) + "],\"mappings\":\"" + ts.escapeString(mappings) + "\" " + (sourcesContent !== undefined ? ",\"sourcesContent\":[" + serializeStringArray(sourcesContent) + "]" : "") + "}";
	                    function serializeStringArray(list) {
	                        var output = "";
	                        for (var i = 0, n = list.length; i < n; i++) {
	                            if (i) {
	                                output += ",";
	                            }
	                            output += "\"" + ts.escapeString(list[i]) + "\"";
	                        }
	                        return output;
	                    }
	                }
	                function writeJavaScriptAndSourceMapFile(emitOutput, writeByteOrderMark) {
	                    encodeLastRecordedSourceMapSpan();
	                    var sourceMapText = serializeSourceMapContents(3, sourceMapData.sourceMapFile, sourceMapData.sourceMapSourceRoot, sourceMapData.sourceMapSources, sourceMapData.sourceMapNames, sourceMapData.sourceMapMappings, sourceMapData.sourceMapSourcesContent);
	                    sourceMapDataList.push(sourceMapData);
	                    var sourceMapUrl;
	                    if (compilerOptions.inlineSourceMap) {
	                        var base64SourceMapText = ts.convertToBase64(sourceMapText);
	                        sourceMapUrl = "//# sourceMappingURL=data:application/json;base64," + base64SourceMapText;
	                    }
	                    else {
	                        ts.writeFile(host, diagnostics, sourceMapData.sourceMapFilePath, sourceMapText, false);
	                        sourceMapUrl = "//# sourceMappingURL=" + sourceMapData.jsSourceMappingURL;
	                    }
	                    writeJavaScriptFile(emitOutput + sourceMapUrl, writeByteOrderMark);
	                }
	                var sourceMapJsFile = ts.getBaseFileName(ts.normalizeSlashes(jsFilePath));
	                sourceMapData = {
	                    sourceMapFilePath: jsFilePath + ".map",
	                    jsSourceMappingURL: sourceMapJsFile + ".map",
	                    sourceMapFile: sourceMapJsFile,
	                    sourceMapSourceRoot: compilerOptions.sourceRoot || "",
	                    sourceMapSources: [],
	                    inputSourceFileNames: [],
	                    sourceMapNames: [],
	                    sourceMapMappings: "",
	                    sourceMapSourcesContent: undefined,
	                    sourceMapDecodedMappings: []
	                };
	                sourceMapData.sourceMapSourceRoot = ts.normalizeSlashes(sourceMapData.sourceMapSourceRoot);
	                if (sourceMapData.sourceMapSourceRoot.length && sourceMapData.sourceMapSourceRoot.charCodeAt(sourceMapData.sourceMapSourceRoot.length - 1) !== 47) {
	                    sourceMapData.sourceMapSourceRoot += ts.directorySeparator;
	                }
	                if (compilerOptions.mapRoot) {
	                    sourceMapDir = ts.normalizeSlashes(compilerOptions.mapRoot);
	                    if (root) {
	                        sourceMapDir = ts.getDirectoryPath(ts.getSourceFilePathInNewDir(root, host, sourceMapDir));
	                    }
	                    if (!ts.isRootedDiskPath(sourceMapDir) && !ts.isUrl(sourceMapDir)) {
	                        sourceMapDir = ts.combinePaths(host.getCommonSourceDirectory(), sourceMapDir);
	                        sourceMapData.jsSourceMappingURL = ts.getRelativePathToDirectoryOrUrl(ts.getDirectoryPath(ts.normalizePath(jsFilePath)), ts.combinePaths(sourceMapDir, sourceMapData.jsSourceMappingURL), host.getCurrentDirectory(), host.getCanonicalFileName, true);
	                    }
	                    else {
	                        sourceMapData.jsSourceMappingURL = ts.combinePaths(sourceMapDir, sourceMapData.jsSourceMappingURL);
	                    }
	                }
	                else {
	                    sourceMapDir = ts.getDirectoryPath(ts.normalizePath(jsFilePath));
	                }
	                function emitNodeWithSourceMap(node) {
	                    if (node) {
	                        if (ts.nodeIsSynthesized(node)) {
	                            return emitNodeWithoutSourceMap(node);
	                        }
	                        if (node.kind !== 246) {
	                            recordEmitNodeStartSpan(node);
	                            emitNodeWithoutSourceMap(node);
	                            recordEmitNodeEndSpan(node);
	                        }
	                        else {
	                            recordNewSourceFileStart(node);
	                            emitNodeWithoutSourceMap(node);
	                        }
	                    }
	                }
	                function emitNodeWithCommentsAndWithSourcemap(node) {
	                    emitNodeConsideringCommentsOption(node, emitNodeWithSourceMap);
	                }
	                writeEmittedFiles = writeJavaScriptAndSourceMapFile;
	                emit = emitNodeWithCommentsAndWithSourcemap;
	                emitStart = recordEmitNodeStartSpan;
	                emitEnd = recordEmitNodeEndSpan;
	                emitToken = writeTextWithSpanRecord;
	                scopeEmitStart = recordScopeNameOfNode;
	                scopeEmitEnd = recordScopeNameEnd;
	                writeComment = writeCommentRangeWithMap;
	            }
	            function writeJavaScriptFile(emitOutput, writeByteOrderMark) {
	                ts.writeFile(host, diagnostics, jsFilePath, emitOutput, writeByteOrderMark);
	            }
	            function createTempVariable(flags) {
	                var result = ts.createSynthesizedNode(67);
	                result.text = makeTempVariableName(flags);
	                return result;
	            }
	            function recordTempDeclaration(name) {
	                if (!tempVariables) {
	                    tempVariables = [];
	                }
	                tempVariables.push(name);
	            }
	            function createAndRecordTempVariable(flags) {
	                var temp = createTempVariable(flags);
	                recordTempDeclaration(temp);
	                return temp;
	            }
	            function emitTempDeclarations(newLine) {
	                if (tempVariables) {
	                    if (newLine) {
	                        writeLine();
	                    }
	                    else {
	                        write(" ");
	                    }
	                    write("var ");
	                    emitCommaList(tempVariables);
	                    write(";");
	                }
	            }
	            function emitTokenText(tokenKind, startPos, emitFn) {
	                var tokenString = ts.tokenToString(tokenKind);
	                if (emitFn) {
	                    emitFn();
	                }
	                else {
	                    write(tokenString);
	                }
	                return startPos + tokenString.length;
	            }
	            function emitOptional(prefix, node) {
	                if (node) {
	                    write(prefix);
	                    emit(node);
	                }
	            }
	            function emitParenthesizedIf(node, parenthesized) {
	                if (parenthesized) {
	                    write("(");
	                }
	                emit(node);
	                if (parenthesized) {
	                    write(")");
	                }
	            }
	            function emitTrailingCommaIfPresent(nodeList) {
	                if (nodeList.hasTrailingComma) {
	                    write(",");
	                }
	            }
	            function emitLinePreservingList(parent, nodes, allowTrailingComma, spacesBetweenBraces) {
	                ts.Debug.assert(nodes.length > 0);
	                increaseIndent();
	                if (nodeStartPositionsAreOnSameLine(parent, nodes[0])) {
	                    if (spacesBetweenBraces) {
	                        write(" ");
	                    }
	                }
	                else {
	                    writeLine();
	                }
	                for (var i = 0, n = nodes.length; i < n; i++) {
	                    if (i) {
	                        if (nodeEndIsOnSameLineAsNodeStart(nodes[i - 1], nodes[i])) {
	                            write(", ");
	                        }
	                        else {
	                            write(",");
	                            writeLine();
	                        }
	                    }
	                    emit(nodes[i]);
	                }
	                if (nodes.hasTrailingComma && allowTrailingComma) {
	                    write(",");
	                }
	                decreaseIndent();
	                if (nodeEndPositionsAreOnSameLine(parent, ts.lastOrUndefined(nodes))) {
	                    if (spacesBetweenBraces) {
	                        write(" ");
	                    }
	                }
	                else {
	                    writeLine();
	                }
	            }
	            function emitList(nodes, start, count, multiLine, trailingComma, leadingComma, noTrailingNewLine, emitNode) {
	                if (!emitNode) {
	                    emitNode = emit;
	                }
	                for (var i = 0; i < count; i++) {
	                    if (multiLine) {
	                        if (i || leadingComma) {
	                            write(",");
	                        }
	                        writeLine();
	                    }
	                    else {
	                        if (i || leadingComma) {
	                            write(", ");
	                        }
	                    }
	                    var node = nodes[start + i];
	                    emitTrailingCommentsOfPosition(node.pos);
	                    emitNode(node);
	                    leadingComma = true;
	                }
	                if (trailingComma) {
	                    write(",");
	                }
	                if (multiLine && !noTrailingNewLine) {
	                    writeLine();
	                }
	                return count;
	            }
	            function emitCommaList(nodes) {
	                if (nodes) {
	                    emitList(nodes, 0, nodes.length, false, false);
	                }
	            }
	            function emitLines(nodes) {
	                emitLinesStartingAt(nodes, 0);
	            }
	            function emitLinesStartingAt(nodes, startIndex) {
	                for (var i = startIndex; i < nodes.length; i++) {
	                    writeLine();
	                    emit(nodes[i]);
	                }
	            }
	            function isBinaryOrOctalIntegerLiteral(node, text) {
	                if (node.kind === 8 && text.length > 1) {
	                    switch (text.charCodeAt(1)) {
	                        case 98:
	                        case 66:
	                        case 111:
	                        case 79:
	                            return true;
	                    }
	                }
	                return false;
	            }
	            function emitLiteral(node) {
	                var text = getLiteralText(node);
	                if ((compilerOptions.sourceMap || compilerOptions.inlineSourceMap) && (node.kind === 9 || ts.isTemplateLiteralKind(node.kind))) {
	                    writer.writeLiteral(text);
	                }
	                else if (languageVersion < 2 && isBinaryOrOctalIntegerLiteral(node, text)) {
	                    write(node.text);
	                }
	                else {
	                    write(text);
	                }
	            }
	            function getLiteralText(node) {
	                if (languageVersion < 2 && (ts.isTemplateLiteralKind(node.kind) || node.hasExtendedUnicodeEscape)) {
	                    return getQuotedEscapedLiteralText("\"", node.text, "\"");
	                }
	                if (node.parent) {
	                    return ts.getSourceTextOfNodeFromSourceFile(currentSourceFile, node);
	                }
	                switch (node.kind) {
	                    case 9:
	                        return getQuotedEscapedLiteralText("\"", node.text, "\"");
	                    case 11:
	                        return getQuotedEscapedLiteralText("`", node.text, "`");
	                    case 12:
	                        return getQuotedEscapedLiteralText("`", node.text, "${");
	                    case 13:
	                        return getQuotedEscapedLiteralText("}", node.text, "${");
	                    case 14:
	                        return getQuotedEscapedLiteralText("}", node.text, "`");
	                    case 8:
	                        return node.text;
	                }
	                ts.Debug.fail("Literal kind '" + node.kind + "' not accounted for.");
	            }
	            function getQuotedEscapedLiteralText(leftQuote, text, rightQuote) {
	                return leftQuote + ts.escapeNonAsciiCharacters(ts.escapeString(text)) + rightQuote;
	            }
	            function emitDownlevelRawTemplateLiteral(node) {
	                var text = ts.getSourceTextOfNodeFromSourceFile(currentSourceFile, node);
	                var isLast = node.kind === 11 || node.kind === 14;
	                text = text.substring(1, text.length - (isLast ? 1 : 2));
	                text = text.replace(/\r\n?/g, "\n");
	                text = ts.escapeString(text);
	                write("\"" + text + "\"");
	            }
	            function emitDownlevelTaggedTemplateArray(node, literalEmitter) {
	                write("[");
	                if (node.template.kind === 11) {
	                    literalEmitter(node.template);
	                }
	                else {
	                    literalEmitter(node.template.head);
	                    ts.forEach(node.template.templateSpans, function (child) {
	                        write(", ");
	                        literalEmitter(child.literal);
	                    });
	                }
	                write("]");
	            }
	            function emitDownlevelTaggedTemplate(node) {
	                var tempVariable = createAndRecordTempVariable(0);
	                write("(");
	                emit(tempVariable);
	                write(" = ");
	                emitDownlevelTaggedTemplateArray(node, emit);
	                write(", ");
	                emit(tempVariable);
	                write(".raw = ");
	                emitDownlevelTaggedTemplateArray(node, emitDownlevelRawTemplateLiteral);
	                write(", ");
	                emitParenthesizedIf(node.tag, needsParenthesisForPropertyAccessOrInvocation(node.tag));
	                write("(");
	                emit(tempVariable);
	                if (node.template.kind === 181) {
	                    ts.forEach(node.template.templateSpans, function (templateSpan) {
	                        write(", ");
	                        var needsParens = templateSpan.expression.kind === 179
	                            && templateSpan.expression.operatorToken.kind === 24;
	                        emitParenthesizedIf(templateSpan.expression, needsParens);
	                    });
	                }
	                write("))");
	            }
	            function emitTemplateExpression(node) {
	                if (languageVersion >= 2) {
	                    ts.forEachChild(node, emit);
	                    return;
	                }
	                var emitOuterParens = ts.isExpression(node.parent)
	                    && templateNeedsParens(node, node.parent);
	                if (emitOuterParens) {
	                    write("(");
	                }
	                var headEmitted = false;
	                if (shouldEmitTemplateHead()) {
	                    emitLiteral(node.head);
	                    headEmitted = true;
	                }
	                for (var i = 0, n = node.templateSpans.length; i < n; i++) {
	                    var templateSpan = node.templateSpans[i];
	                    var needsParens = templateSpan.expression.kind !== 170
	                        && comparePrecedenceToBinaryPlus(templateSpan.expression) !== 1;
	                    if (i > 0 || headEmitted) {
	                        write(" + ");
	                    }
	                    emitParenthesizedIf(templateSpan.expression, needsParens);
	                    if (templateSpan.literal.text.length !== 0) {
	                        write(" + ");
	                        emitLiteral(templateSpan.literal);
	                    }
	                }
	                if (emitOuterParens) {
	                    write(")");
	                }
	                function shouldEmitTemplateHead() {
	                    // If this expression has an empty head literal and the first template span has a non-empty
	                    // literal, then emitting the empty head literal is not necessary.
	                    //     `${ foo } and ${ bar }`
	                    // can be emitted as
	                    //     foo + " and " + bar
	                    // This is because it is only required that one of the first two operands in the emit
	                    // output must be a string literal, so that the other operand and all following operands
	                    // are forced into strings.
	                    //
	                    // If the first template span has an empty literal, then the head must still be emitted.
	                    //     `${ foo }${ bar }`
	                    // must still be emitted as
	                    //     "" + foo + bar
	                    ts.Debug.assert(node.templateSpans.length !== 0);
	                    return node.head.text.length !== 0 || node.templateSpans[0].literal.text.length === 0;
	                }
	                function templateNeedsParens(template, parent) {
	                    switch (parent.kind) {
	                        case 166:
	                        case 167:
	                            return parent.expression === template;
	                        case 168:
	                        case 170:
	                            return false;
	                        default:
	                            return comparePrecedenceToBinaryPlus(parent) !== -1;
	                    }
	                }
	                function comparePrecedenceToBinaryPlus(expression) {
	                    switch (expression.kind) {
	                        case 179:
	                            switch (expression.operatorToken.kind) {
	                                case 37:
	                                case 38:
	                                case 39:
	                                    return 1;
	                                case 35:
	                                case 36:
	                                    return 0;
	                                default:
	                                    return -1;
	                            }
	                        case 182:
	                        case 180:
	                            return -1;
	                        default:
	                            return 1;
	                    }
	                }
	            }
	            function emitTemplateSpan(span) {
	                emit(span.expression);
	                emit(span.literal);
	            }
	            function jsxEmitReact(node) {
	                function emitTagName(name) {
	                    if (name.kind === 67 && ts.isIntrinsicJsxName(name.text)) {
	                        write("\"");
	                        emit(name);
	                        write("\"");
	                    }
	                    else {
	                        emit(name);
	                    }
	                }
	                function emitAttributeName(name) {
	                    if (/[A-Za-z_]+[\w*]/.test(name.text)) {
	                        write("\"");
	                        emit(name);
	                        write("\"");
	                    }
	                    else {
	                        emit(name);
	                    }
	                }
	                function emitJsxAttribute(node) {
	                    emitAttributeName(node.name);
	                    write(": ");
	                    if (node.initializer) {
	                        emit(node.initializer);
	                    }
	                    else {
	                        write("true");
	                    }
	                }
	                function emitJsxElement(openingNode, children) {
	                    var syntheticReactRef = ts.createSynthesizedNode(67);
	                    syntheticReactRef.text = 'React';
	                    syntheticReactRef.parent = openingNode;
	                    emitLeadingComments(openingNode);
	                    emitExpressionIdentifier(syntheticReactRef);
	                    write(".createElement(");
	                    emitTagName(openingNode.tagName);
	                    write(", ");
	                    if (openingNode.attributes.length === 0) {
	                        write("null");
	                    }
	                    else {
	                        var attrs = openingNode.attributes;
	                        if (ts.forEach(attrs, function (attr) { return attr.kind === 237; })) {
	                            emitExpressionIdentifier(syntheticReactRef);
	                            write(".__spread(");
	                            var haveOpenedObjectLiteral = false;
	                            for (var i_1 = 0; i_1 < attrs.length; i_1++) {
	                                if (attrs[i_1].kind === 237) {
	                                    if (i_1 === 0) {
	                                        write("{}, ");
	                                    }
	                                    if (haveOpenedObjectLiteral) {
	                                        write("}");
	                                        haveOpenedObjectLiteral = false;
	                                    }
	                                    if (i_1 > 0) {
	                                        write(", ");
	                                    }
	                                    emit(attrs[i_1].expression);
	                                }
	                                else {
	                                    ts.Debug.assert(attrs[i_1].kind === 236);
	                                    if (haveOpenedObjectLiteral) {
	                                        write(", ");
	                                    }
	                                    else {
	                                        haveOpenedObjectLiteral = true;
	                                        if (i_1 > 0) {
	                                            write(", ");
	                                        }
	                                        write("{");
	                                    }
	                                    emitJsxAttribute(attrs[i_1]);
	                                }
	                            }
	                            if (haveOpenedObjectLiteral)
	                                write("}");
	                            write(")");
	                        }
	                        else {
	                            write("{");
	                            for (var i = 0; i < attrs.length; i++) {
	                                if (i > 0) {
	                                    write(", ");
	                                }
	                                emitJsxAttribute(attrs[i]);
	                            }
	                            write("}");
	                        }
	                    }
	                    if (children) {
	                        for (var i = 0; i < children.length; i++) {
	                            if (children[i].kind === 238 && !(children[i].expression)) {
	                                continue;
	                            }
	                            if (children[i].kind === 234) {
	                                var text = getTextToEmit(children[i]);
	                                if (text !== undefined) {
	                                    write(", \"");
	                                    write(text);
	                                    write("\"");
	                                }
	                            }
	                            else {
	                                write(", ");
	                                emit(children[i]);
	                            }
	                        }
	                    }
	                    write(")");
	                    emitTrailingComments(openingNode);
	                }
	                if (node.kind === 231) {
	                    emitJsxElement(node.openingElement, node.children);
	                }
	                else {
	                    ts.Debug.assert(node.kind === 232);
	                    emitJsxElement(node);
	                }
	            }
	            function jsxEmitPreserve(node) {
	                function emitJsxAttribute(node) {
	                    emit(node.name);
	                    write("=");
	                    emit(node.initializer);
	                }
	                function emitJsxSpreadAttribute(node) {
	                    write("{...");
	                    emit(node.expression);
	                    write("}");
	                }
	                function emitAttributes(attribs) {
	                    for (var i = 0, n = attribs.length; i < n; i++) {
	                        if (i > 0) {
	                            write(" ");
	                        }
	                        if (attribs[i].kind === 237) {
	                            emitJsxSpreadAttribute(attribs[i]);
	                        }
	                        else {
	                            ts.Debug.assert(attribs[i].kind === 236);
	                            emitJsxAttribute(attribs[i]);
	                        }
	                    }
	                }
	                function emitJsxOpeningOrSelfClosingElement(node) {
	                    write("<");
	                    emit(node.tagName);
	                    if (node.attributes.length > 0 || (node.kind === 232)) {
	                        write(" ");
	                    }
	                    emitAttributes(node.attributes);
	                    if (node.kind === 232) {
	                        write("/>");
	                    }
	                    else {
	                        write(">");
	                    }
	                }
	                function emitJsxClosingElement(node) {
	                    write("</");
	                    emit(node.tagName);
	                    write(">");
	                }
	                function emitJsxElement(node) {
	                    emitJsxOpeningOrSelfClosingElement(node.openingElement);
	                    for (var i = 0, n = node.children.length; i < n; i++) {
	                        emit(node.children[i]);
	                    }
	                    emitJsxClosingElement(node.closingElement);
	                }
	                if (node.kind === 231) {
	                    emitJsxElement(node);
	                }
	                else {
	                    ts.Debug.assert(node.kind === 232);
	                    emitJsxOpeningOrSelfClosingElement(node);
	                }
	            }
	            function emitExpressionForPropertyName(node) {
	                ts.Debug.assert(node.kind !== 161);
	                if (node.kind === 9) {
	                    emitLiteral(node);
	                }
	                else if (node.kind === 134) {
	                    if (ts.nodeIsDecorated(node.parent)) {
	                        if (!computedPropertyNamesToGeneratedNames) {
	                            computedPropertyNamesToGeneratedNames = [];
	                        }
	                        var generatedName = computedPropertyNamesToGeneratedNames[ts.getNodeId(node)];
	                        if (generatedName) {
	                            write(generatedName);
	                            return;
	                        }
	                        generatedName = createAndRecordTempVariable(0).text;
	                        computedPropertyNamesToGeneratedNames[ts.getNodeId(node)] = generatedName;
	                        write(generatedName);
	                        write(" = ");
	                    }
	                    emit(node.expression);
	                }
	                else {
	                    write("\"");
	                    if (node.kind === 8) {
	                        write(node.text);
	                    }
	                    else {
	                        writeTextOfNode(currentSourceFile, node);
	                    }
	                    write("\"");
	                }
	            }
	            function isExpressionIdentifier(node) {
	                var parent = node.parent;
	                switch (parent.kind) {
	                    case 162:
	                    case 179:
	                    case 166:
	                    case 239:
	                    case 134:
	                    case 180:
	                    case 137:
	                    case 173:
	                    case 195:
	                    case 165:
	                    case 225:
	                    case 193:
	                    case 186:
	                    case 197:
	                    case 198:
	                    case 199:
	                    case 194:
	                    case 232:
	                    case 233:
	                    case 237:
	                    case 238:
	                    case 167:
	                    case 170:
	                    case 178:
	                    case 177:
	                    case 202:
	                    case 244:
	                    case 183:
	                    case 204:
	                    case 168:
	                    case 188:
	                    case 206:
	                    case 169:
	                    case 174:
	                    case 175:
	                    case 196:
	                    case 203:
	                    case 182:
	                        return true;
	                    case 161:
	                    case 245:
	                    case 136:
	                    case 243:
	                    case 139:
	                    case 209:
	                        return parent.initializer === node;
	                    case 164:
	                        return parent.expression === node;
	                    case 172:
	                    case 171:
	                        return parent.body === node;
	                    case 219:
	                        return parent.moduleReference === node;
	                    case 133:
	                        return parent.left === node;
	                }
	                return false;
	            }
	            function emitExpressionIdentifier(node) {
	                if (resolver.getNodeCheckFlags(node) & 2048) {
	                    write("_arguments");
	                    return;
	                }
	                var container = resolver.getReferencedExportContainer(node);
	                if (container) {
	                    if (container.kind === 246) {
	                        if (languageVersion < 2 && compilerOptions.module !== 4) {
	                            write("exports.");
	                        }
	                    }
	                    else {
	                        write(getGeneratedNameForNode(container));
	                        write(".");
	                    }
	                }
	                else if (languageVersion < 2) {
	                    var declaration = resolver.getReferencedImportDeclaration(node);
	                    if (declaration) {
	                        if (declaration.kind === 221) {
	                            write(getGeneratedNameForNode(declaration.parent));
	                            write(languageVersion === 0 ? "[\"default\"]" : ".default");
	                            return;
	                        }
	                        else if (declaration.kind === 224) {
	                            write(getGeneratedNameForNode(declaration.parent.parent.parent));
	                            write(".");
	                            writeTextOfNode(currentSourceFile, declaration.propertyName || declaration.name);
	                            return;
	                        }
	                    }
	                    declaration = resolver.getReferencedNestedRedeclaration(node);
	                    if (declaration) {
	                        write(getGeneratedNameForNode(declaration.name));
	                        return;
	                    }
	                }
	                if (ts.nodeIsSynthesized(node)) {
	                    write(node.text);
	                }
	                else {
	                    writeTextOfNode(currentSourceFile, node);
	                }
	            }
	            function isNameOfNestedRedeclaration(node) {
	                if (languageVersion < 2) {
	                    var parent_6 = node.parent;
	                    switch (parent_6.kind) {
	                        case 161:
	                        case 212:
	                        case 215:
	                        case 209:
	                            return parent_6.name === node && resolver.isNestedRedeclaration(parent_6);
	                    }
	                }
	                return false;
	            }
	            function emitIdentifier(node) {
	                if (!node.parent) {
	                    write(node.text);
	                }
	                else if (isExpressionIdentifier(node)) {
	                    emitExpressionIdentifier(node);
	                }
	                else if (isNameOfNestedRedeclaration(node)) {
	                    write(getGeneratedNameForNode(node));
	                }
	                else if (ts.nodeIsSynthesized(node)) {
	                    write(node.text);
	                }
	                else {
	                    writeTextOfNode(currentSourceFile, node);
	                }
	            }
	            function emitThis(node) {
	                if (resolver.getNodeCheckFlags(node) & 2) {
	                    write("_this");
	                }
	                else {
	                    write("this");
	                }
	            }
	            function emitSuper(node) {
	                if (languageVersion >= 2) {
	                    write("super");
	                }
	                else {
	                    var flags = resolver.getNodeCheckFlags(node);
	                    if (flags & 256) {
	                        write("_super.prototype");
	                    }
	                    else {
	                        write("_super");
	                    }
	                }
	            }
	            function emitObjectBindingPattern(node) {
	                write("{ ");
	                var elements = node.elements;
	                emitList(elements, 0, elements.length, false, elements.hasTrailingComma);
	                write(" }");
	            }
	            function emitArrayBindingPattern(node) {
	                write("[");
	                var elements = node.elements;
	                emitList(elements, 0, elements.length, false, elements.hasTrailingComma);
	                write("]");
	            }
	            function emitBindingElement(node) {
	                if (node.propertyName) {
	                    emit(node.propertyName);
	                    write(": ");
	                }
	                if (node.dotDotDotToken) {
	                    write("...");
	                }
	                if (ts.isBindingPattern(node.name)) {
	                    emit(node.name);
	                }
	                else {
	                    emitModuleMemberName(node);
	                }
	                emitOptional(" = ", node.initializer);
	            }
	            function emitSpreadElementExpression(node) {
	                write("...");
	                emit(node.expression);
	            }
	            function emitYieldExpression(node) {
	                write(ts.tokenToString(112));
	                if (node.asteriskToken) {
	                    write("*");
	                }
	                if (node.expression) {
	                    write(" ");
	                    emit(node.expression);
	                }
	            }
	            function emitAwaitExpression(node) {
	                var needsParenthesis = needsParenthesisForAwaitExpressionAsYield(node);
	                if (needsParenthesis) {
	                    write("(");
	                }
	                write(ts.tokenToString(112));
	                write(" ");
	                emit(node.expression);
	                if (needsParenthesis) {
	                    write(")");
	                }
	            }
	            function needsParenthesisForAwaitExpressionAsYield(node) {
	                if (node.parent.kind === 179 && !ts.isAssignmentOperator(node.parent.operatorToken.kind)) {
	                    return true;
	                }
	                else if (node.parent.kind === 180 && node.parent.condition === node) {
	                    return true;
	                }
	                return false;
	            }
	            function needsParenthesisForPropertyAccessOrInvocation(node) {
	                switch (node.kind) {
	                    case 67:
	                    case 162:
	                    case 164:
	                    case 165:
	                    case 166:
	                    case 170:
	                        return false;
	                }
	                return true;
	            }
	            function emitListWithSpread(elements, needsUniqueCopy, multiLine, trailingComma, useConcat) {
	                var pos = 0;
	                var group = 0;
	                var length = elements.length;
	                while (pos < length) {
	                    if (group === 1 && useConcat) {
	                        write(".concat(");
	                    }
	                    else if (group > 0) {
	                        write(", ");
	                    }
	                    var e = elements[pos];
	                    if (e.kind === 183) {
	                        e = e.expression;
	                        emitParenthesizedIf(e, group === 0 && needsParenthesisForPropertyAccessOrInvocation(e));
	                        pos++;
	                        if (pos === length && group === 0 && needsUniqueCopy && e.kind !== 162) {
	                            write(".slice()");
	                        }
	                    }
	                    else {
	                        var i = pos;
	                        while (i < length && elements[i].kind !== 183) {
	                            i++;
	                        }
	                        write("[");
	                        if (multiLine) {
	                            increaseIndent();
	                        }
	                        emitList(elements, pos, i - pos, multiLine, trailingComma && i === length);
	                        if (multiLine) {
	                            decreaseIndent();
	                        }
	                        write("]");
	                        pos = i;
	                    }
	                    group++;
	                }
	                if (group > 1) {
	                    if (useConcat) {
	                        write(")");
	                    }
	                }
	            }
	            function isSpreadElementExpression(node) {
	                return node.kind === 183;
	            }
	            function emitArrayLiteral(node) {
	                var elements = node.elements;
	                if (elements.length === 0) {
	                    write("[]");
	                }
	                else if (languageVersion >= 2 || !ts.forEach(elements, isSpreadElementExpression)) {
	                    write("[");
	                    emitLinePreservingList(node, node.elements, elements.hasTrailingComma, false);
	                    write("]");
	                }
	                else {
	                    emitListWithSpread(elements, true, (node.flags & 2048) !== 0, elements.hasTrailingComma, true);
	                }
	            }
	            function emitObjectLiteralBody(node, numElements) {
	                if (numElements === 0) {
	                    write("{}");
	                    return;
	                }
	                write("{");
	                if (numElements > 0) {
	                    var properties = node.properties;
	                    if (numElements === properties.length) {
	                        emitLinePreservingList(node, properties, languageVersion >= 1, true);
	                    }
	                    else {
	                        var multiLine = (node.flags & 2048) !== 0;
	                        if (!multiLine) {
	                            write(" ");
	                        }
	                        else {
	                            increaseIndent();
	                        }
	                        emitList(properties, 0, numElements, multiLine, false);
	                        if (!multiLine) {
	                            write(" ");
	                        }
	                        else {
	                            decreaseIndent();
	                        }
	                    }
	                }
	                write("}");
	            }
	            function emitDownlevelObjectLiteralWithComputedProperties(node, firstComputedPropertyIndex) {
	                var multiLine = (node.flags & 2048) !== 0;
	                var properties = node.properties;
	                write("(");
	                if (multiLine) {
	                    increaseIndent();
	                }
	                var tempVar = createAndRecordTempVariable(0);
	                emit(tempVar);
	                write(" = ");
	                emitObjectLiteralBody(node, firstComputedPropertyIndex);
	                for (var i = firstComputedPropertyIndex, n = properties.length; i < n; i++) {
	                    writeComma();
	                    var property = properties[i];
	                    emitStart(property);
	                    if (property.kind === 143 || property.kind === 144) {
	                        var accessors = ts.getAllAccessorDeclarations(node.properties, property);
	                        if (property !== accessors.firstAccessor) {
	                            continue;
	                        }
	                        write("Object.defineProperty(");
	                        emit(tempVar);
	                        write(", ");
	                        emitStart(node.name);
	                        emitExpressionForPropertyName(property.name);
	                        emitEnd(property.name);
	                        write(", {");
	                        increaseIndent();
	                        if (accessors.getAccessor) {
	                            writeLine();
	                            emitLeadingComments(accessors.getAccessor);
	                            write("get: ");
	                            emitStart(accessors.getAccessor);
	                            write("function ");
	                            emitSignatureAndBody(accessors.getAccessor);
	                            emitEnd(accessors.getAccessor);
	                            emitTrailingComments(accessors.getAccessor);
	                            write(",");
	                        }
	                        if (accessors.setAccessor) {
	                            writeLine();
	                            emitLeadingComments(accessors.setAccessor);
	                            write("set: ");
	                            emitStart(accessors.setAccessor);
	                            write("function ");
	                            emitSignatureAndBody(accessors.setAccessor);
	                            emitEnd(accessors.setAccessor);
	                            emitTrailingComments(accessors.setAccessor);
	                            write(",");
	                        }
	                        writeLine();
	                        write("enumerable: true,");
	                        writeLine();
	                        write("configurable: true");
	                        decreaseIndent();
	                        writeLine();
	                        write("})");
	                        emitEnd(property);
	                    }
	                    else {
	                        emitLeadingComments(property);
	                        emitStart(property.name);
	                        emit(tempVar);
	                        emitMemberAccessForPropertyName(property.name);
	                        emitEnd(property.name);
	                        write(" = ");
	                        if (property.kind === 243) {
	                            emit(property.initializer);
	                        }
	                        else if (property.kind === 244) {
	                            emitExpressionIdentifier(property.name);
	                        }
	                        else if (property.kind === 141) {
	                            emitFunctionDeclaration(property);
	                        }
	                        else {
	                            ts.Debug.fail("ObjectLiteralElement type not accounted for: " + property.kind);
	                        }
	                    }
	                    emitEnd(property);
	                }
	                writeComma();
	                emit(tempVar);
	                if (multiLine) {
	                    decreaseIndent();
	                    writeLine();
	                }
	                write(")");
	                function writeComma() {
	                    if (multiLine) {
	                        write(",");
	                        writeLine();
	                    }
	                    else {
	                        write(", ");
	                    }
	                }
	            }
	            function emitObjectLiteral(node) {
	                var properties = node.properties;
	                if (languageVersion < 2) {
	                    var numProperties = properties.length;
	                    var numInitialNonComputedProperties = numProperties;
	                    for (var i = 0, n = properties.length; i < n; i++) {
	                        if (properties[i].name.kind === 134) {
	                            numInitialNonComputedProperties = i;
	                            break;
	                        }
	                    }
	                    var hasComputedProperty = numInitialNonComputedProperties !== properties.length;
	                    if (hasComputedProperty) {
	                        emitDownlevelObjectLiteralWithComputedProperties(node, numInitialNonComputedProperties);
	                        return;
	                    }
	                }
	                emitObjectLiteralBody(node, properties.length);
	            }
	            function createBinaryExpression(left, operator, right, startsOnNewLine) {
	                var result = ts.createSynthesizedNode(179, startsOnNewLine);
	                result.operatorToken = ts.createSynthesizedNode(operator);
	                result.left = left;
	                result.right = right;
	                return result;
	            }
	            function createPropertyAccessExpression(expression, name) {
	                var result = ts.createSynthesizedNode(164);
	                result.expression = parenthesizeForAccess(expression);
	                result.dotToken = ts.createSynthesizedNode(21);
	                result.name = name;
	                return result;
	            }
	            function createElementAccessExpression(expression, argumentExpression) {
	                var result = ts.createSynthesizedNode(165);
	                result.expression = parenthesizeForAccess(expression);
	                result.argumentExpression = argumentExpression;
	                return result;
	            }
	            function parenthesizeForAccess(expr) {
	                while (expr.kind === 169 || expr.kind === 187) {
	                    expr = expr.expression;
	                }
	                if (ts.isLeftHandSideExpression(expr) &&
	                    expr.kind !== 167 &&
	                    expr.kind !== 8) {
	                    return expr;
	                }
	                var node = ts.createSynthesizedNode(170);
	                node.expression = expr;
	                return node;
	            }
	            function emitComputedPropertyName(node) {
	                write("[");
	                emitExpressionForPropertyName(node);
	                write("]");
	            }
	            function emitMethod(node) {
	                if (languageVersion >= 2 && node.asteriskToken) {
	                    write("*");
	                }
	                emit(node.name);
	                if (languageVersion < 2) {
	                    write(": function ");
	                }
	                emitSignatureAndBody(node);
	            }
	            function emitPropertyAssignment(node) {
	                emit(node.name);
	                write(": ");
	                emitTrailingCommentsOfPosition(node.initializer.pos);
	                emit(node.initializer);
	            }
	            function isNamespaceExportReference(node) {
	                var container = resolver.getReferencedExportContainer(node);
	                return container && container.kind !== 246;
	            }
	            function emitShorthandPropertyAssignment(node) {
	                writeTextOfNode(currentSourceFile, node.name);
	                if (languageVersion < 2 || isNamespaceExportReference(node.name)) {
	                    write(": ");
	                    emit(node.name);
	                }
	            }
	            function tryEmitConstantValue(node) {
	                var constantValue = tryGetConstEnumValue(node);
	                if (constantValue !== undefined) {
	                    write(constantValue.toString());
	                    if (!compilerOptions.removeComments) {
	                        var propertyName = node.kind === 164 ? ts.declarationNameToString(node.name) : ts.getTextOfNode(node.argumentExpression);
	                        write(" /* " + propertyName + " */");
	                    }
	                    return true;
	                }
	                return false;
	            }
	            function tryGetConstEnumValue(node) {
	                if (compilerOptions.isolatedModules) {
	                    return undefined;
	                }
	                return node.kind === 164 || node.kind === 165
	                    ? resolver.getConstantValue(node)
	                    : undefined;
	            }
	            function indentIfOnDifferentLines(parent, node1, node2, valueToWriteWhenNotIndenting) {
	                var realNodesAreOnDifferentLines = !ts.nodeIsSynthesized(parent) && !nodeEndIsOnSameLineAsNodeStart(node1, node2);
	                var synthesizedNodeIsOnDifferentLine = synthesizedNodeStartsOnNewLine(node2);
	                if (realNodesAreOnDifferentLines || synthesizedNodeIsOnDifferentLine) {
	                    increaseIndent();
	                    writeLine();
	                    return true;
	                }
	                else {
	                    if (valueToWriteWhenNotIndenting) {
	                        write(valueToWriteWhenNotIndenting);
	                    }
	                    return false;
	                }
	            }
	            function emitPropertyAccess(node) {
	                if (tryEmitConstantValue(node)) {
	                    return;
	                }
	                emit(node.expression);
	                var indentedBeforeDot = indentIfOnDifferentLines(node, node.expression, node.dotToken);
	                var shouldEmitSpace;
	                if (!indentedBeforeDot) {
	                    if (node.expression.kind === 8) {
	                        var text = ts.getSourceTextOfNodeFromSourceFile(currentSourceFile, node.expression);
	                        shouldEmitSpace = text.indexOf(ts.tokenToString(21)) < 0;
	                    }
	                    else {
	                        var constantValue = tryGetConstEnumValue(node.expression);
	                        shouldEmitSpace = isFinite(constantValue) && Math.floor(constantValue) === constantValue;
	                    }
	                }
	                if (shouldEmitSpace) {
	                    write(" .");
	                }
	                else {
	                    write(".");
	                }
	                var indentedAfterDot = indentIfOnDifferentLines(node, node.dotToken, node.name);
	                emit(node.name);
	                decreaseIndentIf(indentedBeforeDot, indentedAfterDot);
	            }
	            function emitQualifiedName(node) {
	                emit(node.left);
	                write(".");
	                emit(node.right);
	            }
	            function emitQualifiedNameAsExpression(node, useFallback) {
	                if (node.left.kind === 67) {
	                    emitEntityNameAsExpression(node.left, useFallback);
	                }
	                else if (useFallback) {
	                    var temp = createAndRecordTempVariable(0);
	                    write("(");
	                    emitNodeWithoutSourceMap(temp);
	                    write(" = ");
	                    emitEntityNameAsExpression(node.left, true);
	                    write(") && ");
	                    emitNodeWithoutSourceMap(temp);
	                }
	                else {
	                    emitEntityNameAsExpression(node.left, false);
	                }
	                write(".");
	                emit(node.right);
	            }
	            function emitEntityNameAsExpression(node, useFallback) {
	                switch (node.kind) {
	                    case 67:
	                        if (useFallback) {
	                            write("typeof ");
	                            emitExpressionIdentifier(node);
	                            write(" !== 'undefined' && ");
	                        }
	                        emitExpressionIdentifier(node);
	                        break;
	                    case 133:
	                        emitQualifiedNameAsExpression(node, useFallback);
	                        break;
	                }
	            }
	            function emitIndexedAccess(node) {
	                if (tryEmitConstantValue(node)) {
	                    return;
	                }
	                emit(node.expression);
	                write("[");
	                emit(node.argumentExpression);
	                write("]");
	            }
	            function hasSpreadElement(elements) {
	                return ts.forEach(elements, function (e) { return e.kind === 183; });
	            }
	            function skipParentheses(node) {
	                while (node.kind === 170 || node.kind === 169 || node.kind === 187) {
	                    node = node.expression;
	                }
	                return node;
	            }
	            function emitCallTarget(node) {
	                if (node.kind === 67 || node.kind === 95 || node.kind === 93) {
	                    emit(node);
	                    return node;
	                }
	                var temp = createAndRecordTempVariable(0);
	                write("(");
	                emit(temp);
	                write(" = ");
	                emit(node);
	                write(")");
	                return temp;
	            }
	            function emitCallWithSpread(node) {
	                var target;
	                var expr = skipParentheses(node.expression);
	                if (expr.kind === 164) {
	                    target = emitCallTarget(expr.expression);
	                    write(".");
	                    emit(expr.name);
	                }
	                else if (expr.kind === 165) {
	                    target = emitCallTarget(expr.expression);
	                    write("[");
	                    emit(expr.argumentExpression);
	                    write("]");
	                }
	                else if (expr.kind === 93) {
	                    target = expr;
	                    write("_super");
	                }
	                else {
	                    emit(node.expression);
	                }
	                write(".apply(");
	                if (target) {
	                    if (target.kind === 93) {
	                        emitThis(target);
	                    }
	                    else {
	                        emit(target);
	                    }
	                }
	                else {
	                    write("void 0");
	                }
	                write(", ");
	                emitListWithSpread(node.arguments, false, false, false, true);
	                write(")");
	            }
	            function emitCallExpression(node) {
	                if (languageVersion < 2 && hasSpreadElement(node.arguments)) {
	                    emitCallWithSpread(node);
	                    return;
	                }
	                var superCall = false;
	                if (node.expression.kind === 93) {
	                    emitSuper(node.expression);
	                    superCall = true;
	                }
	                else {
	                    emit(node.expression);
	                    superCall = node.expression.kind === 164 && node.expression.expression.kind === 93;
	                }
	                if (superCall && languageVersion < 2) {
	                    write(".call(");
	                    emitThis(node.expression);
	                    if (node.arguments.length) {
	                        write(", ");
	                        emitCommaList(node.arguments);
	                    }
	                    write(")");
	                }
	                else {
	                    write("(");
	                    emitCommaList(node.arguments);
	                    write(")");
	                }
	            }
	            function emitNewExpression(node) {
	                write("new ");
	                if (languageVersion === 1 &&
	                    node.arguments &&
	                    hasSpreadElement(node.arguments)) {
	                    write("(");
	                    var target = emitCallTarget(node.expression);
	                    write(".bind.apply(");
	                    emit(target);
	                    write(", [void 0].concat(");
	                    emitListWithSpread(node.arguments, false, false, false, false);
	                    write(")))");
	                    write("()");
	                }
	                else {
	                    emit(node.expression);
	                    if (node.arguments) {
	                        write("(");
	                        emitCommaList(node.arguments);
	                        write(")");
	                    }
	                }
	            }
	            function emitTaggedTemplateExpression(node) {
	                if (languageVersion >= 2) {
	                    emit(node.tag);
	                    write(" ");
	                    emit(node.template);
	                }
	                else {
	                    emitDownlevelTaggedTemplate(node);
	                }
	            }
	            function emitParenExpression(node) {
	                if (!ts.nodeIsSynthesized(node) && node.parent.kind !== 172) {
	                    if (node.expression.kind === 169 || node.expression.kind === 187) {
	                        var operand = node.expression.expression;
	                        while (operand.kind === 169 || operand.kind === 187) {
	                            operand = operand.expression;
	                        }
	                        if (operand.kind !== 177 &&
	                            operand.kind !== 175 &&
	                            operand.kind !== 174 &&
	                            operand.kind !== 173 &&
	                            operand.kind !== 178 &&
	                            operand.kind !== 167 &&
	                            !(operand.kind === 166 && node.parent.kind === 167) &&
	                            !(operand.kind === 171 && node.parent.kind === 166)) {
	                            emit(operand);
	                            return;
	                        }
	                    }
	                }
	                write("(");
	                emit(node.expression);
	                write(")");
	            }
	            function emitDeleteExpression(node) {
	                write(ts.tokenToString(76));
	                write(" ");
	                emit(node.expression);
	            }
	            function emitVoidExpression(node) {
	                write(ts.tokenToString(101));
	                write(" ");
	                emit(node.expression);
	            }
	            function emitTypeOfExpression(node) {
	                write(ts.tokenToString(99));
	                write(" ");
	                emit(node.expression);
	            }
	            function isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node) {
	                if (!isCurrentFileSystemExternalModule() || node.kind !== 67 || ts.nodeIsSynthesized(node)) {
	                    return false;
	                }
	                var isVariableDeclarationOrBindingElement = node.parent && (node.parent.kind === 209 || node.parent.kind === 161);
	                var targetDeclaration = isVariableDeclarationOrBindingElement
	                    ? node.parent
	                    : resolver.getReferencedValueDeclaration(node);
	                return isSourceFileLevelDeclarationInSystemJsModule(targetDeclaration, true);
	            }
	            function emitPrefixUnaryExpression(node) {
	                var exportChanged = isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node.operand);
	                if (exportChanged) {
	                    write(exportFunctionForFile + "(\"");
	                    emitNodeWithoutSourceMap(node.operand);
	                    write("\", ");
	                }
	                write(ts.tokenToString(node.operator));
	                if (node.operand.kind === 177) {
	                    var operand = node.operand;
	                    if (node.operator === 35 && (operand.operator === 35 || operand.operator === 40)) {
	                        write(" ");
	                    }
	                    else if (node.operator === 36 && (operand.operator === 36 || operand.operator === 41)) {
	                        write(" ");
	                    }
	                }
	                emit(node.operand);
	                if (exportChanged) {
	                    write(")");
	                }
	            }
	            function emitPostfixUnaryExpression(node) {
	                var exportChanged = isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node.operand);
	                if (exportChanged) {
	                    write("(" + exportFunctionForFile + "(\"");
	                    emitNodeWithoutSourceMap(node.operand);
	                    write("\", ");
	                    write(ts.tokenToString(node.operator));
	                    emit(node.operand);
	                    if (node.operator === 40) {
	                        write(") - 1)");
	                    }
	                    else {
	                        write(") + 1)");
	                    }
	                }
	                else {
	                    emit(node.operand);
	                    write(ts.tokenToString(node.operator));
	                }
	            }
	            function shouldHoistDeclarationInSystemJsModule(node) {
	                return isSourceFileLevelDeclarationInSystemJsModule(node, false);
	            }
	            function isSourceFileLevelDeclarationInSystemJsModule(node, isExported) {
	                if (!node || languageVersion >= 2 || !isCurrentFileSystemExternalModule()) {
	                    return false;
	                }
	                var current = node;
	                while (current) {
	                    if (current.kind === 246) {
	                        return !isExported || ((ts.getCombinedNodeFlags(node) & 1) !== 0);
	                    }
	                    else if (ts.isFunctionLike(current) || current.kind === 217) {
	                        return false;
	                    }
	                    else {
	                        current = current.parent;
	                    }
	                }
	            }
	            function emitBinaryExpression(node) {
	                if (languageVersion < 2 && node.operatorToken.kind === 55 &&
	                    (node.left.kind === 163 || node.left.kind === 162)) {
	                    emitDestructuring(node, node.parent.kind === 193);
	                }
	                else {
	                    var exportChanged = node.operatorToken.kind >= 55 &&
	                        node.operatorToken.kind <= 66 &&
	                        isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node.left);
	                    if (exportChanged) {
	                        write(exportFunctionForFile + "(\"");
	                        emitNodeWithoutSourceMap(node.left);
	                        write("\", ");
	                    }
	                    emit(node.left);
	                    var indentedBeforeOperator = indentIfOnDifferentLines(node, node.left, node.operatorToken, node.operatorToken.kind !== 24 ? " " : undefined);
	                    write(ts.tokenToString(node.operatorToken.kind));
	                    var indentedAfterOperator = indentIfOnDifferentLines(node, node.operatorToken, node.right, " ");
	                    emit(node.right);
	                    decreaseIndentIf(indentedBeforeOperator, indentedAfterOperator);
	                    if (exportChanged) {
	                        write(")");
	                    }
	                }
	            }
	            function synthesizedNodeStartsOnNewLine(node) {
	                return ts.nodeIsSynthesized(node) && node.startsOnNewLine;
	            }
	            function emitConditionalExpression(node) {
	                emit(node.condition);
	                var indentedBeforeQuestion = indentIfOnDifferentLines(node, node.condition, node.questionToken, " ");
	                write("?");
	                var indentedAfterQuestion = indentIfOnDifferentLines(node, node.questionToken, node.whenTrue, " ");
	                emit(node.whenTrue);
	                decreaseIndentIf(indentedBeforeQuestion, indentedAfterQuestion);
	                var indentedBeforeColon = indentIfOnDifferentLines(node, node.whenTrue, node.colonToken, " ");
	                write(":");
	                var indentedAfterColon = indentIfOnDifferentLines(node, node.colonToken, node.whenFalse, " ");
	                emit(node.whenFalse);
	                decreaseIndentIf(indentedBeforeColon, indentedAfterColon);
	            }
	            function decreaseIndentIf(value1, value2) {
	                if (value1) {
	                    decreaseIndent();
	                }
	                if (value2) {
	                    decreaseIndent();
	                }
	            }
	            function isSingleLineEmptyBlock(node) {
	                if (node && node.kind === 190) {
	                    var block = node;
	                    return block.statements.length === 0 && nodeEndIsOnSameLineAsNodeStart(block, block);
	                }
	            }
	            function emitBlock(node) {
	                if (isSingleLineEmptyBlock(node)) {
	                    emitToken(15, node.pos);
	                    write(" ");
	                    emitToken(16, node.statements.end);
	                    return;
	                }
	                emitToken(15, node.pos);
	                increaseIndent();
	                scopeEmitStart(node.parent);
	                if (node.kind === 217) {
	                    ts.Debug.assert(node.parent.kind === 216);
	                    emitCaptureThisForNodeIfNecessary(node.parent);
	                }
	                emitLines(node.statements);
	                if (node.kind === 217) {
	                    emitTempDeclarations(true);
	                }
	                decreaseIndent();
	                writeLine();
	                emitToken(16, node.statements.end);
	                scopeEmitEnd();
	            }
	            function emitEmbeddedStatement(node) {
	                if (node.kind === 190) {
	                    write(" ");
	                    emit(node);
	                }
	                else {
	                    increaseIndent();
	                    writeLine();
	                    emit(node);
	                    decreaseIndent();
	                }
	            }
	            function emitExpressionStatement(node) {
	                emitParenthesizedIf(node.expression, node.expression.kind === 172);
	                write(";");
	            }
	            function emitIfStatement(node) {
	                var endPos = emitToken(86, node.pos);
	                write(" ");
	                endPos = emitToken(17, endPos);
	                emit(node.expression);
	                emitToken(18, node.expression.end);
	                emitEmbeddedStatement(node.thenStatement);
	                if (node.elseStatement) {
	                    writeLine();
	                    emitToken(78, node.thenStatement.end);
	                    if (node.elseStatement.kind === 194) {
	                        write(" ");
	                        emit(node.elseStatement);
	                    }
	                    else {
	                        emitEmbeddedStatement(node.elseStatement);
	                    }
	                }
	            }
	            function emitDoStatement(node) {
	                write("do");
	                emitEmbeddedStatement(node.statement);
	                if (node.statement.kind === 190) {
	                    write(" ");
	                }
	                else {
	                    writeLine();
	                }
	                write("while (");
	                emit(node.expression);
	                write(");");
	            }
	            function emitWhileStatement(node) {
	                write("while (");
	                emit(node.expression);
	                write(")");
	                emitEmbeddedStatement(node.statement);
	            }
	            function tryEmitStartOfVariableDeclarationList(decl, startPos) {
	                if (shouldHoistVariable(decl, true)) {
	                    return false;
	                }
	                var tokenKind = 100;
	                if (decl && languageVersion >= 2) {
	                    if (ts.isLet(decl)) {
	                        tokenKind = 106;
	                    }
	                    else if (ts.isConst(decl)) {
	                        tokenKind = 72;
	                    }
	                }
	                if (startPos !== undefined) {
	                    emitToken(tokenKind, startPos);
	                    write(" ");
	                }
	                else {
	                    switch (tokenKind) {
	                        case 100:
	                            write("var ");
	                            break;
	                        case 106:
	                            write("let ");
	                            break;
	                        case 72:
	                            write("const ");
	                            break;
	                    }
	                }
	                return true;
	            }
	            function emitVariableDeclarationListSkippingUninitializedEntries(list) {
	                var started = false;
	                for (var _a = 0, _b = list.declarations; _a < _b.length; _a++) {
	                    var decl = _b[_a];
	                    if (!decl.initializer) {
	                        continue;
	                    }
	                    if (!started) {
	                        started = true;
	                    }
	                    else {
	                        write(", ");
	                    }
	                    emit(decl);
	                }
	                return started;
	            }
	            function emitForStatement(node) {
	                var endPos = emitToken(84, node.pos);
	                write(" ");
	                endPos = emitToken(17, endPos);
	                if (node.initializer && node.initializer.kind === 210) {
	                    var variableDeclarationList = node.initializer;
	                    var startIsEmitted = tryEmitStartOfVariableDeclarationList(variableDeclarationList, endPos);
	                    if (startIsEmitted) {
	                        emitCommaList(variableDeclarationList.declarations);
	                    }
	                    else {
	                        emitVariableDeclarationListSkippingUninitializedEntries(variableDeclarationList);
	                    }
	                }
	                else if (node.initializer) {
	                    emit(node.initializer);
	                }
	                write(";");
	                emitOptional(" ", node.condition);
	                write(";");
	                emitOptional(" ", node.incrementor);
	                write(")");
	                emitEmbeddedStatement(node.statement);
	            }
	            function emitForInOrForOfStatement(node) {
	                if (languageVersion < 2 && node.kind === 199) {
	                    return emitDownLevelForOfStatement(node);
	                }
	                var endPos = emitToken(84, node.pos);
	                write(" ");
	                endPos = emitToken(17, endPos);
	                if (node.initializer.kind === 210) {
	                    var variableDeclarationList = node.initializer;
	                    if (variableDeclarationList.declarations.length >= 1) {
	                        tryEmitStartOfVariableDeclarationList(variableDeclarationList, endPos);
	                        emit(variableDeclarationList.declarations[0]);
	                    }
	                }
	                else {
	                    emit(node.initializer);
	                }
	                if (node.kind === 198) {
	                    write(" in ");
	                }
	                else {
	                    write(" of ");
	                }
	                emit(node.expression);
	                emitToken(18, node.expression.end);
	                emitEmbeddedStatement(node.statement);
	            }
	            function emitDownLevelForOfStatement(node) {
	                // The following ES6 code:
	                //
	                //    for (let v of expr) { }
	                //
	                // should be emitted as
	                //
	                //    for (let _i = 0, _a = expr; _i < _a.length; _i++) {
	                //        let v = _a[_i];
	                //    }
	                //
	                // where _a and _i are temps emitted to capture the RHS and the counter,
	                // respectively.
	                // When the left hand side is an expression instead of a let declaration,
	                // the "let v" is not emitted.
	                // When the left hand side is a let/const, the v is renamed if there is
	                // another v in scope.
	                // Note that all assignments to the LHS are emitted in the body, including
	                // all destructuring.
	                // Note also that because an extra statement is needed to assign to the LHS,
	                // for-of bodies are always emitted as blocks.
	                var endPos = emitToken(84, node.pos);
	                write(" ");
	                endPos = emitToken(17, endPos);
	                var rhsIsIdentifier = node.expression.kind === 67;
	                var counter = createTempVariable(268435456);
	                var rhsReference = rhsIsIdentifier ? node.expression : createTempVariable(0);
	                emitStart(node.expression);
	                write("var ");
	                emitNodeWithoutSourceMap(counter);
	                write(" = 0");
	                emitEnd(node.expression);
	                if (!rhsIsIdentifier) {
	                    write(", ");
	                    emitStart(node.expression);
	                    emitNodeWithoutSourceMap(rhsReference);
	                    write(" = ");
	                    emitNodeWithoutSourceMap(node.expression);
	                    emitEnd(node.expression);
	                }
	                write("; ");
	                emitStart(node.initializer);
	                emitNodeWithoutSourceMap(counter);
	                write(" < ");
	                emitNodeWithCommentsAndWithoutSourcemap(rhsReference);
	                write(".length");
	                emitEnd(node.initializer);
	                write("; ");
	                emitStart(node.initializer);
	                emitNodeWithoutSourceMap(counter);
	                write("++");
	                emitEnd(node.initializer);
	                emitToken(18, node.expression.end);
	                write(" {");
	                writeLine();
	                increaseIndent();
	                var rhsIterationValue = createElementAccessExpression(rhsReference, counter);
	                emitStart(node.initializer);
	                if (node.initializer.kind === 210) {
	                    write("var ");
	                    var variableDeclarationList = node.initializer;
	                    if (variableDeclarationList.declarations.length > 0) {
	                        var declaration = variableDeclarationList.declarations[0];
	                        if (ts.isBindingPattern(declaration.name)) {
	                            emitDestructuring(declaration, false, rhsIterationValue);
	                        }
	                        else {
	                            emitNodeWithCommentsAndWithoutSourcemap(declaration);
	                            write(" = ");
	                            emitNodeWithoutSourceMap(rhsIterationValue);
	                        }
	                    }
	                    else {
	                        emitNodeWithoutSourceMap(createTempVariable(0));
	                        write(" = ");
	                        emitNodeWithoutSourceMap(rhsIterationValue);
	                    }
	                }
	                else {
	                    var assignmentExpression = createBinaryExpression(node.initializer, 55, rhsIterationValue, false);
	                    if (node.initializer.kind === 162 || node.initializer.kind === 163) {
	                        emitDestructuring(assignmentExpression, true, undefined);
	                    }
	                    else {
	                        emitNodeWithCommentsAndWithoutSourcemap(assignmentExpression);
	                    }
	                }
	                emitEnd(node.initializer);
	                write(";");
	                if (node.statement.kind === 190) {
	                    emitLines(node.statement.statements);
	                }
	                else {
	                    writeLine();
	                    emit(node.statement);
	                }
	                writeLine();
	                decreaseIndent();
	                write("}");
	            }
	            function emitBreakOrContinueStatement(node) {
	                emitToken(node.kind === 201 ? 68 : 73, node.pos);
	                emitOptional(" ", node.label);
	                write(";");
	            }
	            function emitReturnStatement(node) {
	                emitToken(92, node.pos);
	                emitOptional(" ", node.expression);
	                write(";");
	            }
	            function emitWithStatement(node) {
	                write("with (");
	                emit(node.expression);
	                write(")");
	                emitEmbeddedStatement(node.statement);
	            }
	            function emitSwitchStatement(node) {
	                var endPos = emitToken(94, node.pos);
	                write(" ");
	                emitToken(17, endPos);
	                emit(node.expression);
	                endPos = emitToken(18, node.expression.end);
	                write(" ");
	                emitCaseBlock(node.caseBlock, endPos);
	            }
	            function emitCaseBlock(node, startPos) {
	                emitToken(15, startPos);
	                increaseIndent();
	                emitLines(node.clauses);
	                decreaseIndent();
	                writeLine();
	                emitToken(16, node.clauses.end);
	            }
	            function nodeStartPositionsAreOnSameLine(node1, node2) {
	                return ts.getLineOfLocalPosition(currentSourceFile, ts.skipTrivia(currentSourceFile.text, node1.pos)) ===
	                    ts.getLineOfLocalPosition(currentSourceFile, ts.skipTrivia(currentSourceFile.text, node2.pos));
	            }
	            function nodeEndPositionsAreOnSameLine(node1, node2) {
	                return ts.getLineOfLocalPosition(currentSourceFile, node1.end) ===
	                    ts.getLineOfLocalPosition(currentSourceFile, node2.end);
	            }
	            function nodeEndIsOnSameLineAsNodeStart(node1, node2) {
	                return ts.getLineOfLocalPosition(currentSourceFile, node1.end) ===
	                    ts.getLineOfLocalPosition(currentSourceFile, ts.skipTrivia(currentSourceFile.text, node2.pos));
	            }
	            function emitCaseOrDefaultClause(node) {
	                if (node.kind === 239) {
	                    write("case ");
	                    emit(node.expression);
	                    write(":");
	                }
	                else {
	                    write("default:");
	                }
	                if (node.statements.length === 1 && nodeStartPositionsAreOnSameLine(node, node.statements[0])) {
	                    write(" ");
	                    emit(node.statements[0]);
	                }
	                else {
	                    increaseIndent();
	                    emitLines(node.statements);
	                    decreaseIndent();
	                }
	            }
	            function emitThrowStatement(node) {
	                write("throw ");
	                emit(node.expression);
	                write(";");
	            }
	            function emitTryStatement(node) {
	                write("try ");
	                emit(node.tryBlock);
	                emit(node.catchClause);
	                if (node.finallyBlock) {
	                    writeLine();
	                    write("finally ");
	                    emit(node.finallyBlock);
	                }
	            }
	            function emitCatchClause(node) {
	                writeLine();
	                var endPos = emitToken(70, node.pos);
	                write(" ");
	                emitToken(17, endPos);
	                emit(node.variableDeclaration);
	                emitToken(18, node.variableDeclaration ? node.variableDeclaration.end : endPos);
	                write(" ");
	                emitBlock(node.block);
	            }
	            function emitDebuggerStatement(node) {
	                emitToken(74, node.pos);
	                write(";");
	            }
	            function emitLabelledStatement(node) {
	                emit(node.label);
	                write(": ");
	                emit(node.statement);
	            }
	            function getContainingModule(node) {
	                do {
	                    node = node.parent;
	                } while (node && node.kind !== 216);
	                return node;
	            }
	            function emitContainingModuleName(node) {
	                var container = getContainingModule(node);
	                write(container ? getGeneratedNameForNode(container) : "exports");
	            }
	            function emitModuleMemberName(node) {
	                emitStart(node.name);
	                if (ts.getCombinedNodeFlags(node) & 1) {
	                    var container = getContainingModule(node);
	                    if (container) {
	                        write(getGeneratedNameForNode(container));
	                        write(".");
	                    }
	                    else if (languageVersion < 2 && compilerOptions.module !== 4) {
	                        write("exports.");
	                    }
	                }
	                emitNodeWithCommentsAndWithoutSourcemap(node.name);
	                emitEnd(node.name);
	            }
	            function createVoidZero() {
	                var zero = ts.createSynthesizedNode(8);
	                zero.text = "0";
	                var result = ts.createSynthesizedNode(175);
	                result.expression = zero;
	                return result;
	            }
	            function emitEs6ExportDefaultCompat(node) {
	                if (node.parent.kind === 246) {
	                    ts.Debug.assert(!!(node.flags & 1024) || node.kind === 225);
	                    if (compilerOptions.module === 1 || compilerOptions.module === 2 || compilerOptions.module === 3) {
	                        if (!currentSourceFile.symbol.exports["___esModule"]) {
	                            if (languageVersion === 1) {
	                                write("Object.defineProperty(exports, \"__esModule\", { value: true });");
	                                writeLine();
	                            }
	                            else if (languageVersion === 0) {
	                                write("exports.__esModule = true;");
	                                writeLine();
	                            }
	                        }
	                    }
	                }
	            }
	            function emitExportMemberAssignment(node) {
	                if (node.flags & 1) {
	                    writeLine();
	                    emitStart(node);
	                    if (compilerOptions.module === 4 && node.parent === currentSourceFile) {
	                        write(exportFunctionForFile + "(\"");
	                        if (node.flags & 1024) {
	                            write("default");
	                        }
	                        else {
	                            emitNodeWithCommentsAndWithoutSourcemap(node.name);
	                        }
	                        write("\", ");
	                        emitDeclarationName(node);
	                        write(")");
	                    }
	                    else {
	                        if (node.flags & 1024) {
	                            emitEs6ExportDefaultCompat(node);
	                            if (languageVersion === 0) {
	                                write("exports[\"default\"]");
	                            }
	                            else {
	                                write("exports.default");
	                            }
	                        }
	                        else {
	                            emitModuleMemberName(node);
	                        }
	                        write(" = ");
	                        emitDeclarationName(node);
	                    }
	                    emitEnd(node);
	                    write(";");
	                }
	            }
	            function emitExportMemberAssignments(name) {
	                if (compilerOptions.module === 4) {
	                    return;
	                }
	                if (!exportEquals && exportSpecifiers && ts.hasProperty(exportSpecifiers, name.text)) {
	                    for (var _a = 0, _b = exportSpecifiers[name.text]; _a < _b.length; _a++) {
	                        var specifier = _b[_a];
	                        writeLine();
	                        emitStart(specifier.name);
	                        emitContainingModuleName(specifier);
	                        write(".");
	                        emitNodeWithCommentsAndWithoutSourcemap(specifier.name);
	                        emitEnd(specifier.name);
	                        write(" = ");
	                        emitExpressionIdentifier(name);
	                        write(";");
	                    }
	                }
	            }
	            function emitExportSpecifierInSystemModule(specifier) {
	                ts.Debug.assert(compilerOptions.module === 4);
	                writeLine();
	                emitStart(specifier.name);
	                write(exportFunctionForFile + "(\"");
	                emitNodeWithCommentsAndWithoutSourcemap(specifier.name);
	                write("\", ");
	                emitExpressionIdentifier(specifier.propertyName || specifier.name);
	                write(")");
	                emitEnd(specifier.name);
	                write(";");
	            }
	            function emitDestructuring(root, isAssignmentExpressionStatement, value) {
	                var emitCount = 0;
	                var canDefineTempVariablesInPlace = false;
	                if (root.kind === 209) {
	                    var isExported = ts.getCombinedNodeFlags(root) & 1;
	                    var isSourceLevelForSystemModuleKind = shouldHoistDeclarationInSystemJsModule(root);
	                    canDefineTempVariablesInPlace = !isExported && !isSourceLevelForSystemModuleKind;
	                }
	                else if (root.kind === 136) {
	                    canDefineTempVariablesInPlace = true;
	                }
	                if (root.kind === 179) {
	                    emitAssignmentExpression(root);
	                }
	                else {
	                    ts.Debug.assert(!isAssignmentExpressionStatement);
	                    emitBindingElement(root, value);
	                }
	                function emitAssignment(name, value) {
	                    if (emitCount++) {
	                        write(", ");
	                    }
	                    var isVariableDeclarationOrBindingElement = name.parent && (name.parent.kind === 209 || name.parent.kind === 161);
	                    var exportChanged = isNameOfExportedSourceLevelDeclarationInSystemExternalModule(name);
	                    if (exportChanged) {
	                        write(exportFunctionForFile + "(\"");
	                        emitNodeWithCommentsAndWithoutSourcemap(name);
	                        write("\", ");
	                    }
	                    if (isVariableDeclarationOrBindingElement) {
	                        emitModuleMemberName(name.parent);
	                    }
	                    else {
	                        emit(name);
	                    }
	                    write(" = ");
	                    emit(value);
	                    if (exportChanged) {
	                        write(")");
	                    }
	                }
	                function ensureIdentifier(expr) {
	                    if (expr.kind !== 67) {
	                        var identifier = createTempVariable(0);
	                        if (!canDefineTempVariablesInPlace) {
	                            recordTempDeclaration(identifier);
	                        }
	                        emitAssignment(identifier, expr);
	                        expr = identifier;
	                    }
	                    return expr;
	                }
	                function createDefaultValueCheck(value, defaultValue) {
	                    value = ensureIdentifier(value);
	                    var equals = ts.createSynthesizedNode(179);
	                    equals.left = value;
	                    equals.operatorToken = ts.createSynthesizedNode(32);
	                    equals.right = createVoidZero();
	                    return createConditionalExpression(equals, defaultValue, value);
	                }
	                function createConditionalExpression(condition, whenTrue, whenFalse) {
	                    var cond = ts.createSynthesizedNode(180);
	                    cond.condition = condition;
	                    cond.questionToken = ts.createSynthesizedNode(52);
	                    cond.whenTrue = whenTrue;
	                    cond.colonToken = ts.createSynthesizedNode(53);
	                    cond.whenFalse = whenFalse;
	                    return cond;
	                }
	                function createNumericLiteral(value) {
	                    var node = ts.createSynthesizedNode(8);
	                    node.text = "" + value;
	                    return node;
	                }
	                function createPropertyAccessForDestructuringProperty(object, propName) {
	                    var syntheticName = ts.createSynthesizedNode(propName.kind);
	                    syntheticName.text = propName.text;
	                    if (syntheticName.kind !== 67) {
	                        return createElementAccessExpression(object, syntheticName);
	                    }
	                    return createPropertyAccessExpression(object, syntheticName);
	                }
	                function createSliceCall(value, sliceIndex) {
	                    var call = ts.createSynthesizedNode(166);
	                    var sliceIdentifier = ts.createSynthesizedNode(67);
	                    sliceIdentifier.text = "slice";
	                    call.expression = createPropertyAccessExpression(value, sliceIdentifier);
	                    call.arguments = ts.createSynthesizedNodeArray();
	                    call.arguments[0] = createNumericLiteral(sliceIndex);
	                    return call;
	                }
	                function emitObjectLiteralAssignment(target, value) {
	                    var properties = target.properties;
	                    if (properties.length !== 1) {
	                        value = ensureIdentifier(value);
	                    }
	                    for (var _a = 0; _a < properties.length; _a++) {
	                        var p = properties[_a];
	                        if (p.kind === 243 || p.kind === 244) {
	                            var propName = p.name;
	                            emitDestructuringAssignment(p.initializer || propName, createPropertyAccessForDestructuringProperty(value, propName));
	                        }
	                    }
	                }
	                function emitArrayLiteralAssignment(target, value) {
	                    var elements = target.elements;
	                    if (elements.length !== 1) {
	                        value = ensureIdentifier(value);
	                    }
	                    for (var i = 0; i < elements.length; i++) {
	                        var e = elements[i];
	                        if (e.kind !== 185) {
	                            if (e.kind !== 183) {
	                                emitDestructuringAssignment(e, createElementAccessExpression(value, createNumericLiteral(i)));
	                            }
	                            else if (i === elements.length - 1) {
	                                emitDestructuringAssignment(e.expression, createSliceCall(value, i));
	                            }
	                        }
	                    }
	                }
	                function emitDestructuringAssignment(target, value) {
	                    if (target.kind === 179 && target.operatorToken.kind === 55) {
	                        value = createDefaultValueCheck(value, target.right);
	                        target = target.left;
	                    }
	                    if (target.kind === 163) {
	                        emitObjectLiteralAssignment(target, value);
	                    }
	                    else if (target.kind === 162) {
	                        emitArrayLiteralAssignment(target, value);
	                    }
	                    else {
	                        emitAssignment(target, value);
	                    }
	                }
	                function emitAssignmentExpression(root) {
	                    var target = root.left;
	                    var value = root.right;
	                    if (ts.isEmptyObjectLiteralOrArrayLiteral(target)) {
	                        emit(value);
	                    }
	                    else if (isAssignmentExpressionStatement) {
	                        emitDestructuringAssignment(target, value);
	                    }
	                    else {
	                        if (root.parent.kind !== 170) {
	                            write("(");
	                        }
	                        value = ensureIdentifier(value);
	                        emitDestructuringAssignment(target, value);
	                        write(", ");
	                        emit(value);
	                        if (root.parent.kind !== 170) {
	                            write(")");
	                        }
	                    }
	                }
	                function emitBindingElement(target, value) {
	                    if (target.initializer) {
	                        value = value ? createDefaultValueCheck(value, target.initializer) : target.initializer;
	                    }
	                    else if (!value) {
	                        value = createVoidZero();
	                    }
	                    if (ts.isBindingPattern(target.name)) {
	                        var pattern = target.name;
	                        var elements = pattern.elements;
	                        if (elements.length !== 1) {
	                            value = ensureIdentifier(value);
	                        }
	                        for (var i = 0; i < elements.length; i++) {
	                            var element = elements[i];
	                            if (pattern.kind === 159) {
	                                var propName = element.propertyName || element.name;
	                                emitBindingElement(element, createPropertyAccessForDestructuringProperty(value, propName));
	                            }
	                            else if (element.kind !== 185) {
	                                if (!element.dotDotDotToken) {
	                                    emitBindingElement(element, createElementAccessExpression(value, createNumericLiteral(i)));
	                                }
	                                else if (i === elements.length - 1) {
	                                    emitBindingElement(element, createSliceCall(value, i));
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        emitAssignment(target.name, value);
	                    }
	                }
	            }
	            function emitVariableDeclaration(node) {
	                if (ts.isBindingPattern(node.name)) {
	                    if (languageVersion < 2) {
	                        emitDestructuring(node, false);
	                    }
	                    else {
	                        emit(node.name);
	                        emitOptional(" = ", node.initializer);
	                    }
	                }
	                else {
	                    var initializer = node.initializer;
	                    if (!initializer && languageVersion < 2) {
	                        var isUninitializedLet = (resolver.getNodeCheckFlags(node) & 16384) &&
	                            (getCombinedFlagsForIdentifier(node.name) & 16384);
	                        if (isUninitializedLet &&
	                            node.parent.parent.kind !== 198 &&
	                            node.parent.parent.kind !== 199) {
	                            initializer = createVoidZero();
	                        }
	                    }
	                    var exportChanged = isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node.name);
	                    if (exportChanged) {
	                        write(exportFunctionForFile + "(\"");
	                        emitNodeWithCommentsAndWithoutSourcemap(node.name);
	                        write("\", ");
	                    }
	                    emitModuleMemberName(node);
	                    emitOptional(" = ", initializer);
	                    if (exportChanged) {
	                        write(")");
	                    }
	                }
	            }
	            function emitExportVariableAssignments(node) {
	                if (node.kind === 185) {
	                    return;
	                }
	                var name = node.name;
	                if (name.kind === 67) {
	                    emitExportMemberAssignments(name);
	                }
	                else if (ts.isBindingPattern(name)) {
	                    ts.forEach(name.elements, emitExportVariableAssignments);
	                }
	            }
	            function getCombinedFlagsForIdentifier(node) {
	                if (!node.parent || (node.parent.kind !== 209 && node.parent.kind !== 161)) {
	                    return 0;
	                }
	                return ts.getCombinedNodeFlags(node.parent);
	            }
	            function isES6ExportedDeclaration(node) {
	                return !!(node.flags & 1) &&
	                    languageVersion >= 2 &&
	                    node.parent.kind === 246;
	            }
	            function emitVariableStatement(node) {
	                var startIsEmitted = false;
	                if (node.flags & 1) {
	                    if (isES6ExportedDeclaration(node)) {
	                        write("export ");
	                        startIsEmitted = tryEmitStartOfVariableDeclarationList(node.declarationList);
	                    }
	                }
	                else {
	                    startIsEmitted = tryEmitStartOfVariableDeclarationList(node.declarationList);
	                }
	                if (startIsEmitted) {
	                    emitCommaList(node.declarationList.declarations);
	                    write(";");
	                }
	                else {
	                    var atLeastOneItem = emitVariableDeclarationListSkippingUninitializedEntries(node.declarationList);
	                    if (atLeastOneItem) {
	                        write(";");
	                    }
	                }
	                if (languageVersion < 2 && node.parent === currentSourceFile) {
	                    ts.forEach(node.declarationList.declarations, emitExportVariableAssignments);
	                }
	            }
	            function shouldEmitLeadingAndTrailingCommentsForVariableStatement(node) {
	                if (!(node.flags & 1)) {
	                    return true;
	                }
	                if (isES6ExportedDeclaration(node)) {
	                    return true;
	                }
	                for (var _a = 0, _b = node.declarationList.declarations; _a < _b.length; _a++) {
	                    var declaration = _b[_a];
	                    if (declaration.initializer) {
	                        return true;
	                    }
	                }
	                return false;
	            }
	            function emitParameter(node) {
	                if (languageVersion < 2) {
	                    if (ts.isBindingPattern(node.name)) {
	                        var name_23 = createTempVariable(0);
	                        if (!tempParameters) {
	                            tempParameters = [];
	                        }
	                        tempParameters.push(name_23);
	                        emit(name_23);
	                    }
	                    else {
	                        emit(node.name);
	                    }
	                }
	                else {
	                    if (node.dotDotDotToken) {
	                        write("...");
	                    }
	                    emit(node.name);
	                    emitOptional(" = ", node.initializer);
	                }
	            }
	            function emitDefaultValueAssignments(node) {
	                if (languageVersion < 2) {
	                    var tempIndex = 0;
	                    ts.forEach(node.parameters, function (parameter) {
	                        if (parameter.dotDotDotToken) {
	                            return;
	                        }
	                        var paramName = parameter.name, initializer = parameter.initializer;
	                        if (ts.isBindingPattern(paramName)) {
	                            var hasBindingElements = paramName.elements.length > 0;
	                            if (hasBindingElements || initializer) {
	                                writeLine();
	                                write("var ");
	                                if (hasBindingElements) {
	                                    emitDestructuring(parameter, false, tempParameters[tempIndex]);
	                                }
	                                else {
	                                    emit(tempParameters[tempIndex]);
	                                    write(" = ");
	                                    emit(initializer);
	                                }
	                                write(";");
	                                tempIndex++;
	                            }
	                        }
	                        else if (initializer) {
	                            writeLine();
	                            emitStart(parameter);
	                            write("if (");
	                            emitNodeWithoutSourceMap(paramName);
	                            write(" === void 0)");
	                            emitEnd(parameter);
	                            write(" { ");
	                            emitStart(parameter);
	                            emitNodeWithCommentsAndWithoutSourcemap(paramName);
	                            write(" = ");
	                            emitNodeWithCommentsAndWithoutSourcemap(initializer);
	                            emitEnd(parameter);
	                            write("; }");
	                        }
	                    });
	                }
	            }
	            function emitRestParameter(node) {
	                if (languageVersion < 2 && ts.hasRestParameter(node)) {
	                    var restIndex = node.parameters.length - 1;
	                    var restParam = node.parameters[restIndex];
	                    if (ts.isBindingPattern(restParam.name)) {
	                        return;
	                    }
	                    var tempName = createTempVariable(268435456).text;
	                    writeLine();
	                    emitLeadingComments(restParam);
	                    emitStart(restParam);
	                    write("var ");
	                    emitNodeWithCommentsAndWithoutSourcemap(restParam.name);
	                    write(" = [];");
	                    emitEnd(restParam);
	                    emitTrailingComments(restParam);
	                    writeLine();
	                    write("for (");
	                    emitStart(restParam);
	                    write("var " + tempName + " = " + restIndex + ";");
	                    emitEnd(restParam);
	                    write(" ");
	                    emitStart(restParam);
	                    write(tempName + " < arguments.length;");
	                    emitEnd(restParam);
	                    write(" ");
	                    emitStart(restParam);
	                    write(tempName + "++");
	                    emitEnd(restParam);
	                    write(") {");
	                    increaseIndent();
	                    writeLine();
	                    emitStart(restParam);
	                    emitNodeWithCommentsAndWithoutSourcemap(restParam.name);
	                    write("[" + tempName + " - " + restIndex + "] = arguments[" + tempName + "];");
	                    emitEnd(restParam);
	                    decreaseIndent();
	                    writeLine();
	                    write("}");
	                }
	            }
	            function emitAccessor(node) {
	                write(node.kind === 143 ? "get " : "set ");
	                emit(node.name);
	                emitSignatureAndBody(node);
	            }
	            function shouldEmitAsArrowFunction(node) {
	                return node.kind === 172 && languageVersion >= 2;
	            }
	            function emitDeclarationName(node) {
	                if (node.name) {
	                    emitNodeWithCommentsAndWithoutSourcemap(node.name);
	                }
	                else {
	                    write(getGeneratedNameForNode(node));
	                }
	            }
	            function shouldEmitFunctionName(node) {
	                if (node.kind === 171) {
	                    return !!node.name;
	                }
	                if (node.kind === 211) {
	                    return !!node.name || languageVersion < 2;
	                }
	            }
	            function emitFunctionDeclaration(node) {
	                if (ts.nodeIsMissing(node.body)) {
	                    return emitOnlyPinnedOrTripleSlashComments(node);
	                }
	                if (node.kind !== 141 && node.kind !== 140 &&
	                    node.parent && node.parent.kind !== 243 &&
	                    node.parent.kind !== 166) {
	                    emitLeadingComments(node);
	                }
	                emitStart(node);
	                if (!shouldEmitAsArrowFunction(node)) {
	                    if (isES6ExportedDeclaration(node)) {
	                        write("export ");
	                        if (node.flags & 1024) {
	                            write("default ");
	                        }
	                    }
	                    write("function");
	                    if (languageVersion >= 2 && node.asteriskToken) {
	                        write("*");
	                    }
	                    write(" ");
	                }
	                if (shouldEmitFunctionName(node)) {
	                    emitDeclarationName(node);
	                }
	                emitSignatureAndBody(node);
	                if (languageVersion < 2 && node.kind === 211 && node.parent === currentSourceFile && node.name) {
	                    emitExportMemberAssignments(node.name);
	                }
	                emitEnd(node);
	                if (node.kind !== 141 && node.kind !== 140) {
	                    emitTrailingComments(node);
	                }
	            }
	            function emitCaptureThisForNodeIfNecessary(node) {
	                if (resolver.getNodeCheckFlags(node) & 4) {
	                    writeLine();
	                    emitStart(node);
	                    write("var _this = this;");
	                    emitEnd(node);
	                }
	            }
	            function emitSignatureParameters(node) {
	                increaseIndent();
	                write("(");
	                if (node) {
	                    var parameters = node.parameters;
	                    var omitCount = languageVersion < 2 && ts.hasRestParameter(node) ? 1 : 0;
	                    emitList(parameters, 0, parameters.length - omitCount, false, false);
	                }
	                write(")");
	                decreaseIndent();
	            }
	            function emitSignatureParametersForArrow(node) {
	                if (node.parameters.length === 1 && node.pos === node.parameters[0].pos) {
	                    emit(node.parameters[0]);
	                    return;
	                }
	                emitSignatureParameters(node);
	            }
	            function emitAsyncFunctionBodyForES6(node) {
	                var promiseConstructor = ts.getEntityNameFromTypeNode(node.type);
	                var isArrowFunction = node.kind === 172;
	                var hasLexicalArguments = (resolver.getNodeCheckFlags(node) & 4096) !== 0;
	                var args;
	                if (!isArrowFunction) {
	                    write(" {");
	                    increaseIndent();
	                    writeLine();
	                    write("return");
	                }
	                write(" __awaiter(this");
	                if (hasLexicalArguments) {
	                    write(", arguments");
	                }
	                else {
	                    write(", void 0");
	                }
	                if (promiseConstructor) {
	                    write(", ");
	                    emitNodeWithoutSourceMap(promiseConstructor);
	                }
	                else {
	                    write(", Promise");
	                }
	                if (hasLexicalArguments) {
	                    write(", function* (_arguments)");
	                }
	                else {
	                    write(", function* ()");
	                }
	                emitFunctionBody(node);
	                write(")");
	                if (!isArrowFunction) {
	                    write(";");
	                    decreaseIndent();
	                    writeLine();
	                    write("}");
	                }
	            }
	            function emitFunctionBody(node) {
	                if (!node.body) {
	                    write(" { }");
	                }
	                else {
	                    if (node.body.kind === 190) {
	                        emitBlockFunctionBody(node, node.body);
	                    }
	                    else {
	                        emitExpressionFunctionBody(node, node.body);
	                    }
	                }
	            }
	            function emitSignatureAndBody(node) {
	                var saveTempFlags = tempFlags;
	                var saveTempVariables = tempVariables;
	                var saveTempParameters = tempParameters;
	                tempFlags = 0;
	                tempVariables = undefined;
	                tempParameters = undefined;
	                if (shouldEmitAsArrowFunction(node)) {
	                    emitSignatureParametersForArrow(node);
	                    write(" =>");
	                }
	                else {
	                    emitSignatureParameters(node);
	                }
	                var isAsync = ts.isAsyncFunctionLike(node);
	                if (isAsync && languageVersion === 2) {
	                    emitAsyncFunctionBodyForES6(node);
	                }
	                else {
	                    emitFunctionBody(node);
	                }
	                if (!isES6ExportedDeclaration(node)) {
	                    emitExportMemberAssignment(node);
	                }
	                tempFlags = saveTempFlags;
	                tempVariables = saveTempVariables;
	                tempParameters = saveTempParameters;
	            }
	            function emitFunctionBodyPreamble(node) {
	                emitCaptureThisForNodeIfNecessary(node);
	                emitDefaultValueAssignments(node);
	                emitRestParameter(node);
	            }
	            function emitExpressionFunctionBody(node, body) {
	                if (languageVersion < 2 || node.flags & 512) {
	                    emitDownLevelExpressionFunctionBody(node, body);
	                    return;
	                }
	                write(" ");
	                var current = body;
	                while (current.kind === 169) {
	                    current = current.expression;
	                }
	                emitParenthesizedIf(body, current.kind === 163);
	            }
	            function emitDownLevelExpressionFunctionBody(node, body) {
	                write(" {");
	                scopeEmitStart(node);
	                increaseIndent();
	                var outPos = writer.getTextPos();
	                emitDetachedComments(node.body);
	                emitFunctionBodyPreamble(node);
	                var preambleEmitted = writer.getTextPos() !== outPos;
	                decreaseIndent();
	                if (!preambleEmitted && nodeStartPositionsAreOnSameLine(node, body)) {
	                    write(" ");
	                    emitStart(body);
	                    write("return ");
	                    emit(body);
	                    emitEnd(body);
	                    write(";");
	                    emitTempDeclarations(false);
	                    write(" ");
	                }
	                else {
	                    increaseIndent();
	                    writeLine();
	                    emitLeadingComments(node.body);
	                    write("return ");
	                    emit(body);
	                    write(";");
	                    emitTrailingComments(node.body);
	                    emitTempDeclarations(true);
	                    decreaseIndent();
	                    writeLine();
	                }
	                emitStart(node.body);
	                write("}");
	                emitEnd(node.body);
	                scopeEmitEnd();
	            }
	            function emitBlockFunctionBody(node, body) {
	                write(" {");
	                scopeEmitStart(node);
	                var initialTextPos = writer.getTextPos();
	                increaseIndent();
	                emitDetachedComments(body.statements);
	                var startIndex = emitDirectivePrologues(body.statements, true);
	                emitFunctionBodyPreamble(node);
	                decreaseIndent();
	                var preambleEmitted = writer.getTextPos() !== initialTextPos;
	                if (!preambleEmitted && nodeEndIsOnSameLineAsNodeStart(body, body)) {
	                    for (var _a = 0, _b = body.statements; _a < _b.length; _a++) {
	                        var statement = _b[_a];
	                        write(" ");
	                        emit(statement);
	                    }
	                    emitTempDeclarations(false);
	                    write(" ");
	                    emitLeadingCommentsOfPosition(body.statements.end);
	                }
	                else {
	                    increaseIndent();
	                    emitLinesStartingAt(body.statements, startIndex);
	                    emitTempDeclarations(true);
	                    writeLine();
	                    emitLeadingCommentsOfPosition(body.statements.end);
	                    decreaseIndent();
	                }
	                emitToken(16, body.statements.end);
	                scopeEmitEnd();
	            }
	            function findInitialSuperCall(ctor) {
	                if (ctor.body) {
	                    var statement = ctor.body.statements[0];
	                    if (statement && statement.kind === 193) {
	                        var expr = statement.expression;
	                        if (expr && expr.kind === 166) {
	                            var func = expr.expression;
	                            if (func && func.kind === 93) {
	                                return statement;
	                            }
	                        }
	                    }
	                }
	            }
	            function emitParameterPropertyAssignments(node) {
	                ts.forEach(node.parameters, function (param) {
	                    if (param.flags & 112) {
	                        writeLine();
	                        emitStart(param);
	                        emitStart(param.name);
	                        write("this.");
	                        emitNodeWithoutSourceMap(param.name);
	                        emitEnd(param.name);
	                        write(" = ");
	                        emit(param.name);
	                        write(";");
	                        emitEnd(param);
	                    }
	                });
	            }
	            function emitMemberAccessForPropertyName(memberName) {
	                if (memberName.kind === 9 || memberName.kind === 8) {
	                    write("[");
	                    emitNodeWithCommentsAndWithoutSourcemap(memberName);
	                    write("]");
	                }
	                else if (memberName.kind === 134) {
	                    emitComputedPropertyName(memberName);
	                }
	                else {
	                    write(".");
	                    emitNodeWithCommentsAndWithoutSourcemap(memberName);
	                }
	            }
	            function getInitializedProperties(node, isStatic) {
	                var properties = [];
	                for (var _a = 0, _b = node.members; _a < _b.length; _a++) {
	                    var member = _b[_a];
	                    if (member.kind === 139 && isStatic === ((member.flags & 128) !== 0) && member.initializer) {
	                        properties.push(member);
	                    }
	                }
	                return properties;
	            }
	            function emitPropertyDeclarations(node, properties) {
	                for (var _a = 0; _a < properties.length; _a++) {
	                    var property = properties[_a];
	                    emitPropertyDeclaration(node, property);
	                }
	            }
	            function emitPropertyDeclaration(node, property, receiver, isExpression) {
	                writeLine();
	                emitLeadingComments(property);
	                emitStart(property);
	                emitStart(property.name);
	                if (receiver) {
	                    emit(receiver);
	                }
	                else {
	                    if (property.flags & 128) {
	                        emitDeclarationName(node);
	                    }
	                    else {
	                        write("this");
	                    }
	                }
	                emitMemberAccessForPropertyName(property.name);
	                emitEnd(property.name);
	                write(" = ");
	                emit(property.initializer);
	                if (!isExpression) {
	                    write(";");
	                }
	                emitEnd(property);
	                emitTrailingComments(property);
	            }
	            function emitMemberFunctionsForES5AndLower(node) {
	                ts.forEach(node.members, function (member) {
	                    if (member.kind === 189) {
	                        writeLine();
	                        write(";");
	                    }
	                    else if (member.kind === 141 || node.kind === 140) {
	                        if (!member.body) {
	                            return emitOnlyPinnedOrTripleSlashComments(member);
	                        }
	                        writeLine();
	                        emitLeadingComments(member);
	                        emitStart(member);
	                        emitStart(member.name);
	                        emitClassMemberPrefix(node, member);
	                        emitMemberAccessForPropertyName(member.name);
	                        emitEnd(member.name);
	                        write(" = ");
	                        emitFunctionDeclaration(member);
	                        emitEnd(member);
	                        write(";");
	                        emitTrailingComments(member);
	                    }
	                    else if (member.kind === 143 || member.kind === 144) {
	                        var accessors = ts.getAllAccessorDeclarations(node.members, member);
	                        if (member === accessors.firstAccessor) {
	                            writeLine();
	                            emitStart(member);
	                            write("Object.defineProperty(");
	                            emitStart(member.name);
	                            emitClassMemberPrefix(node, member);
	                            write(", ");
	                            emitExpressionForPropertyName(member.name);
	                            emitEnd(member.name);
	                            write(", {");
	                            increaseIndent();
	                            if (accessors.getAccessor) {
	                                writeLine();
	                                emitLeadingComments(accessors.getAccessor);
	                                write("get: ");
	                                emitStart(accessors.getAccessor);
	                                write("function ");
	                                emitSignatureAndBody(accessors.getAccessor);
	                                emitEnd(accessors.getAccessor);
	                                emitTrailingComments(accessors.getAccessor);
	                                write(",");
	                            }
	                            if (accessors.setAccessor) {
	                                writeLine();
	                                emitLeadingComments(accessors.setAccessor);
	                                write("set: ");
	                                emitStart(accessors.setAccessor);
	                                write("function ");
	                                emitSignatureAndBody(accessors.setAccessor);
	                                emitEnd(accessors.setAccessor);
	                                emitTrailingComments(accessors.setAccessor);
	                                write(",");
	                            }
	                            writeLine();
	                            write("enumerable: true,");
	                            writeLine();
	                            write("configurable: true");
	                            decreaseIndent();
	                            writeLine();
	                            write("});");
	                            emitEnd(member);
	                        }
	                    }
	                });
	            }
	            function emitMemberFunctionsForES6AndHigher(node) {
	                for (var _a = 0, _b = node.members; _a < _b.length; _a++) {
	                    var member = _b[_a];
	                    if ((member.kind === 141 || node.kind === 140) && !member.body) {
	                        emitOnlyPinnedOrTripleSlashComments(member);
	                    }
	                    else if (member.kind === 141 ||
	                        member.kind === 143 ||
	                        member.kind === 144) {
	                        writeLine();
	                        emitLeadingComments(member);
	                        emitStart(member);
	                        if (member.flags & 128) {
	                            write("static ");
	                        }
	                        if (member.kind === 143) {
	                            write("get ");
	                        }
	                        else if (member.kind === 144) {
	                            write("set ");
	                        }
	                        if (member.asteriskToken) {
	                            write("*");
	                        }
	                        emit(member.name);
	                        emitSignatureAndBody(member);
	                        emitEnd(member);
	                        emitTrailingComments(member);
	                    }
	                    else if (member.kind === 189) {
	                        writeLine();
	                        write(";");
	                    }
	                }
	            }
	            function emitConstructor(node, baseTypeElement) {
	                var saveTempFlags = tempFlags;
	                var saveTempVariables = tempVariables;
	                var saveTempParameters = tempParameters;
	                tempFlags = 0;
	                tempVariables = undefined;
	                tempParameters = undefined;
	                emitConstructorWorker(node, baseTypeElement);
	                tempFlags = saveTempFlags;
	                tempVariables = saveTempVariables;
	                tempParameters = saveTempParameters;
	            }
	            function emitConstructorWorker(node, baseTypeElement) {
	                var hasInstancePropertyWithInitializer = false;
	                ts.forEach(node.members, function (member) {
	                    if (member.kind === 142 && !member.body) {
	                        emitOnlyPinnedOrTripleSlashComments(member);
	                    }
	                    if (member.kind === 139 && member.initializer && (member.flags & 128) === 0) {
	                        hasInstancePropertyWithInitializer = true;
	                    }
	                });
	                var ctor = ts.getFirstConstructorWithBody(node);
	                if (languageVersion >= 2 && !ctor && !hasInstancePropertyWithInitializer) {
	                    return;
	                }
	                if (ctor) {
	                    emitLeadingComments(ctor);
	                }
	                emitStart(ctor || node);
	                if (languageVersion < 2) {
	                    write("function ");
	                    emitDeclarationName(node);
	                    emitSignatureParameters(ctor);
	                }
	                else {
	                    write("constructor");
	                    if (ctor) {
	                        emitSignatureParameters(ctor);
	                    }
	                    else {
	                        if (baseTypeElement) {
	                            write("(...args)");
	                        }
	                        else {
	                            write("()");
	                        }
	                    }
	                }
	                var startIndex = 0;
	                write(" {");
	                scopeEmitStart(node, "constructor");
	                increaseIndent();
	                if (ctor) {
	                    startIndex = emitDirectivePrologues(ctor.body.statements, true);
	                    emitDetachedComments(ctor.body.statements);
	                }
	                emitCaptureThisForNodeIfNecessary(node);
	                var superCall;
	                if (ctor) {
	                    emitDefaultValueAssignments(ctor);
	                    emitRestParameter(ctor);
	                    if (baseTypeElement) {
	                        superCall = findInitialSuperCall(ctor);
	                        if (superCall) {
	                            writeLine();
	                            emit(superCall);
	                        }
	                    }
	                    emitParameterPropertyAssignments(ctor);
	                }
	                else {
	                    if (baseTypeElement) {
	                        writeLine();
	                        emitStart(baseTypeElement);
	                        if (languageVersion < 2) {
	                            write("_super.apply(this, arguments);");
	                        }
	                        else {
	                            write("super(...args);");
	                        }
	                        emitEnd(baseTypeElement);
	                    }
	                }
	                emitPropertyDeclarations(node, getInitializedProperties(node, false));
	                if (ctor) {
	                    var statements = ctor.body.statements;
	                    if (superCall) {
	                        statements = statements.slice(1);
	                    }
	                    emitLinesStartingAt(statements, startIndex);
	                }
	                emitTempDeclarations(true);
	                writeLine();
	                if (ctor) {
	                    emitLeadingCommentsOfPosition(ctor.body.statements.end);
	                }
	                decreaseIndent();
	                emitToken(16, ctor ? ctor.body.statements.end : node.members.end);
	                scopeEmitEnd();
	                emitEnd(ctor || node);
	                if (ctor) {
	                    emitTrailingComments(ctor);
	                }
	            }
	            function emitClassExpression(node) {
	                return emitClassLikeDeclaration(node);
	            }
	            function emitClassDeclaration(node) {
	                return emitClassLikeDeclaration(node);
	            }
	            function emitClassLikeDeclaration(node) {
	                if (languageVersion < 2) {
	                    emitClassLikeDeclarationBelowES6(node);
	                }
	                else {
	                    emitClassLikeDeclarationForES6AndHigher(node);
	                }
	            }
	            function emitClassLikeDeclarationForES6AndHigher(node) {
	                var thisNodeIsDecorated = ts.nodeIsDecorated(node);
	                if (node.kind === 212) {
	                    if (thisNodeIsDecorated) {
	                        if (isES6ExportedDeclaration(node) && !(node.flags & 1024)) {
	                            write("export ");
	                        }
	                        write("let ");
	                        emitDeclarationName(node);
	                        write(" = ");
	                    }
	                    else if (isES6ExportedDeclaration(node)) {
	                        write("export ");
	                        if (node.flags & 1024) {
	                            write("default ");
	                        }
	                    }
	                }
	                var staticProperties = getInitializedProperties(node, true);
	                var isClassExpressionWithStaticProperties = staticProperties.length > 0 && node.kind === 184;
	                var tempVariable;
	                if (isClassExpressionWithStaticProperties) {
	                    tempVariable = createAndRecordTempVariable(0);
	                    write("(");
	                    increaseIndent();
	                    emit(tempVariable);
	                    write(" = ");
	                }
	                write("class");
	                if ((node.name || !(node.flags & 1024)) && !thisNodeIsDecorated) {
	                    write(" ");
	                    emitDeclarationName(node);
	                }
	                var baseTypeNode = ts.getClassExtendsHeritageClauseElement(node);
	                if (baseTypeNode) {
	                    write(" extends ");
	                    emit(baseTypeNode.expression);
	                }
	                write(" {");
	                increaseIndent();
	                scopeEmitStart(node);
	                writeLine();
	                emitConstructor(node, baseTypeNode);
	                emitMemberFunctionsForES6AndHigher(node);
	                decreaseIndent();
	                writeLine();
	                emitToken(16, node.members.end);
	                scopeEmitEnd();
	                if (thisNodeIsDecorated) {
	                    write(";");
	                }
	                if (isClassExpressionWithStaticProperties) {
	                    for (var _a = 0; _a < staticProperties.length; _a++) {
	                        var property = staticProperties[_a];
	                        write(",");
	                        writeLine();
	                        emitPropertyDeclaration(node, property, tempVariable, true);
	                    }
	                    write(",");
	                    writeLine();
	                    emit(tempVariable);
	                    decreaseIndent();
	                    write(")");
	                }
	                else {
	                    writeLine();
	                    emitPropertyDeclarations(node, staticProperties);
	                    emitDecoratorsOfClass(node);
	                }
	                if (!isES6ExportedDeclaration(node) && (node.flags & 1)) {
	                    writeLine();
	                    emitStart(node);
	                    emitModuleMemberName(node);
	                    write(" = ");
	                    emitDeclarationName(node);
	                    emitEnd(node);
	                    write(";");
	                }
	                else if (isES6ExportedDeclaration(node) && (node.flags & 1024) && thisNodeIsDecorated) {
	                    writeLine();
	                    write("export default ");
	                    emitDeclarationName(node);
	                    write(";");
	                }
	            }
	            function emitClassLikeDeclarationBelowES6(node) {
	                if (node.kind === 212) {
	                    if (!shouldHoistDeclarationInSystemJsModule(node)) {
	                        write("var ");
	                    }
	                    emitDeclarationName(node);
	                    write(" = ");
	                }
	                write("(function (");
	                var baseTypeNode = ts.getClassExtendsHeritageClauseElement(node);
	                if (baseTypeNode) {
	                    write("_super");
	                }
	                write(") {");
	                var saveTempFlags = tempFlags;
	                var saveTempVariables = tempVariables;
	                var saveTempParameters = tempParameters;
	                var saveComputedPropertyNamesToGeneratedNames = computedPropertyNamesToGeneratedNames;
	                tempFlags = 0;
	                tempVariables = undefined;
	                tempParameters = undefined;
	                computedPropertyNamesToGeneratedNames = undefined;
	                increaseIndent();
	                scopeEmitStart(node);
	                if (baseTypeNode) {
	                    writeLine();
	                    emitStart(baseTypeNode);
	                    write("__extends(");
	                    emitDeclarationName(node);
	                    write(", _super);");
	                    emitEnd(baseTypeNode);
	                }
	                writeLine();
	                emitConstructor(node, baseTypeNode);
	                emitMemberFunctionsForES5AndLower(node);
	                emitPropertyDeclarations(node, getInitializedProperties(node, true));
	                writeLine();
	                emitDecoratorsOfClass(node);
	                writeLine();
	                emitToken(16, node.members.end, function () {
	                    write("return ");
	                    emitDeclarationName(node);
	                });
	                write(";");
	                emitTempDeclarations(true);
	                tempFlags = saveTempFlags;
	                tempVariables = saveTempVariables;
	                tempParameters = saveTempParameters;
	                computedPropertyNamesToGeneratedNames = saveComputedPropertyNamesToGeneratedNames;
	                decreaseIndent();
	                writeLine();
	                emitToken(16, node.members.end);
	                scopeEmitEnd();
	                emitStart(node);
	                write(")(");
	                if (baseTypeNode) {
	                    emit(baseTypeNode.expression);
	                }
	                write(")");
	                if (node.kind === 212) {
	                    write(";");
	                }
	                emitEnd(node);
	                if (node.kind === 212) {
	                    emitExportMemberAssignment(node);
	                }
	                if (languageVersion < 2 && node.parent === currentSourceFile && node.name) {
	                    emitExportMemberAssignments(node.name);
	                }
	            }
	            function emitClassMemberPrefix(node, member) {
	                emitDeclarationName(node);
	                if (!(member.flags & 128)) {
	                    write(".prototype");
	                }
	            }
	            function emitDecoratorsOfClass(node) {
	                emitDecoratorsOfMembers(node, 0);
	                emitDecoratorsOfMembers(node, 128);
	                emitDecoratorsOfConstructor(node);
	            }
	            function emitDecoratorsOfConstructor(node) {
	                var decorators = node.decorators;
	                var constructor = ts.getFirstConstructorWithBody(node);
	                var hasDecoratedParameters = constructor && ts.forEach(constructor.parameters, ts.nodeIsDecorated);
	                if (!decorators && !hasDecoratedParameters) {
	                    return;
	                }
	                writeLine();
	                emitStart(node);
	                emitDeclarationName(node);
	                write(" = __decorate([");
	                increaseIndent();
	                writeLine();
	                var decoratorCount = decorators ? decorators.length : 0;
	                var argumentsWritten = emitList(decorators, 0, decoratorCount, true, false, false, true, function (decorator) {
	                    emitStart(decorator);
	                    emit(decorator.expression);
	                    emitEnd(decorator);
	                });
	                argumentsWritten += emitDecoratorsOfParameters(constructor, argumentsWritten > 0);
	                emitSerializedTypeMetadata(node, argumentsWritten >= 0);
	                decreaseIndent();
	                writeLine();
	                write("], ");
	                emitDeclarationName(node);
	                write(");");
	                emitEnd(node);
	                writeLine();
	            }
	            function emitDecoratorsOfMembers(node, staticFlag) {
	                for (var _a = 0, _b = node.members; _a < _b.length; _a++) {
	                    var member = _b[_a];
	                    if ((member.flags & 128) !== staticFlag) {
	                        continue;
	                    }
	                    if (!ts.nodeCanBeDecorated(member)) {
	                        continue;
	                    }
	                    if (!ts.nodeOrChildIsDecorated(member)) {
	                        continue;
	                    }
	                    var decorators = void 0;
	                    var functionLikeMember = void 0;
	                    if (ts.isAccessor(member)) {
	                        var accessors = ts.getAllAccessorDeclarations(node.members, member);
	                        if (member !== accessors.firstAccessor) {
	                            continue;
	                        }
	                        decorators = accessors.firstAccessor.decorators;
	                        if (!decorators && accessors.secondAccessor) {
	                            decorators = accessors.secondAccessor.decorators;
	                        }
	                        functionLikeMember = accessors.setAccessor;
	                    }
	                    else {
	                        decorators = member.decorators;
	                        if (member.kind === 141) {
	                            functionLikeMember = member;
	                        }
	                    }
	                    writeLine();
	                    emitStart(member);
	                    if (member.kind !== 139) {
	                        write("Object.defineProperty(");
	                        emitStart(member.name);
	                        emitClassMemberPrefix(node, member);
	                        write(", ");
	                        emitExpressionForPropertyName(member.name);
	                        emitEnd(member.name);
	                        write(",");
	                        increaseIndent();
	                        writeLine();
	                    }
	                    write("__decorate([");
	                    increaseIndent();
	                    writeLine();
	                    var decoratorCount = decorators ? decorators.length : 0;
	                    var argumentsWritten = emitList(decorators, 0, decoratorCount, true, false, false, true, function (decorator) {
	                        emitStart(decorator);
	                        emit(decorator.expression);
	                        emitEnd(decorator);
	                    });
	                    argumentsWritten += emitDecoratorsOfParameters(functionLikeMember, argumentsWritten > 0);
	                    emitSerializedTypeMetadata(member, argumentsWritten > 0);
	                    decreaseIndent();
	                    writeLine();
	                    write("], ");
	                    emitStart(member.name);
	                    emitClassMemberPrefix(node, member);
	                    write(", ");
	                    emitExpressionForPropertyName(member.name);
	                    emitEnd(member.name);
	                    if (member.kind !== 139) {
	                        write(", Object.getOwnPropertyDescriptor(");
	                        emitStart(member.name);
	                        emitClassMemberPrefix(node, member);
	                        write(", ");
	                        emitExpressionForPropertyName(member.name);
	                        emitEnd(member.name);
	                        write("))");
	                        decreaseIndent();
	                    }
	                    write(");");
	                    emitEnd(member);
	                    writeLine();
	                }
	            }
	            function emitDecoratorsOfParameters(node, leadingComma) {
	                var argumentsWritten = 0;
	                if (node) {
	                    var parameterIndex = 0;
	                    for (var _a = 0, _b = node.parameters; _a < _b.length; _a++) {
	                        var parameter = _b[_a];
	                        if (ts.nodeIsDecorated(parameter)) {
	                            var decorators = parameter.decorators;
	                            argumentsWritten += emitList(decorators, 0, decorators.length, true, false, leadingComma, true, function (decorator) {
	                                emitStart(decorator);
	                                write("__param(" + parameterIndex + ", ");
	                                emit(decorator.expression);
	                                write(")");
	                                emitEnd(decorator);
	                            });
	                            leadingComma = true;
	                        }
	                        ++parameterIndex;
	                    }
	                }
	                return argumentsWritten;
	            }
	            function shouldEmitTypeMetadata(node) {
	                switch (node.kind) {
	                    case 141:
	                    case 143:
	                    case 144:
	                    case 139:
	                        return true;
	                }
	                return false;
	            }
	            function shouldEmitReturnTypeMetadata(node) {
	                switch (node.kind) {
	                    case 141:
	                        return true;
	                }
	                return false;
	            }
	            function shouldEmitParamTypesMetadata(node) {
	                switch (node.kind) {
	                    case 212:
	                    case 141:
	                    case 144:
	                        return true;
	                }
	                return false;
	            }
	            function emitSerializedTypeOfNode(node) {
	                switch (node.kind) {
	                    case 212:
	                        write("Function");
	                        return;
	                    case 139:
	                        emitSerializedTypeNode(node.type);
	                        return;
	                    case 136:
	                        emitSerializedTypeNode(node.type);
	                        return;
	                    case 143:
	                        emitSerializedTypeNode(node.type);
	                        return;
	                    case 144:
	                        emitSerializedTypeNode(ts.getSetAccessorTypeAnnotationNode(node));
	                        return;
	                }
	                if (ts.isFunctionLike(node)) {
	                    write("Function");
	                    return;
	                }
	                write("void 0");
	            }
	            function emitSerializedTypeNode(node) {
	                if (!node) {
	                    return;
	                }
	                switch (node.kind) {
	                    case 101:
	                        write("void 0");
	                        return;
	                    case 158:
	                        emitSerializedTypeNode(node.type);
	                        return;
	                    case 150:
	                    case 151:
	                        write("Function");
	                        return;
	                    case 154:
	                    case 155:
	                        write("Array");
	                        return;
	                    case 148:
	                    case 118:
	                        write("Boolean");
	                        return;
	                    case 128:
	                    case 9:
	                        write("String");
	                        return;
	                    case 126:
	                        write("Number");
	                        return;
	                    case 129:
	                        write("Symbol");
	                        return;
	                    case 149:
	                        emitSerializedTypeReferenceNode(node);
	                        return;
	                    case 152:
	                    case 153:
	                    case 156:
	                    case 157:
	                    case 115:
	                        break;
	                    default:
	                        ts.Debug.fail("Cannot serialize unexpected type node.");
	                        break;
	                }
	                write("Object");
	            }
	            function emitSerializedTypeReferenceNode(node) {
	                var location = node.parent;
	                while (ts.isDeclaration(location) || ts.isTypeNode(location)) {
	                    location = location.parent;
	                }
	                var typeName = ts.cloneEntityName(node.typeName);
	                typeName.parent = location;
	                var result = resolver.getTypeReferenceSerializationKind(typeName);
	                switch (result) {
	                    case ts.TypeReferenceSerializationKind.Unknown:
	                        var temp = createAndRecordTempVariable(0);
	                        write("(typeof (");
	                        emitNodeWithoutSourceMap(temp);
	                        write(" = ");
	                        emitEntityNameAsExpression(typeName, true);
	                        write(") === 'function' && ");
	                        emitNodeWithoutSourceMap(temp);
	                        write(") || Object");
	                        break;
	                    case ts.TypeReferenceSerializationKind.TypeWithConstructSignatureAndValue:
	                        emitEntityNameAsExpression(typeName, false);
	                        break;
	                    case ts.TypeReferenceSerializationKind.VoidType:
	                        write("void 0");
	                        break;
	                    case ts.TypeReferenceSerializationKind.BooleanType:
	                        write("Boolean");
	                        break;
	                    case ts.TypeReferenceSerializationKind.NumberLikeType:
	                        write("Number");
	                        break;
	                    case ts.TypeReferenceSerializationKind.StringLikeType:
	                        write("String");
	                        break;
	                    case ts.TypeReferenceSerializationKind.ArrayLikeType:
	                        write("Array");
	                        break;
	                    case ts.TypeReferenceSerializationKind.ESSymbolType:
	                        if (languageVersion < 2) {
	                            write("typeof Symbol === 'function' ? Symbol : Object");
	                        }
	                        else {
	                            write("Symbol");
	                        }
	                        break;
	                    case ts.TypeReferenceSerializationKind.TypeWithCallSignature:
	                        write("Function");
	                        break;
	                    case ts.TypeReferenceSerializationKind.ObjectType:
	                        write("Object");
	                        break;
	                }
	            }
	            function emitSerializedParameterTypesOfNode(node) {
	                if (node) {
	                    var valueDeclaration;
	                    if (node.kind === 212) {
	                        valueDeclaration = ts.getFirstConstructorWithBody(node);
	                    }
	                    else if (ts.isFunctionLike(node) && ts.nodeIsPresent(node.body)) {
	                        valueDeclaration = node;
	                    }
	                    if (valueDeclaration) {
	                        var parameters = valueDeclaration.parameters;
	                        var parameterCount = parameters.length;
	                        if (parameterCount > 0) {
	                            for (var i = 0; i < parameterCount; i++) {
	                                if (i > 0) {
	                                    write(", ");
	                                }
	                                if (parameters[i].dotDotDotToken) {
	                                    var parameterType = parameters[i].type;
	                                    if (parameterType.kind === 154) {
	                                        parameterType = parameterType.elementType;
	                                    }
	                                    else if (parameterType.kind === 149 && parameterType.typeArguments && parameterType.typeArguments.length === 1) {
	                                        parameterType = parameterType.typeArguments[0];
	                                    }
	                                    else {
	                                        parameterType = undefined;
	                                    }
	                                    emitSerializedTypeNode(parameterType);
	                                }
	                                else {
	                                    emitSerializedTypeOfNode(parameters[i]);
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	            function emitSerializedReturnTypeOfNode(node) {
	                if (node && ts.isFunctionLike(node) && node.type) {
	                    emitSerializedTypeNode(node.type);
	                    return;
	                }
	                write("void 0");
	            }
	            function emitSerializedTypeMetadata(node, writeComma) {
	                var argumentsWritten = 0;
	                if (compilerOptions.emitDecoratorMetadata) {
	                    if (shouldEmitTypeMetadata(node)) {
	                        if (writeComma) {
	                            write(", ");
	                        }
	                        writeLine();
	                        write("__metadata('design:type', ");
	                        emitSerializedTypeOfNode(node);
	                        write(")");
	                        argumentsWritten++;
	                    }
	                    if (shouldEmitParamTypesMetadata(node)) {
	                        if (writeComma || argumentsWritten) {
	                            write(", ");
	                        }
	                        writeLine();
	                        write("__metadata('design:paramtypes', [");
	                        emitSerializedParameterTypesOfNode(node);
	                        write("])");
	                        argumentsWritten++;
	                    }
	                    if (shouldEmitReturnTypeMetadata(node)) {
	                        if (writeComma || argumentsWritten) {
	                            write(", ");
	                        }
	                        writeLine();
	                        write("__metadata('design:returntype', ");
	                        emitSerializedReturnTypeOfNode(node);
	                        write(")");
	                        argumentsWritten++;
	                    }
	                }
	                return argumentsWritten;
	            }
	            function emitInterfaceDeclaration(node) {
	                emitOnlyPinnedOrTripleSlashComments(node);
	            }
	            function shouldEmitEnumDeclaration(node) {
	                var isConstEnum = ts.isConst(node);
	                return !isConstEnum || compilerOptions.preserveConstEnums || compilerOptions.isolatedModules;
	            }
	            function emitEnumDeclaration(node) {
	                if (!shouldEmitEnumDeclaration(node)) {
	                    return;
	                }
	                if (!shouldHoistDeclarationInSystemJsModule(node)) {
	                    if (!(node.flags & 1) || isES6ExportedDeclaration(node)) {
	                        emitStart(node);
	                        if (isES6ExportedDeclaration(node)) {
	                            write("export ");
	                        }
	                        write("var ");
	                        emit(node.name);
	                        emitEnd(node);
	                        write(";");
	                    }
	                }
	                writeLine();
	                emitStart(node);
	                write("(function (");
	                emitStart(node.name);
	                write(getGeneratedNameForNode(node));
	                emitEnd(node.name);
	                write(") {");
	                increaseIndent();
	                scopeEmitStart(node);
	                emitLines(node.members);
	                decreaseIndent();
	                writeLine();
	                emitToken(16, node.members.end);
	                scopeEmitEnd();
	                write(")(");
	                emitModuleMemberName(node);
	                write(" || (");
	                emitModuleMemberName(node);
	                write(" = {}));");
	                emitEnd(node);
	                if (!isES6ExportedDeclaration(node) && node.flags & 1 && !shouldHoistDeclarationInSystemJsModule(node)) {
	                    writeLine();
	                    emitStart(node);
	                    write("var ");
	                    emit(node.name);
	                    write(" = ");
	                    emitModuleMemberName(node);
	                    emitEnd(node);
	                    write(";");
	                }
	                if (languageVersion < 2 && node.parent === currentSourceFile) {
	                    if (compilerOptions.module === 4 && (node.flags & 1)) {
	                        writeLine();
	                        write(exportFunctionForFile + "(\"");
	                        emitDeclarationName(node);
	                        write("\", ");
	                        emitDeclarationName(node);
	                        write(");");
	                    }
	                    emitExportMemberAssignments(node.name);
	                }
	            }
	            function emitEnumMember(node) {
	                var enumParent = node.parent;
	                emitStart(node);
	                write(getGeneratedNameForNode(enumParent));
	                write("[");
	                write(getGeneratedNameForNode(enumParent));
	                write("[");
	                emitExpressionForPropertyName(node.name);
	                write("] = ");
	                writeEnumMemberDeclarationValue(node);
	                write("] = ");
	                emitExpressionForPropertyName(node.name);
	                emitEnd(node);
	                write(";");
	            }
	            function writeEnumMemberDeclarationValue(member) {
	                var value = resolver.getConstantValue(member);
	                if (value !== undefined) {
	                    write(value.toString());
	                    return;
	                }
	                else if (member.initializer) {
	                    emit(member.initializer);
	                }
	                else {
	                    write("undefined");
	                }
	            }
	            function getInnerMostModuleDeclarationFromDottedModule(moduleDeclaration) {
	                if (moduleDeclaration.body.kind === 216) {
	                    var recursiveInnerModule = getInnerMostModuleDeclarationFromDottedModule(moduleDeclaration.body);
	                    return recursiveInnerModule || moduleDeclaration.body;
	                }
	            }
	            function shouldEmitModuleDeclaration(node) {
	                return ts.isInstantiatedModule(node, compilerOptions.preserveConstEnums || compilerOptions.isolatedModules);
	            }
	            function isModuleMergedWithES6Class(node) {
	                return languageVersion === 2 && !!(resolver.getNodeCheckFlags(node) & 32768);
	            }
	            function emitModuleDeclaration(node) {
	                var shouldEmit = shouldEmitModuleDeclaration(node);
	                if (!shouldEmit) {
	                    return emitOnlyPinnedOrTripleSlashComments(node);
	                }
	                var hoistedInDeclarationScope = shouldHoistDeclarationInSystemJsModule(node);
	                var emitVarForModule = !hoistedInDeclarationScope && !isModuleMergedWithES6Class(node);
	                if (emitVarForModule) {
	                    emitStart(node);
	                    if (isES6ExportedDeclaration(node)) {
	                        write("export ");
	                    }
	                    write("var ");
	                    emit(node.name);
	                    write(";");
	                    emitEnd(node);
	                    writeLine();
	                }
	                emitStart(node);
	                write("(function (");
	                emitStart(node.name);
	                write(getGeneratedNameForNode(node));
	                emitEnd(node.name);
	                write(") ");
	                if (node.body.kind === 217) {
	                    var saveTempFlags = tempFlags;
	                    var saveTempVariables = tempVariables;
	                    tempFlags = 0;
	                    tempVariables = undefined;
	                    emit(node.body);
	                    tempFlags = saveTempFlags;
	                    tempVariables = saveTempVariables;
	                }
	                else {
	                    write("{");
	                    increaseIndent();
	                    scopeEmitStart(node);
	                    emitCaptureThisForNodeIfNecessary(node);
	                    writeLine();
	                    emit(node.body);
	                    decreaseIndent();
	                    writeLine();
	                    var moduleBlock = getInnerMostModuleDeclarationFromDottedModule(node).body;
	                    emitToken(16, moduleBlock.statements.end);
	                    scopeEmitEnd();
	                }
	                write(")(");
	                if ((node.flags & 1) && !isES6ExportedDeclaration(node)) {
	                    emit(node.name);
	                    write(" = ");
	                }
	                emitModuleMemberName(node);
	                write(" || (");
	                emitModuleMemberName(node);
	                write(" = {}));");
	                emitEnd(node);
	                if (!isES6ExportedDeclaration(node) && node.name.kind === 67 && node.parent === currentSourceFile) {
	                    if (compilerOptions.module === 4 && (node.flags & 1)) {
	                        writeLine();
	                        write(exportFunctionForFile + "(\"");
	                        emitDeclarationName(node);
	                        write("\", ");
	                        emitDeclarationName(node);
	                        write(");");
	                    }
	                    emitExportMemberAssignments(node.name);
	                }
	            }
	            function tryRenameExternalModule(moduleName) {
	                if (currentSourceFile.renamedDependencies && ts.hasProperty(currentSourceFile.renamedDependencies, moduleName.text)) {
	                    return "\"" + currentSourceFile.renamedDependencies[moduleName.text] + "\"";
	                }
	                return undefined;
	            }
	            function emitRequire(moduleName) {
	                if (moduleName.kind === 9) {
	                    write("require(");
	                    var text = tryRenameExternalModule(moduleName);
	                    if (text) {
	                        write(text);
	                    }
	                    else {
	                        emitStart(moduleName);
	                        emitLiteral(moduleName);
	                        emitEnd(moduleName);
	                    }
	                    emitToken(18, moduleName.end);
	                }
	                else {
	                    write("require()");
	                }
	            }
	            function getNamespaceDeclarationNode(node) {
	                if (node.kind === 219) {
	                    return node;
	                }
	                var importClause = node.importClause;
	                if (importClause && importClause.namedBindings && importClause.namedBindings.kind === 222) {
	                    return importClause.namedBindings;
	                }
	            }
	            function isDefaultImport(node) {
	                return node.kind === 220 && node.importClause && !!node.importClause.name;
	            }
	            function emitExportImportAssignments(node) {
	                if (ts.isAliasSymbolDeclaration(node) && resolver.isValueAliasDeclaration(node)) {
	                    emitExportMemberAssignments(node.name);
	                }
	                ts.forEachChild(node, emitExportImportAssignments);
	            }
	            function emitImportDeclaration(node) {
	                if (languageVersion < 2) {
	                    return emitExternalImportDeclaration(node);
	                }
	                if (node.importClause) {
	                    var shouldEmitDefaultBindings = resolver.isReferencedAliasDeclaration(node.importClause);
	                    var shouldEmitNamedBindings = node.importClause.namedBindings && resolver.isReferencedAliasDeclaration(node.importClause.namedBindings, true);
	                    if (shouldEmitDefaultBindings || shouldEmitNamedBindings) {
	                        write("import ");
	                        emitStart(node.importClause);
	                        if (shouldEmitDefaultBindings) {
	                            emit(node.importClause.name);
	                            if (shouldEmitNamedBindings) {
	                                write(", ");
	                            }
	                        }
	                        if (shouldEmitNamedBindings) {
	                            emitLeadingComments(node.importClause.namedBindings);
	                            emitStart(node.importClause.namedBindings);
	                            if (node.importClause.namedBindings.kind === 222) {
	                                write("* as ");
	                                emit(node.importClause.namedBindings.name);
	                            }
	                            else {
	                                write("{ ");
	                                emitExportOrImportSpecifierList(node.importClause.namedBindings.elements, resolver.isReferencedAliasDeclaration);
	                                write(" }");
	                            }
	                            emitEnd(node.importClause.namedBindings);
	                            emitTrailingComments(node.importClause.namedBindings);
	                        }
	                        emitEnd(node.importClause);
	                        write(" from ");
	                        emit(node.moduleSpecifier);
	                        write(";");
	                    }
	                }
	                else {
	                    write("import ");
	                    emit(node.moduleSpecifier);
	                    write(";");
	                }
	            }
	            function emitExternalImportDeclaration(node) {
	                if (ts.contains(externalImports, node)) {
	                    var isExportedImport = node.kind === 219 && (node.flags & 1) !== 0;
	                    var namespaceDeclaration = getNamespaceDeclarationNode(node);
	                    if (compilerOptions.module !== 2) {
	                        emitLeadingComments(node);
	                        emitStart(node);
	                        if (namespaceDeclaration && !isDefaultImport(node)) {
	                            if (!isExportedImport)
	                                write("var ");
	                            emitModuleMemberName(namespaceDeclaration);
	                            write(" = ");
	                        }
	                        else {
	                            var isNakedImport = 220 && !node.importClause;
	                            if (!isNakedImport) {
	                                write("var ");
	                                write(getGeneratedNameForNode(node));
	                                write(" = ");
	                            }
	                        }
	                        emitRequire(ts.getExternalModuleName(node));
	                        if (namespaceDeclaration && isDefaultImport(node)) {
	                            write(", ");
	                            emitModuleMemberName(namespaceDeclaration);
	                            write(" = ");
	                            write(getGeneratedNameForNode(node));
	                        }
	                        write(";");
	                        emitEnd(node);
	                        emitExportImportAssignments(node);
	                        emitTrailingComments(node);
	                    }
	                    else {
	                        if (isExportedImport) {
	                            emitModuleMemberName(namespaceDeclaration);
	                            write(" = ");
	                            emit(namespaceDeclaration.name);
	                            write(";");
	                        }
	                        else if (namespaceDeclaration && isDefaultImport(node)) {
	                            write("var ");
	                            emitModuleMemberName(namespaceDeclaration);
	                            write(" = ");
	                            write(getGeneratedNameForNode(node));
	                            write(";");
	                        }
	                        emitExportImportAssignments(node);
	                    }
	                }
	            }
	            function emitImportEqualsDeclaration(node) {
	                if (ts.isExternalModuleImportEqualsDeclaration(node)) {
	                    emitExternalImportDeclaration(node);
	                    return;
	                }
	                if (resolver.isReferencedAliasDeclaration(node) ||
	                    (!ts.isExternalModule(currentSourceFile) && resolver.isTopLevelValueImportEqualsWithEntityName(node))) {
	                    emitLeadingComments(node);
	                    emitStart(node);
	                    var variableDeclarationIsHoisted = shouldHoistVariable(node, true);
	                    var isExported = isSourceFileLevelDeclarationInSystemJsModule(node, true);
	                    if (!variableDeclarationIsHoisted) {
	                        ts.Debug.assert(!isExported);
	                        if (isES6ExportedDeclaration(node)) {
	                            write("export ");
	                            write("var ");
	                        }
	                        else if (!(node.flags & 1)) {
	                            write("var ");
	                        }
	                    }
	                    if (isExported) {
	                        write(exportFunctionForFile + "(\"");
	                        emitNodeWithoutSourceMap(node.name);
	                        write("\", ");
	                    }
	                    emitModuleMemberName(node);
	                    write(" = ");
	                    emit(node.moduleReference);
	                    if (isExported) {
	                        write(")");
	                    }
	                    write(";");
	                    emitEnd(node);
	                    emitExportImportAssignments(node);
	                    emitTrailingComments(node);
	                }
	            }
	            function emitExportDeclaration(node) {
	                ts.Debug.assert(compilerOptions.module !== 4);
	                if (languageVersion < 2) {
	                    if (node.moduleSpecifier && (!node.exportClause || resolver.isValueAliasDeclaration(node))) {
	                        emitStart(node);
	                        var generatedName = getGeneratedNameForNode(node);
	                        if (node.exportClause) {
	                            if (compilerOptions.module !== 2) {
	                                write("var ");
	                                write(generatedName);
	                                write(" = ");
	                                emitRequire(ts.getExternalModuleName(node));
	                                write(";");
	                            }
	                            for (var _a = 0, _b = node.exportClause.elements; _a < _b.length; _a++) {
	                                var specifier = _b[_a];
	                                if (resolver.isValueAliasDeclaration(specifier)) {
	                                    writeLine();
	                                    emitStart(specifier);
	                                    emitContainingModuleName(specifier);
	                                    write(".");
	                                    emitNodeWithCommentsAndWithoutSourcemap(specifier.name);
	                                    write(" = ");
	                                    write(generatedName);
	                                    write(".");
	                                    emitNodeWithCommentsAndWithoutSourcemap(specifier.propertyName || specifier.name);
	                                    write(";");
	                                    emitEnd(specifier);
	                                }
	                            }
	                        }
	                        else {
	                            writeLine();
	                            write("__export(");
	                            if (compilerOptions.module !== 2) {
	                                emitRequire(ts.getExternalModuleName(node));
	                            }
	                            else {
	                                write(generatedName);
	                            }
	                            write(");");
	                        }
	                        emitEnd(node);
	                    }
	                }
	                else {
	                    if (!node.exportClause || resolver.isValueAliasDeclaration(node)) {
	                        write("export ");
	                        if (node.exportClause) {
	                            write("{ ");
	                            emitExportOrImportSpecifierList(node.exportClause.elements, resolver.isValueAliasDeclaration);
	                            write(" }");
	                        }
	                        else {
	                            write("*");
	                        }
	                        if (node.moduleSpecifier) {
	                            write(" from ");
	                            emit(node.moduleSpecifier);
	                        }
	                        write(";");
	                    }
	                }
	            }
	            function emitExportOrImportSpecifierList(specifiers, shouldEmit) {
	                ts.Debug.assert(languageVersion >= 2);
	                var needsComma = false;
	                for (var _a = 0; _a < specifiers.length; _a++) {
	                    var specifier = specifiers[_a];
	                    if (shouldEmit(specifier)) {
	                        if (needsComma) {
	                            write(", ");
	                        }
	                        if (specifier.propertyName) {
	                            emit(specifier.propertyName);
	                            write(" as ");
	                        }
	                        emit(specifier.name);
	                        needsComma = true;
	                    }
	                }
	            }
	            function emitExportAssignment(node) {
	                if (!node.isExportEquals && resolver.isValueAliasDeclaration(node)) {
	                    if (languageVersion >= 2) {
	                        writeLine();
	                        emitStart(node);
	                        write("export default ");
	                        var expression = node.expression;
	                        emit(expression);
	                        if (expression.kind !== 211 &&
	                            expression.kind !== 212) {
	                            write(";");
	                        }
	                        emitEnd(node);
	                    }
	                    else {
	                        writeLine();
	                        emitStart(node);
	                        if (compilerOptions.module === 4) {
	                            write(exportFunctionForFile + "(\"default\",");
	                            emit(node.expression);
	                            write(")");
	                        }
	                        else {
	                            emitEs6ExportDefaultCompat(node);
	                            emitContainingModuleName(node);
	                            if (languageVersion === 0) {
	                                write("[\"default\"] = ");
	                            }
	                            else {
	                                write(".default = ");
	                            }
	                            emit(node.expression);
	                        }
	                        write(";");
	                        emitEnd(node);
	                    }
	                }
	            }
	            function collectExternalModuleInfo(sourceFile) {
	                externalImports = [];
	                exportSpecifiers = {};
	                exportEquals = undefined;
	                hasExportStars = false;
	                for (var _a = 0, _b = sourceFile.statements; _a < _b.length; _a++) {
	                    var node = _b[_a];
	                    switch (node.kind) {
	                        case 220:
	                            if (!node.importClause ||
	                                resolver.isReferencedAliasDeclaration(node.importClause, true)) {
	                                externalImports.push(node);
	                            }
	                            break;
	                        case 219:
	                            if (node.moduleReference.kind === 230 && resolver.isReferencedAliasDeclaration(node)) {
	                                externalImports.push(node);
	                            }
	                            break;
	                        case 226:
	                            if (node.moduleSpecifier) {
	                                if (!node.exportClause) {
	                                    externalImports.push(node);
	                                    hasExportStars = true;
	                                }
	                                else if (resolver.isValueAliasDeclaration(node)) {
	                                    externalImports.push(node);
	                                }
	                            }
	                            else {
	                                for (var _c = 0, _d = node.exportClause.elements; _c < _d.length; _c++) {
	                                    var specifier = _d[_c];
	                                    var name_24 = (specifier.propertyName || specifier.name).text;
	                                    (exportSpecifiers[name_24] || (exportSpecifiers[name_24] = [])).push(specifier);
	                                }
	                            }
	                            break;
	                        case 225:
	                            if (node.isExportEquals && !exportEquals) {
	                                exportEquals = node;
	                            }
	                            break;
	                    }
	                }
	            }
	            function emitExportStarHelper() {
	                if (hasExportStars) {
	                    writeLine();
	                    write("function __export(m) {");
	                    increaseIndent();
	                    writeLine();
	                    write("for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];");
	                    decreaseIndent();
	                    writeLine();
	                    write("}");
	                }
	            }
	            function getLocalNameForExternalImport(node) {
	                var namespaceDeclaration = getNamespaceDeclarationNode(node);
	                if (namespaceDeclaration && !isDefaultImport(node)) {
	                    return ts.getSourceTextOfNodeFromSourceFile(currentSourceFile, namespaceDeclaration.name);
	                }
	                if (node.kind === 220 && node.importClause) {
	                    return getGeneratedNameForNode(node);
	                }
	                if (node.kind === 226 && node.moduleSpecifier) {
	                    return getGeneratedNameForNode(node);
	                }
	            }
	            function getExternalModuleNameText(importNode) {
	                var moduleName = ts.getExternalModuleName(importNode);
	                if (moduleName.kind === 9) {
	                    return tryRenameExternalModule(moduleName) || getLiteralText(moduleName);
	                }
	                return undefined;
	            }
	            function emitVariableDeclarationsForImports() {
	                if (externalImports.length === 0) {
	                    return;
	                }
	                writeLine();
	                var started = false;
	                for (var _a = 0; _a < externalImports.length; _a++) {
	                    var importNode = externalImports[_a];
	                    var skipNode = importNode.kind === 226 ||
	                        (importNode.kind === 220 && !importNode.importClause);
	                    if (skipNode) {
	                        continue;
	                    }
	                    if (!started) {
	                        write("var ");
	                        started = true;
	                    }
	                    else {
	                        write(", ");
	                    }
	                    write(getLocalNameForExternalImport(importNode));
	                }
	                if (started) {
	                    write(";");
	                }
	            }
	            function emitLocalStorageForExportedNamesIfNecessary(exportedDeclarations) {
	                if (!hasExportStars) {
	                    return undefined;
	                }
	                if (!exportedDeclarations && ts.isEmpty(exportSpecifiers)) {
	                    var hasExportDeclarationWithExportClause = false;
	                    for (var _a = 0; _a < externalImports.length; _a++) {
	                        var externalImport = externalImports[_a];
	                        if (externalImport.kind === 226 && externalImport.exportClause) {
	                            hasExportDeclarationWithExportClause = true;
	                            break;
	                        }
	                    }
	                    if (!hasExportDeclarationWithExportClause) {
	                        return emitExportStarFunction(undefined);
	                    }
	                }
	                var exportedNamesStorageRef = makeUniqueName("exportedNames");
	                writeLine();
	                write("var " + exportedNamesStorageRef + " = {");
	                increaseIndent();
	                var started = false;
	                if (exportedDeclarations) {
	                    for (var i = 0; i < exportedDeclarations.length; ++i) {
	                        writeExportedName(exportedDeclarations[i]);
	                    }
	                }
	                if (exportSpecifiers) {
	                    for (var n in exportSpecifiers) {
	                        for (var _b = 0, _c = exportSpecifiers[n]; _b < _c.length; _b++) {
	                            var specifier = _c[_b];
	                            writeExportedName(specifier.name);
	                        }
	                    }
	                }
	                for (var _d = 0; _d < externalImports.length; _d++) {
	                    var externalImport = externalImports[_d];
	                    if (externalImport.kind !== 226) {
	                        continue;
	                    }
	                    var exportDecl = externalImport;
	                    if (!exportDecl.exportClause) {
	                        continue;
	                    }
	                    for (var _e = 0, _f = exportDecl.exportClause.elements; _e < _f.length; _e++) {
	                        var element = _f[_e];
	                        writeExportedName(element.name || element.propertyName);
	                    }
	                }
	                decreaseIndent();
	                writeLine();
	                write("};");
	                return emitExportStarFunction(exportedNamesStorageRef);
	                function emitExportStarFunction(localNames) {
	                    var exportStarFunction = makeUniqueName("exportStar");
	                    writeLine();
	                    write("function " + exportStarFunction + "(m) {");
	                    increaseIndent();
	                    writeLine();
	                    write("var exports = {};");
	                    writeLine();
	                    write("for(var n in m) {");
	                    increaseIndent();
	                    writeLine();
	                    write("if (n !== \"default\"");
	                    if (localNames) {
	                        write("&& !" + localNames + ".hasOwnProperty(n)");
	                    }
	                    write(") exports[n] = m[n];");
	                    decreaseIndent();
	                    writeLine();
	                    write("}");
	                    writeLine();
	                    write(exportFunctionForFile + "(exports);");
	                    decreaseIndent();
	                    writeLine();
	                    write("}");
	                    return exportStarFunction;
	                }
	                function writeExportedName(node) {
	                    if (node.kind !== 67 && node.flags & 1024) {
	                        return;
	                    }
	                    if (started) {
	                        write(",");
	                    }
	                    else {
	                        started = true;
	                    }
	                    writeLine();
	                    write("'");
	                    if (node.kind === 67) {
	                        emitNodeWithCommentsAndWithoutSourcemap(node);
	                    }
	                    else {
	                        emitDeclarationName(node);
	                    }
	                    write("': true");
	                }
	            }
	            function processTopLevelVariableAndFunctionDeclarations(node) {
	                var hoistedVars;
	                var hoistedFunctionDeclarations;
	                var exportedDeclarations;
	                visit(node);
	                if (hoistedVars) {
	                    writeLine();
	                    write("var ");
	                    var seen = {};
	                    for (var i = 0; i < hoistedVars.length; ++i) {
	                        var local = hoistedVars[i];
	                        var name_25 = local.kind === 67
	                            ? local
	                            : local.name;
	                        if (name_25) {
	                            var text = ts.unescapeIdentifier(name_25.text);
	                            if (ts.hasProperty(seen, text)) {
	                                continue;
	                            }
	                            else {
	                                seen[text] = text;
	                            }
	                        }
	                        if (i !== 0) {
	                            write(", ");
	                        }
	                        if (local.kind === 212 || local.kind === 216 || local.kind === 215) {
	                            emitDeclarationName(local);
	                        }
	                        else {
	                            emit(local);
	                        }
	                        var flags = ts.getCombinedNodeFlags(local.kind === 67 ? local.parent : local);
	                        if (flags & 1) {
	                            if (!exportedDeclarations) {
	                                exportedDeclarations = [];
	                            }
	                            exportedDeclarations.push(local);
	                        }
	                    }
	                    write(";");
	                }
	                if (hoistedFunctionDeclarations) {
	                    for (var _a = 0; _a < hoistedFunctionDeclarations.length; _a++) {
	                        var f = hoistedFunctionDeclarations[_a];
	                        writeLine();
	                        emit(f);
	                        if (f.flags & 1) {
	                            if (!exportedDeclarations) {
	                                exportedDeclarations = [];
	                            }
	                            exportedDeclarations.push(f);
	                        }
	                    }
	                }
	                return exportedDeclarations;
	                function visit(node) {
	                    if (node.flags & 2) {
	                        return;
	                    }
	                    if (node.kind === 211) {
	                        if (!hoistedFunctionDeclarations) {
	                            hoistedFunctionDeclarations = [];
	                        }
	                        hoistedFunctionDeclarations.push(node);
	                        return;
	                    }
	                    if (node.kind === 212) {
	                        if (!hoistedVars) {
	                            hoistedVars = [];
	                        }
	                        hoistedVars.push(node);
	                        return;
	                    }
	                    if (node.kind === 215) {
	                        if (shouldEmitEnumDeclaration(node)) {
	                            if (!hoistedVars) {
	                                hoistedVars = [];
	                            }
	                            hoistedVars.push(node);
	                        }
	                        return;
	                    }
	                    if (node.kind === 216) {
	                        if (shouldEmitModuleDeclaration(node)) {
	                            if (!hoistedVars) {
	                                hoistedVars = [];
	                            }
	                            hoistedVars.push(node);
	                        }
	                        return;
	                    }
	                    if (node.kind === 209 || node.kind === 161) {
	                        if (shouldHoistVariable(node, false)) {
	                            var name_26 = node.name;
	                            if (name_26.kind === 67) {
	                                if (!hoistedVars) {
	                                    hoistedVars = [];
	                                }
	                                hoistedVars.push(name_26);
	                            }
	                            else {
	                                ts.forEachChild(name_26, visit);
	                            }
	                        }
	                        return;
	                    }
	                    if (ts.isInternalModuleImportEqualsDeclaration(node)) {
	                        if (!hoistedVars) {
	                            hoistedVars = [];
	                        }
	                        hoistedVars.push(node.name);
	                        return;
	                    }
	                    if (ts.isBindingPattern(node)) {
	                        ts.forEach(node.elements, visit);
	                        return;
	                    }
	                    if (!ts.isDeclaration(node)) {
	                        ts.forEachChild(node, visit);
	                    }
	                }
	            }
	            function shouldHoistVariable(node, checkIfSourceFileLevelDecl) {
	                if (checkIfSourceFileLevelDecl && !shouldHoistDeclarationInSystemJsModule(node)) {
	                    return false;
	                }
	                return (ts.getCombinedNodeFlags(node) & 49152) === 0 ||
	                    ts.getEnclosingBlockScopeContainer(node).kind === 246;
	            }
	            function isCurrentFileSystemExternalModule() {
	                return compilerOptions.module === 4 && ts.isExternalModule(currentSourceFile);
	            }
	            function emitSystemModuleBody(node, dependencyGroups, startIndex) {
	                emitVariableDeclarationsForImports();
	                writeLine();
	                var exportedDeclarations = processTopLevelVariableAndFunctionDeclarations(node);
	                var exportStarFunction = emitLocalStorageForExportedNamesIfNecessary(exportedDeclarations);
	                writeLine();
	                write("return {");
	                increaseIndent();
	                writeLine();
	                emitSetters(exportStarFunction, dependencyGroups);
	                writeLine();
	                emitExecute(node, startIndex);
	                decreaseIndent();
	                writeLine();
	                write("}");
	                emitTempDeclarations(true);
	            }
	            function emitSetters(exportStarFunction, dependencyGroups) {
	                write("setters:[");
	                for (var i = 0; i < dependencyGroups.length; ++i) {
	                    if (i !== 0) {
	                        write(",");
	                    }
	                    writeLine();
	                    increaseIndent();
	                    var group = dependencyGroups[i];
	                    var parameterName = makeUniqueName(ts.forEach(group, getLocalNameForExternalImport) || "");
	                    write("function (" + parameterName + ") {");
	                    increaseIndent();
	                    for (var _a = 0; _a < group.length; _a++) {
	                        var entry = group[_a];
	                        var importVariableName = getLocalNameForExternalImport(entry) || "";
	                        switch (entry.kind) {
	                            case 220:
	                                if (!entry.importClause) {
	                                    break;
	                                }
	                            case 219:
	                                ts.Debug.assert(importVariableName !== "");
	                                writeLine();
	                                write(importVariableName + " = " + parameterName + ";");
	                                writeLine();
	                                break;
	                            case 226:
	                                ts.Debug.assert(importVariableName !== "");
	                                if (entry.exportClause) {
	                                    writeLine();
	                                    write(exportFunctionForFile + "({");
	                                    writeLine();
	                                    increaseIndent();
	                                    for (var i_2 = 0, len = entry.exportClause.elements.length; i_2 < len; ++i_2) {
	                                        if (i_2 !== 0) {
	                                            write(",");
	                                            writeLine();
	                                        }
	                                        var e = entry.exportClause.elements[i_2];
	                                        write("\"");
	                                        emitNodeWithCommentsAndWithoutSourcemap(e.name);
	                                        write("\": " + parameterName + "[\"");
	                                        emitNodeWithCommentsAndWithoutSourcemap(e.propertyName || e.name);
	                                        write("\"]");
	                                    }
	                                    decreaseIndent();
	                                    writeLine();
	                                    write("});");
	                                }
	                                else {
	                                    writeLine();
	                                    write(exportStarFunction + "(" + parameterName + ");");
	                                }
	                                writeLine();
	                                break;
	                        }
	                    }
	                    decreaseIndent();
	                    write("}");
	                    decreaseIndent();
	                }
	                write("],");
	            }
	            function emitExecute(node, startIndex) {
	                write("execute: function() {");
	                increaseIndent();
	                writeLine();
	                for (var i = startIndex; i < node.statements.length; ++i) {
	                    var statement = node.statements[i];
	                    switch (statement.kind) {
	                        case 211:
	                        case 220:
	                            continue;
	                        case 226:
	                            if (!statement.moduleSpecifier) {
	                                for (var _a = 0, _b = statement.exportClause.elements; _a < _b.length; _a++) {
	                                    var element = _b[_a];
	                                    emitExportSpecifierInSystemModule(element);
	                                }
	                            }
	                            continue;
	                        case 219:
	                            if (!ts.isInternalModuleImportEqualsDeclaration(statement)) {
	                                continue;
	                            }
	                        default:
	                            writeLine();
	                            emit(statement);
	                    }
	                }
	                decreaseIndent();
	                writeLine();
	                write("}");
	            }
	            function emitSystemModule(node, startIndex) {
	                collectExternalModuleInfo(node);
	                ts.Debug.assert(!exportFunctionForFile);
	                exportFunctionForFile = makeUniqueName("exports");
	                writeLine();
	                write("System.register(");
	                if (node.moduleName) {
	                    write("\"" + node.moduleName + "\", ");
	                }
	                write("[");
	                var groupIndices = {};
	                var dependencyGroups = [];
	                for (var i = 0; i < externalImports.length; ++i) {
	                    var text = getExternalModuleNameText(externalImports[i]);
	                    if (ts.hasProperty(groupIndices, text)) {
	                        var groupIndex = groupIndices[text];
	                        dependencyGroups[groupIndex].push(externalImports[i]);
	                        continue;
	                    }
	                    else {
	                        groupIndices[text] = dependencyGroups.length;
	                        dependencyGroups.push([externalImports[i]]);
	                    }
	                    if (i !== 0) {
	                        write(", ");
	                    }
	                    write(text);
	                }
	                write("], function(" + exportFunctionForFile + ") {");
	                writeLine();
	                increaseIndent();
	                emitEmitHelpers(node);
	                emitCaptureThisForNodeIfNecessary(node);
	                emitSystemModuleBody(node, dependencyGroups, startIndex);
	                decreaseIndent();
	                writeLine();
	                write("});");
	            }
	            function emitAMDDependencies(node, includeNonAmdDependencies) {
	                // An AMD define function has the following shape:
	                //     define(id?, dependencies?, factory);
	                //
	                // This has the shape of
	                //     define(name, ["module1", "module2"], function (module1Alias) {
	                // The location of the alias in the parameter list in the factory function needs to
	                // match the position of the module name in the dependency list.
	                //
	                // To ensure this is true in cases of modules with no aliases, e.g.:
	                // `import "module"` or `<amd-dependency path= "a.css" />`
	                // we need to add modules without alias names to the end of the dependencies list
	                var aliasedModuleNames = [];
	                var unaliasedModuleNames = [];
	                var importAliasNames = [];
	                for (var _a = 0, _b = node.amdDependencies; _a < _b.length; _a++) {
	                    var amdDependency = _b[_a];
	                    if (amdDependency.name) {
	                        aliasedModuleNames.push("\"" + amdDependency.path + "\"");
	                        importAliasNames.push(amdDependency.name);
	                    }
	                    else {
	                        unaliasedModuleNames.push("\"" + amdDependency.path + "\"");
	                    }
	                }
	                for (var _c = 0; _c < externalImports.length; _c++) {
	                    var importNode = externalImports[_c];
	                    var externalModuleName = getExternalModuleNameText(importNode);
	                    var importAliasName = getLocalNameForExternalImport(importNode);
	                    if (includeNonAmdDependencies && importAliasName) {
	                        aliasedModuleNames.push(externalModuleName);
	                        importAliasNames.push(importAliasName);
	                    }
	                    else {
	                        unaliasedModuleNames.push(externalModuleName);
	                    }
	                }
	                write("[\"require\", \"exports\"");
	                if (aliasedModuleNames.length) {
	                    write(", ");
	                    write(aliasedModuleNames.join(", "));
	                }
	                if (unaliasedModuleNames.length) {
	                    write(", ");
	                    write(unaliasedModuleNames.join(", "));
	                }
	                write("], function (require, exports");
	                if (importAliasNames.length) {
	                    write(", ");
	                    write(importAliasNames.join(", "));
	                }
	            }
	            function emitAMDModule(node, startIndex) {
	                emitEmitHelpers(node);
	                collectExternalModuleInfo(node);
	                writeLine();
	                write("define(");
	                if (node.moduleName) {
	                    write("\"" + node.moduleName + "\", ");
	                }
	                emitAMDDependencies(node, true);
	                write(") {");
	                increaseIndent();
	                emitExportStarHelper();
	                emitCaptureThisForNodeIfNecessary(node);
	                emitLinesStartingAt(node.statements, startIndex);
	                emitTempDeclarations(true);
	                emitExportEquals(true);
	                decreaseIndent();
	                writeLine();
	                write("});");
	            }
	            function emitCommonJSModule(node, startIndex) {
	                emitEmitHelpers(node);
	                collectExternalModuleInfo(node);
	                emitExportStarHelper();
	                emitCaptureThisForNodeIfNecessary(node);
	                emitLinesStartingAt(node.statements, startIndex);
	                emitTempDeclarations(true);
	                emitExportEquals(false);
	            }
	            function emitUMDModule(node, startIndex) {
	                emitEmitHelpers(node);
	                collectExternalModuleInfo(node);
	                writeLines("(function (deps, factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define(deps, factory);\n    }\n})(");
	                emitAMDDependencies(node, false);
	                write(") {");
	                increaseIndent();
	                emitExportStarHelper();
	                emitCaptureThisForNodeIfNecessary(node);
	                emitLinesStartingAt(node.statements, startIndex);
	                emitTempDeclarations(true);
	                emitExportEquals(true);
	                decreaseIndent();
	                writeLine();
	                write("});");
	            }
	            function emitES6Module(node, startIndex) {
	                externalImports = undefined;
	                exportSpecifiers = undefined;
	                exportEquals = undefined;
	                hasExportStars = false;
	                emitEmitHelpers(node);
	                emitCaptureThisForNodeIfNecessary(node);
	                emitLinesStartingAt(node.statements, startIndex);
	                emitTempDeclarations(true);
	            }
	            function emitExportEquals(emitAsReturn) {
	                if (exportEquals && resolver.isValueAliasDeclaration(exportEquals)) {
	                    writeLine();
	                    emitStart(exportEquals);
	                    write(emitAsReturn ? "return " : "module.exports = ");
	                    emit(exportEquals.expression);
	                    write(";");
	                    emitEnd(exportEquals);
	                }
	            }
	            function emitJsxElement(node) {
	                switch (compilerOptions.jsx) {
	                    case 2:
	                        jsxEmitReact(node);
	                        break;
	                    case 1:
	                    default:
	                        jsxEmitPreserve(node);
	                        break;
	                }
	            }
	            function trimReactWhitespaceAndApplyEntities(node) {
	                var result = undefined;
	                var text = ts.getTextOfNode(node, true);
	                var firstNonWhitespace = 0;
	                var lastNonWhitespace = -1;
	                for (var i = 0; i < text.length; i++) {
	                    var c = text.charCodeAt(i);
	                    if (ts.isLineBreak(c)) {
	                        if (firstNonWhitespace !== -1 && (lastNonWhitespace - firstNonWhitespace + 1 > 0)) {
	                            var part = text.substr(firstNonWhitespace, lastNonWhitespace - firstNonWhitespace + 1);
	                            result = (result ? result + "\" + ' ' + \"" : "") + part;
	                        }
	                        firstNonWhitespace = -1;
	                    }
	                    else if (!ts.isWhiteSpace(c)) {
	                        lastNonWhitespace = i;
	                        if (firstNonWhitespace === -1) {
	                            firstNonWhitespace = i;
	                        }
	                    }
	                }
	                if (firstNonWhitespace !== -1) {
	                    var part = text.substr(firstNonWhitespace);
	                    result = (result ? result + "\" + ' ' + \"" : "") + part;
	                }
	                if (result) {
	                    result = result.replace(/&(\w+);/g, function (s, m) {
	                        if (entities[m] !== undefined) {
	                            return String.fromCharCode(entities[m]);
	                        }
	                        else {
	                            return s;
	                        }
	                    });
	                }
	                return result;
	            }
	            function getTextToEmit(node) {
	                switch (compilerOptions.jsx) {
	                    case 2:
	                        var text = trimReactWhitespaceAndApplyEntities(node);
	                        if (text === undefined || text.length === 0) {
	                            return undefined;
	                        }
	                        else {
	                            return text;
	                        }
	                    case 1:
	                    default:
	                        return ts.getTextOfNode(node, true);
	                }
	            }
	            function emitJsxText(node) {
	                switch (compilerOptions.jsx) {
	                    case 2:
	                        write("\"");
	                        write(trimReactWhitespaceAndApplyEntities(node));
	                        write("\"");
	                        break;
	                    case 1:
	                    default:
	                        writer.writeLiteral(ts.getTextOfNode(node, true));
	                        break;
	                }
	            }
	            function emitJsxExpression(node) {
	                if (node.expression) {
	                    switch (compilerOptions.jsx) {
	                        case 1:
	                        default:
	                            write("{");
	                            emit(node.expression);
	                            write("}");
	                            break;
	                        case 2:
	                            emit(node.expression);
	                            break;
	                    }
	                }
	            }
	            function emitDirectivePrologues(statements, startWithNewLine) {
	                for (var i = 0; i < statements.length; ++i) {
	                    if (ts.isPrologueDirective(statements[i])) {
	                        if (startWithNewLine || i > 0) {
	                            writeLine();
	                        }
	                        emit(statements[i]);
	                    }
	                    else {
	                        return i;
	                    }
	                }
	                return statements.length;
	            }
	            function writeLines(text) {
	                var lines = text.split(/\r\n|\r|\n/g);
	                for (var i = 0; i < lines.length; ++i) {
	                    var line = lines[i];
	                    if (line.length) {
	                        writeLine();
	                        write(line);
	                    }
	                }
	            }
	            function emitEmitHelpers(node) {
	                if (!compilerOptions.noEmitHelpers) {
	                    if ((languageVersion < 2) && (!extendsEmitted && resolver.getNodeCheckFlags(node) & 8)) {
	                        writeLines(extendsHelper);
	                        extendsEmitted = true;
	                    }
	                    if (!decorateEmitted && resolver.getNodeCheckFlags(node) & 16) {
	                        writeLines(decorateHelper);
	                        if (compilerOptions.emitDecoratorMetadata) {
	                            writeLines(metadataHelper);
	                        }
	                        decorateEmitted = true;
	                    }
	                    if (!paramEmitted && resolver.getNodeCheckFlags(node) & 32) {
	                        writeLines(paramHelper);
	                        paramEmitted = true;
	                    }
	                    if (!awaiterEmitted && resolver.getNodeCheckFlags(node) & 64) {
	                        writeLines(awaiterHelper);
	                        awaiterEmitted = true;
	                    }
	                }
	            }
	            function emitSourceFileNode(node) {
	                writeLine();
	                emitShebang();
	                emitDetachedComments(node);
	                var startIndex = emitDirectivePrologues(node.statements, false);
	                if (ts.isExternalModule(node) || compilerOptions.isolatedModules) {
	                    if (languageVersion >= 2) {
	                        emitES6Module(node, startIndex);
	                    }
	                    else if (compilerOptions.module === 2) {
	                        emitAMDModule(node, startIndex);
	                    }
	                    else if (compilerOptions.module === 4) {
	                        emitSystemModule(node, startIndex);
	                    }
	                    else if (compilerOptions.module === 3) {
	                        emitUMDModule(node, startIndex);
	                    }
	                    else {
	                        emitCommonJSModule(node, startIndex);
	                    }
	                }
	                else {
	                    externalImports = undefined;
	                    exportSpecifiers = undefined;
	                    exportEquals = undefined;
	                    hasExportStars = false;
	                    emitEmitHelpers(node);
	                    emitCaptureThisForNodeIfNecessary(node);
	                    emitLinesStartingAt(node.statements, startIndex);
	                    emitTempDeclarations(true);
	                }
	                emitLeadingComments(node.endOfFileToken);
	            }
	            function emitNodeWithCommentsAndWithoutSourcemap(node) {
	                emitNodeConsideringCommentsOption(node, emitNodeWithoutSourceMap);
	            }
	            function emitNodeConsideringCommentsOption(node, emitNodeConsideringSourcemap) {
	                if (node) {
	                    if (node.flags & 2) {
	                        return emitOnlyPinnedOrTripleSlashComments(node);
	                    }
	                    if (isSpecializedCommentHandling(node)) {
	                        return emitNodeWithoutSourceMap(node);
	                    }
	                    var emitComments_1 = shouldEmitLeadingAndTrailingComments(node);
	                    if (emitComments_1) {
	                        emitLeadingComments(node);
	                    }
	                    emitNodeConsideringSourcemap(node);
	                    if (emitComments_1) {
	                        emitTrailingComments(node);
	                    }
	                }
	            }
	            function emitNodeWithoutSourceMap(node) {
	                if (node) {
	                    emitJavaScriptWorker(node);
	                }
	            }
	            function isSpecializedCommentHandling(node) {
	                switch (node.kind) {
	                    case 213:
	                    case 211:
	                    case 220:
	                    case 219:
	                    case 214:
	                    case 225:
	                        return true;
	                }
	            }
	            function shouldEmitLeadingAndTrailingComments(node) {
	                switch (node.kind) {
	                    case 191:
	                        return shouldEmitLeadingAndTrailingCommentsForVariableStatement(node);
	                    case 216:
	                        return shouldEmitModuleDeclaration(node);
	                    case 215:
	                        return shouldEmitEnumDeclaration(node);
	                }
	                ts.Debug.assert(!isSpecializedCommentHandling(node));
	                if (node.kind !== 190 &&
	                    node.parent &&
	                    node.parent.kind === 172 &&
	                    node.parent.body === node &&
	                    compilerOptions.target <= 1) {
	                    return false;
	                }
	                return true;
	            }
	            function emitJavaScriptWorker(node) {
	                switch (node.kind) {
	                    case 67:
	                        return emitIdentifier(node);
	                    case 136:
	                        return emitParameter(node);
	                    case 141:
	                    case 140:
	                        return emitMethod(node);
	                    case 143:
	                    case 144:
	                        return emitAccessor(node);
	                    case 95:
	                        return emitThis(node);
	                    case 93:
	                        return emitSuper(node);
	                    case 91:
	                        return write("null");
	                    case 97:
	                        return write("true");
	                    case 82:
	                        return write("false");
	                    case 8:
	                    case 9:
	                    case 10:
	                    case 11:
	                    case 12:
	                    case 13:
	                    case 14:
	                        return emitLiteral(node);
	                    case 181:
	                        return emitTemplateExpression(node);
	                    case 188:
	                        return emitTemplateSpan(node);
	                    case 231:
	                    case 232:
	                        return emitJsxElement(node);
	                    case 234:
	                        return emitJsxText(node);
	                    case 238:
	                        return emitJsxExpression(node);
	                    case 133:
	                        return emitQualifiedName(node);
	                    case 159:
	                        return emitObjectBindingPattern(node);
	                    case 160:
	                        return emitArrayBindingPattern(node);
	                    case 161:
	                        return emitBindingElement(node);
	                    case 162:
	                        return emitArrayLiteral(node);
	                    case 163:
	                        return emitObjectLiteral(node);
	                    case 243:
	                        return emitPropertyAssignment(node);
	                    case 244:
	                        return emitShorthandPropertyAssignment(node);
	                    case 134:
	                        return emitComputedPropertyName(node);
	                    case 164:
	                        return emitPropertyAccess(node);
	                    case 165:
	                        return emitIndexedAccess(node);
	                    case 166:
	                        return emitCallExpression(node);
	                    case 167:
	                        return emitNewExpression(node);
	                    case 168:
	                        return emitTaggedTemplateExpression(node);
	                    case 169:
	                        return emit(node.expression);
	                    case 187:
	                        return emit(node.expression);
	                    case 170:
	                        return emitParenExpression(node);
	                    case 211:
	                    case 171:
	                    case 172:
	                        return emitFunctionDeclaration(node);
	                    case 173:
	                        return emitDeleteExpression(node);
	                    case 174:
	                        return emitTypeOfExpression(node);
	                    case 175:
	                        return emitVoidExpression(node);
	                    case 176:
	                        return emitAwaitExpression(node);
	                    case 177:
	                        return emitPrefixUnaryExpression(node);
	                    case 178:
	                        return emitPostfixUnaryExpression(node);
	                    case 179:
	                        return emitBinaryExpression(node);
	                    case 180:
	                        return emitConditionalExpression(node);
	                    case 183:
	                        return emitSpreadElementExpression(node);
	                    case 182:
	                        return emitYieldExpression(node);
	                    case 185:
	                        return;
	                    case 190:
	                    case 217:
	                        return emitBlock(node);
	                    case 191:
	                        return emitVariableStatement(node);
	                    case 192:
	                        return write(";");
	                    case 193:
	                        return emitExpressionStatement(node);
	                    case 194:
	                        return emitIfStatement(node);
	                    case 195:
	                        return emitDoStatement(node);
	                    case 196:
	                        return emitWhileStatement(node);
	                    case 197:
	                        return emitForStatement(node);
	                    case 199:
	                    case 198:
	                        return emitForInOrForOfStatement(node);
	                    case 200:
	                    case 201:
	                        return emitBreakOrContinueStatement(node);
	                    case 202:
	                        return emitReturnStatement(node);
	                    case 203:
	                        return emitWithStatement(node);
	                    case 204:
	                        return emitSwitchStatement(node);
	                    case 239:
	                    case 240:
	                        return emitCaseOrDefaultClause(node);
	                    case 205:
	                        return emitLabelledStatement(node);
	                    case 206:
	                        return emitThrowStatement(node);
	                    case 207:
	                        return emitTryStatement(node);
	                    case 242:
	                        return emitCatchClause(node);
	                    case 208:
	                        return emitDebuggerStatement(node);
	                    case 209:
	                        return emitVariableDeclaration(node);
	                    case 184:
	                        return emitClassExpression(node);
	                    case 212:
	                        return emitClassDeclaration(node);
	                    case 213:
	                        return emitInterfaceDeclaration(node);
	                    case 215:
	                        return emitEnumDeclaration(node);
	                    case 245:
	                        return emitEnumMember(node);
	                    case 216:
	                        return emitModuleDeclaration(node);
	                    case 220:
	                        return emitImportDeclaration(node);
	                    case 219:
	                        return emitImportEqualsDeclaration(node);
	                    case 226:
	                        return emitExportDeclaration(node);
	                    case 225:
	                        return emitExportAssignment(node);
	                    case 246:
	                        return emitSourceFileNode(node);
	                }
	            }
	            function hasDetachedComments(pos) {
	                return detachedCommentsInfo !== undefined && ts.lastOrUndefined(detachedCommentsInfo).nodePos === pos;
	            }
	            function getLeadingCommentsWithoutDetachedComments() {
	                var leadingComments = ts.getLeadingCommentRanges(currentSourceFile.text, ts.lastOrUndefined(detachedCommentsInfo).detachedCommentEndPos);
	                if (detachedCommentsInfo.length - 1) {
	                    detachedCommentsInfo.pop();
	                }
	                else {
	                    detachedCommentsInfo = undefined;
	                }
	                return leadingComments;
	            }
	            function filterComments(ranges, onlyPinnedOrTripleSlashComments) {
	                if (ranges && onlyPinnedOrTripleSlashComments) {
	                    ranges = ts.filter(ranges, isPinnedOrTripleSlashComment);
	                    if (ranges.length === 0) {
	                        return undefined;
	                    }
	                }
	                return ranges;
	            }
	            function getLeadingCommentsToEmit(node) {
	                if (node.parent) {
	                    if (node.parent.kind === 246 || node.pos !== node.parent.pos) {
	                        if (hasDetachedComments(node.pos)) {
	                            return getLeadingCommentsWithoutDetachedComments();
	                        }
	                        else {
	                            return ts.getLeadingCommentRangesOfNode(node, currentSourceFile);
	                        }
	                    }
	                }
	            }
	            function getTrailingCommentsToEmit(node) {
	                if (node.parent) {
	                    if (node.parent.kind === 246 || node.end !== node.parent.end) {
	                        return ts.getTrailingCommentRanges(currentSourceFile.text, node.end);
	                    }
	                }
	            }
	            function emitOnlyPinnedOrTripleSlashComments(node) {
	                emitLeadingCommentsWorker(node, true);
	            }
	            function emitLeadingComments(node) {
	                return emitLeadingCommentsWorker(node, compilerOptions.removeComments);
	            }
	            function emitLeadingCommentsWorker(node, onlyPinnedOrTripleSlashComments) {
	                var leadingComments = filterComments(getLeadingCommentsToEmit(node), onlyPinnedOrTripleSlashComments);
	                ts.emitNewLineBeforeLeadingComments(currentSourceFile, writer, node, leadingComments);
	                ts.emitComments(currentSourceFile, writer, leadingComments, true, newLine, writeComment);
	            }
	            function emitTrailingComments(node) {
	                var trailingComments = filterComments(getTrailingCommentsToEmit(node), compilerOptions.removeComments);
	                ts.emitComments(currentSourceFile, writer, trailingComments, false, newLine, writeComment);
	            }
	            function emitTrailingCommentsOfPosition(pos) {
	                var trailingComments = filterComments(ts.getTrailingCommentRanges(currentSourceFile.text, pos), compilerOptions.removeComments);
	                ts.emitComments(currentSourceFile, writer, trailingComments, true, newLine, writeComment);
	            }
	            function emitLeadingCommentsOfPosition(pos) {
	                var leadingComments;
	                if (hasDetachedComments(pos)) {
	                    leadingComments = getLeadingCommentsWithoutDetachedComments();
	                }
	                else {
	                    leadingComments = ts.getLeadingCommentRanges(currentSourceFile.text, pos);
	                }
	                leadingComments = filterComments(leadingComments, compilerOptions.removeComments);
	                ts.emitNewLineBeforeLeadingComments(currentSourceFile, writer, { pos: pos, end: pos }, leadingComments);
	                ts.emitComments(currentSourceFile, writer, leadingComments, true, newLine, writeComment);
	            }
	            function emitDetachedComments(node) {
	                var leadingComments = ts.getLeadingCommentRanges(currentSourceFile.text, node.pos);
	                if (leadingComments) {
	                    var detachedComments = [];
	                    var lastComment;
	                    ts.forEach(leadingComments, function (comment) {
	                        if (lastComment) {
	                            var lastCommentLine = ts.getLineOfLocalPosition(currentSourceFile, lastComment.end);
	                            var commentLine = ts.getLineOfLocalPosition(currentSourceFile, comment.pos);
	                            if (commentLine >= lastCommentLine + 2) {
	                                return detachedComments;
	                            }
	                        }
	                        detachedComments.push(comment);
	                        lastComment = comment;
	                    });
	                    if (detachedComments.length) {
	                        var lastCommentLine = ts.getLineOfLocalPosition(currentSourceFile, ts.lastOrUndefined(detachedComments).end);
	                        var nodeLine = ts.getLineOfLocalPosition(currentSourceFile, ts.skipTrivia(currentSourceFile.text, node.pos));
	                        if (nodeLine >= lastCommentLine + 2) {
	                            ts.emitNewLineBeforeLeadingComments(currentSourceFile, writer, node, leadingComments);
	                            ts.emitComments(currentSourceFile, writer, detachedComments, true, newLine, writeComment);
	                            var currentDetachedCommentInfo = { nodePos: node.pos, detachedCommentEndPos: ts.lastOrUndefined(detachedComments).end };
	                            if (detachedCommentsInfo) {
	                                detachedCommentsInfo.push(currentDetachedCommentInfo);
	                            }
	                            else {
	                                detachedCommentsInfo = [currentDetachedCommentInfo];
	                            }
	                        }
	                    }
	                }
	            }
	            function emitShebang() {
	                var shebang = ts.getShebang(currentSourceFile.text);
	                if (shebang) {
	                    write(shebang);
	                }
	            }
	            function isPinnedOrTripleSlashComment(comment) {
	                if (currentSourceFile.text.charCodeAt(comment.pos + 1) === 42) {
	                    return currentSourceFile.text.charCodeAt(comment.pos + 2) === 33;
	                }
	                else if (currentSourceFile.text.charCodeAt(comment.pos + 1) === 47 &&
	                    comment.pos + 2 < comment.end &&
	                    currentSourceFile.text.charCodeAt(comment.pos + 2) === 47 &&
	                    currentSourceFile.text.substring(comment.pos, comment.end).match(ts.fullTripleSlashReferencePathRegEx)) {
	                    return true;
	                }
	            }
	        }
	        function emitFile(jsFilePath, sourceFile) {
	            emitJavaScript(jsFilePath, sourceFile);
	            if (compilerOptions.declaration) {
	                ts.writeDeclarationFile(jsFilePath, sourceFile, host, resolver, diagnostics);
	            }
	        }
	    }
	    ts.emitFiles = emitFiles;
	    var entities = {
	        "quot": 0x0022,
	        "amp": 0x0026,
	        "apos": 0x0027,
	        "lt": 0x003C,
	        "gt": 0x003E,
	        "nbsp": 0x00A0,
	        "iexcl": 0x00A1,
	        "cent": 0x00A2,
	        "pound": 0x00A3,
	        "curren": 0x00A4,
	        "yen": 0x00A5,
	        "brvbar": 0x00A6,
	        "sect": 0x00A7,
	        "uml": 0x00A8,
	        "copy": 0x00A9,
	        "ordf": 0x00AA,
	        "laquo": 0x00AB,
	        "not": 0x00AC,
	        "shy": 0x00AD,
	        "reg": 0x00AE,
	        "macr": 0x00AF,
	        "deg": 0x00B0,
	        "plusmn": 0x00B1,
	        "sup2": 0x00B2,
	        "sup3": 0x00B3,
	        "acute": 0x00B4,
	        "micro": 0x00B5,
	        "para": 0x00B6,
	        "middot": 0x00B7,
	        "cedil": 0x00B8,
	        "sup1": 0x00B9,
	        "ordm": 0x00BA,
	        "raquo": 0x00BB,
	        "frac14": 0x00BC,
	        "frac12": 0x00BD,
	        "frac34": 0x00BE,
	        "iquest": 0x00BF,
	        "Agrave": 0x00C0,
	        "Aacute": 0x00C1,
	        "Acirc": 0x00C2,
	        "Atilde": 0x00C3,
	        "Auml": 0x00C4,
	        "Aring": 0x00C5,
	        "AElig": 0x00C6,
	        "Ccedil": 0x00C7,
	        "Egrave": 0x00C8,
	        "Eacute": 0x00C9,
	        "Ecirc": 0x00CA,
	        "Euml": 0x00CB,
	        "Igrave": 0x00CC,
	        "Iacute": 0x00CD,
	        "Icirc": 0x00CE,
	        "Iuml": 0x00CF,
	        "ETH": 0x00D0,
	        "Ntilde": 0x00D1,
	        "Ograve": 0x00D2,
	        "Oacute": 0x00D3,
	        "Ocirc": 0x00D4,
	        "Otilde": 0x00D5,
	        "Ouml": 0x00D6,
	        "times": 0x00D7,
	        "Oslash": 0x00D8,
	        "Ugrave": 0x00D9,
	        "Uacute": 0x00DA,
	        "Ucirc": 0x00DB,
	        "Uuml": 0x00DC,
	        "Yacute": 0x00DD,
	        "THORN": 0x00DE,
	        "szlig": 0x00DF,
	        "agrave": 0x00E0,
	        "aacute": 0x00E1,
	        "acirc": 0x00E2,
	        "atilde": 0x00E3,
	        "auml": 0x00E4,
	        "aring": 0x00E5,
	        "aelig": 0x00E6,
	        "ccedil": 0x00E7,
	        "egrave": 0x00E8,
	        "eacute": 0x00E9,
	        "ecirc": 0x00EA,
	        "euml": 0x00EB,
	        "igrave": 0x00EC,
	        "iacute": 0x00ED,
	        "icirc": 0x00EE,
	        "iuml": 0x00EF,
	        "eth": 0x00F0,
	        "ntilde": 0x00F1,
	        "ograve": 0x00F2,
	        "oacute": 0x00F3,
	        "ocirc": 0x00F4,
	        "otilde": 0x00F5,
	        "ouml": 0x00F6,
	        "divide": 0x00F7,
	        "oslash": 0x00F8,
	        "ugrave": 0x00F9,
	        "uacute": 0x00FA,
	        "ucirc": 0x00FB,
	        "uuml": 0x00FC,
	        "yacute": 0x00FD,
	        "thorn": 0x00FE,
	        "yuml": 0x00FF,
	        "OElig": 0x0152,
	        "oelig": 0x0153,
	        "Scaron": 0x0160,
	        "scaron": 0x0161,
	        "Yuml": 0x0178,
	        "fnof": 0x0192,
	        "circ": 0x02C6,
	        "tilde": 0x02DC,
	        "Alpha": 0x0391,
	        "Beta": 0x0392,
	        "Gamma": 0x0393,
	        "Delta": 0x0394,
	        "Epsilon": 0x0395,
	        "Zeta": 0x0396,
	        "Eta": 0x0397,
	        "Theta": 0x0398,
	        "Iota": 0x0399,
	        "Kappa": 0x039A,
	        "Lambda": 0x039B,
	        "Mu": 0x039C,
	        "Nu": 0x039D,
	        "Xi": 0x039E,
	        "Omicron": 0x039F,
	        "Pi": 0x03A0,
	        "Rho": 0x03A1,
	        "Sigma": 0x03A3,
	        "Tau": 0x03A4,
	        "Upsilon": 0x03A5,
	        "Phi": 0x03A6,
	        "Chi": 0x03A7,
	        "Psi": 0x03A8,
	        "Omega": 0x03A9,
	        "alpha": 0x03B1,
	        "beta": 0x03B2,
	        "gamma": 0x03B3,
	        "delta": 0x03B4,
	        "epsilon": 0x03B5,
	        "zeta": 0x03B6,
	        "eta": 0x03B7,
	        "theta": 0x03B8,
	        "iota": 0x03B9,
	        "kappa": 0x03BA,
	        "lambda": 0x03BB,
	        "mu": 0x03BC,
	        "nu": 0x03BD,
	        "xi": 0x03BE,
	        "omicron": 0x03BF,
	        "pi": 0x03C0,
	        "rho": 0x03C1,
	        "sigmaf": 0x03C2,
	        "sigma": 0x03C3,
	        "tau": 0x03C4,
	        "upsilon": 0x03C5,
	        "phi": 0x03C6,
	        "chi": 0x03C7,
	        "psi": 0x03C8,
	        "omega": 0x03C9,
	        "thetasym": 0x03D1,
	        "upsih": 0x03D2,
	        "piv": 0x03D6,
	        "ensp": 0x2002,
	        "emsp": 0x2003,
	        "thinsp": 0x2009,
	        "zwnj": 0x200C,
	        "zwj": 0x200D,
	        "lrm": 0x200E,
	        "rlm": 0x200F,
	        "ndash": 0x2013,
	        "mdash": 0x2014,
	        "lsquo": 0x2018,
	        "rsquo": 0x2019,
	        "sbquo": 0x201A,
	        "ldquo": 0x201C,
	        "rdquo": 0x201D,
	        "bdquo": 0x201E,
	        "dagger": 0x2020,
	        "Dagger": 0x2021,
	        "bull": 0x2022,
	        "hellip": 0x2026,
	        "permil": 0x2030,
	        "prime": 0x2032,
	        "Prime": 0x2033,
	        "lsaquo": 0x2039,
	        "rsaquo": 0x203A,
	        "oline": 0x203E,
	        "frasl": 0x2044,
	        "euro": 0x20AC,
	        "image": 0x2111,
	        "weierp": 0x2118,
	        "real": 0x211C,
	        "trade": 0x2122,
	        "alefsym": 0x2135,
	        "larr": 0x2190,
	        "uarr": 0x2191,
	        "rarr": 0x2192,
	        "darr": 0x2193,
	        "harr": 0x2194,
	        "crarr": 0x21B5,
	        "lArr": 0x21D0,
	        "uArr": 0x21D1,
	        "rArr": 0x21D2,
	        "dArr": 0x21D3,
	        "hArr": 0x21D4,
	        "forall": 0x2200,
	        "part": 0x2202,
	        "exist": 0x2203,
	        "empty": 0x2205,
	        "nabla": 0x2207,
	        "isin": 0x2208,
	        "notin": 0x2209,
	        "ni": 0x220B,
	        "prod": 0x220F,
	        "sum": 0x2211,
	        "minus": 0x2212,
	        "lowast": 0x2217,
	        "radic": 0x221A,
	        "prop": 0x221D,
	        "infin": 0x221E,
	        "ang": 0x2220,
	        "and": 0x2227,
	        "or": 0x2228,
	        "cap": 0x2229,
	        "cup": 0x222A,
	        "int": 0x222B,
	        "there4": 0x2234,
	        "sim": 0x223C,
	        "cong": 0x2245,
	        "asymp": 0x2248,
	        "ne": 0x2260,
	        "equiv": 0x2261,
	        "le": 0x2264,
	        "ge": 0x2265,
	        "sub": 0x2282,
	        "sup": 0x2283,
	        "nsub": 0x2284,
	        "sube": 0x2286,
	        "supe": 0x2287,
	        "oplus": 0x2295,
	        "otimes": 0x2297,
	        "perp": 0x22A5,
	        "sdot": 0x22C5,
	        "lceil": 0x2308,
	        "rceil": 0x2309,
	        "lfloor": 0x230A,
	        "rfloor": 0x230B,
	        "lang": 0x2329,
	        "rang": 0x232A,
	        "loz": 0x25CA,
	        "spades": 0x2660,
	        "clubs": 0x2663,
	        "hearts": 0x2665,
	        "diams": 0x2666
	    };
	})(ts || (ts = {}));
	/// <reference path="sys.ts" />
	/// <reference path="emitter.ts" />
	/// <reference path="core.ts" />
	var ts;
	(function (ts) {
	    ts.programTime = 0;
	    ts.emitTime = 0;
	    ts.ioReadTime = 0;
	    ts.ioWriteTime = 0;
	    var emptyArray = [];
	    ts.version = "1.6.0-beta";
	    function findConfigFile(searchPath) {
	        var fileName = "tsconfig.json";
	        while (true) {
	            if (ts.sys.fileExists(fileName)) {
	                return fileName;
	            }
	            var parentPath = ts.getDirectoryPath(searchPath);
	            if (parentPath === searchPath) {
	                break;
	            }
	            searchPath = parentPath;
	            fileName = "../" + fileName;
	        }
	        return undefined;
	    }
	    ts.findConfigFile = findConfigFile;
	    function resolveTripleslashReference(moduleName, containingFile) {
	        var basePath = ts.getDirectoryPath(containingFile);
	        var referencedFileName = ts.isRootedDiskPath(moduleName) ? moduleName : ts.combinePaths(basePath, moduleName);
	        return ts.normalizePath(referencedFileName);
	    }
	    ts.resolveTripleslashReference = resolveTripleslashReference;
	    function resolveModuleName(moduleName, containingFile, compilerOptions, host) {
	        var moduleResolution = compilerOptions.moduleResolution !== undefined
	            ? compilerOptions.moduleResolution
	            : compilerOptions.module === 1 ? 2 : 1;
	        switch (moduleResolution) {
	            case 2: return nodeModuleNameResolver(moduleName, containingFile, host);
	            case 1: return classicNameResolver(moduleName, containingFile, compilerOptions, host);
	        }
	    }
	    ts.resolveModuleName = resolveModuleName;
	    function nodeModuleNameResolver(moduleName, containingFile, host) {
	        var containingDirectory = ts.getDirectoryPath(containingFile);
	        if (ts.getRootLength(moduleName) !== 0 || nameStartsWithDotSlashOrDotDotSlash(moduleName)) {
	            var failedLookupLocations = [];
	            var candidate = ts.normalizePath(ts.combinePaths(containingDirectory, moduleName));
	            var resolvedFileName = loadNodeModuleFromFile(candidate, false, failedLookupLocations, host);
	            if (resolvedFileName) {
	                return { resolvedFileName: resolvedFileName, failedLookupLocations: failedLookupLocations };
	            }
	            resolvedFileName = loadNodeModuleFromDirectory(candidate, false, failedLookupLocations, host);
	            return { resolvedFileName: resolvedFileName, failedLookupLocations: failedLookupLocations };
	        }
	        else {
	            return loadModuleFromNodeModules(moduleName, containingDirectory, host);
	        }
	    }
	    ts.nodeModuleNameResolver = nodeModuleNameResolver;
	    function loadNodeModuleFromFile(candidate, loadOnlyDts, failedLookupLocation, host) {
	        if (loadOnlyDts) {
	            return tryLoad(".d.ts");
	        }
	        else {
	            return ts.forEach(ts.supportedExtensions, tryLoad);
	        }
	        function tryLoad(ext) {
	            var fileName = ts.fileExtensionIs(candidate, ext) ? candidate : candidate + ext;
	            if (host.fileExists(fileName)) {
	                return fileName;
	            }
	            else {
	                failedLookupLocation.push(fileName);
	                return undefined;
	            }
	        }
	    }
	    function loadNodeModuleFromDirectory(candidate, loadOnlyDts, failedLookupLocation, host) {
	        var packageJsonPath = ts.combinePaths(candidate, "package.json");
	        if (host.fileExists(packageJsonPath)) {
	            var jsonContent;
	            try {
	                var jsonText = host.readFile(packageJsonPath);
	                jsonContent = jsonText ? JSON.parse(jsonText) : { typings: undefined };
	            }
	            catch (e) {
	                jsonContent = { typings: undefined };
	            }
	            if (jsonContent.typings) {
	                var result = loadNodeModuleFromFile(ts.normalizePath(ts.combinePaths(candidate, jsonContent.typings)), loadOnlyDts, failedLookupLocation, host);
	                if (result) {
	                    return result;
	                }
	            }
	        }
	        else {
	            failedLookupLocation.push(packageJsonPath);
	        }
	        return loadNodeModuleFromFile(ts.combinePaths(candidate, "index"), loadOnlyDts, failedLookupLocation, host);
	    }
	    function loadModuleFromNodeModules(moduleName, directory, host) {
	        var failedLookupLocations = [];
	        directory = ts.normalizeSlashes(directory);
	        while (true) {
	            var baseName = ts.getBaseFileName(directory);
	            if (baseName !== "node_modules") {
	                var nodeModulesFolder = ts.combinePaths(directory, "node_modules");
	                var candidate = ts.normalizePath(ts.combinePaths(nodeModulesFolder, moduleName));
	                var result = loadNodeModuleFromFile(candidate, true, failedLookupLocations, host);
	                if (result) {
	                    return { resolvedFileName: result, failedLookupLocations: failedLookupLocations };
	                }
	                result = loadNodeModuleFromDirectory(candidate, true, failedLookupLocations, host);
	                if (result) {
	                    return { resolvedFileName: result, failedLookupLocations: failedLookupLocations };
	                }
	            }
	            var parentPath = ts.getDirectoryPath(directory);
	            if (parentPath === directory) {
	                break;
	            }
	            directory = parentPath;
	        }
	        return { resolvedFileName: undefined, failedLookupLocations: failedLookupLocations };
	    }
	    function baseUrlModuleNameResolver(moduleName, containingFile, baseUrl, host) {
	        ts.Debug.assert(baseUrl !== undefined);
	        var normalizedModuleName = ts.normalizeSlashes(moduleName);
	        var basePart = useBaseUrl(moduleName) ? baseUrl : ts.getDirectoryPath(containingFile);
	        var candidate = ts.normalizePath(ts.combinePaths(basePart, moduleName));
	        var failedLookupLocations = [];
	        return ts.forEach(ts.supportedExtensions, function (ext) { return tryLoadFile(candidate + ext); }) || { resolvedFileName: undefined, failedLookupLocations: failedLookupLocations };
	        function tryLoadFile(location) {
	            if (host.fileExists(location)) {
	                return { resolvedFileName: location, failedLookupLocations: failedLookupLocations };
	            }
	            else {
	                failedLookupLocations.push(location);
	                return undefined;
	            }
	        }
	    }
	    ts.baseUrlModuleNameResolver = baseUrlModuleNameResolver;
	    function nameStartsWithDotSlashOrDotDotSlash(name) {
	        var i = name.lastIndexOf("./", 1);
	        return i === 0 || (i === 1 && name.charCodeAt(0) === 46);
	    }
	    function useBaseUrl(moduleName) {
	        return ts.getRootLength(moduleName) === 0 && !nameStartsWithDotSlashOrDotDotSlash(moduleName);
	    }
	    function classicNameResolver(moduleName, containingFile, compilerOptions, host) {
	        if (moduleName.indexOf('!') != -1) {
	            return { resolvedFileName: undefined, failedLookupLocations: [] };
	        }
	        var searchPath = ts.getDirectoryPath(containingFile);
	        var searchName;
	        var failedLookupLocations = [];
	        var referencedSourceFile;
	        while (true) {
	            searchName = ts.normalizePath(ts.combinePaths(searchPath, moduleName));
	            referencedSourceFile = ts.forEach(ts.supportedExtensions, function (extension) {
	                if (extension === ".tsx" && !compilerOptions.jsx) {
	                    return undefined;
	                }
	                var candidate = searchName + extension;
	                if (host.fileExists(candidate)) {
	                    return candidate;
	                }
	                else {
	                    failedLookupLocations.push(candidate);
	                }
	            });
	            if (referencedSourceFile) {
	                break;
	            }
	            var parentPath = ts.getDirectoryPath(searchPath);
	            if (parentPath === searchPath) {
	                break;
	            }
	            searchPath = parentPath;
	        }
	        return { resolvedFileName: referencedSourceFile, failedLookupLocations: failedLookupLocations };
	    }
	    ts.classicNameResolver = classicNameResolver;
	    ts.defaultInitCompilerOptions = {
	        module: 1,
	        target: 0,
	        noImplicitAny: false,
	        outDir: "built",
	        rootDir: ".",
	        sourceMap: false
	    };
	    function createCompilerHost(options, setParentNodes) {
	        var currentDirectory;
	        var existingDirectories = {};
	        function getCanonicalFileName(fileName) {
	            return ts.sys.useCaseSensitiveFileNames ? fileName : fileName.toLowerCase();
	        }
	        var unsupportedFileEncodingErrorCode = -2147024809;
	        function getSourceFile(fileName, languageVersion, onError) {
	            var text;
	            try {
	                var start = new Date().getTime();
	                text = ts.sys.readFile(fileName, options.charset);
	                ts.ioReadTime += new Date().getTime() - start;
	            }
	            catch (e) {
	                if (onError) {
	                    onError(e.number === unsupportedFileEncodingErrorCode
	                        ? ts.createCompilerDiagnostic(ts.Diagnostics.Unsupported_file_encoding).messageText
	                        : e.message);
	                }
	                text = "";
	            }
	            return text !== undefined ? ts.createSourceFile(fileName, text, languageVersion, setParentNodes) : undefined;
	        }
	        function directoryExists(directoryPath) {
	            if (ts.hasProperty(existingDirectories, directoryPath)) {
	                return true;
	            }
	            if (ts.sys.directoryExists(directoryPath)) {
	                existingDirectories[directoryPath] = true;
	                return true;
	            }
	            return false;
	        }
	        function ensureDirectoriesExist(directoryPath) {
	            if (directoryPath.length > ts.getRootLength(directoryPath) && !directoryExists(directoryPath)) {
	                var parentDirectory = ts.getDirectoryPath(directoryPath);
	                ensureDirectoriesExist(parentDirectory);
	                ts.sys.createDirectory(directoryPath);
	            }
	        }
	        function writeFile(fileName, data, writeByteOrderMark, onError) {
	            try {
	                var start = new Date().getTime();
	                ensureDirectoriesExist(ts.getDirectoryPath(ts.normalizePath(fileName)));
	                ts.sys.writeFile(fileName, data, writeByteOrderMark);
	                ts.ioWriteTime += new Date().getTime() - start;
	            }
	            catch (e) {
	                if (onError) {
	                    onError(e.message);
	                }
	            }
	        }
	        var newLine = ts.getNewLineCharacter(options);
	        return {
	            getSourceFile: getSourceFile,
	            getDefaultLibFileName: function (options) { return ts.combinePaths(ts.getDirectoryPath(ts.normalizePath(ts.sys.getExecutingFilePath())), ts.getDefaultLibFileName(options)); },
	            writeFile: writeFile,
	            getCurrentDirectory: function () { return currentDirectory || (currentDirectory = ts.sys.getCurrentDirectory()); },
	            useCaseSensitiveFileNames: function () { return ts.sys.useCaseSensitiveFileNames; },
	            getCanonicalFileName: getCanonicalFileName,
	            getNewLine: function () { return newLine; },
	            fileExists: function (fileName) { return ts.sys.fileExists(fileName); },
	            readFile: function (fileName) { return ts.sys.readFile(fileName); }
	        };
	    }
	    ts.createCompilerHost = createCompilerHost;
	    function getPreEmitDiagnostics(program, sourceFile, cancellationToken) {
	        var diagnostics = program.getOptionsDiagnostics(cancellationToken).concat(program.getSyntacticDiagnostics(sourceFile, cancellationToken), program.getGlobalDiagnostics(cancellationToken), program.getSemanticDiagnostics(sourceFile, cancellationToken));
	        if (program.getCompilerOptions().declaration) {
	            diagnostics.concat(program.getDeclarationDiagnostics(sourceFile, cancellationToken));
	        }
	        return ts.sortAndDeduplicateDiagnostics(diagnostics);
	    }
	    ts.getPreEmitDiagnostics = getPreEmitDiagnostics;
	    function flattenDiagnosticMessageText(messageText, newLine) {
	        if (typeof messageText === "string") {
	            return messageText;
	        }
	        else {
	            var diagnosticChain = messageText;
	            var result = "";
	            var indent = 0;
	            while (diagnosticChain) {
	                if (indent) {
	                    result += newLine;
	                    for (var i = 0; i < indent; i++) {
	                        result += "  ";
	                    }
	                }
	                result += diagnosticChain.messageText;
	                indent++;
	                diagnosticChain = diagnosticChain.next;
	            }
	            return result;
	        }
	    }
	    ts.flattenDiagnosticMessageText = flattenDiagnosticMessageText;
	    function createProgram(rootNames, options, host, oldProgram) {
	        var program;
	        var files = [];
	        var diagnostics = ts.createDiagnosticCollection();
	        var commonSourceDirectory;
	        var diagnosticsProducingTypeChecker;
	        var noDiagnosticsTypeChecker;
	        var classifiableNames;
	        var skipDefaultLib = options.noLib;
	        var start = new Date().getTime();
	        host = host || createCompilerHost(options);
	        var resolveModuleNamesWorker = host.resolveModuleNames ||
	            (function (moduleNames, containingFile) { return ts.map(moduleNames, function (moduleName) { return resolveModuleName(moduleName, containingFile, options, host).resolvedFileName; }); });
	        var filesByName = ts.createFileMap(function (fileName) { return host.getCanonicalFileName(fileName); });
	        if (oldProgram) {
	            var oldOptions = oldProgram.getCompilerOptions();
	            if ((oldOptions.module !== options.module) ||
	                (oldOptions.noResolve !== options.noResolve) ||
	                (oldOptions.target !== options.target) ||
	                (oldOptions.noLib !== options.noLib) ||
	                (oldOptions.jsx !== options.jsx)) {
	                oldProgram = undefined;
	            }
	        }
	        if (!tryReuseStructureFromOldProgram()) {
	            ts.forEach(rootNames, function (name) { return processRootFile(name, false); });
	            if (!skipDefaultLib) {
	                processRootFile(host.getDefaultLibFileName(options), true);
	            }
	        }
	        verifyCompilerOptions();
	        oldProgram = undefined;
	        ts.programTime += new Date().getTime() - start;
	        program = {
	            getRootFileNames: function () { return rootNames; },
	            getSourceFile: getSourceFile,
	            getSourceFiles: function () { return files; },
	            getCompilerOptions: function () { return options; },
	            getSyntacticDiagnostics: getSyntacticDiagnostics,
	            getOptionsDiagnostics: getOptionsDiagnostics,
	            getGlobalDiagnostics: getGlobalDiagnostics,
	            getSemanticDiagnostics: getSemanticDiagnostics,
	            getDeclarationDiagnostics: getDeclarationDiagnostics,
	            getTypeChecker: getTypeChecker,
	            getClassifiableNames: getClassifiableNames,
	            getDiagnosticsProducingTypeChecker: getDiagnosticsProducingTypeChecker,
	            getCommonSourceDirectory: function () { return commonSourceDirectory; },
	            emit: emit,
	            getCurrentDirectory: function () { return host.getCurrentDirectory(); },
	            getNodeCount: function () { return getDiagnosticsProducingTypeChecker().getNodeCount(); },
	            getIdentifierCount: function () { return getDiagnosticsProducingTypeChecker().getIdentifierCount(); },
	            getSymbolCount: function () { return getDiagnosticsProducingTypeChecker().getSymbolCount(); },
	            getTypeCount: function () { return getDiagnosticsProducingTypeChecker().getTypeCount(); }
	        };
	        return program;
	        function getClassifiableNames() {
	            if (!classifiableNames) {
	                getTypeChecker();
	                classifiableNames = {};
	                for (var _i = 0; _i < files.length; _i++) {
	                    var sourceFile = files[_i];
	                    ts.copyMap(sourceFile.classifiableNames, classifiableNames);
	                }
	            }
	            return classifiableNames;
	        }
	        function tryReuseStructureFromOldProgram() {
	            if (!oldProgram) {
	                return false;
	            }
	            ts.Debug.assert(!oldProgram.structureIsReused);
	            var oldRootNames = oldProgram.getRootFileNames();
	            if (!ts.arrayIsEqualTo(oldRootNames, rootNames)) {
	                return false;
	            }
	            var newSourceFiles = [];
	            for (var _i = 0, _a = oldProgram.getSourceFiles(); _i < _a.length; _i++) {
	                var oldSourceFile = _a[_i];
	                var newSourceFile = host.getSourceFile(oldSourceFile.fileName, options.target);
	                if (!newSourceFile) {
	                    return false;
	                }
	                if (oldSourceFile !== newSourceFile) {
	                    if (oldSourceFile.hasNoDefaultLib !== newSourceFile.hasNoDefaultLib) {
	                        return false;
	                    }
	                    if (!ts.arrayIsEqualTo(oldSourceFile.referencedFiles, newSourceFile.referencedFiles, fileReferenceIsEqualTo)) {
	                        return false;
	                    }
	                    collectExternalModuleReferences(newSourceFile);
	                    if (!ts.arrayIsEqualTo(oldSourceFile.imports, newSourceFile.imports, moduleNameIsEqualTo)) {
	                        return false;
	                    }
	                    if (resolveModuleNamesWorker) {
	                        var moduleNames = ts.map(newSourceFile.imports, function (name) { return name.text; });
	                        var resolutions = resolveModuleNamesWorker(moduleNames, newSourceFile.fileName);
	                        for (var i = 0; i < moduleNames.length; ++i) {
	                            var oldResolution = ts.getResolvedModuleFileName(oldSourceFile, moduleNames[i]);
	                            if (oldResolution !== resolutions[i]) {
	                                return false;
	                            }
	                        }
	                    }
	                    newSourceFile.resolvedModules = oldSourceFile.resolvedModules;
	                }
	                else {
	                    newSourceFile = oldSourceFile;
	                }
	                newSourceFiles.push(newSourceFile);
	            }
	            for (var _b = 0; _b < newSourceFiles.length; _b++) {
	                var file = newSourceFiles[_b];
	                filesByName.set(file.fileName, file);
	            }
	            files = newSourceFiles;
	            oldProgram.structureIsReused = true;
	            return true;
	        }
	        function getEmitHost(writeFileCallback) {
	            return {
	                getCanonicalFileName: function (fileName) { return host.getCanonicalFileName(fileName); },
	                getCommonSourceDirectory: program.getCommonSourceDirectory,
	                getCompilerOptions: program.getCompilerOptions,
	                getCurrentDirectory: function () { return host.getCurrentDirectory(); },
	                getNewLine: function () { return host.getNewLine(); },
	                getSourceFile: program.getSourceFile,
	                getSourceFiles: program.getSourceFiles,
	                writeFile: writeFileCallback || (function (fileName, data, writeByteOrderMark, onError) { return host.writeFile(fileName, data, writeByteOrderMark, onError); })
	            };
	        }
	        function getDiagnosticsProducingTypeChecker() {
	            return diagnosticsProducingTypeChecker || (diagnosticsProducingTypeChecker = ts.createTypeChecker(program, true));
	        }
	        function getTypeChecker() {
	            return noDiagnosticsTypeChecker || (noDiagnosticsTypeChecker = ts.createTypeChecker(program, false));
	        }
	        function emit(sourceFile, writeFileCallback, cancellationToken) {
	            var _this = this;
	            return runWithCancellationToken(function () { return emitWorker(_this, sourceFile, writeFileCallback, cancellationToken); });
	        }
	        function emitWorker(program, sourceFile, writeFileCallback, cancellationToken) {
	            if (options.noEmitOnError && getPreEmitDiagnostics(program, undefined, cancellationToken).length > 0) {
	                return { diagnostics: [], sourceMaps: undefined, emitSkipped: true };
	            }
	            var emitResolver = getDiagnosticsProducingTypeChecker().getEmitResolver((options.outFile || options.out) ? undefined : sourceFile);
	            var start = new Date().getTime();
	            var emitResult = ts.emitFiles(emitResolver, getEmitHost(writeFileCallback), sourceFile);
	            ts.emitTime += new Date().getTime() - start;
	            return emitResult;
	        }
	        function getSourceFile(fileName) {
	            return filesByName.get(fileName);
	        }
	        function getDiagnosticsHelper(sourceFile, getDiagnostics, cancellationToken) {
	            if (sourceFile) {
	                return getDiagnostics(sourceFile, cancellationToken);
	            }
	            var allDiagnostics = [];
	            ts.forEach(program.getSourceFiles(), function (sourceFile) {
	                if (cancellationToken) {
	                    cancellationToken.throwIfCancellationRequested();
	                }
	                ts.addRange(allDiagnostics, getDiagnostics(sourceFile, cancellationToken));
	            });
	            return ts.sortAndDeduplicateDiagnostics(allDiagnostics);
	        }
	        function getSyntacticDiagnostics(sourceFile, cancellationToken) {
	            return getDiagnosticsHelper(sourceFile, getSyntacticDiagnosticsForFile, cancellationToken);
	        }
	        function getSemanticDiagnostics(sourceFile, cancellationToken) {
	            return getDiagnosticsHelper(sourceFile, getSemanticDiagnosticsForFile, cancellationToken);
	        }
	        function getDeclarationDiagnostics(sourceFile, cancellationToken) {
	            return getDiagnosticsHelper(sourceFile, getDeclarationDiagnosticsForFile, cancellationToken);
	        }
	        function getSyntacticDiagnosticsForFile(sourceFile, cancellationToken) {
	            return sourceFile.parseDiagnostics;
	        }
	        function runWithCancellationToken(func) {
	            try {
	                return func();
	            }
	            catch (e) {
	                if (e instanceof ts.OperationCanceledException) {
	                    noDiagnosticsTypeChecker = undefined;
	                    diagnosticsProducingTypeChecker = undefined;
	                }
	                throw e;
	            }
	        }
	        function getSemanticDiagnosticsForFile(sourceFile, cancellationToken) {
	            return runWithCancellationToken(function () {
	                var typeChecker = getDiagnosticsProducingTypeChecker();
	                ts.Debug.assert(!!sourceFile.bindDiagnostics);
	                var bindDiagnostics = sourceFile.bindDiagnostics;
	                var checkDiagnostics = typeChecker.getDiagnostics(sourceFile, cancellationToken);
	                var programDiagnostics = diagnostics.getDiagnostics(sourceFile.fileName);
	                return bindDiagnostics.concat(checkDiagnostics).concat(programDiagnostics);
	            });
	        }
	        function getDeclarationDiagnosticsForFile(sourceFile, cancellationToken) {
	            return runWithCancellationToken(function () {
	                if (!ts.isDeclarationFile(sourceFile)) {
	                    var resolver = getDiagnosticsProducingTypeChecker().getEmitResolver(sourceFile, cancellationToken);
	                    var writeFile_1 = function () { };
	                    return ts.getDeclarationDiagnostics(getEmitHost(writeFile_1), resolver, sourceFile);
	                }
	            });
	        }
	        function getOptionsDiagnostics() {
	            var allDiagnostics = [];
	            ts.addRange(allDiagnostics, diagnostics.getGlobalDiagnostics());
	            return ts.sortAndDeduplicateDiagnostics(allDiagnostics);
	        }
	        function getGlobalDiagnostics() {
	            var allDiagnostics = [];
	            ts.addRange(allDiagnostics, getDiagnosticsProducingTypeChecker().getGlobalDiagnostics());
	            return ts.sortAndDeduplicateDiagnostics(allDiagnostics);
	        }
	        function hasExtension(fileName) {
	            return ts.getBaseFileName(fileName).indexOf(".") >= 0;
	        }
	        function processRootFile(fileName, isDefaultLib) {
	            processSourceFile(ts.normalizePath(fileName), isDefaultLib);
	        }
	        function fileReferenceIsEqualTo(a, b) {
	            return a.fileName === b.fileName;
	        }
	        function moduleNameIsEqualTo(a, b) {
	            return a.text === b.text;
	        }
	        function collectExternalModuleReferences(file) {
	            if (file.imports) {
	                return;
	            }
	            var imports;
	            for (var _i = 0, _a = file.statements; _i < _a.length; _i++) {
	                var node = _a[_i];
	                switch (node.kind) {
	                    case 220:
	                    case 219:
	                    case 226:
	                        var moduleNameExpr = ts.getExternalModuleName(node);
	                        if (!moduleNameExpr || moduleNameExpr.kind !== 9) {
	                            break;
	                        }
	                        if (!moduleNameExpr.text) {
	                            break;
	                        }
	                        (imports || (imports = [])).push(moduleNameExpr);
	                        break;
	                    case 216:
	                        if (node.name.kind === 9 && (node.flags & 2 || ts.isDeclarationFile(file))) {
	                            ts.forEachChild(node.body, function (node) {
	                                if (ts.isExternalModuleImportEqualsDeclaration(node) &&
	                                    ts.getExternalModuleImportEqualsDeclarationExpression(node).kind === 9) {
	                                    var moduleName = ts.getExternalModuleImportEqualsDeclarationExpression(node);
	                                    if (moduleName) {
	                                        (imports || (imports = [])).push(moduleName);
	                                    }
	                                }
	                            });
	                        }
	                        break;
	                }
	            }
	            file.imports = imports || emptyArray;
	        }
	        function processSourceFile(fileName, isDefaultLib, refFile, refPos, refEnd) {
	            var diagnosticArgument;
	            var diagnostic;
	            if (hasExtension(fileName)) {
	                if (!options.allowNonTsExtensions && !ts.forEach(ts.supportedExtensions, function (extension) { return ts.fileExtensionIs(host.getCanonicalFileName(fileName), extension); })) {
	                    diagnostic = ts.Diagnostics.File_0_has_unsupported_extension_The_only_supported_extensions_are_1;
	                    diagnosticArgument = [fileName, "'" + ts.supportedExtensions.join("', '") + "'"];
	                }
	                else if (!findSourceFile(fileName, isDefaultLib, refFile, refPos, refEnd)) {
	                    diagnostic = ts.Diagnostics.File_0_not_found;
	                    diagnosticArgument = [fileName];
	                }
	                else if (refFile && host.getCanonicalFileName(fileName) === host.getCanonicalFileName(refFile.fileName)) {
	                    diagnostic = ts.Diagnostics.A_file_cannot_have_a_reference_to_itself;
	                    diagnosticArgument = [fileName];
	                }
	            }
	            else {
	                var nonTsFile = options.allowNonTsExtensions && findSourceFile(fileName, isDefaultLib, refFile, refPos, refEnd);
	                if (!nonTsFile) {
	                    if (options.allowNonTsExtensions) {
	                        diagnostic = ts.Diagnostics.File_0_not_found;
	                        diagnosticArgument = [fileName];
	                    }
	                    else if (!ts.forEach(ts.supportedExtensions, function (extension) { return findSourceFile(fileName + extension, isDefaultLib, refFile, refPos, refEnd); })) {
	                        diagnostic = ts.Diagnostics.File_0_not_found;
	                        fileName += ".ts";
	                        diagnosticArgument = [fileName];
	                    }
	                }
	            }
	            if (diagnostic) {
	                if (refFile !== undefined && refEnd !== undefined && refPos !== undefined) {
	                    diagnostics.add(ts.createFileDiagnostic.apply(void 0, [refFile, refPos, refEnd - refPos, diagnostic].concat(diagnosticArgument)));
	                }
	                else {
	                    diagnostics.add(ts.createCompilerDiagnostic.apply(void 0, [diagnostic].concat(diagnosticArgument)));
	                }
	            }
	        }
	        function findSourceFile(fileName, isDefaultLib, refFile, refPos, refEnd) {
	            var canonicalName = host.getCanonicalFileName(ts.normalizeSlashes(fileName));
	            if (filesByName.contains(canonicalName)) {
	                return getSourceFileFromCache(fileName, canonicalName, false);
	            }
	            else {
	                var normalizedAbsolutePath = ts.getNormalizedAbsolutePath(fileName, host.getCurrentDirectory());
	                var canonicalAbsolutePath = host.getCanonicalFileName(normalizedAbsolutePath);
	                if (filesByName.contains(canonicalAbsolutePath)) {
	                    return getSourceFileFromCache(normalizedAbsolutePath, canonicalAbsolutePath, true);
	                }
	                var file = host.getSourceFile(fileName, options.target, function (hostErrorMessage) {
	                    if (refFile !== undefined && refPos !== undefined && refEnd !== undefined) {
	                        diagnostics.add(ts.createFileDiagnostic(refFile, refPos, refEnd - refPos, ts.Diagnostics.Cannot_read_file_0_Colon_1, fileName, hostErrorMessage));
	                    }
	                    else {
	                        diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Cannot_read_file_0_Colon_1, fileName, hostErrorMessage));
	                    }
	                });
	                filesByName.set(canonicalName, file);
	                if (file) {
	                    skipDefaultLib = skipDefaultLib || file.hasNoDefaultLib;
	                    filesByName.set(canonicalAbsolutePath, file);
	                    var basePath = ts.getDirectoryPath(fileName);
	                    if (!options.noResolve) {
	                        processReferencedFiles(file, basePath);
	                    }
	                    processImportedModules(file, basePath);
	                    if (isDefaultLib) {
	                        file.isDefaultLib = true;
	                        files.unshift(file);
	                    }
	                    else {
	                        files.push(file);
	                    }
	                }
	                return file;
	            }
	            function getSourceFileFromCache(fileName, canonicalName, useAbsolutePath) {
	                var file = filesByName.get(canonicalName);
	                if (file && host.useCaseSensitiveFileNames()) {
	                    var sourceFileName = useAbsolutePath ? ts.getNormalizedAbsolutePath(file.fileName, host.getCurrentDirectory()) : file.fileName;
	                    if (canonicalName !== sourceFileName) {
	                        if (refFile !== undefined && refPos !== undefined && refEnd !== undefined) {
	                            diagnostics.add(ts.createFileDiagnostic(refFile, refPos, refEnd - refPos, ts.Diagnostics.File_name_0_differs_from_already_included_file_name_1_only_in_casing, fileName, sourceFileName));
	                        }
	                        else {
	                            diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.File_name_0_differs_from_already_included_file_name_1_only_in_casing, fileName, sourceFileName));
	                        }
	                    }
	                }
	                return file;
	            }
	        }
	        function processReferencedFiles(file, basePath) {
	            ts.forEach(file.referencedFiles, function (ref) {
	                var referencedFileName = resolveTripleslashReference(ref.fileName, file.fileName);
	                processSourceFile(referencedFileName, false, file, ref.pos, ref.end);
	            });
	        }
	        function processImportedModules(file, basePath) {
	            collectExternalModuleReferences(file);
	            if (file.imports.length) {
	                file.resolvedModules = {};
	                var moduleNames = ts.map(file.imports, function (name) { return name.text; });
	                var resolutions = resolveModuleNamesWorker(moduleNames, file.fileName);
	                for (var i = 0; i < file.imports.length; ++i) {
	                    var resolution = resolutions[i];
	                    ts.setResolvedModuleName(file, moduleNames[i], resolution);
	                    if (resolution && !options.noResolve) {
	                        findModuleSourceFile(resolution, file.imports[i]);
	                    }
	                }
	            }
	            else {
	                file.resolvedModules = undefined;
	            }
	            return;
	            function findModuleSourceFile(fileName, nameLiteral) {
	                return findSourceFile(fileName, false, file, nameLiteral.pos, nameLiteral.end);
	            }
	        }
	        function computeCommonSourceDirectory(sourceFiles) {
	            var commonPathComponents;
	            var currentDirectory = host.getCurrentDirectory();
	            ts.forEach(files, function (sourceFile) {
	                if (ts.isDeclarationFile(sourceFile)) {
	                    return;
	                }
	                var sourcePathComponents = ts.getNormalizedPathComponents(sourceFile.fileName, currentDirectory);
	                sourcePathComponents.pop();
	                if (!commonPathComponents) {
	                    commonPathComponents = sourcePathComponents;
	                    return;
	                }
	                for (var i = 0, n = Math.min(commonPathComponents.length, sourcePathComponents.length); i < n; i++) {
	                    if (commonPathComponents[i] !== sourcePathComponents[i]) {
	                        if (i === 0) {
	                            diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Cannot_find_the_common_subdirectory_path_for_the_input_files));
	                            return;
	                        }
	                        commonPathComponents.length = i;
	                        break;
	                    }
	                }
	                if (sourcePathComponents.length < commonPathComponents.length) {
	                    commonPathComponents.length = sourcePathComponents.length;
	                }
	            });
	            return ts.getNormalizedPathFromPathComponents(commonPathComponents);
	        }
	        function checkSourceFilesBelongToPath(sourceFiles, rootDirectory) {
	            var allFilesBelongToPath = true;
	            if (sourceFiles) {
	                var currentDirectory = host.getCurrentDirectory();
	                var absoluteRootDirectoryPath = host.getCanonicalFileName(ts.getNormalizedAbsolutePath(rootDirectory, currentDirectory));
	                for (var _i = 0; _i < sourceFiles.length; _i++) {
	                    var sourceFile = sourceFiles[_i];
	                    if (!ts.isDeclarationFile(sourceFile)) {
	                        var absoluteSourceFilePath = host.getCanonicalFileName(ts.getNormalizedAbsolutePath(sourceFile.fileName, currentDirectory));
	                        if (absoluteSourceFilePath.indexOf(absoluteRootDirectoryPath) !== 0) {
	                            diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files, sourceFile.fileName, options.rootDir));
	                            allFilesBelongToPath = false;
	                        }
	                    }
	                }
	            }
	            return allFilesBelongToPath;
	        }
	        function verifyCompilerOptions() {
	            if (options.isolatedModules) {
	                if (options.declaration) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "declaration", "isolatedModules"));
	                }
	                if (options.noEmitOnError) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "noEmitOnError", "isolatedModules"));
	                }
	                if (options.out) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "out", "isolatedModules"));
	                }
	                if (options.outFile) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "outFile", "isolatedModules"));
	                }
	            }
	            if (options.inlineSourceMap) {
	                if (options.sourceMap) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "sourceMap", "inlineSourceMap"));
	                }
	                if (options.mapRoot) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "mapRoot", "inlineSourceMap"));
	                }
	                if (options.sourceRoot) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "sourceRoot", "inlineSourceMap"));
	                }
	            }
	            if (options.inlineSources) {
	                if (!options.sourceMap && !options.inlineSourceMap) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_inlineSources_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided));
	                }
	            }
	            if (options.out && options.outFile) {
	                diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "out", "outFile"));
	            }
	            if (!options.sourceMap && (options.mapRoot || options.sourceRoot)) {
	                if (options.mapRoot) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_without_specifying_option_1, "mapRoot", "sourceMap"));
	                }
	                if (options.sourceRoot) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_without_specifying_option_1, "sourceRoot", "sourceMap"));
	                }
	                return;
	            }
	            var languageVersion = options.target || 0;
	            var outFile = options.outFile || options.out;
	            var firstExternalModuleSourceFile = ts.forEach(files, function (f) { return ts.isExternalModule(f) ? f : undefined; });
	            if (options.isolatedModules) {
	                if (!options.module && languageVersion < 2) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES6_or_higher));
	                }
	                var firstNonExternalModuleSourceFile = ts.forEach(files, function (f) { return !ts.isExternalModule(f) && !ts.isDeclarationFile(f) ? f : undefined; });
	                if (firstNonExternalModuleSourceFile) {
	                    var span = ts.getErrorSpanForNode(firstNonExternalModuleSourceFile, firstNonExternalModuleSourceFile);
	                    diagnostics.add(ts.createFileDiagnostic(firstNonExternalModuleSourceFile, span.start, span.length, ts.Diagnostics.Cannot_compile_namespaces_when_the_isolatedModules_flag_is_provided));
	                }
	            }
	            else if (firstExternalModuleSourceFile && languageVersion < 2 && !options.module) {
	                var span = ts.getErrorSpanForNode(firstExternalModuleSourceFile, firstExternalModuleSourceFile.externalModuleIndicator);
	                diagnostics.add(ts.createFileDiagnostic(firstExternalModuleSourceFile, span.start, span.length, ts.Diagnostics.Cannot_compile_modules_unless_the_module_flag_is_provided));
	            }
	            if (options.module && languageVersion >= 2) {
	                diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Cannot_compile_modules_into_commonjs_amd_system_or_umd_when_targeting_ES6_or_higher));
	            }
	            if (options.outDir ||
	                options.sourceRoot ||
	                (options.mapRoot &&
	                    (!outFile || firstExternalModuleSourceFile !== undefined))) {
	                if (options.rootDir && checkSourceFilesBelongToPath(files, options.rootDir)) {
	                    commonSourceDirectory = ts.getNormalizedAbsolutePath(options.rootDir, host.getCurrentDirectory());
	                }
	                else {
	                    commonSourceDirectory = computeCommonSourceDirectory(files);
	                }
	                if (commonSourceDirectory && commonSourceDirectory[commonSourceDirectory.length - 1] !== ts.directorySeparator) {
	                    commonSourceDirectory += ts.directorySeparator;
	                }
	            }
	            if (options.noEmit) {
	                if (options.out) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "noEmit", "out"));
	                }
	                if (options.outFile) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "noEmit", "outFile"));
	                }
	                if (options.outDir) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "noEmit", "outDir"));
	                }
	                if (options.declaration) {
	                    diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "noEmit", "declaration"));
	                }
	            }
	            if (options.emitDecoratorMetadata &&
	                !options.experimentalDecorators) {
	                diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_without_specifying_option_1, "emitDecoratorMetadata", "experimentalDecorators"));
	            }
	            if (options.experimentalAsyncFunctions &&
	                options.target !== 2) {
	                diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_experimentalAsyncFunctions_cannot_be_specified_when_targeting_ES5_or_lower));
	            }
	        }
	    }
	    ts.createProgram = createProgram;
	})(ts || (ts = {}));
	/// <reference path="sys.ts"/>
	/// <reference path="types.ts"/>
	/// <reference path="core.ts"/>
	/// <reference path="scanner.ts"/>
	var ts;
	(function (ts) {
	    ts.optionDeclarations = [
	        {
	            name: "charset",
	            type: "string"
	        },
	        {
	            name: "declaration",
	            shortName: "d",
	            type: "boolean",
	            description: ts.Diagnostics.Generates_corresponding_d_ts_file
	        },
	        {
	            name: "diagnostics",
	            type: "boolean"
	        },
	        {
	            name: "emitBOM",
	            type: "boolean"
	        },
	        {
	            name: "help",
	            shortName: "h",
	            type: "boolean",
	            description: ts.Diagnostics.Print_this_message
	        },
	        {
	            name: "init",
	            type: "boolean",
	            description: ts.Diagnostics.Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file
	        },
	        {
	            name: "inlineSourceMap",
	            type: "boolean"
	        },
	        {
	            name: "inlineSources",
	            type: "boolean"
	        },
	        {
	            name: "jsx",
	            type: {
	                "preserve": 1,
	                "react": 2
	            },
	            paramType: ts.Diagnostics.KIND,
	            description: ts.Diagnostics.Specify_JSX_code_generation_Colon_preserve_or_react,
	            error: ts.Diagnostics.Argument_for_jsx_must_be_preserve_or_react
	        },
	        {
	            name: "listFiles",
	            type: "boolean"
	        },
	        {
	            name: "locale",
	            type: "string"
	        },
	        {
	            name: "mapRoot",
	            type: "string",
	            isFilePath: true,
	            description: ts.Diagnostics.Specifies_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations,
	            paramType: ts.Diagnostics.LOCATION
	        },
	        {
	            name: "module",
	            shortName: "m",
	            type: {
	                "commonjs": 1,
	                "amd": 2,
	                "system": 4,
	                "umd": 3
	            },
	            description: ts.Diagnostics.Specify_module_code_generation_Colon_commonjs_amd_system_or_umd,
	            paramType: ts.Diagnostics.KIND,
	            error: ts.Diagnostics.Argument_for_module_option_must_be_commonjs_amd_system_or_umd
	        },
	        {
	            name: "newLine",
	            type: {
	                "crlf": 0,
	                "lf": 1
	            },
	            description: ts.Diagnostics.Specifies_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix,
	            paramType: ts.Diagnostics.NEWLINE,
	            error: ts.Diagnostics.Argument_for_newLine_option_must_be_CRLF_or_LF
	        },
	        {
	            name: "noEmit",
	            type: "boolean",
	            description: ts.Diagnostics.Do_not_emit_outputs
	        },
	        {
	            name: "noEmitHelpers",
	            type: "boolean"
	        },
	        {
	            name: "noEmitOnError",
	            type: "boolean",
	            description: ts.Diagnostics.Do_not_emit_outputs_if_any_errors_were_reported
	        },
	        {
	            name: "noImplicitAny",
	            type: "boolean",
	            description: ts.Diagnostics.Raise_error_on_expressions_and_declarations_with_an_implied_any_type
	        },
	        {
	            name: "noLib",
	            type: "boolean"
	        },
	        {
	            name: "noResolve",
	            type: "boolean"
	        },
	        {
	            name: "skipDefaultLibCheck",
	            type: "boolean"
	        },
	        {
	            name: "out",
	            type: "string",
	            isFilePath: false,
	            paramType: ts.Diagnostics.FILE
	        },
	        {
	            name: "outFile",
	            type: "string",
	            isFilePath: true,
	            description: ts.Diagnostics.Concatenate_and_emit_output_to_single_file,
	            paramType: ts.Diagnostics.FILE
	        },
	        {
	            name: "outDir",
	            type: "string",
	            isFilePath: true,
	            description: ts.Diagnostics.Redirect_output_structure_to_the_directory,
	            paramType: ts.Diagnostics.DIRECTORY
	        },
	        {
	            name: "preserveConstEnums",
	            type: "boolean",
	            description: ts.Diagnostics.Do_not_erase_const_enum_declarations_in_generated_code
	        },
	        {
	            name: "project",
	            shortName: "p",
	            type: "string",
	            isFilePath: true,
	            description: ts.Diagnostics.Compile_the_project_in_the_given_directory,
	            paramType: ts.Diagnostics.DIRECTORY
	        },
	        {
	            name: "removeComments",
	            type: "boolean",
	            description: ts.Diagnostics.Do_not_emit_comments_to_output
	        },
	        {
	            name: "rootDir",
	            type: "string",
	            isFilePath: true,
	            description: ts.Diagnostics.Specifies_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDir,
	            paramType: ts.Diagnostics.LOCATION
	        },
	        {
	            name: "isolatedModules",
	            type: "boolean"
	        },
	        {
	            name: "sourceMap",
	            type: "boolean",
	            description: ts.Diagnostics.Generates_corresponding_map_file
	        },
	        {
	            name: "sourceRoot",
	            type: "string",
	            isFilePath: true,
	            description: ts.Diagnostics.Specifies_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations,
	            paramType: ts.Diagnostics.LOCATION
	        },
	        {
	            name: "suppressExcessPropertyErrors",
	            type: "boolean",
	            description: ts.Diagnostics.Suppress_excess_property_checks_for_object_literals,
	            experimental: true
	        },
	        {
	            name: "suppressImplicitAnyIndexErrors",
	            type: "boolean",
	            description: ts.Diagnostics.Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures
	        },
	        {
	            name: "stripInternal",
	            type: "boolean",
	            description: ts.Diagnostics.Do_not_emit_declarations_for_code_that_has_an_internal_annotation,
	            experimental: true
	        },
	        {
	            name: "target",
	            shortName: "t",
	            type: { "es3": 0, "es5": 1, "es6": 2 },
	            description: ts.Diagnostics.Specify_ECMAScript_target_version_Colon_ES3_default_ES5_or_ES6_experimental,
	            paramType: ts.Diagnostics.VERSION,
	            error: ts.Diagnostics.Argument_for_target_option_must_be_ES3_ES5_or_ES6
	        },
	        {
	            name: "version",
	            shortName: "v",
	            type: "boolean",
	            description: ts.Diagnostics.Print_the_compiler_s_version
	        },
	        {
	            name: "watch",
	            shortName: "w",
	            type: "boolean",
	            description: ts.Diagnostics.Watch_input_files
	        },
	        {
	            name: "experimentalAsyncFunctions",
	            type: "boolean",
	            description: ts.Diagnostics.Enables_experimental_support_for_ES7_async_functions
	        },
	        {
	            name: "experimentalDecorators",
	            type: "boolean",
	            description: ts.Diagnostics.Enables_experimental_support_for_ES7_decorators
	        },
	        {
	            name: "emitDecoratorMetadata",
	            type: "boolean",
	            experimental: true,
	            description: ts.Diagnostics.Enables_experimental_support_for_emitting_type_metadata_for_decorators
	        },
	        {
	            name: "moduleResolution",
	            type: {
	                "node": 2,
	                "classic": 1
	            },
	            experimental: true,
	            description: ts.Diagnostics.Specifies_module_resolution_strategy_Colon_node_Node_or_classic_TypeScript_pre_1_6
	        }
	    ];
	    var optionNameMapCache;
	    function getOptionNameMap() {
	        if (optionNameMapCache) {
	            return optionNameMapCache;
	        }
	        var optionNameMap = {};
	        var shortOptionNames = {};
	        ts.forEach(ts.optionDeclarations, function (option) {
	            optionNameMap[option.name.toLowerCase()] = option;
	            if (option.shortName) {
	                shortOptionNames[option.shortName] = option.name;
	            }
	        });
	        optionNameMapCache = { optionNameMap: optionNameMap, shortOptionNames: shortOptionNames };
	        return optionNameMapCache;
	    }
	    ts.getOptionNameMap = getOptionNameMap;
	    function parseCommandLine(commandLine, readFile) {
	        var options = {};
	        var fileNames = [];
	        var errors = [];
	        var _a = getOptionNameMap(), optionNameMap = _a.optionNameMap, shortOptionNames = _a.shortOptionNames;
	        parseStrings(commandLine);
	        return {
	            options: options,
	            fileNames: fileNames,
	            errors: errors
	        };
	        function parseStrings(args) {
	            var i = 0;
	            while (i < args.length) {
	                var s = args[i++];
	                if (s.charCodeAt(0) === 64) {
	                    parseResponseFile(s.slice(1));
	                }
	                else if (s.charCodeAt(0) === 45) {
	                    s = s.slice(s.charCodeAt(1) === 45 ? 2 : 1).toLowerCase();
	                    if (ts.hasProperty(shortOptionNames, s)) {
	                        s = shortOptionNames[s];
	                    }
	                    if (ts.hasProperty(optionNameMap, s)) {
	                        var opt = optionNameMap[s];
	                        if (!args[i] && opt.type !== "boolean") {
	                            errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Compiler_option_0_expects_an_argument, opt.name));
	                        }
	                        switch (opt.type) {
	                            case "number":
	                                options[opt.name] = parseInt(args[i++]);
	                                break;
	                            case "boolean":
	                                options[opt.name] = true;
	                                break;
	                            case "string":
	                                options[opt.name] = args[i++] || "";
	                                break;
	                            default:
	                                var map_2 = opt.type;
	                                var key = (args[i++] || "").toLowerCase();
	                                if (ts.hasProperty(map_2, key)) {
	                                    options[opt.name] = map_2[key];
	                                }
	                                else {
	                                    errors.push(ts.createCompilerDiagnostic(opt.error));
	                                }
	                        }
	                    }
	                    else {
	                        errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Unknown_compiler_option_0, s));
	                    }
	                }
	                else {
	                    fileNames.push(s);
	                }
	            }
	        }
	        function parseResponseFile(fileName) {
	            var text = readFile ? readFile(fileName) : ts.sys.readFile(fileName);
	            if (!text) {
	                errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.File_0_not_found, fileName));
	                return;
	            }
	            var args = [];
	            var pos = 0;
	            while (true) {
	                while (pos < text.length && text.charCodeAt(pos) <= 32)
	                    pos++;
	                if (pos >= text.length)
	                    break;
	                var start = pos;
	                if (text.charCodeAt(start) === 34) {
	                    pos++;
	                    while (pos < text.length && text.charCodeAt(pos) !== 34)
	                        pos++;
	                    if (pos < text.length) {
	                        args.push(text.substring(start + 1, pos));
	                        pos++;
	                    }
	                    else {
	                        errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Unterminated_quoted_string_in_response_file_0, fileName));
	                    }
	                }
	                else {
	                    while (text.charCodeAt(pos) > 32)
	                        pos++;
	                    args.push(text.substring(start, pos));
	                }
	            }
	            parseStrings(args);
	        }
	    }
	    ts.parseCommandLine = parseCommandLine;
	    function readConfigFile(fileName) {
	        var text = "";
	        try {
	            text = ts.sys.readFile(fileName);
	        }
	        catch (e) {
	            return { error: ts.createCompilerDiagnostic(ts.Diagnostics.Cannot_read_file_0_Colon_1, fileName, e.message) };
	        }
	        return parseConfigFileText(fileName, text);
	    }
	    ts.readConfigFile = readConfigFile;
	    function parseConfigFileText(fileName, jsonText) {
	        try {
	            return { config: /\S/.test(jsonText) ? JSON.parse(jsonText) : {} };
	        }
	        catch (e) {
	            return { error: ts.createCompilerDiagnostic(ts.Diagnostics.Failed_to_parse_file_0_Colon_1, fileName, e.message) };
	        }
	    }
	    ts.parseConfigFileText = parseConfigFileText;
	    function parseConfigFile(json, host, basePath) {
	        var errors = [];
	        return {
	            options: getCompilerOptions(),
	            fileNames: getFileNames(),
	            errors: errors
	        };
	        function getCompilerOptions() {
	            var options = {};
	            var optionNameMap = {};
	            ts.forEach(ts.optionDeclarations, function (option) {
	                optionNameMap[option.name] = option;
	            });
	            var jsonOptions = json["compilerOptions"];
	            if (jsonOptions) {
	                for (var id in jsonOptions) {
	                    if (ts.hasProperty(optionNameMap, id)) {
	                        var opt = optionNameMap[id];
	                        var optType = opt.type;
	                        var value = jsonOptions[id];
	                        var expectedType = typeof optType === "string" ? optType : "string";
	                        if (typeof value === expectedType) {
	                            if (typeof optType !== "string") {
	                                var key = value.toLowerCase();
	                                if (ts.hasProperty(optType, key)) {
	                                    value = optType[key];
	                                }
	                                else {
	                                    errors.push(ts.createCompilerDiagnostic(opt.error));
	                                    value = 0;
	                                }
	                            }
	                            if (opt.isFilePath) {
	                                value = ts.normalizePath(ts.combinePaths(basePath, value));
	                            }
	                            options[opt.name] = value;
	                        }
	                        else {
	                            errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Compiler_option_0_requires_a_value_of_type_1, id, expectedType));
	                        }
	                    }
	                    else {
	                        errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Unknown_compiler_option_0, id));
	                    }
	                }
	            }
	            return options;
	        }
	        function getFileNames() {
	            var fileNames = [];
	            if (ts.hasProperty(json, "files")) {
	                if (json["files"] instanceof Array) {
	                    fileNames = ts.map(json["files"], function (s) { return ts.combinePaths(basePath, s); });
	                }
	                else {
	                    errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Compiler_option_0_requires_a_value_of_type_1, "files", "Array"));
	                }
	            }
	            else {
	                var exclude = json["exclude"] instanceof Array ? ts.map(json["exclude"], ts.normalizeSlashes) : undefined;
	                var sysFiles = host.readDirectory(basePath, ".ts", exclude).concat(host.readDirectory(basePath, ".tsx", exclude));
	                for (var i = 0; i < sysFiles.length; i++) {
	                    var name_27 = sysFiles[i];
	                    if (ts.fileExtensionIs(name_27, ".d.ts")) {
	                        var baseName = name_27.substr(0, name_27.length - ".d.ts".length);
	                        if (!ts.contains(sysFiles, baseName + ".tsx") && !ts.contains(sysFiles, baseName + ".ts")) {
	                            fileNames.push(name_27);
	                        }
	                    }
	                    else if (ts.fileExtensionIs(name_27, ".ts")) {
	                        if (!ts.contains(sysFiles, name_27 + "x")) {
	                            fileNames.push(name_27);
	                        }
	                    }
	                    else {
	                        fileNames.push(name_27);
	                    }
	                }
	            }
	            return fileNames;
	        }
	    }
	    ts.parseConfigFile = parseConfigFile;
	})(ts || (ts = {}));
	/// <reference path="program.ts"/>
	/// <reference path="commandLineParser.ts"/>
	var ts;
	(function (ts) {
	    function validateLocaleAndSetLanguage(locale, errors) {
	        var matchResult = /^([a-z]+)([_\-]([a-z]+))?$/.exec(locale.toLowerCase());
	        if (!matchResult) {
	            errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1, "en", "ja-jp"));
	            return false;
	        }
	        var language = matchResult[1];
	        var territory = matchResult[3];
	        if (!trySetLanguageAndTerritory(language, territory, errors) &&
	            !trySetLanguageAndTerritory(language, undefined, errors)) {
	            errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Unsupported_locale_0, locale));
	            return false;
	        }
	        return true;
	    }
	    function trySetLanguageAndTerritory(language, territory, errors) {
	        var compilerFilePath = ts.normalizePath(ts.sys.getExecutingFilePath());
	        var containingDirectoryPath = ts.getDirectoryPath(compilerFilePath);
	        var filePath = ts.combinePaths(containingDirectoryPath, language);
	        if (territory) {
	            filePath = filePath + "-" + territory;
	        }
	        filePath = ts.sys.resolvePath(ts.combinePaths(filePath, "diagnosticMessages.generated.json"));
	        if (!ts.sys.fileExists(filePath)) {
	            return false;
	        }
	        var fileContents = "";
	        try {
	            fileContents = ts.sys.readFile(filePath);
	        }
	        catch (e) {
	            errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Unable_to_open_file_0, filePath));
	            return false;
	        }
	        try {
	            ts.localizedDiagnosticMessages = JSON.parse(fileContents);
	        }
	        catch (e) {
	            errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Corrupted_locale_file_0, filePath));
	            return false;
	        }
	        return true;
	    }
	    function countLines(program) {
	        var count = 0;
	        ts.forEach(program.getSourceFiles(), function (file) {
	            count += ts.getLineStarts(file).length;
	        });
	        return count;
	    }
	    function getDiagnosticText(message) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var diagnostic = ts.createCompilerDiagnostic.apply(undefined, arguments);
	        return diagnostic.messageText;
	    }
	    function reportDiagnostic(diagnostic) {
	        var output = "";
	        if (diagnostic.file) {
	            var loc = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start);
	            output += diagnostic.file.fileName + "(" + (loc.line + 1) + "," + (loc.character + 1) + "): ";
	        }
	        var category = ts.DiagnosticCategory[diagnostic.category].toLowerCase();
	        output += category + " TS" + diagnostic.code + ": " + ts.flattenDiagnosticMessageText(diagnostic.messageText, ts.sys.newLine) + ts.sys.newLine;
	        ts.sys.write(output);
	    }
	    function reportDiagnostics(diagnostics) {
	        for (var i = 0; i < diagnostics.length; i++) {
	            reportDiagnostic(diagnostics[i]);
	        }
	    }
	    function padLeft(s, length) {
	        while (s.length < length) {
	            s = " " + s;
	        }
	        return s;
	    }
	    function padRight(s, length) {
	        while (s.length < length) {
	            s = s + " ";
	        }
	        return s;
	    }
	    function reportStatisticalValue(name, value) {
	        ts.sys.write(padRight(name + ":", 12) + padLeft(value.toString(), 10) + ts.sys.newLine);
	    }
	    function reportCountStatistic(name, count) {
	        reportStatisticalValue(name, "" + count);
	    }
	    function reportTimeStatistic(name, time) {
	        reportStatisticalValue(name, (time / 1000).toFixed(2) + "s");
	    }
	    function isJSONSupported() {
	        return typeof JSON === "object" && typeof JSON.parse === "function";
	    }
	    function executeCommandLine(args) {
	        var commandLine = ts.parseCommandLine(args);
	        var configFileName;
	        var configFileWatcher;
	        var cachedProgram;
	        var rootFileNames;
	        var compilerOptions;
	        var compilerHost;
	        var hostGetSourceFile;
	        var timerHandle;
	        if (commandLine.options.locale) {
	            if (!isJSONSupported()) {
	                reportDiagnostic(ts.createCompilerDiagnostic(ts.Diagnostics.The_current_host_does_not_support_the_0_option, "--locale"));
	                return ts.sys.exit(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped);
	            }
	            validateLocaleAndSetLanguage(commandLine.options.locale, commandLine.errors);
	        }
	        if (commandLine.errors.length > 0) {
	            reportDiagnostics(commandLine.errors);
	            return ts.sys.exit(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped);
	        }
	        if (commandLine.options.init) {
	            writeConfigFile(commandLine.options, commandLine.fileNames);
	            return ts.sys.exit(ts.ExitStatus.Success);
	        }
	        if (commandLine.options.version) {
	            reportDiagnostic(ts.createCompilerDiagnostic(ts.Diagnostics.Version_0, ts.version));
	            return ts.sys.exit(ts.ExitStatus.Success);
	        }
	        if (commandLine.options.help) {
	            printVersion();
	            printHelp();
	            return ts.sys.exit(ts.ExitStatus.Success);
	        }
	        if (commandLine.options.project) {
	            if (!isJSONSupported()) {
	                reportDiagnostic(ts.createCompilerDiagnostic(ts.Diagnostics.The_current_host_does_not_support_the_0_option, "--project"));
	                return ts.sys.exit(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped);
	            }
	            configFileName = ts.normalizePath(ts.combinePaths(commandLine.options.project, "tsconfig.json"));
	            if (commandLine.fileNames.length !== 0) {
	                reportDiagnostic(ts.createCompilerDiagnostic(ts.Diagnostics.Option_project_cannot_be_mixed_with_source_files_on_a_command_line));
	                return ts.sys.exit(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped);
	            }
	        }
	        else if (commandLine.fileNames.length === 0 && isJSONSupported()) {
	            var searchPath = ts.normalizePath(ts.sys.getCurrentDirectory());
	            configFileName = ts.findConfigFile(searchPath);
	        }
	        if (commandLine.fileNames.length === 0 && !configFileName) {
	            printVersion();
	            printHelp();
	            return ts.sys.exit(ts.ExitStatus.Success);
	        }
	        if (commandLine.options.watch && commandLine.options.hasOwnProperty("watch")) {
	            if (!ts.sys.watchFile) {
	                reportDiagnostic(ts.createCompilerDiagnostic(ts.Diagnostics.The_current_host_does_not_support_the_0_option, "--watch"));
	                return ts.sys.exit(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped);
	            }
	            if (configFileName) {
	                configFileWatcher = ts.sys.watchFile(configFileName, configFileChanged);
	            }
	        }
	        performCompilation();
	        function performCompilation() {
	            if (!cachedProgram) {
	                if (configFileName) {
	                    var result = ts.readConfigFile(configFileName);
	                    if (result.error) {
	                        reportDiagnostic(result.error);
	                        return ts.sys.exit(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped);
	                    }
	                    var configObject = result.config;
	                    var configParseResult = ts.parseConfigFile(configObject, ts.sys, ts.getDirectoryPath(configFileName));
	                    if (configParseResult.errors.length > 0) {
	                        reportDiagnostics(configParseResult.errors);
	                        return ts.sys.exit(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped);
	                    }
	                    rootFileNames = configParseResult.fileNames;
	                    compilerOptions = ts.extend(commandLine.options, configParseResult.options);
	                }
	                else {
	                    rootFileNames = commandLine.fileNames;
	                    compilerOptions = commandLine.options;
	                }
	                compilerHost = ts.createCompilerHost(compilerOptions);
	                hostGetSourceFile = compilerHost.getSourceFile;
	                compilerHost.getSourceFile = getSourceFile;
	            }
	            var compileResult = compile(rootFileNames, compilerOptions, compilerHost);
	            if (!compilerOptions.watch) {
	                return ts.sys.exit(compileResult.exitStatus);
	            }
	            setCachedProgram(compileResult.program);
	            reportDiagnostic(ts.createCompilerDiagnostic(ts.Diagnostics.Compilation_complete_Watching_for_file_changes));
	        }
	        function getSourceFile(fileName, languageVersion, onError) {
	            if (cachedProgram) {
	                var sourceFile_1 = cachedProgram.getSourceFile(fileName);
	                if (sourceFile_1 && sourceFile_1.fileWatcher) {
	                    return sourceFile_1;
	                }
	            }
	            var sourceFile = hostGetSourceFile(fileName, languageVersion, onError);
	            if (sourceFile && compilerOptions.watch) {
	                sourceFile.fileWatcher = ts.sys.watchFile(sourceFile.fileName, function () { return sourceFileChanged(sourceFile); });
	            }
	            return sourceFile;
	        }
	        function setCachedProgram(program) {
	            if (cachedProgram) {
	                var newSourceFiles = program ? program.getSourceFiles() : undefined;
	                ts.forEach(cachedProgram.getSourceFiles(), function (sourceFile) {
	                    if (!(newSourceFiles && ts.contains(newSourceFiles, sourceFile))) {
	                        if (sourceFile.fileWatcher) {
	                            sourceFile.fileWatcher.close();
	                            sourceFile.fileWatcher = undefined;
	                        }
	                    }
	                });
	            }
	            cachedProgram = program;
	        }
	        function sourceFileChanged(sourceFile) {
	            sourceFile.fileWatcher.close();
	            sourceFile.fileWatcher = undefined;
	            startTimer();
	        }
	        function configFileChanged() {
	            setCachedProgram(undefined);
	            startTimer();
	        }
	        function startTimer() {
	            if (timerHandle) {
	                clearTimeout(timerHandle);
	            }
	            timerHandle = setTimeout(recompile, 250);
	        }
	        function recompile() {
	            timerHandle = undefined;
	            reportDiagnostic(ts.createCompilerDiagnostic(ts.Diagnostics.File_change_detected_Starting_incremental_compilation));
	            performCompilation();
	        }
	    }
	    ts.executeCommandLine = executeCommandLine;
	    function compile(fileNames, compilerOptions, compilerHost) {
	        ts.ioReadTime = 0;
	        ts.ioWriteTime = 0;
	        ts.programTime = 0;
	        ts.bindTime = 0;
	        ts.checkTime = 0;
	        ts.emitTime = 0;
	        var program = ts.createProgram(fileNames, compilerOptions, compilerHost);
	        var exitStatus = compileProgram();
	        if (compilerOptions.listFiles) {
	            ts.forEach(program.getSourceFiles(), function (file) {
	                ts.sys.write(file.fileName + ts.sys.newLine);
	            });
	        }
	        if (compilerOptions.diagnostics) {
	            var memoryUsed = ts.sys.getMemoryUsage ? ts.sys.getMemoryUsage() : -1;
	            reportCountStatistic("Files", program.getSourceFiles().length);
	            reportCountStatistic("Lines", countLines(program));
	            reportCountStatistic("Nodes", program.getNodeCount());
	            reportCountStatistic("Identifiers", program.getIdentifierCount());
	            reportCountStatistic("Symbols", program.getSymbolCount());
	            reportCountStatistic("Types", program.getTypeCount());
	            if (memoryUsed >= 0) {
	                reportStatisticalValue("Memory used", Math.round(memoryUsed / 1000) + "K");
	            }
	            reportTimeStatistic("I/O read", ts.ioReadTime);
	            reportTimeStatistic("I/O write", ts.ioWriteTime);
	            reportTimeStatistic("Parse time", ts.programTime);
	            reportTimeStatistic("Bind time", ts.bindTime);
	            reportTimeStatistic("Check time", ts.checkTime);
	            reportTimeStatistic("Emit time", ts.emitTime);
	            reportTimeStatistic("Total time", ts.programTime + ts.bindTime + ts.checkTime + ts.emitTime);
	        }
	        return { program: program, exitStatus: exitStatus };
	        function compileProgram() {
	            var diagnostics;
	            diagnostics = program.getSyntacticDiagnostics();
	            if (diagnostics.length === 0) {
	                diagnostics = program.getOptionsDiagnostics().concat(program.getGlobalDiagnostics());
	                if (diagnostics.length === 0) {
	                    diagnostics = program.getSemanticDiagnostics();
	                }
	            }
	            reportDiagnostics(diagnostics);
	            if (compilerOptions.noEmit) {
	                return diagnostics.length
	                    ? ts.ExitStatus.DiagnosticsPresent_OutputsSkipped
	                    : ts.ExitStatus.Success;
	            }
	            var emitOutput = program.emit();
	            reportDiagnostics(emitOutput.diagnostics);
	            if (emitOutput.emitSkipped) {
	                return ts.ExitStatus.DiagnosticsPresent_OutputsSkipped;
	            }
	            if (diagnostics.length > 0 || emitOutput.diagnostics.length > 0) {
	                return ts.ExitStatus.DiagnosticsPresent_OutputsGenerated;
	            }
	            return ts.ExitStatus.Success;
	        }
	    }
	    function printVersion() {
	        ts.sys.write(getDiagnosticText(ts.Diagnostics.Version_0, ts.version) + ts.sys.newLine);
	    }
	    function printHelp() {
	        var output = "";
	        var syntaxLength = getDiagnosticText(ts.Diagnostics.Syntax_Colon_0, "").length;
	        var examplesLength = getDiagnosticText(ts.Diagnostics.Examples_Colon_0, "").length;
	        var marginLength = Math.max(syntaxLength, examplesLength);
	        var syntax = makePadding(marginLength - syntaxLength);
	        syntax += "tsc [" + getDiagnosticText(ts.Diagnostics.options) + "] [" + getDiagnosticText(ts.Diagnostics.file) + " ...]";
	        output += getDiagnosticText(ts.Diagnostics.Syntax_Colon_0, syntax);
	        output += ts.sys.newLine + ts.sys.newLine;
	        var padding = makePadding(marginLength);
	        output += getDiagnosticText(ts.Diagnostics.Examples_Colon_0, makePadding(marginLength - examplesLength) + "tsc hello.ts") + ts.sys.newLine;
	        output += padding + "tsc --out file.js file.ts" + ts.sys.newLine;
	        output += padding + "tsc @args.txt" + ts.sys.newLine;
	        output += ts.sys.newLine;
	        output += getDiagnosticText(ts.Diagnostics.Options_Colon) + ts.sys.newLine;
	        var optsList = ts.filter(ts.optionDeclarations.slice(), function (v) { return !v.experimental; });
	        optsList.sort(function (a, b) { return ts.compareValues(a.name.toLowerCase(), b.name.toLowerCase()); });
	        marginLength = 0;
	        var usageColumn = [];
	        var descriptionColumn = [];
	        for (var i = 0; i < optsList.length; i++) {
	            var option = optsList[i];
	            if (!option.description) {
	                continue;
	            }
	            var usageText_1 = " ";
	            if (option.shortName) {
	                usageText_1 += "-" + option.shortName;
	                usageText_1 += getParamType(option);
	                usageText_1 += ", ";
	            }
	            usageText_1 += "--" + option.name;
	            usageText_1 += getParamType(option);
	            usageColumn.push(usageText_1);
	            descriptionColumn.push(getDiagnosticText(option.description));
	            marginLength = Math.max(usageText_1.length, marginLength);
	        }
	        var usageText = " @<" + getDiagnosticText(ts.Diagnostics.file) + ">";
	        usageColumn.push(usageText);
	        descriptionColumn.push(getDiagnosticText(ts.Diagnostics.Insert_command_line_options_and_files_from_a_file));
	        marginLength = Math.max(usageText.length, marginLength);
	        for (var i = 0; i < usageColumn.length; i++) {
	            var usage = usageColumn[i];
	            var description = descriptionColumn[i];
	            output += usage + makePadding(marginLength - usage.length + 2) + description + ts.sys.newLine;
	        }
	        ts.sys.write(output);
	        return;
	        function getParamType(option) {
	            if (option.paramType !== undefined) {
	                return " " + getDiagnosticText(option.paramType);
	            }
	            return "";
	        }
	        function makePadding(paddingLength) {
	            return Array(paddingLength + 1).join(" ");
	        }
	    }
	    function writeConfigFile(options, fileNames) {
	        var currentDirectory = ts.sys.getCurrentDirectory();
	        var file = ts.combinePaths(currentDirectory, 'tsconfig.json');
	        if (ts.sys.fileExists(file)) {
	            reportDiagnostic(ts.createCompilerDiagnostic(ts.Diagnostics.A_tsconfig_json_file_is_already_defined_at_Colon_0, file));
	        }
	        else {
	            var compilerOptions = ts.extend(options, ts.defaultInitCompilerOptions);
	            var configurations = {
	                compilerOptions: serializeCompilerOptions(compilerOptions),
	                exclude: ["node_modules"]
	            };
	            if (fileNames && fileNames.length) {
	                configurations.files = fileNames;
	            }
	            ts.sys.writeFile(file, JSON.stringify(configurations, undefined, 4));
	            reportDiagnostic(ts.createCompilerDiagnostic(ts.Diagnostics.Successfully_created_a_tsconfig_json_file));
	        }
	        return;
	        function serializeCompilerOptions(options) {
	            var result = {};
	            var optionsNameMap = ts.getOptionNameMap().optionNameMap;
	            for (var name_28 in options) {
	                if (ts.hasProperty(options, name_28)) {
	                    var value = options[name_28];
	                    switch (name_28) {
	                        case "init":
	                        case "watch":
	                        case "version":
	                        case "help":
	                        case "project":
	                            break;
	                        default:
	                            var optionDefinition = optionsNameMap[name_28.toLowerCase()];
	                            if (optionDefinition) {
	                                if (typeof optionDefinition.type === "string") {
	                                    result[name_28] = value;
	                                }
	                                else {
	                                    var typeMap = optionDefinition.type;
	                                    for (var key in typeMap) {
	                                        if (ts.hasProperty(typeMap, key)) {
	                                            if (typeMap[key] === value)
	                                                result[name_28] = key;
	                                        }
	                                    }
	                                }
	                            }
	                            break;
	                    }
	                }
	            }
	            return result;
	        }
	    }
	})(ts || (ts = {}));
	             module.exports.compileString = function(data) {
	                ts.sys.writeFile('foo.ts', data);
	                ts.executeCommandLine(['foo.ts']);
	                return ts.sys.readFile('foo.js');
	            };
	        


/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = (function() {
	    var files = {};
	    files['lib.d.ts'] = '/*! ***************************************************************************** \nCopyright (c) Microsoft Corporation. All rights reserved.  \nLicensed under the Apache License, Version 2.0 (the "License"); you may not use \nthis file except in compliance with the License. You may obtain a copy of the \nLicense at http://www.apache.org/licenses/LICENSE-2.0   \n  \nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY \nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED \nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,  \nMERCHANTABLITY OR NON-INFRINGEMENT.  \n  \nSee the Apache Version 2.0 License for specific language governing permissions \nand limitations under the License. \n***************************************************************************** */ \n \n/// <reference no-default-lib="true"/> \n \n///////////////////////////// \n/// ECMAScript APIs \n///////////////////////////// \n \ndeclare var NaN: number; \ndeclare var Infinity: number; \n \n/** \n  * Evaluates JavaScript code and executes it.  \n  * @param x A String value that contains valid JavaScript code. \n  */ \ndeclare function eval(x: string): any; \n \n/** \n  * Converts A string to an integer. \n  * @param s A string to convert into a number. \n  * @param radix A value between 2 and 36 that specifies the base of the number in numString.  \n  * If this argument is not supplied, strings with a prefix of \'0x\' are considered hexadecimal. \n  * All other strings are considered decimal. \n  */ \ndeclare function parseInt(s: string, radix?: number): number; \n \n/** \n  * Converts a string to a floating-point number.  \n  * @param string A string that contains a floating-point number.  \n  */ \ndeclare function parseFloat(string: string): number; \n \n/** \n  * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).  \n  * @param number A numeric value. \n  */ \ndeclare function isNaN(number: number): boolean; \n \n/**  \n  * Determines whether a supplied number is finite. \n  * @param number Any numeric value. \n  */ \ndeclare function isFinite(number: number): boolean; \n \n/** \n  * Gets the unencoded version of an encoded Uniform Resource Identifier (URI). \n  * @param encodedURI A value representing an encoded URI. \n  */ \ndeclare function decodeURI(encodedURI: string): string; \n \n/** \n  * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI). \n  * @param encodedURIComponent A value representing an encoded URI component. \n  */ \ndeclare function decodeURIComponent(encodedURIComponent: string): string; \n \n/**  \n  * Encodes a text string as a valid Uniform Resource Identifier (URI) \n  * @param uri A value representing an encoded URI. \n  */ \ndeclare function encodeURI(uri: string): string; \n \n/** \n  * Encodes a text string as a valid component of a Uniform Resource Identifier (URI). \n  * @param uriComponent A value representing an encoded URI component. \n  */ \ndeclare function encodeURIComponent(uriComponent: string): string; \n \ninterface PropertyDescriptor { \n    configurable?: boolean; \n    enumerable?: boolean; \n    value?: any; \n    writable?: boolean; \n    get? (): any; \n    set? (v: any): void; \n} \n \ninterface PropertyDescriptorMap { \n    [s: string]: PropertyDescriptor; \n} \n \ninterface Object { \n    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */ \n    constructor: Function; \n \n    /** Returns a string representation of an object. */ \n    toString(): string; \n \n    /** Returns a date converted to a string using the current locale. */ \n    toLocaleString(): string; \n \n    /** Returns the primitive value of the specified object. */ \n    valueOf(): Object; \n \n    /** \n      * Determines whether an object has a property with the specified name.  \n      * @param v A property name. \n      */ \n    hasOwnProperty(v: string): boolean; \n \n    /** \n      * Determines whether an object exists in another object\'s prototype chain.  \n      * @param v Another object whose prototype chain is to be checked. \n      */ \n    isPrototypeOf(v: Object): boolean; \n \n    /**  \n      * Determines whether a specified property is enumerable. \n      * @param v A property name. \n      */ \n    propertyIsEnumerable(v: string): boolean; \n} \n \ninterface ObjectConstructor { \n    new (value?: any): Object; \n    (): any; \n    (value: any): any; \n \n    /** A reference to the prototype for a class of objects. */ \n    prototype: Object; \n \n    /**  \n      * Returns the prototype of an object.  \n      * @param o The object that references the prototype. \n      */ \n    getPrototypeOf(o: any): any; \n \n    /** \n      * Gets the own property descriptor of the specified object.  \n      * An own property descriptor is one that is defined directly on the object and is not inherited from the object\'s prototype.  \n      * @param o Object that contains the property. \n      * @param p Name of the property. \n    */ \n    getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor; \n \n    /**  \n      * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly  \n      * on that object, and are not inherited from the object\'s prototype. The properties of an object include both fields (objects) and functions. \n      * @param o Object that contains the own properties. \n      */ \n    getOwnPropertyNames(o: any): string[]; \n \n    /**  \n      * Creates an object that has the specified prototype, and that optionally contains specified properties. \n      * @param o Object to use as a prototype. May be null \n      * @param properties JavaScript object that contains one or more property descriptors.  \n      */ \n    create(o: any, properties?: PropertyDescriptorMap): any; \n \n    /** \n      * Adds a property to an object, or modifies attributes of an existing property.  \n      * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object. \n      * @param p The property name. \n      * @param attributes Descriptor for the property. It can be for a data property or an accessor property. \n      */ \n    defineProperty(o: any, p: string, attributes: PropertyDescriptor): any; \n \n    /** \n      * Adds one or more properties to an object, and/or modifies attributes of existing properties.  \n      * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object. \n      * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property. \n      */ \n    defineProperties(o: any, properties: PropertyDescriptorMap): any; \n \n    /** \n      * Prevents the modification of attributes of existing properties, and prevents the addition of new properties. \n      * @param o Object on which to lock the attributes.  \n      */ \n    seal<T>(o: T): T; \n \n    /** \n      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties. \n      * @param o Object on which to lock the attributes. \n      */ \n    freeze<T>(o: T): T; \n \n    /** \n      * Prevents the addition of new properties to an object. \n      * @param o Object to make non-extensible.  \n      */ \n    preventExtensions<T>(o: T): T; \n \n    /** \n      * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object. \n      * @param o Object to test.  \n      */ \n    isSealed(o: any): boolean; \n \n    /** \n      * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object. \n      * @param o Object to test.   \n      */ \n    isFrozen(o: any): boolean; \n \n    /** \n      * Returns a value that indicates whether new properties can be added to an object. \n      * @param o Object to test.  \n      */ \n    isExtensible(o: any): boolean; \n \n    /** \n      * Returns the names of the enumerable properties and methods of an object. \n      * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object. \n      */ \n    keys(o: any): string[]; \n} \n \n/** \n  * Provides functionality common to all JavaScript objects. \n  */ \ndeclare var Object: ObjectConstructor; \n \n/** \n  * Creates a new function. \n  */ \ninterface Function { \n    /** \n      * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function. \n      * @param thisArg The object to be used as the this object. \n      * @param argArray A set of arguments to be passed to the function. \n      */ \n    apply(thisArg: any, argArray?: any): any; \n \n    /** \n      * Calls a method of an object, substituting another object for the current object. \n      * @param thisArg The object to be used as the current object. \n      * @param argArray A list of arguments to be passed to the method. \n      */ \n    call(thisArg: any, ...argArray: any[]): any; \n \n    /** \n      * For a given function, creates a bound function that has the same body as the original function.  \n      * The this object of the bound function is associated with the specified object, and has the specified initial parameters. \n      * @param thisArg An object to which the this keyword can refer inside the new function. \n      * @param argArray A list of arguments to be passed to the new function. \n      */ \n    bind(thisArg: any, ...argArray: any[]): any; \n \n    prototype: any; \n    length: number; \n \n    // Non-standard extensions \n    arguments: any; \n    caller: Function; \n} \n \ninterface FunctionConstructor { \n    /** \n      * Creates a new function. \n      * @param args A list of arguments the function accepts. \n      */ \n    new (...args: string[]): Function; \n    (...args: string[]): Function; \n    prototype: Function; \n} \n \ndeclare var Function: FunctionConstructor; \n \ninterface IArguments { \n    [index: number]: any; \n    length: number; \n    callee: Function; \n} \n \ninterface String { \n    /** Returns a string representation of a string. */ \n    toString(): string; \n \n    /** \n      * Returns the character at the specified index. \n      * @param pos The zero-based index of the desired character. \n      */ \n    charAt(pos: number): string; \n \n    /**  \n      * Returns the Unicode value of the character at the specified location. \n      * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned. \n      */ \n    charCodeAt(index: number): number; \n \n    /** \n      * Returns a string that contains the concatenation of two or more strings. \n      * @param strings The strings to append to the end of the string.   \n      */ \n    concat(...strings: string[]): string; \n \n    /** \n      * Returns the position of the first occurrence of a substring.  \n      * @param searchString The substring to search for in the string \n      * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string. \n      */ \n    indexOf(searchString: string, position?: number): number; \n \n    /** \n      * Returns the last occurrence of a substring in the string. \n      * @param searchString The substring to search for. \n      * @param position The index at which to begin searching. If omitted, the search begins at the end of the string. \n      */ \n    lastIndexOf(searchString: string, position?: number): number; \n \n    /** \n      * Determines whether two strings are equivalent in the current locale. \n      * @param that String to compare to target string \n      */ \n    localeCompare(that: string): number; \n \n    /**  \n      * Matches a string with a regular expression, and returns an array containing the results of that search. \n      * @param regexp A variable name or string literal containing the regular expression pattern and flags. \n      */ \n    match(regexp: string): RegExpMatchArray; \n \n    /**  \n      * Matches a string with a regular expression, and returns an array containing the results of that search. \n      * @param regexp A regular expression object that contains the regular expression pattern and applicable flags.  \n      */ \n    match(regexp: RegExp): RegExpMatchArray; \n \n    /** \n      * Replaces text in a string, using a regular expression or search string. \n      * @param searchValue A string that represents the regular expression. \n      * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string. \n      */ \n    replace(searchValue: string, replaceValue: string): string; \n \n    /** \n      * Replaces text in a string, using a regular expression or search string. \n      * @param searchValue A string that represents the regular expression. \n      * @param replacer A function that returns the replacement text. \n      */ \n    replace(searchValue: string, replacer: (substring: string, ...args: any[]) => string): string; \n \n    /** \n      * Replaces text in a string, using a regular expression or search string. \n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags. \n      * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string. \n      */ \n    replace(searchValue: RegExp, replaceValue: string): string; \n \n    /** \n      * Replaces text in a string, using a regular expression or search string. \n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags \n      * @param replacer A function that returns the replacement text. \n      */ \n    replace(searchValue: RegExp, replacer: (substring: string, ...args: any[]) => string): string; \n \n    /** \n      * Finds the first substring match in a regular expression search. \n      * @param regexp The regular expression pattern and applicable flags.  \n      */ \n    search(regexp: string): number; \n \n    /** \n      * Finds the first substring match in a regular expression search. \n      * @param regexp The regular expression pattern and applicable flags.  \n      */ \n    search(regexp: RegExp): number; \n \n    /** \n      * Returns a section of a string. \n      * @param start The index to the beginning of the specified portion of stringObj.  \n      * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.  \n      * If this value is not specified, the substring continues to the end of stringObj. \n      */ \n    slice(start?: number, end?: number): string; \n \n    /** \n      * Split a string into substrings using the specified separator and return them as an array. \n      * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.  \n      * @param limit A value used to limit the number of elements returned in the array. \n      */ \n    split(separator: string, limit?: number): string[]; \n \n    /** \n      * Split a string into substrings using the specified separator and return them as an array. \n      * @param separator A Regular Express that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.  \n      * @param limit A value used to limit the number of elements returned in the array. \n      */ \n    split(separator: RegExp, limit?: number): string[]; \n \n    /** \n      * Returns the substring at the specified location within a String object.  \n      * @param start The zero-based index number indicating the beginning of the substring. \n      * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end. \n      * If end is omitted, the characters from start through the end of the original string are returned. \n      */ \n    substring(start: number, end?: number): string; \n \n    /** Converts all the alphabetic characters in a string to lowercase. */ \n    toLowerCase(): string; \n \n    /** Converts all alphabetic characters to lowercase, taking into account the host environment\'s current locale. */ \n    toLocaleLowerCase(): string; \n \n    /** Converts all the alphabetic characters in a string to uppercase. */ \n    toUpperCase(): string; \n \n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment\'s current locale. */ \n    toLocaleUpperCase(): string; \n \n    /** Removes the leading and trailing white space and line terminator characters from a string. */ \n    trim(): string; \n \n    /** Returns the length of a String object. */ \n    length: number; \n \n    // IE extensions \n    /** \n      * Gets a substring beginning at the specified location and having the specified length. \n      * @param from The starting position of the desired substring. The index of the first character in the string is zero. \n      * @param length The number of characters to include in the returned substring. \n      */ \n    substr(from: number, length?: number): string; \n \n    /** Returns the primitive value of the specified object. */ \n    valueOf(): string; \n \n    [index: number]: string; \n} \n \ninterface StringConstructor { \n    new (value?: any): String; \n    (value?: any): string; \n    prototype: String; \n    fromCharCode(...codes: number[]): string; \n} \n \n/**  \n  * Allows manipulation and formatting of text strings and determination and location of substrings within strings.  \n  */ \ndeclare var String: StringConstructor; \n \ninterface Boolean { \n    /** Returns the primitive value of the specified object. */ \n    valueOf(): boolean; \n} \n \ninterface BooleanConstructor { \n    new (value?: any): Boolean; \n    (value?: any): boolean; \n    prototype: Boolean; \n} \n \ndeclare var Boolean: BooleanConstructor; \n \ninterface Number { \n    /** \n      * Returns a string representation of an object. \n      * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers. \n      */ \n    toString(radix?: number): string; \n \n    /**  \n      * Returns a string representing a number in fixed-point notation. \n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive. \n      */ \n    toFixed(fractionDigits?: number): string; \n \n    /** \n      * Returns a string containing a number represented in exponential notation. \n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive. \n      */ \n    toExponential(fractionDigits?: number): string; \n \n    /** \n      * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits. \n      * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive. \n      */ \n    toPrecision(precision?: number): string; \n \n    /** Returns the primitive value of the specified object. */ \n    valueOf(): number; \n} \n \ninterface NumberConstructor { \n    new (value?: any): Number; \n    (value?: any): number; \n    prototype: Number; \n \n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */ \n    MAX_VALUE: number; \n \n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */ \n    MIN_VALUE: number; \n \n    /**  \n      * A value that is not a number. \n      * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function. \n      */ \n    NaN: number; \n \n    /**  \n      * A value that is less than the largest negative number that can be represented in JavaScript. \n      * JavaScript displays NEGATIVE_INFINITY values as -infinity.  \n      */ \n    NEGATIVE_INFINITY: number; \n \n    /** \n      * A value greater than the largest number that can be represented in JavaScript.  \n      * JavaScript displays POSITIVE_INFINITY values as infinity.  \n      */ \n    POSITIVE_INFINITY: number; \n} \n \n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */ \ndeclare var Number: NumberConstructor; \n \ninterface TemplateStringsArray extends Array<string> { \n    raw: string[]; \n} \n \ninterface Math { \n    /** The mathematical constant e. This is Euler\'s number, the base of natural logarithms. */ \n    E: number; \n    /** The natural logarithm of 10. */ \n    LN10: number; \n    /** The natural logarithm of 2. */ \n    LN2: number; \n    /** The base-2 logarithm of e. */ \n    LOG2E: number; \n    /** The base-10 logarithm of e. */ \n    LOG10E: number; \n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */ \n    PI: number; \n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */ \n    SQRT1_2: number; \n    /** The square root of 2. */ \n    SQRT2: number; \n    /** \n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative).  \n      * For example, the absolute value of -5 is the same as the absolute value of 5. \n      * @param x A numeric expression for which the absolute value is needed. \n      */ \n    abs(x: number): number; \n    /** \n      * Returns the arc cosine (or inverse cosine) of a number.  \n      * @param x A numeric expression. \n      */ \n    acos(x: number): number; \n    /**  \n      * Returns the arcsine of a number.  \n      * @param x A numeric expression. \n      */ \n    asin(x: number): number; \n    /** \n      * Returns the arctangent of a number.  \n      * @param x A numeric expression for which the arctangent is needed. \n      */ \n    atan(x: number): number; \n    /** \n      * Returns the angle (in radians) from the X axis to a point. \n      * @param y A numeric expression representing the cartesian y-coordinate. \n      * @param x A numeric expression representing the cartesian x-coordinate. \n      */ \n    atan2(y: number, x: number): number; \n    /** \n      * Returns the smallest number greater than or equal to its numeric argument.  \n      * @param x A numeric expression. \n      */ \n    ceil(x: number): number; \n    /** \n      * Returns the cosine of a number.  \n      * @param x A numeric expression that contains an angle measured in radians. \n      */ \n    cos(x: number): number; \n    /** \n      * Returns e (the base of natural logarithms) raised to a power.  \n      * @param x A numeric expression representing the power of e. \n      */ \n    exp(x: number): number; \n    /** \n      * Returns the greatest number less than or equal to its numeric argument.  \n      * @param x A numeric expression. \n      */ \n    floor(x: number): number; \n    /** \n      * Returns the natural logarithm (base e) of a number.  \n      * @param x A numeric expression. \n      */ \n    log(x: number): number; \n    /** \n      * Returns the larger of a set of supplied numeric expressions.  \n      * @param values Numeric expressions to be evaluated. \n      */ \n    max(...values: number[]): number; \n    /** \n      * Returns the smaller of a set of supplied numeric expressions.  \n      * @param values Numeric expressions to be evaluated. \n      */ \n    min(...values: number[]): number; \n    /** \n      * Returns the value of a base expression taken to a specified power.  \n      * @param x The base value of the expression. \n      * @param y The exponent value of the expression. \n      */ \n    pow(x: number, y: number): number; \n    /** Returns a pseudorandom number between 0 and 1. */ \n    random(): number; \n    /**  \n      * Returns a supplied numeric expression rounded to the nearest number. \n      * @param x The value to be rounded to the nearest number. \n      */ \n    round(x: number): number; \n    /** \n      * Returns the sine of a number. \n      * @param x A numeric expression that contains an angle measured in radians. \n      */ \n    sin(x: number): number; \n    /** \n      * Returns the square root of a number. \n      * @param x A numeric expression. \n      */ \n    sqrt(x: number): number; \n    /** \n      * Returns the tangent of a number. \n      * @param x A numeric expression that contains an angle measured in radians. \n      */ \n    tan(x: number): number; \n} \n/** An intrinsic object that provides basic mathematics functionality and constants. */ \ndeclare var Math: Math; \n \n/** Enables basic storage and retrieval of dates and times. */ \ninterface Date { \n    /** Returns a string representation of a date. The format of the string depends on the locale. */ \n    toString(): string; \n    /** Returns a date as a string value. */ \n    toDateString(): string; \n    /** Returns a time as a string value. */ \n    toTimeString(): string; \n    /** Returns a value as a string value appropriate to the host environment\'s current locale. */ \n    toLocaleString(): string; \n    /** Returns a date as a string value appropriate to the host environment\'s current locale. */ \n    toLocaleDateString(): string; \n    /** Returns a time as a string value appropriate to the host environment\'s current locale. */ \n    toLocaleTimeString(): string; \n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */ \n    valueOf(): number; \n    /** Gets the time value in milliseconds. */ \n    getTime(): number; \n    /** Gets the year, using local time. */ \n    getFullYear(): number; \n    /** Gets the year using Universal Coordinated Time (UTC). */ \n    getUTCFullYear(): number; \n    /** Gets the month, using local time. */ \n    getMonth(): number; \n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */ \n    getUTCMonth(): number; \n    /** Gets the day-of-the-month, using local time. */ \n    getDate(): number; \n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */ \n    getUTCDate(): number; \n    /** Gets the day of the week, using local time. */ \n    getDay(): number; \n    /** Gets the day of the week using Universal Coordinated Time (UTC). */ \n    getUTCDay(): number; \n    /** Gets the hours in a date, using local time. */ \n    getHours(): number; \n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */ \n    getUTCHours(): number; \n    /** Gets the minutes of a Date object, using local time. */ \n    getMinutes(): number; \n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */ \n    getUTCMinutes(): number; \n    /** Gets the seconds of a Date object, using local time. */ \n    getSeconds(): number; \n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */ \n    getUTCSeconds(): number; \n    /** Gets the milliseconds of a Date, using local time. */ \n    getMilliseconds(): number; \n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */ \n    getUTCMilliseconds(): number; \n    /** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */ \n    getTimezoneOffset(): number; \n    /**  \n      * Sets the date and time value in the Date object. \n      * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.  \n      */ \n    setTime(time: number): number; \n    /** \n      * Sets the milliseconds value in the Date object using local time.  \n      * @param ms A numeric value equal to the millisecond value. \n      */ \n    setMilliseconds(ms: number): number; \n    /**  \n      * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC). \n      * @param ms A numeric value equal to the millisecond value.  \n      */ \n    setUTCMilliseconds(ms: number): number; \n \n    /** \n      * Sets the seconds value in the Date object using local time.  \n      * @param sec A numeric value equal to the seconds value. \n      * @param ms A numeric value equal to the milliseconds value. \n      */ \n    setSeconds(sec: number, ms?: number): number; \n    /** \n      * Sets the seconds value in the Date object using Universal Coordinated Time (UTC). \n      * @param sec A numeric value equal to the seconds value. \n      * @param ms A numeric value equal to the milliseconds value. \n      */ \n    setUTCSeconds(sec: number, ms?: number): number; \n    /** \n      * Sets the minutes value in the Date object using local time.  \n      * @param min A numeric value equal to the minutes value.  \n      * @param sec A numeric value equal to the seconds value.  \n      * @param ms A numeric value equal to the milliseconds value. \n      */ \n    setMinutes(min: number, sec?: number, ms?: number): number; \n    /** \n      * Sets the minutes value in the Date object using Universal Coordinated Time (UTC). \n      * @param min A numeric value equal to the minutes value.  \n      * @param sec A numeric value equal to the seconds value.  \n      * @param ms A numeric value equal to the milliseconds value. \n      */ \n    setUTCMinutes(min: number, sec?: number, ms?: number): number; \n    /** \n      * Sets the hour value in the Date object using local time. \n      * @param hours A numeric value equal to the hours value. \n      * @param min A numeric value equal to the minutes value. \n      * @param sec A numeric value equal to the seconds value.  \n      * @param ms A numeric value equal to the milliseconds value. \n      */ \n    setHours(hours: number, min?: number, sec?: number, ms?: number): number; \n    /** \n      * Sets the hours value in the Date object using Universal Coordinated Time (UTC). \n      * @param hours A numeric value equal to the hours value. \n      * @param min A numeric value equal to the minutes value. \n      * @param sec A numeric value equal to the seconds value.  \n      * @param ms A numeric value equal to the milliseconds value. \n      */ \n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number; \n    /** \n      * Sets the numeric day-of-the-month value of the Date object using local time.  \n      * @param date A numeric value equal to the day of the month. \n      */ \n    setDate(date: number): number; \n    /**  \n      * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC). \n      * @param date A numeric value equal to the day of the month.  \n      */ \n    setUTCDate(date: number): number; \n    /**  \n      * Sets the month value in the Date object using local time.  \n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.  \n      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used. \n      */ \n    setMonth(month: number, date?: number): number; \n    /** \n      * Sets the month value in the Date object using Universal Coordinated Time (UTC). \n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. \n      * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used. \n      */ \n    setUTCMonth(month: number, date?: number): number; \n    /** \n      * Sets the year of the Date object using local time. \n      * @param year A numeric value for the year. \n      * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified. \n      * @param date A numeric value equal for the day of the month. \n      */ \n    setFullYear(year: number, month?: number, date?: number): number; \n    /** \n      * Sets the year value in the Date object using Universal Coordinated Time (UTC). \n      * @param year A numeric value equal to the year. \n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied. \n      * @param date A numeric value equal to the day of the month. \n      */ \n    setUTCFullYear(year: number, month?: number, date?: number): number; \n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */ \n    toUTCString(): string; \n    /** Returns a date as a string value in ISO format. */ \n    toISOString(): string; \n    /** Used by the JSON.stringify method to enable the transformation of an object\'s data for JavaScript Object Notation (JSON) serialization. */ \n    toJSON(key?: any): string; \n} \n \ninterface DateConstructor { \n    new (): Date; \n    new (value: number): Date; \n    new (value: string): Date; \n    new (year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date; \n    (): string; \n    prototype: Date; \n    /** \n      * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970. \n      * @param s A date string \n      */ \n    parse(s: string): number; \n    /** \n      * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.  \n      * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year. \n      * @param month The month as an number between 0 and 11 (January to December). \n      * @param date The date as an number between 1 and 31. \n      * @param hours Must be supplied if minutes is supplied. An number from 0 to 23 (midnight to 11pm) that specifies the hour. \n      * @param minutes Must be supplied if seconds is supplied. An number from 0 to 59 that specifies the minutes. \n      * @param seconds Must be supplied if milliseconds is supplied. An number from 0 to 59 that specifies the seconds. \n      * @param ms An number from 0 to 999 that specifies the milliseconds. \n      */ \n    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number; \n    now(): number; \n} \n \ndeclare var Date: DateConstructor; \n \ninterface RegExpMatchArray extends Array<string> { \n    index?: number; \n    input?: string; \n} \n \ninterface RegExpExecArray extends Array<string> { \n    index: number; \n    input: string; \n} \n \ninterface RegExp { \n    /**  \n      * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search. \n      * @param string The String object or string literal on which to perform the search. \n      */ \n    exec(string: string): RegExpExecArray; \n \n    /**  \n      * Returns a Boolean value that indicates whether or not a pattern exists in a searched string. \n      * @param string String on which to perform the search. \n      */ \n    test(string: string): boolean; \n \n    /** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */ \n    source: string; \n \n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */ \n    global: boolean; \n \n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */ \n    ignoreCase: boolean; \n \n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */ \n    multiline: boolean; \n \n    lastIndex: number; \n \n    // Non-standard extensions \n    compile(): RegExp; \n} \n \ninterface RegExpConstructor { \n    new (pattern: string, flags?: string): RegExp; \n    (pattern: string, flags?: string): RegExp; \n    prototype: RegExp; \n \n    // Non-standard extensions \n    $1: string; \n    $2: string; \n    $3: string; \n    $4: string; \n    $5: string; \n    $6: string; \n    $7: string; \n    $8: string; \n    $9: string; \n    lastMatch: string; \n} \n \ndeclare var RegExp: RegExpConstructor; \n \ninterface Error { \n    name: string; \n    message: string; \n} \n \ninterface ErrorConstructor { \n    new (message?: string): Error; \n    (message?: string): Error; \n    prototype: Error; \n} \n \ndeclare var Error: ErrorConstructor; \n \ninterface EvalError extends Error { \n} \n \ninterface EvalErrorConstructor { \n    new (message?: string): EvalError; \n    (message?: string): EvalError; \n    prototype: EvalError; \n} \n \ndeclare var EvalError: EvalErrorConstructor; \n \ninterface RangeError extends Error { \n} \n \ninterface RangeErrorConstructor { \n    new (message?: string): RangeError; \n    (message?: string): RangeError; \n    prototype: RangeError; \n} \n \ndeclare var RangeError: RangeErrorConstructor; \n \ninterface ReferenceError extends Error { \n} \n \ninterface ReferenceErrorConstructor { \n    new (message?: string): ReferenceError; \n    (message?: string): ReferenceError; \n    prototype: ReferenceError; \n} \n \ndeclare var ReferenceError: ReferenceErrorConstructor; \n \ninterface SyntaxError extends Error { \n} \n \ninterface SyntaxErrorConstructor { \n    new (message?: string): SyntaxError; \n    (message?: string): SyntaxError; \n    prototype: SyntaxError; \n} \n \ndeclare var SyntaxError: SyntaxErrorConstructor; \n \ninterface TypeError extends Error { \n} \n \ninterface TypeErrorConstructor { \n    new (message?: string): TypeError; \n    (message?: string): TypeError; \n    prototype: TypeError; \n} \n \ndeclare var TypeError: TypeErrorConstructor; \n \ninterface URIError extends Error { \n} \n \ninterface URIErrorConstructor { \n    new (message?: string): URIError; \n    (message?: string): URIError; \n    prototype: URIError; \n} \n \ndeclare var URIError: URIErrorConstructor; \n \ninterface JSON { \n    /** \n      * Converts a JavaScript Object Notation (JSON) string into an object. \n      * @param text A valid JSON string. \n      * @param reviver A function that transforms the results. This function is called for each member of the object.  \n      * If a member contains nested objects, the nested objects are transformed before the parent object is.  \n      */ \n    parse(text: string, reviver?: (key: any, value: any) => any): any; \n    /** \n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string. \n      * @param value A JavaScript value, usually an object or array, to be converted. \n      */ \n    stringify(value: any): string; \n    /** \n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string. \n      * @param value A JavaScript value, usually an object or array, to be converted. \n      * @param replacer A function that transforms the results. \n      */ \n    stringify(value: any, replacer: (key: string, value: any) => any): string; \n    /** \n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string. \n      * @param value A JavaScript value, usually an object or array, to be converted. \n      * @param replacer Array that transforms the results. \n      */ \n    stringify(value: any, replacer: any[]): string; \n    /** \n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string. \n      * @param value A JavaScript value, usually an object or array, to be converted. \n      * @param replacer A function that transforms the results. \n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read. \n      */ \n    stringify(value: any, replacer: (key: string, value: any) => any, space: string | number): string; \n    /** \n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string. \n      * @param value A JavaScript value, usually an object or array, to be converted. \n      * @param replacer Array that transforms the results. \n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read. \n      */ \n    stringify(value: any, replacer: any[], space: string | number): string; \n} \n/** \n  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format. \n  */ \ndeclare var JSON: JSON; \n \n \n///////////////////////////// \n/// ECMAScript Array API (specially handled by compiler) \n///////////////////////////// \n \ninterface Array<T> { \n    /** \n      * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array. \n      */ \n    length: number; \n    /** \n      * Returns a string representation of an array. \n      */ \n    toString(): string; \n    toLocaleString(): string; \n    /** \n      * Appends new elements to an array, and returns the new length of the array. \n      * @param items New elements of the Array. \n      */ \n    push(...items: T[]): number; \n    /** \n      * Removes the last element from an array and returns it. \n      */ \n    pop(): T; \n    /** \n      * Combines two or more arrays. \n      * @param items Additional items to add to the end of array1. \n      */ \n    concat<U extends T[]>(...items: U[]): T[]; \n    /** \n      * Combines two or more arrays. \n      * @param items Additional items to add to the end of array1. \n      */ \n    concat(...items: T[]): T[]; \n    /** \n      * Adds all the elements of an array separated by the specified separator string. \n      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma. \n      */ \n    join(separator?: string): string; \n    /** \n      * Reverses the elements in an Array.  \n      */ \n    reverse(): T[]; \n    /** \n      * Removes the first element from an array and returns it. \n      */ \n    shift(): T; \n    /**  \n      * Returns a section of an array. \n      * @param start The beginning of the specified portion of the array. \n      * @param end The end of the specified portion of the array. \n      */ \n    slice(start?: number, end?: number): T[]; \n \n    /** \n      * Sorts an array. \n      * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order. \n      */ \n    sort(compareFn?: (a: T, b: T) => number): T[]; \n \n    /** \n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements. \n      * @param start The zero-based location in the array from which to start removing elements. \n      */ \n    splice(start: number): T[]; \n \n    /** \n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements. \n      * @param start The zero-based location in the array from which to start removing elements. \n      * @param deleteCount The number of elements to remove. \n      * @param items Elements to insert into the array in place of the deleted elements. \n      */ \n    splice(start: number, deleteCount: number, ...items: T[]): T[]; \n \n    /** \n      * Inserts new elements at the start of an array. \n      * @param items  Elements to insert at the start of the Array. \n      */ \n    unshift(...items: T[]): number; \n \n    /** \n      * Returns the index of the first occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0. \n      */ \n    indexOf(searchElement: T, fromIndex?: number): number; \n \n    /** \n      * Returns the index of the last occurrence of a specified value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array. \n      */ \n    lastIndexOf(searchElement: T, fromIndex?: number): number; \n \n    /** \n      * Determines whether all the members of an array satisfy the specified test. \n      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value. \n      */ \n    every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean; \n \n    /** \n      * Determines whether the specified callback function returns true for any element of an array. \n      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value. \n      */ \n    some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean; \n \n    /** \n      * Performs the specified action for each element in an array. \n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.  \n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value. \n      */ \n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void; \n \n    /** \n      * Calls a defined callback function on each element of an array, and returns an array that contains the results. \n      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value. \n      */ \n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[]; \n \n    /** \n      * Returns the elements of an array that meet the condition specified in a callback function.  \n      * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value. \n      */ \n    filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[]; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value. \n      */ \n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T; \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value. \n      */ \n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value. \n      */ \n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T; \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value. \n      */ \n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U; \n \n    [n: number]: T; \n} \n \ninterface ArrayConstructor { \n    new (arrayLength?: number): any[]; \n    new <T>(arrayLength: number): T[]; \n    new <T>(...items: T[]): T[]; \n    (arrayLength?: number): any[]; \n    <T>(arrayLength: number): T[]; \n    <T>(...items: T[]): T[]; \n    isArray(arg: any): arg is Array<any>; \n    prototype: Array<any>; \n} \n \ndeclare var Array: ArrayConstructor; \n \ninterface TypedPropertyDescriptor<T> { \n    enumerable?: boolean; \n    configurable?: boolean; \n    writable?: boolean; \n    value?: T; \n    get?: () => T; \n    set?: (value: T) => void; \n} \n \ndeclare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void; \ndeclare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void; \ndeclare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void; \ndeclare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void; \n \ndeclare type PromiseConstructorLike = new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>; \n \ninterface PromiseLike<T> { \n    /** \n    * Attaches callbacks for the resolution and/or rejection of the Promise. \n    * @param onfulfilled The callback to execute when the Promise is resolved. \n    * @param onrejected The callback to execute when the Promise is rejected. \n    * @returns A Promise for the completion of which ever callback is executed. \n    */ \n    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): PromiseLike<TResult>; \n    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): PromiseLike<TResult>; \n} \n \ninterface ArrayLike<T> { \n    length: number; \n    [n: number]: T; \n} \n \n \n/** \n  * Represents a raw buffer of binary data, which is used to store data for the  \n  * different typed arrays. ArrayBuffers cannot be read from or written to directly,  \n  * but can be passed to a typed array or DataView Object to interpret the raw  \n  * buffer as needed.  \n  */ \ninterface ArrayBuffer { \n    /** \n      * Read-only. The length of the ArrayBuffer (in bytes). \n      */ \n    byteLength: number; \n \n    /** \n      * Returns a section of an ArrayBuffer. \n      */ \n    slice(begin:number, end?:number): ArrayBuffer; \n} \n \ninterface ArrayBufferConstructor { \n    prototype: ArrayBuffer; \n    new (byteLength: number): ArrayBuffer; \n    isView(arg: any): boolean; \n} \ndeclare var ArrayBuffer: ArrayBufferConstructor; \n \ninterface ArrayBufferView { \n    /** \n      * The ArrayBuffer instance referenced by the array.  \n      */ \n    buffer: ArrayBuffer; \n \n    /** \n      * The length in bytes of the array. \n      */ \n    byteLength: number; \n \n    /** \n      * The offset in bytes of the array. \n      */ \n    byteOffset: number; \n} \n \ninterface DataView { \n    buffer: ArrayBuffer; \n    byteLength: number; \n    byteOffset: number; \n    /** \n      * Gets the Float32 value at the specified byte offset from the start of the view. There is  \n      * no alignment constraint; multi-byte values may be fetched from any offset.  \n      * @param byteOffset The place in the buffer at which the value should be retrieved. \n      */ \n    getFloat32(byteOffset: number, littleEndian?: boolean): number; \n \n    /** \n      * Gets the Float64 value at the specified byte offset from the start of the view. There is \n      * no alignment constraint; multi-byte values may be fetched from any offset.  \n      * @param byteOffset The place in the buffer at which the value should be retrieved. \n      */ \n    getFloat64(byteOffset: number, littleEndian?: boolean): number; \n \n    /** \n      * Gets the Int8 value at the specified byte offset from the start of the view. There is  \n      * no alignment constraint; multi-byte values may be fetched from any offset.  \n      * @param byteOffset The place in the buffer at which the value should be retrieved. \n      */ \n    getInt8(byteOffset: number): number; \n \n    /** \n      * Gets the Int16 value at the specified byte offset from the start of the view. There is  \n      * no alignment constraint; multi-byte values may be fetched from any offset.  \n      * @param byteOffset The place in the buffer at which the value should be retrieved. \n      */ \n    getInt16(byteOffset: number, littleEndian?: boolean): number; \n    /** \n      * Gets the Int32 value at the specified byte offset from the start of the view. There is  \n      * no alignment constraint; multi-byte values may be fetched from any offset.  \n      * @param byteOffset The place in the buffer at which the value should be retrieved. \n      */ \n    getInt32(byteOffset: number, littleEndian?: boolean): number; \n \n    /** \n      * Gets the Uint8 value at the specified byte offset from the start of the view. There is  \n      * no alignment constraint; multi-byte values may be fetched from any offset.  \n      * @param byteOffset The place in the buffer at which the value should be retrieved. \n      */ \n    getUint8(byteOffset: number): number; \n \n    /** \n      * Gets the Uint16 value at the specified byte offset from the start of the view. There is  \n      * no alignment constraint; multi-byte values may be fetched from any offset.  \n      * @param byteOffset The place in the buffer at which the value should be retrieved. \n      */ \n    getUint16(byteOffset: number, littleEndian?: boolean): number; \n \n    /** \n      * Gets the Uint32 value at the specified byte offset from the start of the view. There is  \n      * no alignment constraint; multi-byte values may be fetched from any offset.  \n      * @param byteOffset The place in the buffer at which the value should be retrieved. \n      */ \n    getUint32(byteOffset: number, littleEndian?: boolean): number; \n \n    /** \n      * Stores an Float32 value at the specified byte offset from the start of the view.  \n      * @param byteOffset The place in the buffer at which the value should be set. \n      * @param value The value to set. \n      * @param littleEndian If false or undefined, a big-endian value should be written,  \n      * otherwise a little-endian value should be written. \n      */ \n    setFloat32(byteOffset: number, value: number, littleEndian?: boolean): void; \n \n    /** \n      * Stores an Float64 value at the specified byte offset from the start of the view.  \n      * @param byteOffset The place in the buffer at which the value should be set. \n      * @param value The value to set. \n      * @param littleEndian If false or undefined, a big-endian value should be written,  \n      * otherwise a little-endian value should be written. \n      */ \n    setFloat64(byteOffset: number, value: number, littleEndian?: boolean): void; \n \n    /** \n      * Stores an Int8 value at the specified byte offset from the start of the view.  \n      * @param byteOffset The place in the buffer at which the value should be set. \n      * @param value The value to set. \n      */ \n    setInt8(byteOffset: number, value: number): void; \n \n    /** \n      * Stores an Int16 value at the specified byte offset from the start of the view.  \n      * @param byteOffset The place in the buffer at which the value should be set. \n      * @param value The value to set. \n      * @param littleEndian If false or undefined, a big-endian value should be written,  \n      * otherwise a little-endian value should be written. \n      */ \n    setInt16(byteOffset: number, value: number, littleEndian?: boolean): void; \n \n    /** \n      * Stores an Int32 value at the specified byte offset from the start of the view.  \n      * @param byteOffset The place in the buffer at which the value should be set. \n      * @param value The value to set. \n      * @param littleEndian If false or undefined, a big-endian value should be written,  \n      * otherwise a little-endian value should be written. \n      */ \n    setInt32(byteOffset: number, value: number, littleEndian?: boolean): void; \n \n    /** \n      * Stores an Uint8 value at the specified byte offset from the start of the view.  \n      * @param byteOffset The place in the buffer at which the value should be set. \n      * @param value The value to set. \n      */ \n    setUint8(byteOffset: number, value: number): void; \n \n    /** \n      * Stores an Uint16 value at the specified byte offset from the start of the view.  \n      * @param byteOffset The place in the buffer at which the value should be set. \n      * @param value The value to set. \n      * @param littleEndian If false or undefined, a big-endian value should be written,  \n      * otherwise a little-endian value should be written. \n      */ \n    setUint16(byteOffset: number, value: number, littleEndian?: boolean): void; \n \n    /** \n      * Stores an Uint32 value at the specified byte offset from the start of the view.  \n      * @param byteOffset The place in the buffer at which the value should be set. \n      * @param value The value to set. \n      * @param littleEndian If false or undefined, a big-endian value should be written,  \n      * otherwise a little-endian value should be written. \n      */ \n    setUint32(byteOffset: number, value: number, littleEndian?: boolean): void; \n} \n \ninterface DataViewConstructor { \n    new (buffer: ArrayBuffer, byteOffset?: number, byteLength?: number): DataView; \n} \ndeclare var DataView: DataViewConstructor; \n \n/** \n  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested  \n  * number of bytes could not be allocated an exception is raised. \n  */ \ninterface Int8Array { \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * The ArrayBuffer instance referenced by the array.  \n      */ \n    buffer: ArrayBuffer; \n \n    /** \n      * The length in bytes of the array. \n      */ \n    byteLength: number; \n \n    /** \n      * The offset in bytes of the array. \n      */ \n    byteOffset: number; \n \n    /**  \n      * Returns the this object after copying a section of the array identified by start and end \n      * to the same array starting at position target \n      * @param target If target is negative, it is treated as length+target where length is the  \n      * length of the array.  \n      * @param start If start is negative, it is treated as length+start. If end is negative, it  \n      * is treated as length+end. \n      * @param end If not specified, length of the this object is used as its default value.  \n      */ \n    copyWithin(target: number, start: number, end?: number): Int8Array; \n \n    /** \n      * Determines whether all the members of an array satisfy the specified test. \n      * @param callbackfn A function that accepts up to three arguments. The every method calls  \n      * the callbackfn function for each element in array1 until the callbackfn returns false,  \n      * or until the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    every(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean; \n \n    /** \n        * Returns the this object after filling the section identified by start and end with value \n        * @param value value to fill array section with \n        * @param start index to start filling the array at. If start is negative, it is treated as  \n        * length+start where length is the length of the array.  \n        * @param end index to stop filling the array at. If end is negative, it is treated as  \n        * length+end. \n        */ \n    fill(value: number, start?: number, end?: number): Int8Array; \n \n    /** \n      * Returns the elements of an array that meet the condition specified in a callback function.  \n      * @param callbackfn A function that accepts up to three arguments. The filter method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    filter(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): Int8Array; \n \n    /**  \n      * Returns the value of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number; \n \n    /**  \n      * Returns the index of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number; \n \n    /** \n      * Performs the specified action for each element in an array. \n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    forEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void; \n \n    /** \n      * Returns the index of the first occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \n      *  search starts at index 0. \n      */ \n    indexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * Adds all the elements of an array separated by the specified separator string. \n      * @param separator A string used to separate one element of an array from the next in the  \n      * resulting String. If omitted, the array elements are separated with a comma. \n      */ \n    join(separator?: string): string; \n \n    /** \n      * Returns the index of the last occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the  \n      * search starts at index 0. \n      */ \n    lastIndexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * The length of the array. \n      */ \n    length: number; \n \n    /** \n      * Calls a defined callback function on each element of an array, and returns an array that  \n      * contains the results. \n      * @param callbackfn A function that accepts up to three arguments. The map method calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    map(callbackfn: (value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue?: number): number; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument  \n      * instead of an array value. \n      */ \n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an  \n      * argument instead of an array value. \n      */ \n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue?: number): number; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U; \n \n    /** \n      * Reverses the elements in an Array.  \n      */ \n    reverse(): Int8Array; \n \n    /** \n      * Sets a value or an array of values. \n      * @param index The index of the location to set. \n      * @param value The value to set. \n      */ \n    set(index: number, value: number): void; \n \n    /** \n      * Sets a value or an array of values. \n      * @param array A typed or untyped array of values to set. \n      * @param offset The index in the current array at which the values are to be written. \n      */ \n    set(array: ArrayLike<number>, offset?: number): void; \n \n    /**  \n      * Returns a section of an array. \n      * @param start The beginning of the specified portion of the array. \n      * @param end The end of the specified portion of the array. \n      */ \n    slice(start?: number, end?: number): Int8Array; \n \n    /** \n      * Determines whether the specified callback function returns true for any element of an array. \n      * @param callbackfn A function that accepts up to three arguments. The some method calls the  \n      * callbackfn function for each element in array1 until the callbackfn returns true, or until  \n      * the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    some(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean; \n \n    /** \n      * Sorts an array. \n      * @param compareFn The name of the function used to determine the order of the elements. If  \n      * omitted, the elements are sorted in ascending, ASCII character order. \n      */ \n    sort(compareFn?: (a: number, b: number) => number): Int8Array; \n \n    /** \n      * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements \n      * at begin, inclusive, up to end, exclusive.  \n      * @param begin The index of the beginning of the array. \n      * @param end The index of the end of the array. \n      */ \n    subarray(begin: number, end?: number): Int8Array; \n \n    /** \n      * Converts a number to a string by using the current locale.  \n      */ \n    toLocaleString(): string; \n \n    /** \n      * Returns a string representation of an array. \n      */ \n    toString(): string; \n \n    [index: number]: number; \n} \ninterface Int8ArrayConstructor { \n    prototype: Int8Array; \n    new (length: number): Int8Array; \n    new (array: ArrayLike<number>): Int8Array; \n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int8Array; \n \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * Returns a new array from a set of elements. \n      * @param items A set of elements to include in the new array object. \n      */ \n    of(...items: number[]): Int8Array; \n     \n    /** \n      * Creates an array from an array-like or iterable object. \n      * @param arrayLike An array-like or iterable object to convert to an array. \n      * @param mapfn A mapping function to call on every element of the array. \n      * @param thisArg Value of \'this\' used to invoke the mapfn. \n      */ \n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int8Array; \n \n} \ndeclare var Int8Array: Int8ArrayConstructor; \n \n/** \n  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the  \n  * requested number of bytes could not be allocated an exception is raised. \n  */ \ninterface Uint8Array { \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * The ArrayBuffer instance referenced by the array.  \n      */ \n    buffer: ArrayBuffer; \n \n    /** \n      * The length in bytes of the array. \n      */ \n    byteLength: number; \n \n    /** \n      * The offset in bytes of the array. \n      */ \n    byteOffset: number; \n \n    /**  \n      * Returns the this object after copying a section of the array identified by start and end \n      * to the same array starting at position target \n      * @param target If target is negative, it is treated as length+target where length is the  \n      * length of the array.  \n      * @param start If start is negative, it is treated as length+start. If end is negative, it  \n      * is treated as length+end. \n      * @param end If not specified, length of the this object is used as its default value.  \n      */ \n    copyWithin(target: number, start: number, end?: number): Uint8Array; \n \n    /** \n      * Determines whether all the members of an array satisfy the specified test. \n      * @param callbackfn A function that accepts up to three arguments. The every method calls  \n      * the callbackfn function for each element in array1 until the callbackfn returns false,  \n      * or until the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    every(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean; \n \n    /** \n        * Returns the this object after filling the section identified by start and end with value \n        * @param value value to fill array section with \n        * @param start index to start filling the array at. If start is negative, it is treated as  \n        * length+start where length is the length of the array.  \n        * @param end index to stop filling the array at. If end is negative, it is treated as  \n        * length+end. \n        */ \n    fill(value: number, start?: number, end?: number): Uint8Array; \n \n    /** \n      * Returns the elements of an array that meet the condition specified in a callback function.  \n      * @param callbackfn A function that accepts up to three arguments. The filter method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    filter(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): Uint8Array; \n \n    /**  \n      * Returns the value of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number; \n \n    /**  \n      * Returns the index of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number; \n \n    /** \n      * Performs the specified action for each element in an array. \n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void; \n \n    /** \n      * Returns the index of the first occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \n      *  search starts at index 0. \n      */ \n    indexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * Adds all the elements of an array separated by the specified separator string. \n      * @param separator A string used to separate one element of an array from the next in the  \n      * resulting String. If omitted, the array elements are separated with a comma. \n      */ \n    join(separator?: string): string; \n \n    /** \n      * Returns the index of the last occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the  \n      * search starts at index 0. \n      */ \n    lastIndexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * The length of the array. \n      */ \n    length: number; \n \n    /** \n      * Calls a defined callback function on each element of an array, and returns an array that  \n      * contains the results. \n      * @param callbackfn A function that accepts up to three arguments. The map method calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue?: number): number; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument  \n      * instead of an array value. \n      */ \n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an  \n      * argument instead of an array value. \n      */ \n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue?: number): number; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U; \n \n    /** \n      * Reverses the elements in an Array.  \n      */ \n    reverse(): Uint8Array; \n \n    /** \n      * Sets a value or an array of values. \n      * @param index The index of the location to set. \n      * @param value The value to set. \n      */ \n    set(index: number, value: number): void; \n \n    /** \n      * Sets a value or an array of values. \n      * @param array A typed or untyped array of values to set. \n      * @param offset The index in the current array at which the values are to be written. \n      */ \n    set(array: ArrayLike<number>, offset?: number): void; \n \n    /**  \n      * Returns a section of an array. \n      * @param start The beginning of the specified portion of the array. \n      * @param end The end of the specified portion of the array. \n      */ \n    slice(start?: number, end?: number): Uint8Array; \n \n    /** \n      * Determines whether the specified callback function returns true for any element of an array. \n      * @param callbackfn A function that accepts up to three arguments. The some method calls the  \n      * callbackfn function for each element in array1 until the callbackfn returns true, or until  \n      * the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    some(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean; \n \n    /** \n      * Sorts an array. \n      * @param compareFn The name of the function used to determine the order of the elements. If  \n      * omitted, the elements are sorted in ascending, ASCII character order. \n      */ \n    sort(compareFn?: (a: number, b: number) => number): Uint8Array; \n \n    /** \n      * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements \n      * at begin, inclusive, up to end, exclusive.  \n      * @param begin The index of the beginning of the array. \n      * @param end The index of the end of the array. \n      */ \n    subarray(begin: number, end?: number): Uint8Array; \n \n    /** \n      * Converts a number to a string by using the current locale.  \n      */ \n    toLocaleString(): string; \n \n    /** \n      * Returns a string representation of an array. \n      */ \n    toString(): string; \n \n    [index: number]: number; \n} \n \ninterface Uint8ArrayConstructor { \n    prototype: Uint8Array; \n    new (length: number): Uint8Array; \n    new (array: ArrayLike<number>): Uint8Array; \n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint8Array; \n \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * Returns a new array from a set of elements. \n      * @param items A set of elements to include in the new array object. \n      */ \n    of(...items: number[]): Uint8Array; \n     \n    /** \n      * Creates an array from an array-like or iterable object. \n      * @param arrayLike An array-like or iterable object to convert to an array. \n      * @param mapfn A mapping function to call on every element of the array. \n      * @param thisArg Value of \'this\' used to invoke the mapfn. \n      */ \n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array; \n \n} \ndeclare var Uint8Array: Uint8ArrayConstructor; \n \n/** \n  * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.  \n  * If the requested number of bytes could not be allocated an exception is raised. \n  */ \ninterface Uint8ClampedArray { \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * The ArrayBuffer instance referenced by the array.  \n      */ \n    buffer: ArrayBuffer; \n \n    /** \n      * The length in bytes of the array. \n      */ \n    byteLength: number; \n \n    /** \n      * The offset in bytes of the array. \n      */ \n    byteOffset: number; \n \n    /**  \n      * Returns the this object after copying a section of the array identified by start and end \n      * to the same array starting at position target \n      * @param target If target is negative, it is treated as length+target where length is the  \n      * length of the array.  \n      * @param start If start is negative, it is treated as length+start. If end is negative, it  \n      * is treated as length+end. \n      * @param end If not specified, length of the this object is used as its default value.  \n      */ \n    copyWithin(target: number, start: number, end?: number): Uint8ClampedArray; \n \n    /** \n      * Determines whether all the members of an array satisfy the specified test. \n      * @param callbackfn A function that accepts up to three arguments. The every method calls  \n      * the callbackfn function for each element in array1 until the callbackfn returns false,  \n      * or until the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    every(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean; \n \n    /** \n        * Returns the this object after filling the section identified by start and end with value \n        * @param value value to fill array section with \n        * @param start index to start filling the array at. If start is negative, it is treated as  \n        * length+start where length is the length of the array.  \n        * @param end index to stop filling the array at. If end is negative, it is treated as  \n        * length+end. \n        */ \n    fill(value: number, start?: number, end?: number): Uint8ClampedArray; \n \n    /** \n      * Returns the elements of an array that meet the condition specified in a callback function.  \n      * @param callbackfn A function that accepts up to three arguments. The filter method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    filter(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): Uint8ClampedArray; \n \n    /**  \n      * Returns the value of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number; \n \n    /**  \n      * Returns the index of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number; \n \n    /** \n      * Performs the specified action for each element in an array. \n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    forEach(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => void, thisArg?: any): void; \n \n    /** \n      * Returns the index of the first occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \n      *  search starts at index 0. \n      */ \n    indexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * Adds all the elements of an array separated by the specified separator string. \n      * @param separator A string used to separate one element of an array from the next in the  \n      * resulting String. If omitted, the array elements are separated with a comma. \n      */ \n    join(separator?: string): string; \n \n    /** \n      * Returns the index of the last occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the  \n      * search starts at index 0. \n      */ \n    lastIndexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * The length of the array. \n      */ \n    length: number; \n \n    /** \n      * Calls a defined callback function on each element of an array, and returns an array that  \n      * contains the results. \n      * @param callbackfn A function that accepts up to three arguments. The map method calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    map(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => number, thisArg?: any): Uint8ClampedArray; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue?: number): number; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument  \n      * instead of an array value. \n      */ \n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an  \n      * argument instead of an array value. \n      */ \n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue?: number): number; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U; \n \n    /** \n      * Reverses the elements in an Array.  \n      */ \n    reverse(): Uint8ClampedArray; \n \n    /** \n      * Sets a value or an array of values. \n      * @param index The index of the location to set. \n      * @param value The value to set. \n      */ \n    set(index: number, value: number): void; \n \n    /** \n      * Sets a value or an array of values. \n      * @param array A typed or untyped array of values to set. \n      * @param offset The index in the current array at which the values are to be written. \n      */ \n    set(array: Uint8ClampedArray, offset?: number): void; \n \n    /**  \n      * Returns a section of an array. \n      * @param start The beginning of the specified portion of the array. \n      * @param end The end of the specified portion of the array. \n      */ \n    slice(start?: number, end?: number): Uint8ClampedArray; \n \n    /** \n      * Determines whether the specified callback function returns true for any element of an array. \n      * @param callbackfn A function that accepts up to three arguments. The some method calls the  \n      * callbackfn function for each element in array1 until the callbackfn returns true, or until  \n      * the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    some(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean; \n \n    /** \n      * Sorts an array. \n      * @param compareFn The name of the function used to determine the order of the elements. If  \n      * omitted, the elements are sorted in ascending, ASCII character order. \n      */ \n    sort(compareFn?: (a: number, b: number) => number): Uint8ClampedArray; \n \n    /** \n      * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements \n      * at begin, inclusive, up to end, exclusive.  \n      * @param begin The index of the beginning of the array. \n      * @param end The index of the end of the array. \n      */ \n    subarray(begin: number, end?: number): Uint8ClampedArray; \n \n    /** \n      * Converts a number to a string by using the current locale.  \n      */ \n    toLocaleString(): string; \n \n    /** \n      * Returns a string representation of an array. \n      */ \n    toString(): string; \n \n    [index: number]: number; \n} \n \ninterface Uint8ClampedArrayConstructor { \n    prototype: Uint8ClampedArray; \n    new (length: number): Uint8ClampedArray; \n    new (array: ArrayLike<number>): Uint8ClampedArray; \n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint8ClampedArray; \n \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * Returns a new array from a set of elements. \n      * @param items A set of elements to include in the new array object. \n      */ \n    of(...items: number[]): Uint8ClampedArray; \n \n    /** \n      * Creates an array from an array-like or iterable object. \n      * @param arrayLike An array-like or iterable object to convert to an array. \n      * @param mapfn A mapping function to call on every element of the array. \n      * @param thisArg Value of \'this\' used to invoke the mapfn. \n      */ \n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8ClampedArray; \n} \ndeclare var Uint8ClampedArray: Uint8ClampedArrayConstructor; \n \n/** \n  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the  \n  * requested number of bytes could not be allocated an exception is raised. \n  */ \ninterface Int16Array { \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * The ArrayBuffer instance referenced by the array.  \n      */ \n    buffer: ArrayBuffer; \n \n    /** \n      * The length in bytes of the array. \n      */ \n    byteLength: number; \n \n    /** \n      * The offset in bytes of the array. \n      */ \n    byteOffset: number; \n \n    /**  \n      * Returns the this object after copying a section of the array identified by start and end \n      * to the same array starting at position target \n      * @param target If target is negative, it is treated as length+target where length is the  \n      * length of the array.  \n      * @param start If start is negative, it is treated as length+start. If end is negative, it  \n      * is treated as length+end. \n      * @param end If not specified, length of the this object is used as its default value.  \n      */ \n    copyWithin(target: number, start: number, end?: number): Int16Array; \n \n    /** \n      * Determines whether all the members of an array satisfy the specified test. \n      * @param callbackfn A function that accepts up to three arguments. The every method calls  \n      * the callbackfn function for each element in array1 until the callbackfn returns false,  \n      * or until the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    every(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean; \n \n    /** \n        * Returns the this object after filling the section identified by start and end with value \n        * @param value value to fill array section with \n        * @param start index to start filling the array at. If start is negative, it is treated as  \n        * length+start where length is the length of the array.  \n        * @param end index to stop filling the array at. If end is negative, it is treated as  \n        * length+end. \n        */ \n    fill(value: number, start?: number, end?: number): Int16Array; \n \n    /** \n      * Returns the elements of an array that meet the condition specified in a callback function.  \n      * @param callbackfn A function that accepts up to three arguments. The filter method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    filter(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): Int16Array; \n \n    /**  \n      * Returns the value of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number; \n \n    /**  \n      * Returns the index of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number; \n \n    /** \n      * Performs the specified action for each element in an array. \n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    forEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void; \n \n    /** \n      * Returns the index of the first occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \n      *  search starts at index 0. \n      */ \n    indexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * Adds all the elements of an array separated by the specified separator string. \n      * @param separator A string used to separate one element of an array from the next in the  \n      * resulting String. If omitted, the array elements are separated with a comma. \n      */ \n    join(separator?: string): string; \n \n    /** \n      * Returns the index of the last occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the  \n      * search starts at index 0. \n      */ \n    lastIndexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * The length of the array. \n      */ \n    length: number; \n \n    /** \n      * Calls a defined callback function on each element of an array, and returns an array that  \n      * contains the results. \n      * @param callbackfn A function that accepts up to three arguments. The map method calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    map(callbackfn: (value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue?: number): number; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument  \n      * instead of an array value. \n      */ \n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an  \n      * argument instead of an array value. \n      */ \n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue?: number): number; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U; \n \n    /** \n      * Reverses the elements in an Array.  \n      */ \n    reverse(): Int16Array; \n \n    /** \n      * Sets a value or an array of values. \n      * @param index The index of the location to set. \n      * @param value The value to set. \n      */ \n    set(index: number, value: number): void; \n \n    /** \n      * Sets a value or an array of values. \n      * @param array A typed or untyped array of values to set. \n      * @param offset The index in the current array at which the values are to be written. \n      */ \n    set(array: ArrayLike<number>, offset?: number): void; \n \n    /**  \n      * Returns a section of an array. \n      * @param start The beginning of the specified portion of the array. \n      * @param end The end of the specified portion of the array. \n      */ \n    slice(start?: number, end?: number): Int16Array; \n \n    /** \n      * Determines whether the specified callback function returns true for any element of an array. \n      * @param callbackfn A function that accepts up to three arguments. The some method calls the  \n      * callbackfn function for each element in array1 until the callbackfn returns true, or until  \n      * the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    some(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean; \n \n    /** \n      * Sorts an array. \n      * @param compareFn The name of the function used to determine the order of the elements. If  \n      * omitted, the elements are sorted in ascending, ASCII character order. \n      */ \n    sort(compareFn?: (a: number, b: number) => number): Int16Array; \n \n    /** \n      * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements \n      * at begin, inclusive, up to end, exclusive.  \n      * @param begin The index of the beginning of the array. \n      * @param end The index of the end of the array. \n      */ \n    subarray(begin: number, end?: number): Int16Array; \n \n    /** \n      * Converts a number to a string by using the current locale.  \n      */ \n    toLocaleString(): string; \n \n    /** \n      * Returns a string representation of an array. \n      */ \n    toString(): string; \n \n    [index: number]: number; \n} \n \ninterface Int16ArrayConstructor { \n    prototype: Int16Array; \n    new (length: number): Int16Array; \n    new (array: ArrayLike<number>): Int16Array; \n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int16Array; \n \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * Returns a new array from a set of elements. \n      * @param items A set of elements to include in the new array object. \n      */ \n    of(...items: number[]): Int16Array; \n     \n    /** \n      * Creates an array from an array-like or iterable object. \n      * @param arrayLike An array-like or iterable object to convert to an array. \n      * @param mapfn A mapping function to call on every element of the array. \n      * @param thisArg Value of \'this\' used to invoke the mapfn. \n      */ \n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int16Array; \n \n} \ndeclare var Int16Array: Int16ArrayConstructor; \n \n/** \n  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the  \n  * requested number of bytes could not be allocated an exception is raised. \n  */ \ninterface Uint16Array { \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * The ArrayBuffer instance referenced by the array.  \n      */ \n    buffer: ArrayBuffer; \n \n    /** \n      * The length in bytes of the array. \n      */ \n    byteLength: number; \n \n    /** \n      * The offset in bytes of the array. \n      */ \n    byteOffset: number; \n \n    /**  \n      * Returns the this object after copying a section of the array identified by start and end \n      * to the same array starting at position target \n      * @param target If target is negative, it is treated as length+target where length is the  \n      * length of the array.  \n      * @param start If start is negative, it is treated as length+start. If end is negative, it  \n      * is treated as length+end. \n      * @param end If not specified, length of the this object is used as its default value.  \n      */ \n    copyWithin(target: number, start: number, end?: number): Uint16Array; \n \n    /** \n      * Determines whether all the members of an array satisfy the specified test. \n      * @param callbackfn A function that accepts up to three arguments. The every method calls  \n      * the callbackfn function for each element in array1 until the callbackfn returns false,  \n      * or until the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    every(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean; \n \n    /** \n        * Returns the this object after filling the section identified by start and end with value \n        * @param value value to fill array section with \n        * @param start index to start filling the array at. If start is negative, it is treated as  \n        * length+start where length is the length of the array.  \n        * @param end index to stop filling the array at. If end is negative, it is treated as  \n        * length+end. \n        */ \n    fill(value: number, start?: number, end?: number): Uint16Array; \n \n    /** \n      * Returns the elements of an array that meet the condition specified in a callback function.  \n      * @param callbackfn A function that accepts up to three arguments. The filter method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    filter(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): Uint16Array; \n \n    /**  \n      * Returns the value of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number; \n \n    /**  \n      * Returns the index of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number; \n \n    /** \n      * Performs the specified action for each element in an array. \n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    forEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void; \n \n    /** \n      * Returns the index of the first occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \n      *  search starts at index 0. \n      */ \n    indexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * Adds all the elements of an array separated by the specified separator string. \n      * @param separator A string used to separate one element of an array from the next in the  \n      * resulting String. If omitted, the array elements are separated with a comma. \n      */ \n    join(separator?: string): string; \n \n    /** \n      * Returns the index of the last occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the  \n      * search starts at index 0. \n      */ \n    lastIndexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * The length of the array. \n      */ \n    length: number; \n \n    /** \n      * Calls a defined callback function on each element of an array, and returns an array that  \n      * contains the results. \n      * @param callbackfn A function that accepts up to three arguments. The map method calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    map(callbackfn: (value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue?: number): number; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument  \n      * instead of an array value. \n      */ \n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an  \n      * argument instead of an array value. \n      */ \n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue?: number): number; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U; \n \n    /** \n      * Reverses the elements in an Array.  \n      */ \n    reverse(): Uint16Array; \n \n    /** \n      * Sets a value or an array of values. \n      * @param index The index of the location to set. \n      * @param value The value to set. \n      */ \n    set(index: number, value: number): void; \n \n    /** \n      * Sets a value or an array of values. \n      * @param array A typed or untyped array of values to set. \n      * @param offset The index in the current array at which the values are to be written. \n      */ \n    set(array: ArrayLike<number>, offset?: number): void; \n \n    /**  \n      * Returns a section of an array. \n      * @param start The beginning of the specified portion of the array. \n      * @param end The end of the specified portion of the array. \n      */ \n    slice(start?: number, end?: number): Uint16Array; \n \n    /** \n      * Determines whether the specified callback function returns true for any element of an array. \n      * @param callbackfn A function that accepts up to three arguments. The some method calls the  \n      * callbackfn function for each element in array1 until the callbackfn returns true, or until  \n      * the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    some(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean; \n \n    /** \n      * Sorts an array. \n      * @param compareFn The name of the function used to determine the order of the elements. If  \n      * omitted, the elements are sorted in ascending, ASCII character order. \n      */ \n    sort(compareFn?: (a: number, b: number) => number): Uint16Array; \n \n    /** \n      * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements \n      * at begin, inclusive, up to end, exclusive.  \n      * @param begin The index of the beginning of the array. \n      * @param end The index of the end of the array. \n      */ \n    subarray(begin: number, end?: number): Uint16Array; \n \n    /** \n      * Converts a number to a string by using the current locale.  \n      */ \n    toLocaleString(): string; \n \n    /** \n      * Returns a string representation of an array. \n      */ \n    toString(): string; \n \n    [index: number]: number; \n} \n \ninterface Uint16ArrayConstructor { \n    prototype: Uint16Array; \n    new (length: number): Uint16Array; \n    new (array: ArrayLike<number>): Uint16Array; \n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint16Array; \n \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * Returns a new array from a set of elements. \n      * @param items A set of elements to include in the new array object. \n      */ \n    of(...items: number[]): Uint16Array; \n     \n    /** \n      * Creates an array from an array-like or iterable object. \n      * @param arrayLike An array-like or iterable object to convert to an array. \n      * @param mapfn A mapping function to call on every element of the array. \n      * @param thisArg Value of \'this\' used to invoke the mapfn. \n      */ \n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint16Array; \n \n} \ndeclare var Uint16Array: Uint16ArrayConstructor; \n/** \n  * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the  \n  * requested number of bytes could not be allocated an exception is raised. \n  */ \ninterface Int32Array { \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * The ArrayBuffer instance referenced by the array.  \n      */ \n    buffer: ArrayBuffer; \n \n    /** \n      * The length in bytes of the array. \n      */ \n    byteLength: number; \n \n    /** \n      * The offset in bytes of the array. \n      */ \n    byteOffset: number; \n \n    /**  \n      * Returns the this object after copying a section of the array identified by start and end \n      * to the same array starting at position target \n      * @param target If target is negative, it is treated as length+target where length is the  \n      * length of the array.  \n      * @param start If start is negative, it is treated as length+start. If end is negative, it  \n      * is treated as length+end. \n      * @param end If not specified, length of the this object is used as its default value.  \n      */ \n    copyWithin(target: number, start: number, end?: number): Int32Array; \n \n    /** \n      * Determines whether all the members of an array satisfy the specified test. \n      * @param callbackfn A function that accepts up to three arguments. The every method calls  \n      * the callbackfn function for each element in array1 until the callbackfn returns false,  \n      * or until the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    every(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean; \n \n    /** \n        * Returns the this object after filling the section identified by start and end with value \n        * @param value value to fill array section with \n        * @param start index to start filling the array at. If start is negative, it is treated as  \n        * length+start where length is the length of the array.  \n        * @param end index to stop filling the array at. If end is negative, it is treated as  \n        * length+end. \n        */ \n    fill(value: number, start?: number, end?: number): Int32Array; \n \n    /** \n      * Returns the elements of an array that meet the condition specified in a callback function.  \n      * @param callbackfn A function that accepts up to three arguments. The filter method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    filter(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): Int32Array; \n \n    /**  \n      * Returns the value of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number; \n \n    /**  \n      * Returns the index of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number; \n \n    /** \n      * Performs the specified action for each element in an array. \n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    forEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void; \n \n    /** \n      * Returns the index of the first occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \n      *  search starts at index 0. \n      */ \n    indexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * Adds all the elements of an array separated by the specified separator string. \n      * @param separator A string used to separate one element of an array from the next in the  \n      * resulting String. If omitted, the array elements are separated with a comma. \n      */ \n    join(separator?: string): string; \n \n    /** \n      * Returns the index of the last occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the  \n      * search starts at index 0. \n      */ \n    lastIndexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * The length of the array. \n      */ \n    length: number; \n \n    /** \n      * Calls a defined callback function on each element of an array, and returns an array that  \n      * contains the results. \n      * @param callbackfn A function that accepts up to three arguments. The map method calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    map(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue?: number): number; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument  \n      * instead of an array value. \n      */ \n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an  \n      * argument instead of an array value. \n      */ \n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue?: number): number; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U; \n \n    /** \n      * Reverses the elements in an Array.  \n      */ \n    reverse(): Int32Array; \n \n    /** \n      * Sets a value or an array of values. \n      * @param index The index of the location to set. \n      * @param value The value to set. \n      */ \n    set(index: number, value: number): void; \n \n    /** \n      * Sets a value or an array of values. \n      * @param array A typed or untyped array of values to set. \n      * @param offset The index in the current array at which the values are to be written. \n      */ \n    set(array: ArrayLike<number>, offset?: number): void; \n \n    /**  \n      * Returns a section of an array. \n      * @param start The beginning of the specified portion of the array. \n      * @param end The end of the specified portion of the array. \n      */ \n    slice(start?: number, end?: number): Int32Array; \n \n    /** \n      * Determines whether the specified callback function returns true for any element of an array. \n      * @param callbackfn A function that accepts up to three arguments. The some method calls the  \n      * callbackfn function for each element in array1 until the callbackfn returns true, or until  \n      * the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    some(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean; \n \n    /** \n      * Sorts an array. \n      * @param compareFn The name of the function used to determine the order of the elements. If  \n      * omitted, the elements are sorted in ascending, ASCII character order. \n      */ \n    sort(compareFn?: (a: number, b: number) => number): Int32Array; \n \n    /** \n      * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements \n      * at begin, inclusive, up to end, exclusive.  \n      * @param begin The index of the beginning of the array. \n      * @param end The index of the end of the array. \n      */ \n    subarray(begin: number, end?: number): Int32Array; \n \n    /** \n      * Converts a number to a string by using the current locale.  \n      */ \n    toLocaleString(): string; \n \n    /** \n      * Returns a string representation of an array. \n      */ \n    toString(): string; \n \n    [index: number]: number; \n} \n \ninterface Int32ArrayConstructor { \n    prototype: Int32Array; \n    new (length: number): Int32Array; \n    new (array: ArrayLike<number>): Int32Array; \n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int32Array; \n \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * Returns a new array from a set of elements. \n      * @param items A set of elements to include in the new array object. \n      */ \n    of(...items: number[]): Int32Array; \n     \n    /** \n      * Creates an array from an array-like or iterable object. \n      * @param arrayLike An array-like or iterable object to convert to an array. \n      * @param mapfn A mapping function to call on every element of the array. \n      * @param thisArg Value of \'this\' used to invoke the mapfn. \n      */ \n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int32Array; \n} \ndeclare var Int32Array: Int32ArrayConstructor; \n \n/** \n  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the  \n  * requested number of bytes could not be allocated an exception is raised. \n  */ \ninterface Uint32Array { \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * The ArrayBuffer instance referenced by the array.  \n      */ \n    buffer: ArrayBuffer; \n \n    /** \n      * The length in bytes of the array. \n      */ \n    byteLength: number; \n \n    /** \n      * The offset in bytes of the array. \n      */ \n    byteOffset: number; \n \n    /**  \n      * Returns the this object after copying a section of the array identified by start and end \n      * to the same array starting at position target \n      * @param target If target is negative, it is treated as length+target where length is the  \n      * length of the array.  \n      * @param start If start is negative, it is treated as length+start. If end is negative, it  \n      * is treated as length+end. \n      * @param end If not specified, length of the this object is used as its default value.  \n      */ \n    copyWithin(target: number, start: number, end?: number): Uint32Array; \n \n    /** \n      * Determines whether all the members of an array satisfy the specified test. \n      * @param callbackfn A function that accepts up to three arguments. The every method calls  \n      * the callbackfn function for each element in array1 until the callbackfn returns false,  \n      * or until the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    every(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean; \n \n    /** \n        * Returns the this object after filling the section identified by start and end with value \n        * @param value value to fill array section with \n        * @param start index to start filling the array at. If start is negative, it is treated as  \n        * length+start where length is the length of the array.  \n        * @param end index to stop filling the array at. If end is negative, it is treated as  \n        * length+end. \n        */ \n    fill(value: number, start?: number, end?: number): Uint32Array; \n \n    /** \n      * Returns the elements of an array that meet the condition specified in a callback function.  \n      * @param callbackfn A function that accepts up to three arguments. The filter method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    filter(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): Uint32Array; \n \n    /**  \n      * Returns the value of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number; \n \n    /**  \n      * Returns the index of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number; \n \n    /** \n      * Performs the specified action for each element in an array. \n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    forEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void; \n \n    /** \n      * Returns the index of the first occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \n      *  search starts at index 0. \n      */ \n    indexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * Adds all the elements of an array separated by the specified separator string. \n      * @param separator A string used to separate one element of an array from the next in the  \n      * resulting String. If omitted, the array elements are separated with a comma. \n      */ \n    join(separator?: string): string; \n \n    /** \n      * Returns the index of the last occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the  \n      * search starts at index 0. \n      */ \n    lastIndexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * The length of the array. \n      */ \n    length: number; \n \n    /** \n      * Calls a defined callback function on each element of an array, and returns an array that  \n      * contains the results. \n      * @param callbackfn A function that accepts up to three arguments. The map method calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    map(callbackfn: (value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue?: number): number; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument  \n      * instead of an array value. \n      */ \n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an  \n      * argument instead of an array value. \n      */ \n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue?: number): number; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U; \n \n    /** \n      * Reverses the elements in an Array.  \n      */ \n    reverse(): Uint32Array; \n \n    /** \n      * Sets a value or an array of values. \n      * @param index The index of the location to set. \n      * @param value The value to set. \n      */ \n    set(index: number, value: number): void; \n \n    /** \n      * Sets a value or an array of values. \n      * @param array A typed or untyped array of values to set. \n      * @param offset The index in the current array at which the values are to be written. \n      */ \n    set(array: ArrayLike<number>, offset?: number): void; \n \n    /**  \n      * Returns a section of an array. \n      * @param start The beginning of the specified portion of the array. \n      * @param end The end of the specified portion of the array. \n      */ \n    slice(start?: number, end?: number): Uint32Array; \n \n    /** \n      * Determines whether the specified callback function returns true for any element of an array. \n      * @param callbackfn A function that accepts up to three arguments. The some method calls the  \n      * callbackfn function for each element in array1 until the callbackfn returns true, or until  \n      * the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    some(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean; \n \n    /** \n      * Sorts an array. \n      * @param compareFn The name of the function used to determine the order of the elements. If  \n      * omitted, the elements are sorted in ascending, ASCII character order. \n      */ \n    sort(compareFn?: (a: number, b: number) => number): Uint32Array; \n \n    /** \n      * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements \n      * at begin, inclusive, up to end, exclusive.  \n      * @param begin The index of the beginning of the array. \n      * @param end The index of the end of the array. \n      */ \n    subarray(begin: number, end?: number): Uint32Array; \n \n    /** \n      * Converts a number to a string by using the current locale.  \n      */ \n    toLocaleString(): string; \n \n    /** \n      * Returns a string representation of an array. \n      */ \n    toString(): string; \n \n    [index: number]: number; \n} \n \ninterface Uint32ArrayConstructor { \n    prototype: Uint32Array; \n    new (length: number): Uint32Array; \n    new (array: ArrayLike<number>): Uint32Array; \n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint32Array; \n \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * Returns a new array from a set of elements. \n      * @param items A set of elements to include in the new array object. \n      */ \n    of(...items: number[]): Uint32Array; \n     \n    /** \n      * Creates an array from an array-like or iterable object. \n      * @param arrayLike An array-like or iterable object to convert to an array. \n      * @param mapfn A mapping function to call on every element of the array. \n      * @param thisArg Value of \'this\' used to invoke the mapfn. \n      */ \n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint32Array; \n} \ndeclare var Uint32Array: Uint32ArrayConstructor; \n \n/** \n  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number \n  * of bytes could not be allocated an exception is raised. \n  */ \ninterface Float32Array { \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * The ArrayBuffer instance referenced by the array.  \n      */ \n    buffer: ArrayBuffer; \n \n    /** \n      * The length in bytes of the array. \n      */ \n    byteLength: number; \n \n    /** \n      * The offset in bytes of the array. \n      */ \n    byteOffset: number; \n \n    /**  \n      * Returns the this object after copying a section of the array identified by start and end \n      * to the same array starting at position target \n      * @param target If target is negative, it is treated as length+target where length is the  \n      * length of the array.  \n      * @param start If start is negative, it is treated as length+start. If end is negative, it  \n      * is treated as length+end. \n      * @param end If not specified, length of the this object is used as its default value.  \n      */ \n    copyWithin(target: number, start: number, end?: number): Float32Array; \n \n    /** \n      * Determines whether all the members of an array satisfy the specified test. \n      * @param callbackfn A function that accepts up to three arguments. The every method calls  \n      * the callbackfn function for each element in array1 until the callbackfn returns false,  \n      * or until the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    every(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean; \n \n    /** \n        * Returns the this object after filling the section identified by start and end with value \n        * @param value value to fill array section with \n        * @param start index to start filling the array at. If start is negative, it is treated as  \n        * length+start where length is the length of the array.  \n        * @param end index to stop filling the array at. If end is negative, it is treated as  \n        * length+end. \n        */ \n    fill(value: number, start?: number, end?: number): Float32Array; \n \n    /** \n      * Returns the elements of an array that meet the condition specified in a callback function.  \n      * @param callbackfn A function that accepts up to three arguments. The filter method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    filter(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): Float32Array; \n \n    /**  \n      * Returns the value of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number; \n \n    /**  \n      * Returns the index of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number; \n \n    /** \n      * Performs the specified action for each element in an array. \n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    forEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void; \n \n    /** \n      * Returns the index of the first occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \n      *  search starts at index 0. \n      */ \n    indexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * Adds all the elements of an array separated by the specified separator string. \n      * @param separator A string used to separate one element of an array from the next in the  \n      * resulting String. If omitted, the array elements are separated with a comma. \n      */ \n    join(separator?: string): string; \n \n    /** \n      * Returns the index of the last occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the  \n      * search starts at index 0. \n      */ \n    lastIndexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * The length of the array. \n      */ \n    length: number; \n \n    /** \n      * Calls a defined callback function on each element of an array, and returns an array that  \n      * contains the results. \n      * @param callbackfn A function that accepts up to three arguments. The map method calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    map(callbackfn: (value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue?: number): number; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument  \n      * instead of an array value. \n      */ \n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an  \n      * argument instead of an array value. \n      */ \n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue?: number): number; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U; \n \n    /** \n      * Reverses the elements in an Array.  \n      */ \n    reverse(): Float32Array; \n \n    /** \n      * Sets a value or an array of values. \n      * @param index The index of the location to set. \n      * @param value The value to set. \n      */ \n    set(index: number, value: number): void; \n \n    /** \n      * Sets a value or an array of values. \n      * @param array A typed or untyped array of values to set. \n      * @param offset The index in the current array at which the values are to be written. \n      */ \n    set(array: ArrayLike<number>, offset?: number): void; \n \n    /**  \n      * Returns a section of an array. \n      * @param start The beginning of the specified portion of the array. \n      * @param end The end of the specified portion of the array. \n      */ \n    slice(start?: number, end?: number): Float32Array; \n \n    /** \n      * Determines whether the specified callback function returns true for any element of an array. \n      * @param callbackfn A function that accepts up to three arguments. The some method calls the  \n      * callbackfn function for each element in array1 until the callbackfn returns true, or until  \n      * the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    some(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean; \n \n    /** \n      * Sorts an array. \n      * @param compareFn The name of the function used to determine the order of the elements. If  \n      * omitted, the elements are sorted in ascending, ASCII character order. \n      */ \n    sort(compareFn?: (a: number, b: number) => number): Float32Array; \n \n    /** \n      * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements \n      * at begin, inclusive, up to end, exclusive.  \n      * @param begin The index of the beginning of the array. \n      * @param end The index of the end of the array. \n      */ \n    subarray(begin: number, end?: number): Float32Array; \n \n    /** \n      * Converts a number to a string by using the current locale.  \n      */ \n    toLocaleString(): string; \n \n    /** \n      * Returns a string representation of an array. \n      */ \n    toString(): string; \n \n    [index: number]: number; \n} \n \ninterface Float32ArrayConstructor { \n    prototype: Float32Array; \n    new (length: number): Float32Array; \n    new (array: ArrayLike<number>): Float32Array; \n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float32Array; \n \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * Returns a new array from a set of elements. \n      * @param items A set of elements to include in the new array object. \n      */ \n    of(...items: number[]): Float32Array; \n     \n    /** \n      * Creates an array from an array-like or iterable object. \n      * @param arrayLike An array-like or iterable object to convert to an array. \n      * @param mapfn A mapping function to call on every element of the array. \n      * @param thisArg Value of \'this\' used to invoke the mapfn. \n      */ \n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float32Array; \n \n} \ndeclare var Float32Array: Float32ArrayConstructor; \n \n/** \n  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested  \n  * number of bytes could not be allocated an exception is raised. \n  */ \ninterface Float64Array { \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * The ArrayBuffer instance referenced by the array.  \n      */ \n    buffer: ArrayBuffer; \n \n    /** \n      * The length in bytes of the array. \n      */ \n    byteLength: number; \n \n    /** \n      * The offset in bytes of the array. \n      */ \n    byteOffset: number; \n \n    /**  \n      * Returns the this object after copying a section of the array identified by start and end \n      * to the same array starting at position target \n      * @param target If target is negative, it is treated as length+target where length is the  \n      * length of the array.  \n      * @param start If start is negative, it is treated as length+start. If end is negative, it  \n      * is treated as length+end. \n      * @param end If not specified, length of the this object is used as its default value.  \n      */ \n    copyWithin(target: number, start: number, end?: number): Float64Array; \n \n    /** \n      * Determines whether all the members of an array satisfy the specified test. \n      * @param callbackfn A function that accepts up to three arguments. The every method calls  \n      * the callbackfn function for each element in array1 until the callbackfn returns false,  \n      * or until the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    every(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean; \n \n    /** \n        * Returns the this object after filling the section identified by start and end with value \n        * @param value value to fill array section with \n        * @param start index to start filling the array at. If start is negative, it is treated as  \n        * length+start where length is the length of the array.  \n        * @param end index to stop filling the array at. If end is negative, it is treated as  \n        * length+end. \n        */ \n    fill(value: number, start?: number, end?: number): Float64Array; \n \n    /** \n      * Returns the elements of an array that meet the condition specified in a callback function.  \n      * @param callbackfn A function that accepts up to three arguments. The filter method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    filter(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): Float64Array; \n \n    /**  \n      * Returns the value of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number; \n \n    /**  \n      * Returns the index of the first element in the array where predicate is true, and undefined  \n      * otherwise. \n      * @param predicate find calls predicate once for each element of the array, in ascending  \n      * order, until it finds one where predicate returns true. If such an element is found, find  \n      * immediately returns that element value. Otherwise, find returns undefined. \n      * @param thisArg If provided, it will be used as the this value for each invocation of  \n      * predicate. If it is not provided, undefined is used instead. \n      */ \n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number; \n \n    /** \n      * Performs the specified action for each element in an array. \n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    forEach(callbackfn: (value: number, index: number, array: Float64Array) => void, thisArg?: any): void; \n \n    /** \n      * Returns the index of the first occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \n      *  search starts at index 0. \n      */ \n    indexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * Adds all the elements of an array separated by the specified separator string. \n      * @param separator A string used to separate one element of an array from the next in the  \n      * resulting String. If omitted, the array elements are separated with a comma. \n      */ \n    join(separator?: string): string; \n \n    /** \n      * Returns the index of the last occurrence of a value in an array. \n      * @param searchElement The value to locate in the array. \n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the  \n      * search starts at index 0. \n      */ \n    lastIndexOf(searchElement: number, fromIndex?: number): number; \n \n    /** \n      * The length of the array. \n      */ \n    length: number; \n \n    /** \n      * Calls a defined callback function on each element of an array, and returns an array that  \n      * contains the results. \n      * @param callbackfn A function that accepts up to three arguments. The map method calls the  \n      * callbackfn function one time for each element in the array.  \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    map(callbackfn: (value: number, index: number, array: Float64Array) => number, thisArg?: any): Float64Array; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue?: number): number; \n \n    /** \n      * Calls the specified callback function for all the elements in an array. The return value of  \n      * the callback function is the accumulated result, and is provided as an argument in the next  \n      * call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the  \n      * callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument  \n      * instead of an array value. \n      */ \n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls  \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an  \n      * argument instead of an array value. \n      */ \n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue?: number): number; \n \n    /**  \n      * Calls the specified callback function for all the elements in an array, in descending order.  \n      * The return value of the callback function is the accumulated result, and is provided as an  \n      * argument in the next call to the callback function. \n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \n      * the callbackfn function one time for each element in the array.  \n      * @param initialValue If initialValue is specified, it is used as the initial value to start  \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value. \n      */ \n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U; \n \n    /** \n      * Reverses the elements in an Array.  \n      */ \n    reverse(): Float64Array; \n \n    /** \n      * Sets a value or an array of values. \n      * @param index The index of the location to set. \n      * @param value The value to set. \n      */ \n    set(index: number, value: number): void; \n \n    /** \n      * Sets a value or an array of values. \n      * @param array A typed or untyped array of values to set. \n      * @param offset The index in the current array at which the values are to be written. \n      */ \n    set(array: ArrayLike<number>, offset?: number): void; \n \n    /**  \n      * Returns a section of an array. \n      * @param start The beginning of the specified portion of the array. \n      * @param end The end of the specified portion of the array. \n      */ \n    slice(start?: number, end?: number): Float64Array; \n \n    /** \n      * Determines whether the specified callback function returns true for any element of an array. \n      * @param callbackfn A function that accepts up to three arguments. The some method calls the  \n      * callbackfn function for each element in array1 until the callbackfn returns true, or until  \n      * the end of the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.  \n      * If thisArg is omitted, undefined is used as the this value. \n      */ \n    some(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean; \n \n    /** \n      * Sorts an array. \n      * @param compareFn The name of the function used to determine the order of the elements. If  \n      * omitted, the elements are sorted in ascending, ASCII character order. \n      */ \n    sort(compareFn?: (a: number, b: number) => number): Float64Array; \n \n    /** \n      * Gets a new Float64Array view of the ArrayBuffer store for this array, referencing the elements \n      * at begin, inclusive, up to end, exclusive.  \n      * @param begin The index of the beginning of the array. \n      * @param end The index of the end of the array. \n      */ \n    subarray(begin: number, end?: number): Float64Array; \n \n    /** \n      * Converts a number to a string by using the current locale.  \n      */ \n    toLocaleString(): string; \n \n    /** \n      * Returns a string representation of an array. \n      */ \n    toString(): string; \n \n    [index: number]: number; \n} \n \ninterface Float64ArrayConstructor { \n    prototype: Float64Array; \n    new (length: number): Float64Array; \n    new (array: ArrayLike<number>): Float64Array; \n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float64Array; \n \n    /** \n      * The size in bytes of each element in the array.  \n      */ \n    BYTES_PER_ELEMENT: number; \n \n    /** \n      * Returns a new array from a set of elements. \n      * @param items A set of elements to include in the new array object. \n      */ \n    of(...items: number[]): Float64Array; \n     \n    /** \n      * Creates an array from an array-like or iterable object. \n      * @param arrayLike An array-like or iterable object to convert to an array. \n      * @param mapfn A mapping function to call on every element of the array. \n      * @param thisArg Value of \'this\' used to invoke the mapfn. \n      */ \n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float64Array; \n} \ndeclare var Float64Array: Float64ArrayConstructor; \n///////////////////////////// \n/// ECMAScript Internationalization API  \n///////////////////////////// \n \ndeclare module Intl { \n    interface CollatorOptions { \n        usage?: string; \n        localeMatcher?: string; \n        numeric?: boolean; \n        caseFirst?: string; \n        sensitivity?: string; \n        ignorePunctuation?: boolean; \n    } \n \n    interface ResolvedCollatorOptions { \n        locale: string; \n        usage: string; \n        sensitivity: string; \n        ignorePunctuation: boolean; \n        collation: string; \n        caseFirst: string; \n        numeric: boolean; \n    } \n \n    interface Collator { \n        compare(x: string, y: string): number; \n        resolvedOptions(): ResolvedCollatorOptions; \n    } \n    var Collator: { \n        new (locales?: string[], options?: CollatorOptions): Collator; \n        new (locale?: string, options?: CollatorOptions): Collator; \n        (locales?: string[], options?: CollatorOptions): Collator; \n        (locale?: string, options?: CollatorOptions): Collator; \n        supportedLocalesOf(locales: string[], options?: CollatorOptions): string[]; \n        supportedLocalesOf(locale: string, options?: CollatorOptions): string[]; \n    } \n \n    interface NumberFormatOptions { \n        localeMatcher?: string; \n        style?: string; \n        currency?: string; \n        currencyDisplay?: string; \n        useGrouping?: boolean; \n        minimumintegerDigits?: number; \n        minimumFractionDigits?: number; \n        maximumFractionDigits?: number; \n        minimumSignificantDigits?: number; \n        maximumSignificantDigits?: number; \n    } \n \n    interface ResolvedNumberFormatOptions { \n        locale: string; \n        numberingSystem: string; \n        style: string; \n        currency?: string; \n        currencyDisplay?: string; \n        minimumintegerDigits: number; \n        minimumFractionDigits: number; \n        maximumFractionDigits: number; \n        minimumSignificantDigits?: number; \n        maximumSignificantDigits?: number; \n        useGrouping: boolean; \n    } \n \n    interface NumberFormat { \n        format(value: number): string; \n        resolvedOptions(): ResolvedNumberFormatOptions; \n    } \n    var NumberFormat: { \n        new (locales?: string[], options?: NumberFormatOptions): NumberFormat; \n        new (locale?: string, options?: NumberFormatOptions): NumberFormat; \n        (locales?: string[], options?: NumberFormatOptions): NumberFormat; \n        (locale?: string, options?: NumberFormatOptions): NumberFormat; \n        supportedLocalesOf(locales: string[], options?: NumberFormatOptions): string[]; \n        supportedLocalesOf(locale: string, options?: NumberFormatOptions): string[]; \n    } \n \n    interface DateTimeFormatOptions { \n        localeMatcher?: string; \n        weekday?: string; \n        era?: string; \n        year?: string; \n        month?: string; \n        day?: string; \n        hour?: string; \n        minute?: string; \n        second?: string; \n        timeZoneName?: string; \n        formatMatcher?: string; \n        hour12?: boolean; \n    } \n \n    interface ResolvedDateTimeFormatOptions { \n        locale: string; \n        calendar: string; \n        numberingSystem: string; \n        timeZone: string; \n        hour12?: boolean; \n        weekday?: string; \n        era?: string; \n        year?: string; \n        month?: string; \n        day?: string; \n        hour?: string; \n        minute?: string; \n        second?: string; \n        timeZoneName?: string; \n    } \n \n    interface DateTimeFormat { \n        format(date?: Date | number): string; \n        resolvedOptions(): ResolvedDateTimeFormatOptions; \n    } \n    var DateTimeFormat: { \n        new (locales?: string[], options?: DateTimeFormatOptions): DateTimeFormat; \n        new (locale?: string, options?: DateTimeFormatOptions): DateTimeFormat; \n        (locales?: string[], options?: DateTimeFormatOptions): DateTimeFormat; \n        (locale?: string, options?: DateTimeFormatOptions): DateTimeFormat; \n        supportedLocalesOf(locales: string[], options?: DateTimeFormatOptions): string[]; \n        supportedLocalesOf(locale: string, options?: DateTimeFormatOptions): string[]; \n    } \n} \n \ninterface String { \n    /** \n      * Determines whether two strings are equivalent in the current locale. \n      * @param that String to compare to target string \n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details. \n      * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details. \n      */ \n    localeCompare(that: string, locales: string[], options?: Intl.CollatorOptions): number; \n \n    /** \n      * Determines whether two strings are equivalent in the current locale. \n      * @param that String to compare to target string \n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details. \n      * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details. \n      */ \n    localeCompare(that: string, locale: string, options?: Intl.CollatorOptions): number; \n} \n \ninterface Number { \n    /** \n      * Converts a number to a string by using the current or specified locale.  \n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. \n      * @param options An object that contains one or more properties that specify comparison options. \n      */ \n    toLocaleString(locales?: string[], options?: Intl.NumberFormatOptions): string; \n \n    /** \n      * Converts a number to a string by using the current or specified locale.  \n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used. \n      * @param options An object that contains one or more properties that specify comparison options. \n      */ \n    toLocaleString(locale?: string, options?: Intl.NumberFormatOptions): string; \n} \n \ninterface Date { \n    /** \n      * Converts a date to a string by using the current or specified locale.   \n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. \n      * @param options An object that contains one or more properties that specify comparison options. \n      */ \n    toLocaleString(locales?: string[], options?: Intl.DateTimeFormatOptions): string; \n \n    /** \n      * Converts a date to a string by using the current or specified locale.   \n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used. \n      * @param options An object that contains one or more properties that specify comparison options. \n      */ \n    toLocaleString(locale?: string, options?: Intl.DateTimeFormatOptions): string; \n} \n \n \n///////////////////////////// \n/// IE DOM APIs \n///////////////////////////// \n \ninterface Algorithm { \n    name?: string; \n} \n \ninterface AriaRequestEventInit extends EventInit { \n    attributeName?: string; \n    attributeValue?: string; \n} \n \ninterface ClipboardEventInit extends EventInit { \n    data?: string; \n    dataType?: string; \n} \n \ninterface CommandEventInit extends EventInit { \n    commandName?: string; \n    detail?: string; \n} \n \ninterface CompositionEventInit extends UIEventInit { \n    data?: string; \n} \n \ninterface ConfirmSiteSpecificExceptionsInformation extends ExceptionInformation { \n    arrayOfDomainStrings?: string[]; \n} \n \ninterface CustomEventInit extends EventInit { \n    detail?: any; \n} \n \ninterface DeviceAccelerationDict { \n    x?: number; \n    y?: number; \n    z?: number; \n} \n \ninterface DeviceRotationRateDict { \n    alpha?: number; \n    beta?: number; \n    gamma?: number; \n} \n \ninterface EventInit { \n    bubbles?: boolean; \n    cancelable?: boolean; \n} \n \ninterface ExceptionInformation { \n    domain?: string; \n} \n \ninterface FocusEventInit extends UIEventInit { \n    relatedTarget?: EventTarget; \n} \n \ninterface HashChangeEventInit extends EventInit { \n    newURL?: string; \n    oldURL?: string; \n} \n \ninterface KeyAlgorithm { \n    name?: string; \n} \n \ninterface KeyboardEventInit extends SharedKeyboardAndMouseEventInit { \n    key?: string; \n    location?: number; \n    repeat?: boolean; \n} \n \ninterface MouseEventInit extends SharedKeyboardAndMouseEventInit { \n    screenX?: number; \n    screenY?: number; \n    clientX?: number; \n    clientY?: number; \n    button?: number; \n    buttons?: number; \n    relatedTarget?: EventTarget; \n} \n \ninterface MsZoomToOptions { \n    contentX?: number; \n    contentY?: number; \n    viewportX?: string; \n    viewportY?: string; \n    scaleFactor?: number; \n    animate?: string; \n} \n \ninterface MutationObserverInit { \n    childList?: boolean; \n    attributes?: boolean; \n    characterData?: boolean; \n    subtree?: boolean; \n    attributeOldValue?: boolean; \n    characterDataOldValue?: boolean; \n    attributeFilter?: string[]; \n} \n \ninterface ObjectURLOptions { \n    oneTimeOnly?: boolean; \n} \n \ninterface PointerEventInit extends MouseEventInit { \n    pointerId?: number; \n    width?: number; \n    height?: number; \n    pressure?: number; \n    tiltX?: number; \n    tiltY?: number; \n    pointerType?: string; \n    isPrimary?: boolean; \n} \n \ninterface PositionOptions { \n    enableHighAccuracy?: boolean; \n    timeout?: number; \n    maximumAge?: number; \n} \n \ninterface SharedKeyboardAndMouseEventInit extends UIEventInit { \n    ctrlKey?: boolean; \n    shiftKey?: boolean; \n    altKey?: boolean; \n    metaKey?: boolean; \n    keyModifierStateAltGraph?: boolean; \n    keyModifierStateCapsLock?: boolean; \n    keyModifierStateFn?: boolean; \n    keyModifierStateFnLock?: boolean; \n    keyModifierStateHyper?: boolean; \n    keyModifierStateNumLock?: boolean; \n    keyModifierStateOS?: boolean; \n    keyModifierStateScrollLock?: boolean; \n    keyModifierStateSuper?: boolean; \n    keyModifierStateSymbol?: boolean; \n    keyModifierStateSymbolLock?: boolean; \n} \n \ninterface StoreExceptionsInformation extends ExceptionInformation { \n    siteName?: string; \n    explanationString?: string; \n    detailURI?: string; \n} \n \ninterface StoreSiteSpecificExceptionsInformation extends StoreExceptionsInformation { \n    arrayOfDomainStrings?: string[]; \n} \n \ninterface UIEventInit extends EventInit { \n    view?: Window; \n    detail?: number; \n} \n \ninterface WebGLContextAttributes { \n    alpha?: boolean; \n    depth?: boolean; \n    stencil?: boolean; \n    antialias?: boolean; \n    premultipliedAlpha?: boolean; \n    preserveDrawingBuffer?: boolean; \n} \n \ninterface WebGLContextEventInit extends EventInit { \n    statusMessage?: string; \n} \n \ninterface WheelEventInit extends MouseEventInit { \n    deltaX?: number; \n    deltaY?: number; \n    deltaZ?: number; \n    deltaMode?: number; \n} \n \ninterface EventListener { \n    (evt: Event): void; \n} \n \ninterface ANGLE_instanced_arrays { \n    drawArraysInstancedANGLE(mode: number, first: number, count: number, primcount: number): void; \n    drawElementsInstancedANGLE(mode: number, count: number, type: number, offset: number, primcount: number): void; \n    vertexAttribDivisorANGLE(index: number, divisor: number): void; \n    VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: number; \n} \n \ndeclare var ANGLE_instanced_arrays: { \n    prototype: ANGLE_instanced_arrays; \n    new(): ANGLE_instanced_arrays; \n    VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: number; \n} \n \ninterface AnalyserNode extends AudioNode { \n    fftSize: number; \n    frequencyBinCount: number; \n    maxDecibels: number; \n    minDecibels: number; \n    smoothingTimeConstant: number; \n    getByteFrequencyData(array: Uint8Array): void; \n    getByteTimeDomainData(array: Uint8Array): void; \n    getFloatFrequencyData(array: any): void; \n    getFloatTimeDomainData(array: any): void; \n} \n \ndeclare var AnalyserNode: { \n    prototype: AnalyserNode; \n    new(): AnalyserNode; \n} \n \ninterface AnimationEvent extends Event { \n    animationName: string; \n    elapsedTime: number; \n    initAnimationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, animationNameArg: string, elapsedTimeArg: number): void; \n} \n \ndeclare var AnimationEvent: { \n    prototype: AnimationEvent; \n    new(): AnimationEvent; \n} \n \ninterface ApplicationCache extends EventTarget { \n    oncached: (ev: Event) => any; \n    onchecking: (ev: Event) => any; \n    ondownloading: (ev: Event) => any; \n    onerror: (ev: Event) => any; \n    onnoupdate: (ev: Event) => any; \n    onobsolete: (ev: Event) => any; \n    onprogress: (ev: ProgressEvent) => any; \n    onupdateready: (ev: Event) => any; \n    status: number; \n    abort(): void; \n    swapCache(): void; \n    update(): void; \n    CHECKING: number; \n    DOWNLOADING: number; \n    IDLE: number; \n    OBSOLETE: number; \n    UNCACHED: number; \n    UPDATEREADY: number; \n    addEventListener(type: "cached", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "checking", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "downloading", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "noupdate", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "obsolete", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "updateready", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var ApplicationCache: { \n    prototype: ApplicationCache; \n    new(): ApplicationCache; \n    CHECKING: number; \n    DOWNLOADING: number; \n    IDLE: number; \n    OBSOLETE: number; \n    UNCACHED: number; \n    UPDATEREADY: number; \n} \n \ninterface AriaRequestEvent extends Event { \n    attributeName: string; \n    attributeValue: string; \n} \n \ndeclare var AriaRequestEvent: { \n    prototype: AriaRequestEvent; \n    new(type: string, eventInitDict?: AriaRequestEventInit): AriaRequestEvent; \n} \n \ninterface Attr extends Node { \n    name: string; \n    ownerElement: Element; \n    specified: boolean; \n    value: string; \n} \n \ndeclare var Attr: { \n    prototype: Attr; \n    new(): Attr; \n} \n \ninterface AudioBuffer { \n    duration: number; \n    length: number; \n    numberOfChannels: number; \n    sampleRate: number; \n    getChannelData(channel: number): any; \n} \n \ndeclare var AudioBuffer: { \n    prototype: AudioBuffer; \n    new(): AudioBuffer; \n} \n \ninterface AudioBufferSourceNode extends AudioNode { \n    buffer: AudioBuffer; \n    loop: boolean; \n    loopEnd: number; \n    loopStart: number; \n    onended: (ev: Event) => any; \n    playbackRate: AudioParam; \n    start(when?: number, offset?: number, duration?: number): void; \n    stop(when?: number): void; \n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var AudioBufferSourceNode: { \n    prototype: AudioBufferSourceNode; \n    new(): AudioBufferSourceNode; \n} \n \ninterface AudioContext extends EventTarget { \n    currentTime: number; \n    destination: AudioDestinationNode; \n    listener: AudioListener; \n    sampleRate: number; \n    createAnalyser(): AnalyserNode; \n    createBiquadFilter(): BiquadFilterNode; \n    createBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer; \n    createBufferSource(): AudioBufferSourceNode; \n    createChannelMerger(numberOfInputs?: number): ChannelMergerNode; \n    createChannelSplitter(numberOfOutputs?: number): ChannelSplitterNode; \n    createConvolver(): ConvolverNode; \n    createDelay(maxDelayTime?: number): DelayNode; \n    createDynamicsCompressor(): DynamicsCompressorNode; \n    createGain(): GainNode; \n    createMediaElementSource(mediaElement: HTMLMediaElement): MediaElementAudioSourceNode; \n    createOscillator(): OscillatorNode; \n    createPanner(): PannerNode; \n    createPeriodicWave(real: any, imag: any): PeriodicWave; \n    createScriptProcessor(bufferSize?: number, numberOfInputChannels?: number, numberOfOutputChannels?: number): ScriptProcessorNode; \n    createStereoPanner(): StereoPannerNode; \n    createWaveShaper(): WaveShaperNode; \n    decodeAudioData(audioData: ArrayBuffer, successCallback: DecodeSuccessCallback, errorCallback?: DecodeErrorCallback): void; \n} \n \ndeclare var AudioContext: { \n    prototype: AudioContext; \n    new(): AudioContext; \n} \n \ninterface AudioDestinationNode extends AudioNode { \n    maxChannelCount: number; \n} \n \ndeclare var AudioDestinationNode: { \n    prototype: AudioDestinationNode; \n    new(): AudioDestinationNode; \n} \n \ninterface AudioListener { \n    dopplerFactor: number; \n    speedOfSound: number; \n    setOrientation(x: number, y: number, z: number, xUp: number, yUp: number, zUp: number): void; \n    setPosition(x: number, y: number, z: number): void; \n    setVelocity(x: number, y: number, z: number): void; \n} \n \ndeclare var AudioListener: { \n    prototype: AudioListener; \n    new(): AudioListener; \n} \n \ninterface AudioNode extends EventTarget { \n    channelCount: number; \n    channelCountMode: string; \n    channelInterpretation: string; \n    context: AudioContext; \n    numberOfInputs: number; \n    numberOfOutputs: number; \n    connect(destination: AudioNode, output?: number, input?: number): void; \n    disconnect(output?: number): void; \n} \n \ndeclare var AudioNode: { \n    prototype: AudioNode; \n    new(): AudioNode; \n} \n \ninterface AudioParam { \n    defaultValue: number; \n    value: number; \n    cancelScheduledValues(startTime: number): void; \n    exponentialRampToValueAtTime(value: number, endTime: number): void; \n    linearRampToValueAtTime(value: number, endTime: number): void; \n    setTargetAtTime(target: number, startTime: number, timeConstant: number): void; \n    setValueAtTime(value: number, startTime: number): void; \n    setValueCurveAtTime(values: any, startTime: number, duration: number): void; \n} \n \ndeclare var AudioParam: { \n    prototype: AudioParam; \n    new(): AudioParam; \n} \n \ninterface AudioProcessingEvent extends Event { \n    inputBuffer: AudioBuffer; \n    outputBuffer: AudioBuffer; \n    playbackTime: number; \n} \n \ndeclare var AudioProcessingEvent: { \n    prototype: AudioProcessingEvent; \n    new(): AudioProcessingEvent; \n} \n \ninterface AudioTrack { \n    enabled: boolean; \n    id: string; \n    kind: string; \n    label: string; \n    language: string; \n    sourceBuffer: SourceBuffer; \n} \n \ndeclare var AudioTrack: { \n    prototype: AudioTrack; \n    new(): AudioTrack; \n} \n \ninterface AudioTrackList extends EventTarget { \n    length: number; \n    onaddtrack: (ev: TrackEvent) => any; \n    onchange: (ev: Event) => any; \n    onremovetrack: (ev: TrackEvent) => any; \n    getTrackById(id: string): AudioTrack; \n    item(index: number): AudioTrack; \n    addEventListener(type: "addtrack", listener: (ev: TrackEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "removetrack", listener: (ev: TrackEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n    [index: number]: AudioTrack; \n} \n \ndeclare var AudioTrackList: { \n    prototype: AudioTrackList; \n    new(): AudioTrackList; \n} \n \ninterface BarProp { \n    visible: boolean; \n} \n \ndeclare var BarProp: { \n    prototype: BarProp; \n    new(): BarProp; \n} \n \ninterface BeforeUnloadEvent extends Event { \n    returnValue: any; \n} \n \ndeclare var BeforeUnloadEvent: { \n    prototype: BeforeUnloadEvent; \n    new(): BeforeUnloadEvent; \n} \n \ninterface BiquadFilterNode extends AudioNode { \n    Q: AudioParam; \n    detune: AudioParam; \n    frequency: AudioParam; \n    gain: AudioParam; \n    type: string; \n    getFrequencyResponse(frequencyHz: any, magResponse: any, phaseResponse: any): void; \n} \n \ndeclare var BiquadFilterNode: { \n    prototype: BiquadFilterNode; \n    new(): BiquadFilterNode; \n} \n \ninterface Blob { \n    size: number; \n    type: string; \n    msClose(): void; \n    msDetachStream(): any; \n    slice(start?: number, end?: number, contentType?: string): Blob; \n} \n \ndeclare var Blob: { \n    prototype: Blob; \n    new (blobParts?: any[], options?: BlobPropertyBag): Blob; \n} \n \ninterface CDATASection extends Text { \n} \n \ndeclare var CDATASection: { \n    prototype: CDATASection; \n    new(): CDATASection; \n} \n \ninterface CSS { \n    supports(property: string, value?: string): boolean; \n} \ndeclare var CSS: CSS; \n \ninterface CSSConditionRule extends CSSGroupingRule { \n    conditionText: string; \n} \n \ndeclare var CSSConditionRule: { \n    prototype: CSSConditionRule; \n    new(): CSSConditionRule; \n} \n \ninterface CSSFontFaceRule extends CSSRule { \n    style: CSSStyleDeclaration; \n} \n \ndeclare var CSSFontFaceRule: { \n    prototype: CSSFontFaceRule; \n    new(): CSSFontFaceRule; \n} \n \ninterface CSSGroupingRule extends CSSRule { \n    cssRules: CSSRuleList; \n    deleteRule(index?: number): void; \n    insertRule(rule: string, index?: number): number; \n} \n \ndeclare var CSSGroupingRule: { \n    prototype: CSSGroupingRule; \n    new(): CSSGroupingRule; \n} \n \ninterface CSSImportRule extends CSSRule { \n    href: string; \n    media: MediaList; \n    styleSheet: CSSStyleSheet; \n} \n \ndeclare var CSSImportRule: { \n    prototype: CSSImportRule; \n    new(): CSSImportRule; \n} \n \ninterface CSSKeyframeRule extends CSSRule { \n    keyText: string; \n    style: CSSStyleDeclaration; \n} \n \ndeclare var CSSKeyframeRule: { \n    prototype: CSSKeyframeRule; \n    new(): CSSKeyframeRule; \n} \n \ninterface CSSKeyframesRule extends CSSRule { \n    cssRules: CSSRuleList; \n    name: string; \n    appendRule(rule: string): void; \n    deleteRule(rule: string): void; \n    findRule(rule: string): CSSKeyframeRule; \n} \n \ndeclare var CSSKeyframesRule: { \n    prototype: CSSKeyframesRule; \n    new(): CSSKeyframesRule; \n} \n \ninterface CSSMediaRule extends CSSConditionRule { \n    media: MediaList; \n} \n \ndeclare var CSSMediaRule: { \n    prototype: CSSMediaRule; \n    new(): CSSMediaRule; \n} \n \ninterface CSSNamespaceRule extends CSSRule { \n    namespaceURI: string; \n    prefix: string; \n} \n \ndeclare var CSSNamespaceRule: { \n    prototype: CSSNamespaceRule; \n    new(): CSSNamespaceRule; \n} \n \ninterface CSSPageRule extends CSSRule { \n    pseudoClass: string; \n    selector: string; \n    selectorText: string; \n    style: CSSStyleDeclaration; \n} \n \ndeclare var CSSPageRule: { \n    prototype: CSSPageRule; \n    new(): CSSPageRule; \n} \n \ninterface CSSRule { \n    cssText: string; \n    parentRule: CSSRule; \n    parentStyleSheet: CSSStyleSheet; \n    type: number; \n    CHARSET_RULE: number; \n    FONT_FACE_RULE: number; \n    IMPORT_RULE: number; \n    KEYFRAMES_RULE: number; \n    KEYFRAME_RULE: number; \n    MEDIA_RULE: number; \n    NAMESPACE_RULE: number; \n    PAGE_RULE: number; \n    STYLE_RULE: number; \n    SUPPORTS_RULE: number; \n    UNKNOWN_RULE: number; \n    VIEWPORT_RULE: number; \n} \n \ndeclare var CSSRule: { \n    prototype: CSSRule; \n    new(): CSSRule; \n    CHARSET_RULE: number; \n    FONT_FACE_RULE: number; \n    IMPORT_RULE: number; \n    KEYFRAMES_RULE: number; \n    KEYFRAME_RULE: number; \n    MEDIA_RULE: number; \n    NAMESPACE_RULE: number; \n    PAGE_RULE: number; \n    STYLE_RULE: number; \n    SUPPORTS_RULE: number; \n    UNKNOWN_RULE: number; \n    VIEWPORT_RULE: number; \n} \n \ninterface CSSRuleList { \n    length: number; \n    item(index: number): CSSRule; \n    [index: number]: CSSRule; \n} \n \ndeclare var CSSRuleList: { \n    prototype: CSSRuleList; \n    new(): CSSRuleList; \n} \n \ninterface CSSStyleDeclaration { \n    alignContent: string; \n    alignItems: string; \n    alignSelf: string; \n    alignmentBaseline: string; \n    animation: string; \n    animationDelay: string; \n    animationDirection: string; \n    animationDuration: string; \n    animationFillMode: string; \n    animationIterationCount: string; \n    animationName: string; \n    animationPlayState: string; \n    animationTimingFunction: string; \n    backfaceVisibility: string; \n    background: string; \n    backgroundAttachment: string; \n    backgroundClip: string; \n    backgroundColor: string; \n    backgroundImage: string; \n    backgroundOrigin: string; \n    backgroundPosition: string; \n    backgroundPositionX: string; \n    backgroundPositionY: string; \n    backgroundRepeat: string; \n    backgroundSize: string; \n    baselineShift: string; \n    border: string; \n    borderBottom: string; \n    borderBottomColor: string; \n    borderBottomLeftRadius: string; \n    borderBottomRightRadius: string; \n    borderBottomStyle: string; \n    borderBottomWidth: string; \n    borderCollapse: string; \n    borderColor: string; \n    borderImage: string; \n    borderImageOutset: string; \n    borderImageRepeat: string; \n    borderImageSlice: string; \n    borderImageSource: string; \n    borderImageWidth: string; \n    borderLeft: string; \n    borderLeftColor: string; \n    borderLeftStyle: string; \n    borderLeftWidth: string; \n    borderRadius: string; \n    borderRight: string; \n    borderRightColor: string; \n    borderRightStyle: string; \n    borderRightWidth: string; \n    borderSpacing: string; \n    borderStyle: string; \n    borderTop: string; \n    borderTopColor: string; \n    borderTopLeftRadius: string; \n    borderTopRightRadius: string; \n    borderTopStyle: string; \n    borderTopWidth: string; \n    borderWidth: string; \n    bottom: string; \n    boxShadow: string; \n    boxSizing: string; \n    breakAfter: string; \n    breakBefore: string; \n    breakInside: string; \n    captionSide: string; \n    clear: string; \n    clip: string; \n    clipPath: string; \n    clipRule: string; \n    color: string; \n    colorInterpolationFilters: string; \n    columnCount: any; \n    columnFill: string; \n    columnGap: any; \n    columnRule: string; \n    columnRuleColor: any; \n    columnRuleStyle: string; \n    columnRuleWidth: any; \n    columnSpan: string; \n    columnWidth: any; \n    columns: string; \n    content: string; \n    counterIncrement: string; \n    counterReset: string; \n    cssFloat: string; \n    cssText: string; \n    cursor: string; \n    direction: string; \n    display: string; \n    dominantBaseline: string; \n    emptyCells: string; \n    enableBackground: string; \n    fill: string; \n    fillOpacity: string; \n    fillRule: string; \n    filter: string; \n    flex: string; \n    flexBasis: string; \n    flexDirection: string; \n    flexFlow: string; \n    flexGrow: string; \n    flexShrink: string; \n    flexWrap: string; \n    floodColor: string; \n    floodOpacity: string; \n    font: string; \n    fontFamily: string; \n    fontFeatureSettings: string; \n    fontSize: string; \n    fontSizeAdjust: string; \n    fontStretch: string; \n    fontStyle: string; \n    fontVariant: string; \n    fontWeight: string; \n    glyphOrientationHorizontal: string; \n    glyphOrientationVertical: string; \n    height: string; \n    imeMode: string; \n    justifyContent: string; \n    kerning: string; \n    left: string; \n    length: number; \n    letterSpacing: string; \n    lightingColor: string; \n    lineHeight: string; \n    listStyle: string; \n    listStyleImage: string; \n    listStylePosition: string; \n    listStyleType: string; \n    margin: string; \n    marginBottom: string; \n    marginLeft: string; \n    marginRight: string; \n    marginTop: string; \n    marker: string; \n    markerEnd: string; \n    markerMid: string; \n    markerStart: string; \n    mask: string; \n    maxHeight: string; \n    maxWidth: string; \n    minHeight: string; \n    minWidth: string; \n    msContentZoomChaining: string; \n    msContentZoomLimit: string; \n    msContentZoomLimitMax: any; \n    msContentZoomLimitMin: any; \n    msContentZoomSnap: string; \n    msContentZoomSnapPoints: string; \n    msContentZoomSnapType: string; \n    msContentZooming: string; \n    msFlowFrom: string; \n    msFlowInto: string; \n    msFontFeatureSettings: string; \n    msGridColumn: any; \n    msGridColumnAlign: string; \n    msGridColumnSpan: any; \n    msGridColumns: string; \n    msGridRow: any; \n    msGridRowAlign: string; \n    msGridRowSpan: any; \n    msGridRows: string; \n    msHighContrastAdjust: string; \n    msHyphenateLimitChars: string; \n    msHyphenateLimitLines: any; \n    msHyphenateLimitZone: any; \n    msHyphens: string; \n    msImeAlign: string; \n    msOverflowStyle: string; \n    msScrollChaining: string; \n    msScrollLimit: string; \n    msScrollLimitXMax: any; \n    msScrollLimitXMin: any; \n    msScrollLimitYMax: any; \n    msScrollLimitYMin: any; \n    msScrollRails: string; \n    msScrollSnapPointsX: string; \n    msScrollSnapPointsY: string; \n    msScrollSnapType: string; \n    msScrollSnapX: string; \n    msScrollSnapY: string; \n    msScrollTranslation: string; \n    msTextCombineHorizontal: string; \n    msTextSizeAdjust: any; \n    msTouchAction: string; \n    msTouchSelect: string; \n    msUserSelect: string; \n    msWrapFlow: string; \n    msWrapMargin: any; \n    msWrapThrough: string; \n    opacity: string; \n    order: string; \n    orphans: string; \n    outline: string; \n    outlineColor: string; \n    outlineStyle: string; \n    outlineWidth: string; \n    overflow: string; \n    overflowX: string; \n    overflowY: string; \n    padding: string; \n    paddingBottom: string; \n    paddingLeft: string; \n    paddingRight: string; \n    paddingTop: string; \n    pageBreakAfter: string; \n    pageBreakBefore: string; \n    pageBreakInside: string; \n    parentRule: CSSRule; \n    perspective: string; \n    perspectiveOrigin: string; \n    pointerEvents: string; \n    position: string; \n    quotes: string; \n    right: string; \n    rubyAlign: string; \n    rubyOverhang: string; \n    rubyPosition: string; \n    stopColor: string; \n    stopOpacity: string; \n    stroke: string; \n    strokeDasharray: string; \n    strokeDashoffset: string; \n    strokeLinecap: string; \n    strokeLinejoin: string; \n    strokeMiterlimit: string; \n    strokeOpacity: string; \n    strokeWidth: string; \n    tableLayout: string; \n    textAlign: string; \n    textAlignLast: string; \n    textAnchor: string; \n    textDecoration: string; \n    textFillColor: string; \n    textIndent: string; \n    textJustify: string; \n    textKashida: string; \n    textKashidaSpace: string; \n    textOverflow: string; \n    textShadow: string; \n    textTransform: string; \n    textUnderlinePosition: string; \n    top: string; \n    touchAction: string; \n    transform: string; \n    transformOrigin: string; \n    transformStyle: string; \n    transition: string; \n    transitionDelay: string; \n    transitionDuration: string; \n    transitionProperty: string; \n    transitionTimingFunction: string; \n    unicodeBidi: string; \n    verticalAlign: string; \n    visibility: string; \n    webkitAlignContent: string; \n    webkitAlignItems: string; \n    webkitAlignSelf: string; \n    webkitAnimation: string; \n    webkitAnimationDelay: string; \n    webkitAnimationDirection: string; \n    webkitAnimationDuration: string; \n    webkitAnimationFillMode: string; \n    webkitAnimationIterationCount: string; \n    webkitAnimationName: string; \n    webkitAnimationPlayState: string; \n    webkitAnimationTimingFunction: string; \n    webkitAppearance: string; \n    webkitBackfaceVisibility: string; \n    webkitBackground: string; \n    webkitBackgroundAttachment: string; \n    webkitBackgroundClip: string; \n    webkitBackgroundColor: string; \n    webkitBackgroundImage: string; \n    webkitBackgroundOrigin: string; \n    webkitBackgroundPosition: string; \n    webkitBackgroundPositionX: string; \n    webkitBackgroundPositionY: string; \n    webkitBackgroundRepeat: string; \n    webkitBackgroundSize: string; \n    webkitBorderBottomLeftRadius: string; \n    webkitBorderBottomRightRadius: string; \n    webkitBorderImage: string; \n    webkitBorderImageOutset: string; \n    webkitBorderImageRepeat: string; \n    webkitBorderImageSlice: string; \n    webkitBorderImageSource: string; \n    webkitBorderImageWidth: string; \n    webkitBorderRadius: string; \n    webkitBorderTopLeftRadius: string; \n    webkitBorderTopRightRadius: string; \n    webkitBoxAlign: string; \n    webkitBoxDirection: string; \n    webkitBoxFlex: string; \n    webkitBoxOrdinalGroup: string; \n    webkitBoxOrient: string; \n    webkitBoxPack: string; \n    webkitBoxSizing: string; \n    webkitColumnBreakAfter: string; \n    webkitColumnBreakBefore: string; \n    webkitColumnBreakInside: string; \n    webkitColumnCount: any; \n    webkitColumnGap: any; \n    webkitColumnRule: string; \n    webkitColumnRuleColor: any; \n    webkitColumnRuleStyle: string; \n    webkitColumnRuleWidth: any; \n    webkitColumnSpan: string; \n    webkitColumnWidth: any; \n    webkitColumns: string; \n    webkitFilter: string; \n    webkitFlex: string; \n    webkitFlexBasis: string; \n    webkitFlexDirection: string; \n    webkitFlexFlow: string; \n    webkitFlexGrow: string; \n    webkitFlexShrink: string; \n    webkitFlexWrap: string; \n    webkitJustifyContent: string; \n    webkitOrder: string; \n    webkitPerspective: string; \n    webkitPerspectiveOrigin: string; \n    webkitTapHighlightColor: string; \n    webkitTextFillColor: string; \n    webkitTextSizeAdjust: any; \n    webkitTransform: string; \n    webkitTransformOrigin: string; \n    webkitTransformStyle: string; \n    webkitTransition: string; \n    webkitTransitionDelay: string; \n    webkitTransitionDuration: string; \n    webkitTransitionProperty: string; \n    webkitTransitionTimingFunction: string; \n    webkitUserSelect: string; \n    webkitWritingMode: string; \n    whiteSpace: string; \n    widows: string; \n    width: string; \n    wordBreak: string; \n    wordSpacing: string; \n    wordWrap: string; \n    writingMode: string; \n    zIndex: string; \n    zoom: string; \n    getPropertyPriority(propertyName: string): string; \n    getPropertyValue(propertyName: string): string; \n    item(index: number): string; \n    removeProperty(propertyName: string): string; \n    setProperty(propertyName: string, value: string, priority?: string): void; \n    [index: number]: string; \n} \n \ndeclare var CSSStyleDeclaration: { \n    prototype: CSSStyleDeclaration; \n    new(): CSSStyleDeclaration; \n} \n \ninterface CSSStyleRule extends CSSRule { \n    readOnly: boolean; \n    selectorText: string; \n    style: CSSStyleDeclaration; \n} \n \ndeclare var CSSStyleRule: { \n    prototype: CSSStyleRule; \n    new(): CSSStyleRule; \n} \n \ninterface CSSStyleSheet extends StyleSheet { \n    cssRules: CSSRuleList; \n    cssText: string; \n    href: string; \n    id: string; \n    imports: StyleSheetList; \n    isAlternate: boolean; \n    isPrefAlternate: boolean; \n    ownerRule: CSSRule; \n    owningElement: Element; \n    pages: StyleSheetPageList; \n    readOnly: boolean; \n    rules: CSSRuleList; \n    addImport(bstrURL: string, lIndex?: number): number; \n    addPageRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number; \n    addRule(bstrSelector: string, bstrStyle?: string, lIndex?: number): number; \n    deleteRule(index?: number): void; \n    insertRule(rule: string, index?: number): number; \n    removeImport(lIndex: number): void; \n    removeRule(lIndex: number): void; \n} \n \ndeclare var CSSStyleSheet: { \n    prototype: CSSStyleSheet; \n    new(): CSSStyleSheet; \n} \n \ninterface CSSSupportsRule extends CSSConditionRule { \n} \n \ndeclare var CSSSupportsRule: { \n    prototype: CSSSupportsRule; \n    new(): CSSSupportsRule; \n} \n \ninterface CanvasGradient { \n    addColorStop(offset: number, color: string): void; \n} \n \ndeclare var CanvasGradient: { \n    prototype: CanvasGradient; \n    new(): CanvasGradient; \n} \n \ninterface CanvasPattern { \n} \n \ndeclare var CanvasPattern: { \n    prototype: CanvasPattern; \n    new(): CanvasPattern; \n} \n \ninterface CanvasRenderingContext2D { \n    canvas: HTMLCanvasElement; \n    fillStyle: any; \n    font: string; \n    globalAlpha: number; \n    globalCompositeOperation: string; \n    lineCap: string; \n    lineDashOffset: number; \n    lineJoin: string; \n    lineWidth: number; \n    miterLimit: number; \n    msFillRule: string; \n    msImageSmoothingEnabled: boolean; \n    shadowBlur: number; \n    shadowColor: string; \n    shadowOffsetX: number; \n    shadowOffsetY: number; \n    strokeStyle: any; \n    textAlign: string; \n    textBaseline: string; \n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void; \n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void; \n    beginPath(): void; \n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void; \n    clearRect(x: number, y: number, w: number, h: number): void; \n    clip(fillRule?: string): void; \n    closePath(): void; \n    createImageData(imageDataOrSw: number | ImageData, sh?: number): ImageData; \n    createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient; \n    createPattern(image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, repetition: string): CanvasPattern; \n    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient; \n    drawImage(image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, offsetX: number, offsetY: number, width?: number, height?: number, canvasOffsetX?: number, canvasOffsetY?: number, canvasImageWidth?: number, canvasImageHeight?: number): void; \n    fill(fillRule?: string): void; \n    fillRect(x: number, y: number, w: number, h: number): void; \n    fillText(text: string, x: number, y: number, maxWidth?: number): void; \n    getImageData(sx: number, sy: number, sw: number, sh: number): ImageData; \n    getLineDash(): number[]; \n    isPointInPath(x: number, y: number, fillRule?: string): boolean; \n    lineTo(x: number, y: number): void; \n    measureText(text: string): TextMetrics; \n    moveTo(x: number, y: number): void; \n    putImageData(imagedata: ImageData, dx: number, dy: number, dirtyX?: number, dirtyY?: number, dirtyWidth?: number, dirtyHeight?: number): void; \n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void; \n    rect(x: number, y: number, w: number, h: number): void; \n    restore(): void; \n    rotate(angle: number): void; \n    save(): void; \n    scale(x: number, y: number): void; \n    setLineDash(segments: number[]): void; \n    setTransform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void; \n    stroke(): void; \n    strokeRect(x: number, y: number, w: number, h: number): void; \n    strokeText(text: string, x: number, y: number, maxWidth?: number): void; \n    transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void; \n    translate(x: number, y: number): void; \n} \n \ndeclare var CanvasRenderingContext2D: { \n    prototype: CanvasRenderingContext2D; \n    new(): CanvasRenderingContext2D; \n} \n \ninterface ChannelMergerNode extends AudioNode { \n} \n \ndeclare var ChannelMergerNode: { \n    prototype: ChannelMergerNode; \n    new(): ChannelMergerNode; \n} \n \ninterface ChannelSplitterNode extends AudioNode { \n} \n \ndeclare var ChannelSplitterNode: { \n    prototype: ChannelSplitterNode; \n    new(): ChannelSplitterNode; \n} \n \ninterface CharacterData extends Node, ChildNode { \n    data: string; \n    length: number; \n    appendData(arg: string): void; \n    deleteData(offset: number, count: number): void; \n    insertData(offset: number, arg: string): void; \n    replaceData(offset: number, count: number, arg: string): void; \n    substringData(offset: number, count: number): string; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var CharacterData: { \n    prototype: CharacterData; \n    new(): CharacterData; \n} \n \ninterface ClientRect { \n    bottom: number; \n    height: number; \n    left: number; \n    right: number; \n    top: number; \n    width: number; \n} \n \ndeclare var ClientRect: { \n    prototype: ClientRect; \n    new(): ClientRect; \n} \n \ninterface ClientRectList { \n    length: number; \n    item(index: number): ClientRect; \n    [index: number]: ClientRect; \n} \n \ndeclare var ClientRectList: { \n    prototype: ClientRectList; \n    new(): ClientRectList; \n} \n \ninterface ClipboardEvent extends Event { \n    clipboardData: DataTransfer; \n} \n \ndeclare var ClipboardEvent: { \n    prototype: ClipboardEvent; \n    new(type: string, eventInitDict?: ClipboardEventInit): ClipboardEvent; \n} \n \ninterface CloseEvent extends Event { \n    code: number; \n    reason: string; \n    wasClean: boolean; \n    initCloseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, wasCleanArg: boolean, codeArg: number, reasonArg: string): void; \n} \n \ndeclare var CloseEvent: { \n    prototype: CloseEvent; \n    new(): CloseEvent; \n} \n \ninterface CommandEvent extends Event { \n    commandName: string; \n    detail: string; \n} \n \ndeclare var CommandEvent: { \n    prototype: CommandEvent; \n    new(type: string, eventInitDict?: CommandEventInit): CommandEvent; \n} \n \ninterface Comment extends CharacterData { \n    text: string; \n} \n \ndeclare var Comment: { \n    prototype: Comment; \n    new(): Comment; \n} \n \ninterface CompositionEvent extends UIEvent { \n    data: string; \n    locale: string; \n    initCompositionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, locale: string): void; \n} \n \ndeclare var CompositionEvent: { \n    prototype: CompositionEvent; \n    new(typeArg: string, eventInitDict?: CompositionEventInit): CompositionEvent; \n} \n \ninterface Console { \n    assert(test?: boolean, message?: string, ...optionalParams: any[]): void; \n    clear(): void; \n    count(countTitle?: string): void; \n    debug(message?: string, ...optionalParams: any[]): void; \n    dir(value?: any, ...optionalParams: any[]): void; \n    dirxml(value: any): void; \n    error(message?: any, ...optionalParams: any[]): void; \n    group(groupTitle?: string): void; \n    groupCollapsed(groupTitle?: string): void; \n    groupEnd(): void; \n    info(message?: any, ...optionalParams: any[]): void; \n    log(message?: any, ...optionalParams: any[]): void; \n    msIsIndependentlyComposed(element: Element): boolean; \n    profile(reportName?: string): void; \n    profileEnd(): void; \n    select(element: Element): void; \n    time(timerName?: string): void; \n    timeEnd(timerName?: string): void; \n    trace(): void; \n    warn(message?: any, ...optionalParams: any[]): void; \n} \n \ndeclare var Console: { \n    prototype: Console; \n    new(): Console; \n} \n \ninterface ConvolverNode extends AudioNode { \n    buffer: AudioBuffer; \n    normalize: boolean; \n} \n \ndeclare var ConvolverNode: { \n    prototype: ConvolverNode; \n    new(): ConvolverNode; \n} \n \ninterface Coordinates { \n    accuracy: number; \n    altitude: number; \n    altitudeAccuracy: number; \n    heading: number; \n    latitude: number; \n    longitude: number; \n    speed: number; \n} \n \ndeclare var Coordinates: { \n    prototype: Coordinates; \n    new(): Coordinates; \n} \n \ninterface Crypto extends Object, RandomSource { \n    subtle: SubtleCrypto; \n} \n \ndeclare var Crypto: { \n    prototype: Crypto; \n    new(): Crypto; \n} \n \ninterface CryptoKey { \n    algorithm: KeyAlgorithm; \n    extractable: boolean; \n    type: string; \n    usages: string[]; \n} \n \ndeclare var CryptoKey: { \n    prototype: CryptoKey; \n    new(): CryptoKey; \n} \n \ninterface CryptoKeyPair { \n    privateKey: CryptoKey; \n    publicKey: CryptoKey; \n} \n \ndeclare var CryptoKeyPair: { \n    prototype: CryptoKeyPair; \n    new(): CryptoKeyPair; \n} \n \ninterface CustomEvent extends Event { \n    detail: any; \n    initCustomEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, detailArg: any): void; \n} \n \ndeclare var CustomEvent: { \n    prototype: CustomEvent; \n    new(typeArg: string, eventInitDict?: CustomEventInit): CustomEvent; \n} \n \ninterface DOMError { \n    name: string; \n    toString(): string; \n} \n \ndeclare var DOMError: { \n    prototype: DOMError; \n    new(): DOMError; \n} \n \ninterface DOMException { \n    code: number; \n    message: string; \n    name: string; \n    toString(): string; \n    ABORT_ERR: number; \n    DATA_CLONE_ERR: number; \n    DOMSTRING_SIZE_ERR: number; \n    HIERARCHY_REQUEST_ERR: number; \n    INDEX_SIZE_ERR: number; \n    INUSE_ATTRIBUTE_ERR: number; \n    INVALID_ACCESS_ERR: number; \n    INVALID_CHARACTER_ERR: number; \n    INVALID_MODIFICATION_ERR: number; \n    INVALID_NODE_TYPE_ERR: number; \n    INVALID_STATE_ERR: number; \n    NAMESPACE_ERR: number; \n    NETWORK_ERR: number; \n    NOT_FOUND_ERR: number; \n    NOT_SUPPORTED_ERR: number; \n    NO_DATA_ALLOWED_ERR: number; \n    NO_MODIFICATION_ALLOWED_ERR: number; \n    PARSE_ERR: number; \n    QUOTA_EXCEEDED_ERR: number; \n    SECURITY_ERR: number; \n    SERIALIZE_ERR: number; \n    SYNTAX_ERR: number; \n    TIMEOUT_ERR: number; \n    TYPE_MISMATCH_ERR: number; \n    URL_MISMATCH_ERR: number; \n    VALIDATION_ERR: number; \n    WRONG_DOCUMENT_ERR: number; \n} \n \ndeclare var DOMException: { \n    prototype: DOMException; \n    new(): DOMException; \n    ABORT_ERR: number; \n    DATA_CLONE_ERR: number; \n    DOMSTRING_SIZE_ERR: number; \n    HIERARCHY_REQUEST_ERR: number; \n    INDEX_SIZE_ERR: number; \n    INUSE_ATTRIBUTE_ERR: number; \n    INVALID_ACCESS_ERR: number; \n    INVALID_CHARACTER_ERR: number; \n    INVALID_MODIFICATION_ERR: number; \n    INVALID_NODE_TYPE_ERR: number; \n    INVALID_STATE_ERR: number; \n    NAMESPACE_ERR: number; \n    NETWORK_ERR: number; \n    NOT_FOUND_ERR: number; \n    NOT_SUPPORTED_ERR: number; \n    NO_DATA_ALLOWED_ERR: number; \n    NO_MODIFICATION_ALLOWED_ERR: number; \n    PARSE_ERR: number; \n    QUOTA_EXCEEDED_ERR: number; \n    SECURITY_ERR: number; \n    SERIALIZE_ERR: number; \n    SYNTAX_ERR: number; \n    TIMEOUT_ERR: number; \n    TYPE_MISMATCH_ERR: number; \n    URL_MISMATCH_ERR: number; \n    VALIDATION_ERR: number; \n    WRONG_DOCUMENT_ERR: number; \n} \n \ninterface DOMImplementation { \n    createDocument(namespaceURI: string, qualifiedName: string, doctype: DocumentType): Document; \n    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DocumentType; \n    createHTMLDocument(title: string): Document; \n    hasFeature(feature: string, version: string): boolean; \n} \n \ndeclare var DOMImplementation: { \n    prototype: DOMImplementation; \n    new(): DOMImplementation; \n} \n \ninterface DOMParser { \n    parseFromString(source: string, mimeType: string): Document; \n} \n \ndeclare var DOMParser: { \n    prototype: DOMParser; \n    new(): DOMParser; \n} \n \ninterface DOMSettableTokenList extends DOMTokenList { \n    value: string; \n} \n \ndeclare var DOMSettableTokenList: { \n    prototype: DOMSettableTokenList; \n    new(): DOMSettableTokenList; \n} \n \ninterface DOMStringList { \n    length: number; \n    contains(str: string): boolean; \n    item(index: number): string; \n    [index: number]: string; \n} \n \ndeclare var DOMStringList: { \n    prototype: DOMStringList; \n    new(): DOMStringList; \n} \n \ninterface DOMStringMap { \n    [name: string]: string; \n} \n \ndeclare var DOMStringMap: { \n    prototype: DOMStringMap; \n    new(): DOMStringMap; \n} \n \ninterface DOMTokenList { \n    length: number; \n    add(...token: string[]): void; \n    contains(token: string): boolean; \n    item(index: number): string; \n    remove(...token: string[]): void; \n    toString(): string; \n    toggle(token: string, force?: boolean): boolean; \n    [index: number]: string; \n} \n \ndeclare var DOMTokenList: { \n    prototype: DOMTokenList; \n    new(): DOMTokenList; \n} \n \ninterface DataCue extends TextTrackCue { \n    data: ArrayBuffer; \n} \n \ndeclare var DataCue: { \n    prototype: DataCue; \n    new(): DataCue; \n} \n \ninterface DataTransfer { \n    dropEffect: string; \n    effectAllowed: string; \n    files: FileList; \n    items: DataTransferItemList; \n    types: DOMStringList; \n    clearData(format?: string): boolean; \n    getData(format: string): string; \n    setData(format: string, data: string): boolean; \n} \n \ndeclare var DataTransfer: { \n    prototype: DataTransfer; \n    new(): DataTransfer; \n} \n \ninterface DataTransferItem { \n    kind: string; \n    type: string; \n    getAsFile(): File; \n    getAsString(_callback: FunctionStringCallback): void; \n} \n \ndeclare var DataTransferItem: { \n    prototype: DataTransferItem; \n    new(): DataTransferItem; \n} \n \ninterface DataTransferItemList { \n    length: number; \n    add(data: File): DataTransferItem; \n    clear(): void; \n    item(index: number): File; \n    remove(index: number): void; \n    [index: number]: File; \n} \n \ndeclare var DataTransferItemList: { \n    prototype: DataTransferItemList; \n    new(): DataTransferItemList; \n} \n \ninterface DeferredPermissionRequest { \n    id: number; \n    type: string; \n    uri: string; \n    allow(): void; \n    deny(): void; \n} \n \ndeclare var DeferredPermissionRequest: { \n    prototype: DeferredPermissionRequest; \n    new(): DeferredPermissionRequest; \n} \n \ninterface DelayNode extends AudioNode { \n    delayTime: AudioParam; \n} \n \ndeclare var DelayNode: { \n    prototype: DelayNode; \n    new(): DelayNode; \n} \n \ninterface DeviceAcceleration { \n    x: number; \n    y: number; \n    z: number; \n} \n \ndeclare var DeviceAcceleration: { \n    prototype: DeviceAcceleration; \n    new(): DeviceAcceleration; \n} \n \ninterface DeviceMotionEvent extends Event { \n    acceleration: DeviceAcceleration; \n    accelerationIncludingGravity: DeviceAcceleration; \n    interval: number; \n    rotationRate: DeviceRotationRate; \n    initDeviceMotionEvent(type: string, bubbles: boolean, cancelable: boolean, acceleration: DeviceAccelerationDict, accelerationIncludingGravity: DeviceAccelerationDict, rotationRate: DeviceRotationRateDict, interval: number): void; \n} \n \ndeclare var DeviceMotionEvent: { \n    prototype: DeviceMotionEvent; \n    new(): DeviceMotionEvent; \n} \n \ninterface DeviceOrientationEvent extends Event { \n    absolute: boolean; \n    alpha: number; \n    beta: number; \n    gamma: number; \n    initDeviceOrientationEvent(type: string, bubbles: boolean, cancelable: boolean, alpha: number, beta: number, gamma: number, absolute: boolean): void; \n} \n \ndeclare var DeviceOrientationEvent: { \n    prototype: DeviceOrientationEvent; \n    new(): DeviceOrientationEvent; \n} \n \ninterface DeviceRotationRate { \n    alpha: number; \n    beta: number; \n    gamma: number; \n} \n \ndeclare var DeviceRotationRate: { \n    prototype: DeviceRotationRate; \n    new(): DeviceRotationRate; \n} \n \ninterface Document extends Node, GlobalEventHandlers, NodeSelector, DocumentEvent { \n    /** \n      * Sets or gets the URL for the current document.  \n      */ \n    URL: string; \n    /** \n      * Gets the URL for the document, stripped of any character encoding. \n      */ \n    URLUnencoded: string; \n    /** \n      * Gets the object that has the focus when the parent document has focus. \n      */ \n    activeElement: Element; \n    /** \n      * Sets or gets the color of all active links in the document. \n      */ \n    alinkColor: string; \n    /** \n      * Returns a reference to the collection of elements contained by the object. \n      */ \n    all: HTMLCollection; \n    /** \n      * Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order. \n      */ \n    anchors: HTMLCollection; \n    /** \n      * Retrieves a collection of all applet objects in the document. \n      */ \n    applets: HTMLCollection; \n    /** \n      * Deprecated. Sets or retrieves a value that indicates the background color behind the object.  \n      */ \n    bgColor: string; \n    /** \n      * Specifies the beginning and end of the document body. \n      */ \n    body: HTMLElement; \n    characterSet: string; \n    /** \n      * Gets or sets the character set used to encode the object. \n      */ \n    charset: string; \n    /** \n      * Gets a value that indicates whether standards-compliant mode is switched on for the object. \n      */ \n    compatMode: string; \n    cookie: string; \n    /** \n      * Gets the default character set from the current regional language settings. \n      */ \n    defaultCharset: string; \n    defaultView: Window; \n    /** \n      * Sets or gets a value that indicates whether the document can be edited. \n      */ \n    designMode: string; \n    /** \n      * Sets or retrieves a value that indicates the reading order of the object.  \n      */ \n    dir: string; \n    /** \n      * Gets an object representing the document type declaration associated with the current document.  \n      */ \n    doctype: DocumentType; \n    /** \n      * Gets a reference to the root node of the document.  \n      */ \n    documentElement: HTMLElement; \n    /** \n      * Sets or gets the security domain of the document.  \n      */ \n    domain: string; \n    /** \n      * Retrieves a collection of all embed objects in the document. \n      */ \n    embeds: HTMLCollection; \n    /** \n      * Sets or gets the foreground (text) color of the document. \n      */ \n    fgColor: string; \n    /** \n      * Retrieves a collection, in source order, of all form objects in the document. \n      */ \n    forms: HTMLCollection; \n    fullscreenElement: Element; \n    fullscreenEnabled: boolean; \n    head: HTMLHeadElement; \n    hidden: boolean; \n    /** \n      * Retrieves a collection, in source order, of img objects in the document. \n      */ \n    images: HTMLCollection; \n    /** \n      * Gets the implementation object of the current document.  \n      */ \n    implementation: DOMImplementation; \n    /** \n      * Returns the character encoding used to create the webpage that is loaded into the document object. \n      */ \n    inputEncoding: string; \n    /** \n      * Gets the date that the page was last modified, if the page supplies one.  \n      */ \n    lastModified: string; \n    /** \n      * Sets or gets the color of the document links.  \n      */ \n    linkColor: string; \n    /** \n      * Retrieves a collection of all a objects that specify the href property and all area objects in the document. \n      */ \n    links: HTMLCollection; \n    /** \n      * Contains information about the current URL.  \n      */ \n    location: Location; \n    media: string; \n    msCSSOMElementFloatMetrics: boolean; \n    msCapsLockWarningOff: boolean; \n    msHidden: boolean; \n    msVisibilityState: string; \n    /** \n      * Fires when the user aborts the download. \n      * @param ev The event. \n      */ \n    onabort: (ev: Event) => any; \n    /** \n      * Fires when the object is set as the active element. \n      * @param ev The event. \n      */ \n    onactivate: (ev: UIEvent) => any; \n    /** \n      * Fires immediately before the object is set as the active element. \n      * @param ev The event. \n      */ \n    onbeforeactivate: (ev: UIEvent) => any; \n    /** \n      * Fires immediately before the activeElement is changed from the current object to another object in the parent document. \n      * @param ev The event. \n      */ \n    onbeforedeactivate: (ev: UIEvent) => any; \n    /**  \n      * Fires when the object loses the input focus.  \n      * @param ev The focus event. \n      */ \n    onblur: (ev: FocusEvent) => any; \n    /** \n      * Occurs when playback is possible, but would require further buffering.  \n      * @param ev The event. \n      */ \n    oncanplay: (ev: Event) => any; \n    oncanplaythrough: (ev: Event) => any; \n    /** \n      * Fires when the contents of the object or selection have changed.  \n      * @param ev The event. \n      */ \n    onchange: (ev: Event) => any; \n    /** \n      * Fires when the user clicks the left mouse button on the object \n      * @param ev The mouse event. \n      */ \n    onclick: (ev: MouseEvent) => any; \n    /** \n      * Fires when the user clicks the right mouse button in the client area, opening the context menu.  \n      * @param ev The mouse event. \n      */ \n    oncontextmenu: (ev: PointerEvent) => any; \n    /** \n      * Fires when the user double-clicks the object. \n      * @param ev The mouse event. \n      */ \n    ondblclick: (ev: MouseEvent) => any; \n    /** \n      * Fires when the activeElement is changed from the current object to another object in the parent document. \n      * @param ev The UI Event \n      */ \n    ondeactivate: (ev: UIEvent) => any; \n    /** \n      * Fires on the source object continuously during a drag operation. \n      * @param ev The event. \n      */ \n    ondrag: (ev: DragEvent) => any; \n    /** \n      * Fires on the source object when the user releases the mouse at the close of a drag operation. \n      * @param ev The event. \n      */ \n    ondragend: (ev: DragEvent) => any; \n    /**  \n      * Fires on the target element when the user drags the object to a valid drop target. \n      * @param ev The drag event. \n      */ \n    ondragenter: (ev: DragEvent) => any; \n    /**  \n      * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation. \n      * @param ev The drag event. \n      */ \n    ondragleave: (ev: DragEvent) => any; \n    /** \n      * Fires on the target element continuously while the user drags the object over a valid drop target. \n      * @param ev The event. \n      */ \n    ondragover: (ev: DragEvent) => any; \n    /** \n      * Fires on the source object when the user starts to drag a text selection or selected object.  \n      * @param ev The event. \n      */ \n    ondragstart: (ev: DragEvent) => any; \n    ondrop: (ev: DragEvent) => any; \n    /** \n      * Occurs when the duration attribute is updated.  \n      * @param ev The event. \n      */ \n    ondurationchange: (ev: Event) => any; \n    /** \n      * Occurs when the media element is reset to its initial state.  \n      * @param ev The event. \n      */ \n    onemptied: (ev: Event) => any; \n    /** \n      * Occurs when the end of playback is reached.  \n      * @param ev The event \n      */ \n    onended: (ev: Event) => any; \n    /** \n      * Fires when an error occurs during object loading. \n      * @param ev The event. \n      */ \n    onerror: (ev: Event) => any; \n    /** \n      * Fires when the object receives focus.  \n      * @param ev The event. \n      */ \n    onfocus: (ev: FocusEvent) => any; \n    onfullscreenchange: (ev: Event) => any; \n    onfullscreenerror: (ev: Event) => any; \n    oninput: (ev: Event) => any; \n    /** \n      * Fires when the user presses a key. \n      * @param ev The keyboard event \n      */ \n    onkeydown: (ev: KeyboardEvent) => any; \n    /** \n      * Fires when the user presses an alphanumeric key. \n      * @param ev The event. \n      */ \n    onkeypress: (ev: KeyboardEvent) => any; \n    /** \n      * Fires when the user releases a key. \n      * @param ev The keyboard event \n      */ \n    onkeyup: (ev: KeyboardEvent) => any; \n    /** \n      * Fires immediately after the browser loads the object.  \n      * @param ev The event. \n      */ \n    onload: (ev: Event) => any; \n    /** \n      * Occurs when media data is loaded at the current playback position.  \n      * @param ev The event. \n      */ \n    onloadeddata: (ev: Event) => any; \n    /** \n      * Occurs when the duration and dimensions of the media have been determined. \n      * @param ev The event. \n      */ \n    onloadedmetadata: (ev: Event) => any; \n    /** \n      * Occurs when Internet Explorer begins looking for media data.  \n      * @param ev The event. \n      */ \n    onloadstart: (ev: Event) => any; \n    /** \n      * Fires when the user clicks the object with either mouse button.  \n      * @param ev The mouse event. \n      */ \n    onmousedown: (ev: MouseEvent) => any; \n    /** \n      * Fires when the user moves the mouse over the object.  \n      * @param ev The mouse event. \n      */ \n    onmousemove: (ev: MouseEvent) => any; \n    /** \n      * Fires when the user moves the mouse pointer outside the boundaries of the object.  \n      * @param ev The mouse event. \n      */ \n    onmouseout: (ev: MouseEvent) => any; \n    /** \n      * Fires when the user moves the mouse pointer into the object. \n      * @param ev The mouse event. \n      */ \n    onmouseover: (ev: MouseEvent) => any; \n    /** \n      * Fires when the user releases a mouse button while the mouse is over the object.  \n      * @param ev The mouse event. \n      */ \n    onmouseup: (ev: MouseEvent) => any; \n    /** \n      * Fires when the wheel button is rotated.  \n      * @param ev The mouse event \n      */ \n    onmousewheel: (ev: MouseWheelEvent) => any; \n    onmscontentzoom: (ev: UIEvent) => any; \n    onmsgesturechange: (ev: MSGestureEvent) => any; \n    onmsgesturedoubletap: (ev: MSGestureEvent) => any; \n    onmsgestureend: (ev: MSGestureEvent) => any; \n    onmsgesturehold: (ev: MSGestureEvent) => any; \n    onmsgesturestart: (ev: MSGestureEvent) => any; \n    onmsgesturetap: (ev: MSGestureEvent) => any; \n    onmsinertiastart: (ev: MSGestureEvent) => any; \n    onmsmanipulationstatechanged: (ev: MSManipulationEvent) => any; \n    onmspointercancel: (ev: MSPointerEvent) => any; \n    onmspointerdown: (ev: MSPointerEvent) => any; \n    onmspointerenter: (ev: MSPointerEvent) => any; \n    onmspointerleave: (ev: MSPointerEvent) => any; \n    onmspointermove: (ev: MSPointerEvent) => any; \n    onmspointerout: (ev: MSPointerEvent) => any; \n    onmspointerover: (ev: MSPointerEvent) => any; \n    onmspointerup: (ev: MSPointerEvent) => any; \n    /** \n      * Occurs when an item is removed from a Jump List of a webpage running in Site Mode.  \n      * @param ev The event. \n      */ \n    onmssitemodejumplistitemremoved: (ev: MSSiteModeEvent) => any; \n    /** \n      * Occurs when a user clicks a button in a Thumbnail Toolbar of a webpage running in Site Mode. \n      * @param ev The event. \n      */ \n    onmsthumbnailclick: (ev: MSSiteModeEvent) => any; \n    /** \n      * Occurs when playback is paused. \n      * @param ev The event. \n      */ \n    onpause: (ev: Event) => any; \n    /** \n      * Occurs when the play method is requested.  \n      * @param ev The event. \n      */ \n    onplay: (ev: Event) => any; \n    /** \n      * Occurs when the audio or video has started playing.  \n      * @param ev The event. \n      */ \n    onplaying: (ev: Event) => any; \n    onpointerlockchange: (ev: Event) => any; \n    onpointerlockerror: (ev: Event) => any; \n    /** \n      * Occurs to indicate progress while downloading media data.  \n      * @param ev The event. \n      */ \n    onprogress: (ev: ProgressEvent) => any; \n    /** \n      * Occurs when the playback rate is increased or decreased.  \n      * @param ev The event. \n      */ \n    onratechange: (ev: Event) => any; \n    /** \n      * Fires when the state of the object has changed. \n      * @param ev The event \n      */ \n    onreadystatechange: (ev: ProgressEvent) => any; \n    /** \n      * Fires when the user resets a form.  \n      * @param ev The event. \n      */ \n    onreset: (ev: Event) => any; \n    /** \n      * Fires when the user repositions the scroll box in the scroll bar on the object.  \n      * @param ev The event. \n      */ \n    onscroll: (ev: UIEvent) => any; \n    /** \n      * Occurs when the seek operation ends.  \n      * @param ev The event. \n      */ \n    onseeked: (ev: Event) => any; \n    /** \n      * Occurs when the current playback position is moved.  \n      * @param ev The event. \n      */ \n    onseeking: (ev: Event) => any; \n    /** \n      * Fires when the current selection changes. \n      * @param ev The event. \n      */ \n    onselect: (ev: UIEvent) => any; \n    onselectstart: (ev: Event) => any; \n    /** \n      * Occurs when the download has stopped.  \n      * @param ev The event. \n      */ \n    onstalled: (ev: Event) => any; \n    /** \n      * Fires when the user clicks the Stop button or leaves the Web page. \n      * @param ev The event. \n      */ \n    onstop: (ev: Event) => any; \n    onsubmit: (ev: Event) => any; \n    /** \n      * Occurs if the load operation has been intentionally halted.  \n      * @param ev The event. \n      */ \n    onsuspend: (ev: Event) => any; \n    /** \n      * Occurs to indicate the current playback position. \n      * @param ev The event. \n      */ \n    ontimeupdate: (ev: Event) => any; \n    ontouchcancel: (ev: TouchEvent) => any; \n    ontouchend: (ev: TouchEvent) => any; \n    ontouchmove: (ev: TouchEvent) => any; \n    ontouchstart: (ev: TouchEvent) => any; \n    /** \n      * Occurs when the volume is changed, or playback is muted or unmuted. \n      * @param ev The event. \n      */ \n    onvolumechange: (ev: Event) => any; \n    /** \n      * Occurs when playback stops because the next frame of a video resource is not available.  \n      * @param ev The event. \n      */ \n    onwaiting: (ev: Event) => any; \n    onwebkitfullscreenchange: (ev: Event) => any; \n    onwebkitfullscreenerror: (ev: Event) => any; \n    plugins: HTMLCollection; \n    pointerLockElement: Element; \n    /** \n      * Retrieves a value that indicates the current state of the object. \n      */ \n    readyState: string; \n    /** \n      * Gets the URL of the location that referred the user to the current page. \n      */ \n    referrer: string; \n    /** \n      * Gets the root svg element in the document hierarchy. \n      */ \n    rootElement: SVGSVGElement; \n    /** \n      * Retrieves a collection of all script objects in the document. \n      */ \n    scripts: HTMLCollection; \n    security: string; \n    /** \n      * Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document. \n      */ \n    styleSheets: StyleSheetList; \n    /** \n      * Contains the title of the document. \n      */ \n    title: string; \n    visibilityState: string; \n    /**  \n      * Sets or gets the color of the links that the user has visited. \n      */ \n    vlinkColor: string; \n    webkitCurrentFullScreenElement: Element; \n    webkitFullscreenElement: Element; \n    webkitFullscreenEnabled: boolean; \n    webkitIsFullScreen: boolean; \n    xmlEncoding: string; \n    xmlStandalone: boolean; \n    /** \n      * Gets or sets the version attribute specified in the declaration of an XML document. \n      */ \n    xmlVersion: string; \n    adoptNode(source: Node): Node; \n    captureEvents(): void; \n    clear(): void; \n    /** \n      * Closes an output stream and forces the sent data to display. \n      */ \n    close(): void; \n    /** \n      * Creates an attribute object with a specified name. \n      * @param name String that sets the attribute object\'s name. \n      */ \n    createAttribute(name: string): Attr; \n    createAttributeNS(namespaceURI: string, qualifiedName: string): Attr; \n    createCDATASection(data: string): CDATASection; \n    /** \n      * Creates a comment object with the specified data. \n      * @param data Sets the comment object\'s data. \n      */ \n    createComment(data: string): Comment; \n    /** \n      * Creates a new document. \n      */ \n    createDocumentFragment(): DocumentFragment; \n    /** \n      * Creates an instance of the element for the specified tag. \n      * @param tagName The name of an element. \n      */ \n    createElement(tagName: "a"): HTMLAnchorElement; \n    createElement(tagName: "abbr"): HTMLPhraseElement; \n    createElement(tagName: "acronym"): HTMLPhraseElement; \n    createElement(tagName: "address"): HTMLBlockElement; \n    createElement(tagName: "applet"): HTMLAppletElement; \n    createElement(tagName: "area"): HTMLAreaElement; \n    createElement(tagName: "audio"): HTMLAudioElement; \n    createElement(tagName: "b"): HTMLPhraseElement; \n    createElement(tagName: "base"): HTMLBaseElement; \n    createElement(tagName: "basefont"): HTMLBaseFontElement; \n    createElement(tagName: "bdo"): HTMLPhraseElement; \n    createElement(tagName: "big"): HTMLPhraseElement; \n    createElement(tagName: "blockquote"): HTMLBlockElement; \n    createElement(tagName: "body"): HTMLBodyElement; \n    createElement(tagName: "br"): HTMLBRElement; \n    createElement(tagName: "button"): HTMLButtonElement; \n    createElement(tagName: "canvas"): HTMLCanvasElement; \n    createElement(tagName: "caption"): HTMLTableCaptionElement; \n    createElement(tagName: "center"): HTMLBlockElement; \n    createElement(tagName: "cite"): HTMLPhraseElement; \n    createElement(tagName: "code"): HTMLPhraseElement; \n    createElement(tagName: "col"): HTMLTableColElement; \n    createElement(tagName: "colgroup"): HTMLTableColElement; \n    createElement(tagName: "datalist"): HTMLDataListElement; \n    createElement(tagName: "dd"): HTMLDDElement; \n    createElement(tagName: "del"): HTMLModElement; \n    createElement(tagName: "dfn"): HTMLPhraseElement; \n    createElement(tagName: "dir"): HTMLDirectoryElement; \n    createElement(tagName: "div"): HTMLDivElement; \n    createElement(tagName: "dl"): HTMLDListElement; \n    createElement(tagName: "dt"): HTMLDTElement; \n    createElement(tagName: "em"): HTMLPhraseElement; \n    createElement(tagName: "embed"): HTMLEmbedElement; \n    createElement(tagName: "fieldset"): HTMLFieldSetElement; \n    createElement(tagName: "font"): HTMLFontElement; \n    createElement(tagName: "form"): HTMLFormElement; \n    createElement(tagName: "frame"): HTMLFrameElement; \n    createElement(tagName: "frameset"): HTMLFrameSetElement; \n    createElement(tagName: "h1"): HTMLHeadingElement; \n    createElement(tagName: "h2"): HTMLHeadingElement; \n    createElement(tagName: "h3"): HTMLHeadingElement; \n    createElement(tagName: "h4"): HTMLHeadingElement; \n    createElement(tagName: "h5"): HTMLHeadingElement; \n    createElement(tagName: "h6"): HTMLHeadingElement; \n    createElement(tagName: "head"): HTMLHeadElement; \n    createElement(tagName: "hr"): HTMLHRElement; \n    createElement(tagName: "html"): HTMLHtmlElement; \n    createElement(tagName: "i"): HTMLPhraseElement; \n    createElement(tagName: "iframe"): HTMLIFrameElement; \n    createElement(tagName: "img"): HTMLImageElement; \n    createElement(tagName: "input"): HTMLInputElement; \n    createElement(tagName: "ins"): HTMLModElement; \n    createElement(tagName: "isindex"): HTMLIsIndexElement; \n    createElement(tagName: "kbd"): HTMLPhraseElement; \n    createElement(tagName: "keygen"): HTMLBlockElement; \n    createElement(tagName: "label"): HTMLLabelElement; \n    createElement(tagName: "legend"): HTMLLegendElement; \n    createElement(tagName: "li"): HTMLLIElement; \n    createElement(tagName: "link"): HTMLLinkElement; \n    createElement(tagName: "listing"): HTMLBlockElement; \n    createElement(tagName: "map"): HTMLMapElement; \n    createElement(tagName: "marquee"): HTMLMarqueeElement; \n    createElement(tagName: "menu"): HTMLMenuElement; \n    createElement(tagName: "meta"): HTMLMetaElement; \n    createElement(tagName: "nextid"): HTMLNextIdElement; \n    createElement(tagName: "nobr"): HTMLPhraseElement; \n    createElement(tagName: "object"): HTMLObjectElement; \n    createElement(tagName: "ol"): HTMLOListElement; \n    createElement(tagName: "optgroup"): HTMLOptGroupElement; \n    createElement(tagName: "option"): HTMLOptionElement; \n    createElement(tagName: "p"): HTMLParagraphElement; \n    createElement(tagName: "param"): HTMLParamElement; \n    createElement(tagName: "plaintext"): HTMLBlockElement; \n    createElement(tagName: "pre"): HTMLPreElement; \n    createElement(tagName: "progress"): HTMLProgressElement; \n    createElement(tagName: "q"): HTMLQuoteElement; \n    createElement(tagName: "rt"): HTMLPhraseElement; \n    createElement(tagName: "ruby"): HTMLPhraseElement; \n    createElement(tagName: "s"): HTMLPhraseElement; \n    createElement(tagName: "samp"): HTMLPhraseElement; \n    createElement(tagName: "script"): HTMLScriptElement; \n    createElement(tagName: "select"): HTMLSelectElement; \n    createElement(tagName: "small"): HTMLPhraseElement; \n    createElement(tagName: "source"): HTMLSourceElement; \n    createElement(tagName: "span"): HTMLSpanElement; \n    createElement(tagName: "strike"): HTMLPhraseElement; \n    createElement(tagName: "strong"): HTMLPhraseElement; \n    createElement(tagName: "style"): HTMLStyleElement; \n    createElement(tagName: "sub"): HTMLPhraseElement; \n    createElement(tagName: "sup"): HTMLPhraseElement; \n    createElement(tagName: "table"): HTMLTableElement; \n    createElement(tagName: "tbody"): HTMLTableSectionElement; \n    createElement(tagName: "td"): HTMLTableDataCellElement; \n    createElement(tagName: "textarea"): HTMLTextAreaElement; \n    createElement(tagName: "tfoot"): HTMLTableSectionElement; \n    createElement(tagName: "th"): HTMLTableHeaderCellElement; \n    createElement(tagName: "thead"): HTMLTableSectionElement; \n    createElement(tagName: "title"): HTMLTitleElement; \n    createElement(tagName: "tr"): HTMLTableRowElement; \n    createElement(tagName: "track"): HTMLTrackElement; \n    createElement(tagName: "tt"): HTMLPhraseElement; \n    createElement(tagName: "u"): HTMLPhraseElement; \n    createElement(tagName: "ul"): HTMLUListElement; \n    createElement(tagName: "var"): HTMLPhraseElement; \n    createElement(tagName: "video"): HTMLVideoElement; \n    createElement(tagName: "x-ms-webview"): MSHTMLWebViewElement; \n    createElement(tagName: "xmp"): HTMLBlockElement; \n    createElement(tagName: string): HTMLElement; \n    createElementNS(namespaceURI: string, qualifiedName: string): Element; \n    createExpression(expression: string, resolver: XPathNSResolver): XPathExpression; \n    createNSResolver(nodeResolver: Node): XPathNSResolver; \n    /** \n      * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.  \n      * @param root The root element or node to start traversing on. \n      * @param whatToShow The type of nodes or elements to appear in the node list \n      * @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter. \n      * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded. \n      */ \n    createNodeIterator(root: Node, whatToShow?: number, filter?: NodeFilter, entityReferenceExpansion?: boolean): NodeIterator; \n    createProcessingInstruction(target: string, data: string): ProcessingInstruction; \n    /** \n      *  Returns an empty range object that has both of its boundary points positioned at the beginning of the document.  \n      */ \n    createRange(): Range; \n    /** \n      * Creates a text string from the specified value.  \n      * @param data String that specifies the nodeValue property of the text node. \n      */ \n    createTextNode(data: string): Text; \n    createTouch(view: any, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number): Touch; \n    createTouchList(...touches: Touch[]): TouchList; \n    /** \n      * Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document. \n      * @param root The root element or node to start traversing on. \n      * @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow. \n      * @param filter A custom NodeFilter function to use. \n      * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded. \n      */ \n    createTreeWalker(root: Node, whatToShow?: number, filter?: NodeFilter, entityReferenceExpansion?: boolean): TreeWalker; \n    /** \n      * Returns the element for the specified x coordinate and the specified y coordinate.  \n      * @param x The x-offset \n      * @param y The y-offset \n      */ \n    elementFromPoint(x: number, y: number): Element; \n    evaluate(expression: string, contextNode: Node, resolver: XPathNSResolver, type: number, result: XPathResult): XPathResult; \n    /** \n      * Executes a command on the current document, current selection, or the given range. \n      * @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script. \n      * @param showUI Display the user interface, defaults to false. \n      * @param value Value to assign. \n      */ \n    execCommand(commandId: string, showUI?: boolean, value?: any): boolean; \n    /** \n      * Displays help information for the given command identifier. \n      * @param commandId Displays help information for the given command identifier. \n      */ \n    execCommandShowHelp(commandId: string): boolean; \n    exitFullscreen(): void; \n    exitPointerLock(): void; \n    /** \n      * Causes the element to receive the focus and executes the code specified by the onfocus event. \n      */ \n    focus(): void; \n    /** \n      * Returns a reference to the first object with the specified value of the ID or NAME attribute. \n      * @param elementId String that specifies the ID value. Case-insensitive. \n      */ \n    getElementById(elementId: string): HTMLElement; \n    getElementsByClassName(classNames: string): NodeListOf<Element>; \n    /** \n      * Gets a collection of objects based on the value of the NAME or ID attribute. \n      * @param elementName Gets a collection of objects based on the value of the NAME or ID attribute. \n      */ \n    getElementsByName(elementName: string): NodeListOf<Element>; \n    /** \n      * Retrieves a collection of objects based on the specified element name. \n      * @param name Specifies the name of an element. \n      */ \n    getElementsByTagName(tagname: "a"): NodeListOf<HTMLAnchorElement>; \n    getElementsByTagName(tagname: "abbr"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "acronym"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "address"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(tagname: "applet"): NodeListOf<HTMLAppletElement>; \n    getElementsByTagName(tagname: "area"): NodeListOf<HTMLAreaElement>; \n    getElementsByTagName(tagname: "article"): NodeListOf<HTMLElement>; \n    getElementsByTagName(tagname: "aside"): NodeListOf<HTMLElement>; \n    getElementsByTagName(tagname: "audio"): NodeListOf<HTMLAudioElement>; \n    getElementsByTagName(tagname: "b"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "base"): NodeListOf<HTMLBaseElement>; \n    getElementsByTagName(tagname: "basefont"): NodeListOf<HTMLBaseFontElement>; \n    getElementsByTagName(tagname: "bdo"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "big"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "blockquote"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(tagname: "body"): NodeListOf<HTMLBodyElement>; \n    getElementsByTagName(tagname: "br"): NodeListOf<HTMLBRElement>; \n    getElementsByTagName(tagname: "button"): NodeListOf<HTMLButtonElement>; \n    getElementsByTagName(tagname: "canvas"): NodeListOf<HTMLCanvasElement>; \n    getElementsByTagName(tagname: "caption"): NodeListOf<HTMLTableCaptionElement>; \n    getElementsByTagName(tagname: "center"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(tagname: "circle"): NodeListOf<SVGCircleElement>; \n    getElementsByTagName(tagname: "cite"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "clippath"): NodeListOf<SVGClipPathElement>; \n    getElementsByTagName(tagname: "code"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "col"): NodeListOf<HTMLTableColElement>; \n    getElementsByTagName(tagname: "colgroup"): NodeListOf<HTMLTableColElement>; \n    getElementsByTagName(tagname: "datalist"): NodeListOf<HTMLDataListElement>; \n    getElementsByTagName(tagname: "dd"): NodeListOf<HTMLDDElement>; \n    getElementsByTagName(tagname: "defs"): NodeListOf<SVGDefsElement>; \n    getElementsByTagName(tagname: "del"): NodeListOf<HTMLModElement>; \n    getElementsByTagName(tagname: "desc"): NodeListOf<SVGDescElement>; \n    getElementsByTagName(tagname: "dfn"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "dir"): NodeListOf<HTMLDirectoryElement>; \n    getElementsByTagName(tagname: "div"): NodeListOf<HTMLDivElement>; \n    getElementsByTagName(tagname: "dl"): NodeListOf<HTMLDListElement>; \n    getElementsByTagName(tagname: "dt"): NodeListOf<HTMLDTElement>; \n    getElementsByTagName(tagname: "ellipse"): NodeListOf<SVGEllipseElement>; \n    getElementsByTagName(tagname: "em"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "embed"): NodeListOf<HTMLEmbedElement>; \n    getElementsByTagName(tagname: "feblend"): NodeListOf<SVGFEBlendElement>; \n    getElementsByTagName(tagname: "fecolormatrix"): NodeListOf<SVGFEColorMatrixElement>; \n    getElementsByTagName(tagname: "fecomponenttransfer"): NodeListOf<SVGFEComponentTransferElement>; \n    getElementsByTagName(tagname: "fecomposite"): NodeListOf<SVGFECompositeElement>; \n    getElementsByTagName(tagname: "feconvolvematrix"): NodeListOf<SVGFEConvolveMatrixElement>; \n    getElementsByTagName(tagname: "fediffuselighting"): NodeListOf<SVGFEDiffuseLightingElement>; \n    getElementsByTagName(tagname: "fedisplacementmap"): NodeListOf<SVGFEDisplacementMapElement>; \n    getElementsByTagName(tagname: "fedistantlight"): NodeListOf<SVGFEDistantLightElement>; \n    getElementsByTagName(tagname: "feflood"): NodeListOf<SVGFEFloodElement>; \n    getElementsByTagName(tagname: "fefunca"): NodeListOf<SVGFEFuncAElement>; \n    getElementsByTagName(tagname: "fefuncb"): NodeListOf<SVGFEFuncBElement>; \n    getElementsByTagName(tagname: "fefuncg"): NodeListOf<SVGFEFuncGElement>; \n    getElementsByTagName(tagname: "fefuncr"): NodeListOf<SVGFEFuncRElement>; \n    getElementsByTagName(tagname: "fegaussianblur"): NodeListOf<SVGFEGaussianBlurElement>; \n    getElementsByTagName(tagname: "feimage"): NodeListOf<SVGFEImageElement>; \n    getElementsByTagName(tagname: "femerge"): NodeListOf<SVGFEMergeElement>; \n    getElementsByTagName(tagname: "femergenode"): NodeListOf<SVGFEMergeNodeElement>; \n    getElementsByTagName(tagname: "femorphology"): NodeListOf<SVGFEMorphologyElement>; \n    getElementsByTagName(tagname: "feoffset"): NodeListOf<SVGFEOffsetElement>; \n    getElementsByTagName(tagname: "fepointlight"): NodeListOf<SVGFEPointLightElement>; \n    getElementsByTagName(tagname: "fespecularlighting"): NodeListOf<SVGFESpecularLightingElement>; \n    getElementsByTagName(tagname: "fespotlight"): NodeListOf<SVGFESpotLightElement>; \n    getElementsByTagName(tagname: "fetile"): NodeListOf<SVGFETileElement>; \n    getElementsByTagName(tagname: "feturbulence"): NodeListOf<SVGFETurbulenceElement>; \n    getElementsByTagName(tagname: "fieldset"): NodeListOf<HTMLFieldSetElement>; \n    getElementsByTagName(tagname: "figcaption"): NodeListOf<HTMLElement>; \n    getElementsByTagName(tagname: "figure"): NodeListOf<HTMLElement>; \n    getElementsByTagName(tagname: "filter"): NodeListOf<SVGFilterElement>; \n    getElementsByTagName(tagname: "font"): NodeListOf<HTMLFontElement>; \n    getElementsByTagName(tagname: "footer"): NodeListOf<HTMLElement>; \n    getElementsByTagName(tagname: "foreignobject"): NodeListOf<SVGForeignObjectElement>; \n    getElementsByTagName(tagname: "form"): NodeListOf<HTMLFormElement>; \n    getElementsByTagName(tagname: "frame"): NodeListOf<HTMLFrameElement>; \n    getElementsByTagName(tagname: "frameset"): NodeListOf<HTMLFrameSetElement>; \n    getElementsByTagName(tagname: "g"): NodeListOf<SVGGElement>; \n    getElementsByTagName(tagname: "h1"): NodeListOf<HTMLHeadingElement>; \n    getElementsByTagName(tagname: "h2"): NodeListOf<HTMLHeadingElement>; \n    getElementsByTagName(tagname: "h3"): NodeListOf<HTMLHeadingElement>; \n    getElementsByTagName(tagname: "h4"): NodeListOf<HTMLHeadingElement>; \n    getElementsByTagName(tagname: "h5"): NodeListOf<HTMLHeadingElement>; \n    getElementsByTagName(tagname: "h6"): NodeListOf<HTMLHeadingElement>; \n    getElementsByTagName(tagname: "head"): NodeListOf<HTMLHeadElement>; \n    getElementsByTagName(tagname: "header"): NodeListOf<HTMLElement>; \n    getElementsByTagName(tagname: "hgroup"): NodeListOf<HTMLElement>; \n    getElementsByTagName(tagname: "hr"): NodeListOf<HTMLHRElement>; \n    getElementsByTagName(tagname: "html"): NodeListOf<HTMLHtmlElement>; \n    getElementsByTagName(tagname: "i"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "iframe"): NodeListOf<HTMLIFrameElement>; \n    getElementsByTagName(tagname: "image"): NodeListOf<SVGImageElement>; \n    getElementsByTagName(tagname: "img"): NodeListOf<HTMLImageElement>; \n    getElementsByTagName(tagname: "input"): NodeListOf<HTMLInputElement>; \n    getElementsByTagName(tagname: "ins"): NodeListOf<HTMLModElement>; \n    getElementsByTagName(tagname: "isindex"): NodeListOf<HTMLIsIndexElement>; \n    getElementsByTagName(tagname: "kbd"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "keygen"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(tagname: "label"): NodeListOf<HTMLLabelElement>; \n    getElementsByTagName(tagname: "legend"): NodeListOf<HTMLLegendElement>; \n    getElementsByTagName(tagname: "li"): NodeListOf<HTMLLIElement>; \n    getElementsByTagName(tagname: "line"): NodeListOf<SVGLineElement>; \n    getElementsByTagName(tagname: "lineargradient"): NodeListOf<SVGLinearGradientElement>; \n    getElementsByTagName(tagname: "link"): NodeListOf<HTMLLinkElement>; \n    getElementsByTagName(tagname: "listing"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(tagname: "map"): NodeListOf<HTMLMapElement>; \n    getElementsByTagName(tagname: "mark"): NodeListOf<HTMLElement>; \n    getElementsByTagName(tagname: "marker"): NodeListOf<SVGMarkerElement>; \n    getElementsByTagName(tagname: "marquee"): NodeListOf<HTMLMarqueeElement>; \n    getElementsByTagName(tagname: "mask"): NodeListOf<SVGMaskElement>; \n    getElementsByTagName(tagname: "menu"): NodeListOf<HTMLMenuElement>; \n    getElementsByTagName(tagname: "meta"): NodeListOf<HTMLMetaElement>; \n    getElementsByTagName(tagname: "metadata"): NodeListOf<SVGMetadataElement>; \n    getElementsByTagName(tagname: "nav"): NodeListOf<HTMLElement>; \n    getElementsByTagName(tagname: "nextid"): NodeListOf<HTMLNextIdElement>; \n    getElementsByTagName(tagname: "nobr"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "noframes"): NodeListOf<HTMLElement>; \n    getElementsByTagName(tagname: "noscript"): NodeListOf<HTMLElement>; \n    getElementsByTagName(tagname: "object"): NodeListOf<HTMLObjectElement>; \n    getElementsByTagName(tagname: "ol"): NodeListOf<HTMLOListElement>; \n    getElementsByTagName(tagname: "optgroup"): NodeListOf<HTMLOptGroupElement>; \n    getElementsByTagName(tagname: "option"): NodeListOf<HTMLOptionElement>; \n    getElementsByTagName(tagname: "p"): NodeListOf<HTMLParagraphElement>; \n    getElementsByTagName(tagname: "param"): NodeListOf<HTMLParamElement>; \n    getElementsByTagName(tagname: "path"): NodeListOf<SVGPathElement>; \n    getElementsByTagName(tagname: "pattern"): NodeListOf<SVGPatternElement>; \n    getElementsByTagName(tagname: "plaintext"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(tagname: "polygon"): NodeListOf<SVGPolygonElement>; \n    getElementsByTagName(tagname: "polyline"): NodeListOf<SVGPolylineElement>; \n    getElementsByTagName(tagname: "pre"): NodeListOf<HTMLPreElement>; \n    getElementsByTagName(tagname: "progress"): NodeListOf<HTMLProgressElement>; \n    getElementsByTagName(tagname: "q"): NodeListOf<HTMLQuoteElement>; \n    getElementsByTagName(tagname: "radialgradient"): NodeListOf<SVGRadialGradientElement>; \n    getElementsByTagName(tagname: "rect"): NodeListOf<SVGRectElement>; \n    getElementsByTagName(tagname: "rt"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "ruby"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "s"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "samp"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "script"): NodeListOf<HTMLScriptElement>; \n    getElementsByTagName(tagname: "section"): NodeListOf<HTMLElement>; \n    getElementsByTagName(tagname: "select"): NodeListOf<HTMLSelectElement>; \n    getElementsByTagName(tagname: "small"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "source"): NodeListOf<HTMLSourceElement>; \n    getElementsByTagName(tagname: "span"): NodeListOf<HTMLSpanElement>; \n    getElementsByTagName(tagname: "stop"): NodeListOf<SVGStopElement>; \n    getElementsByTagName(tagname: "strike"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "strong"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "style"): NodeListOf<HTMLStyleElement>; \n    getElementsByTagName(tagname: "sub"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "sup"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "svg"): NodeListOf<SVGSVGElement>; \n    getElementsByTagName(tagname: "switch"): NodeListOf<SVGSwitchElement>; \n    getElementsByTagName(tagname: "symbol"): NodeListOf<SVGSymbolElement>; \n    getElementsByTagName(tagname: "table"): NodeListOf<HTMLTableElement>; \n    getElementsByTagName(tagname: "tbody"): NodeListOf<HTMLTableSectionElement>; \n    getElementsByTagName(tagname: "td"): NodeListOf<HTMLTableDataCellElement>; \n    getElementsByTagName(tagname: "text"): NodeListOf<SVGTextElement>; \n    getElementsByTagName(tagname: "textpath"): NodeListOf<SVGTextPathElement>; \n    getElementsByTagName(tagname: "textarea"): NodeListOf<HTMLTextAreaElement>; \n    getElementsByTagName(tagname: "tfoot"): NodeListOf<HTMLTableSectionElement>; \n    getElementsByTagName(tagname: "th"): NodeListOf<HTMLTableHeaderCellElement>; \n    getElementsByTagName(tagname: "thead"): NodeListOf<HTMLTableSectionElement>; \n    getElementsByTagName(tagname: "title"): NodeListOf<HTMLTitleElement>; \n    getElementsByTagName(tagname: "tr"): NodeListOf<HTMLTableRowElement>; \n    getElementsByTagName(tagname: "track"): NodeListOf<HTMLTrackElement>; \n    getElementsByTagName(tagname: "tspan"): NodeListOf<SVGTSpanElement>; \n    getElementsByTagName(tagname: "tt"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "u"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "ul"): NodeListOf<HTMLUListElement>; \n    getElementsByTagName(tagname: "use"): NodeListOf<SVGUseElement>; \n    getElementsByTagName(tagname: "var"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(tagname: "video"): NodeListOf<HTMLVideoElement>; \n    getElementsByTagName(tagname: "view"): NodeListOf<SVGViewElement>; \n    getElementsByTagName(tagname: "wbr"): NodeListOf<HTMLElement>; \n    getElementsByTagName(tagname: "x-ms-webview"): NodeListOf<MSHTMLWebViewElement>; \n    getElementsByTagName(tagname: "xmp"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(tagname: string): NodeListOf<Element>; \n    getElementsByTagNameNS(namespaceURI: string, localName: string): NodeListOf<Element>; \n    /** \n      * Returns an object representing the current selection of the document that is loaded into the object displaying a webpage. \n      */ \n    getSelection(): Selection; \n    /** \n      * Gets a value indicating whether the object currently has focus. \n      */ \n    hasFocus(): boolean; \n    importNode(importedNode: Node, deep: boolean): Node; \n    msElementsFromPoint(x: number, y: number): NodeList; \n    msElementsFromRect(left: number, top: number, width: number, height: number): NodeList; \n    msGetPrintDocumentForNamedFlow(flowName: string): Document; \n    msSetPrintDocumentUriForNamedFlow(flowName: string, uri: string): void; \n    /** \n      * Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method. \n      * @param url Specifies a MIME type for the document. \n      * @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element. \n      * @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, "fullscreen=yes, toolbar=yes"). The following values are supported. \n      * @param replace Specifies whether the existing entry for the document is replaced in the history list. \n      */ \n    open(url?: string, name?: string, features?: string, replace?: boolean): Document; \n    /**  \n      * Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document. \n      * @param commandId Specifies a command identifier. \n      */ \n    queryCommandEnabled(commandId: string): boolean; \n    /** \n      * Returns a Boolean value that indicates whether the specified command is in the indeterminate state. \n      * @param commandId String that specifies a command identifier. \n      */ \n    queryCommandIndeterm(commandId: string): boolean; \n    /** \n      * Returns a Boolean value that indicates the current state of the command. \n      * @param commandId String that specifies a command identifier. \n      */ \n    queryCommandState(commandId: string): boolean; \n    /** \n      * Returns a Boolean value that indicates whether the current command is supported on the current range. \n      * @param commandId Specifies a command identifier. \n      */ \n    queryCommandSupported(commandId: string): boolean; \n    /** \n      * Retrieves the string associated with a command. \n      * @param commandId String that contains the identifier of a command. This can be any command identifier given in the list of Command Identifiers.  \n      */ \n    queryCommandText(commandId: string): string; \n    /** \n      * Returns the current value of the document, range, or current selection for the given command. \n      * @param commandId String that specifies a command identifier. \n      */ \n    queryCommandValue(commandId: string): string; \n    releaseEvents(): void; \n    /** \n      * Allows updating the print settings for the page. \n      */ \n    updateSettings(): void; \n    webkitCancelFullScreen(): void; \n    webkitExitFullscreen(): void; \n    /** \n      * Writes one or more HTML expressions to a document in the specified window.  \n      * @param content Specifies the text and HTML tags to write. \n      */ \n    write(...content: string[]): void; \n    /** \n      * Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.  \n      * @param content The text and HTML tags to write. \n      */ \n    writeln(...content: string[]): void; \n    addEventListener(type: "MSContentZoom", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSManipulationStateChanged", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "activate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforedeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "contextmenu", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "deactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "fullscreenchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "fullscreenerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mssitemodejumplistitemremoved", listener: (ev: MSSiteModeEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "msthumbnailclick", listener: (ev: MSSiteModeEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerlockchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerlockerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "readystatechange", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "selectstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "stop", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchcancel", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchend", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchmove", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchstart", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var Document: { \n    prototype: Document; \n    new(): Document; \n} \n \ninterface DocumentFragment extends Node, NodeSelector { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var DocumentFragment: { \n    prototype: DocumentFragment; \n    new(): DocumentFragment; \n} \n \ninterface DocumentType extends Node, ChildNode { \n    entities: NamedNodeMap; \n    internalSubset: string; \n    name: string; \n    notations: NamedNodeMap; \n    publicId: string; \n    systemId: string; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var DocumentType: { \n    prototype: DocumentType; \n    new(): DocumentType; \n} \n \ninterface DragEvent extends MouseEvent { \n    dataTransfer: DataTransfer; \n    initDragEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, dataTransferArg: DataTransfer): void; \n    msConvertURL(file: File, targetType: string, targetURL?: string): void; \n} \n \ndeclare var DragEvent: { \n    prototype: DragEvent; \n    new(): DragEvent; \n} \n \ninterface DynamicsCompressorNode extends AudioNode { \n    attack: AudioParam; \n    knee: AudioParam; \n    ratio: AudioParam; \n    reduction: AudioParam; \n    release: AudioParam; \n    threshold: AudioParam; \n} \n \ndeclare var DynamicsCompressorNode: { \n    prototype: DynamicsCompressorNode; \n    new(): DynamicsCompressorNode; \n} \n \ninterface EXT_texture_filter_anisotropic { \n    MAX_TEXTURE_MAX_ANISOTROPY_EXT: number; \n    TEXTURE_MAX_ANISOTROPY_EXT: number; \n} \n \ndeclare var EXT_texture_filter_anisotropic: { \n    prototype: EXT_texture_filter_anisotropic; \n    new(): EXT_texture_filter_anisotropic; \n    MAX_TEXTURE_MAX_ANISOTROPY_EXT: number; \n    TEXTURE_MAX_ANISOTROPY_EXT: number; \n} \n \ninterface Element extends Node, GlobalEventHandlers, ElementTraversal, NodeSelector, ChildNode { \n    classList: DOMTokenList; \n    clientHeight: number; \n    clientLeft: number; \n    clientTop: number; \n    clientWidth: number; \n    msContentZoomFactor: number; \n    msRegionOverflow: string; \n    onariarequest: (ev: AriaRequestEvent) => any; \n    oncommand: (ev: CommandEvent) => any; \n    ongotpointercapture: (ev: PointerEvent) => any; \n    onlostpointercapture: (ev: PointerEvent) => any; \n    onmsgesturechange: (ev: MSGestureEvent) => any; \n    onmsgesturedoubletap: (ev: MSGestureEvent) => any; \n    onmsgestureend: (ev: MSGestureEvent) => any; \n    onmsgesturehold: (ev: MSGestureEvent) => any; \n    onmsgesturestart: (ev: MSGestureEvent) => any; \n    onmsgesturetap: (ev: MSGestureEvent) => any; \n    onmsgotpointercapture: (ev: MSPointerEvent) => any; \n    onmsinertiastart: (ev: MSGestureEvent) => any; \n    onmslostpointercapture: (ev: MSPointerEvent) => any; \n    onmspointercancel: (ev: MSPointerEvent) => any; \n    onmspointerdown: (ev: MSPointerEvent) => any; \n    onmspointerenter: (ev: MSPointerEvent) => any; \n    onmspointerleave: (ev: MSPointerEvent) => any; \n    onmspointermove: (ev: MSPointerEvent) => any; \n    onmspointerout: (ev: MSPointerEvent) => any; \n    onmspointerover: (ev: MSPointerEvent) => any; \n    onmspointerup: (ev: MSPointerEvent) => any; \n    ontouchcancel: (ev: TouchEvent) => any; \n    ontouchend: (ev: TouchEvent) => any; \n    ontouchmove: (ev: TouchEvent) => any; \n    ontouchstart: (ev: TouchEvent) => any; \n    onwebkitfullscreenchange: (ev: Event) => any; \n    onwebkitfullscreenerror: (ev: Event) => any; \n    scrollHeight: number; \n    scrollLeft: number; \n    scrollTop: number; \n    scrollWidth: number; \n    tagName: string; \n    id: string; \n    className: string; \n    getAttribute(name?: string): string; \n    getAttributeNS(namespaceURI: string, localName: string): string; \n    getAttributeNode(name: string): Attr; \n    getAttributeNodeNS(namespaceURI: string, localName: string): Attr; \n    getBoundingClientRect(): ClientRect; \n    getClientRects(): ClientRectList; \n    getElementsByTagName(name: "a"): NodeListOf<HTMLAnchorElement>; \n    getElementsByTagName(name: "abbr"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "acronym"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "address"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(name: "applet"): NodeListOf<HTMLAppletElement>; \n    getElementsByTagName(name: "area"): NodeListOf<HTMLAreaElement>; \n    getElementsByTagName(name: "article"): NodeListOf<HTMLElement>; \n    getElementsByTagName(name: "aside"): NodeListOf<HTMLElement>; \n    getElementsByTagName(name: "audio"): NodeListOf<HTMLAudioElement>; \n    getElementsByTagName(name: "b"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "base"): NodeListOf<HTMLBaseElement>; \n    getElementsByTagName(name: "basefont"): NodeListOf<HTMLBaseFontElement>; \n    getElementsByTagName(name: "bdo"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "big"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "blockquote"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(name: "body"): NodeListOf<HTMLBodyElement>; \n    getElementsByTagName(name: "br"): NodeListOf<HTMLBRElement>; \n    getElementsByTagName(name: "button"): NodeListOf<HTMLButtonElement>; \n    getElementsByTagName(name: "canvas"): NodeListOf<HTMLCanvasElement>; \n    getElementsByTagName(name: "caption"): NodeListOf<HTMLTableCaptionElement>; \n    getElementsByTagName(name: "center"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(name: "circle"): NodeListOf<SVGCircleElement>; \n    getElementsByTagName(name: "cite"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "clippath"): NodeListOf<SVGClipPathElement>; \n    getElementsByTagName(name: "code"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "col"): NodeListOf<HTMLTableColElement>; \n    getElementsByTagName(name: "colgroup"): NodeListOf<HTMLTableColElement>; \n    getElementsByTagName(name: "datalist"): NodeListOf<HTMLDataListElement>; \n    getElementsByTagName(name: "dd"): NodeListOf<HTMLDDElement>; \n    getElementsByTagName(name: "defs"): NodeListOf<SVGDefsElement>; \n    getElementsByTagName(name: "del"): NodeListOf<HTMLModElement>; \n    getElementsByTagName(name: "desc"): NodeListOf<SVGDescElement>; \n    getElementsByTagName(name: "dfn"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "dir"): NodeListOf<HTMLDirectoryElement>; \n    getElementsByTagName(name: "div"): NodeListOf<HTMLDivElement>; \n    getElementsByTagName(name: "dl"): NodeListOf<HTMLDListElement>; \n    getElementsByTagName(name: "dt"): NodeListOf<HTMLDTElement>; \n    getElementsByTagName(name: "ellipse"): NodeListOf<SVGEllipseElement>; \n    getElementsByTagName(name: "em"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "embed"): NodeListOf<HTMLEmbedElement>; \n    getElementsByTagName(name: "feblend"): NodeListOf<SVGFEBlendElement>; \n    getElementsByTagName(name: "fecolormatrix"): NodeListOf<SVGFEColorMatrixElement>; \n    getElementsByTagName(name: "fecomponenttransfer"): NodeListOf<SVGFEComponentTransferElement>; \n    getElementsByTagName(name: "fecomposite"): NodeListOf<SVGFECompositeElement>; \n    getElementsByTagName(name: "feconvolvematrix"): NodeListOf<SVGFEConvolveMatrixElement>; \n    getElementsByTagName(name: "fediffuselighting"): NodeListOf<SVGFEDiffuseLightingElement>; \n    getElementsByTagName(name: "fedisplacementmap"): NodeListOf<SVGFEDisplacementMapElement>; \n    getElementsByTagName(name: "fedistantlight"): NodeListOf<SVGFEDistantLightElement>; \n    getElementsByTagName(name: "feflood"): NodeListOf<SVGFEFloodElement>; \n    getElementsByTagName(name: "fefunca"): NodeListOf<SVGFEFuncAElement>; \n    getElementsByTagName(name: "fefuncb"): NodeListOf<SVGFEFuncBElement>; \n    getElementsByTagName(name: "fefuncg"): NodeListOf<SVGFEFuncGElement>; \n    getElementsByTagName(name: "fefuncr"): NodeListOf<SVGFEFuncRElement>; \n    getElementsByTagName(name: "fegaussianblur"): NodeListOf<SVGFEGaussianBlurElement>; \n    getElementsByTagName(name: "feimage"): NodeListOf<SVGFEImageElement>; \n    getElementsByTagName(name: "femerge"): NodeListOf<SVGFEMergeElement>; \n    getElementsByTagName(name: "femergenode"): NodeListOf<SVGFEMergeNodeElement>; \n    getElementsByTagName(name: "femorphology"): NodeListOf<SVGFEMorphologyElement>; \n    getElementsByTagName(name: "feoffset"): NodeListOf<SVGFEOffsetElement>; \n    getElementsByTagName(name: "fepointlight"): NodeListOf<SVGFEPointLightElement>; \n    getElementsByTagName(name: "fespecularlighting"): NodeListOf<SVGFESpecularLightingElement>; \n    getElementsByTagName(name: "fespotlight"): NodeListOf<SVGFESpotLightElement>; \n    getElementsByTagName(name: "fetile"): NodeListOf<SVGFETileElement>; \n    getElementsByTagName(name: "feturbulence"): NodeListOf<SVGFETurbulenceElement>; \n    getElementsByTagName(name: "fieldset"): NodeListOf<HTMLFieldSetElement>; \n    getElementsByTagName(name: "figcaption"): NodeListOf<HTMLElement>; \n    getElementsByTagName(name: "figure"): NodeListOf<HTMLElement>; \n    getElementsByTagName(name: "filter"): NodeListOf<SVGFilterElement>; \n    getElementsByTagName(name: "font"): NodeListOf<HTMLFontElement>; \n    getElementsByTagName(name: "footer"): NodeListOf<HTMLElement>; \n    getElementsByTagName(name: "foreignobject"): NodeListOf<SVGForeignObjectElement>; \n    getElementsByTagName(name: "form"): NodeListOf<HTMLFormElement>; \n    getElementsByTagName(name: "frame"): NodeListOf<HTMLFrameElement>; \n    getElementsByTagName(name: "frameset"): NodeListOf<HTMLFrameSetElement>; \n    getElementsByTagName(name: "g"): NodeListOf<SVGGElement>; \n    getElementsByTagName(name: "h1"): NodeListOf<HTMLHeadingElement>; \n    getElementsByTagName(name: "h2"): NodeListOf<HTMLHeadingElement>; \n    getElementsByTagName(name: "h3"): NodeListOf<HTMLHeadingElement>; \n    getElementsByTagName(name: "h4"): NodeListOf<HTMLHeadingElement>; \n    getElementsByTagName(name: "h5"): NodeListOf<HTMLHeadingElement>; \n    getElementsByTagName(name: "h6"): NodeListOf<HTMLHeadingElement>; \n    getElementsByTagName(name: "head"): NodeListOf<HTMLHeadElement>; \n    getElementsByTagName(name: "header"): NodeListOf<HTMLElement>; \n    getElementsByTagName(name: "hgroup"): NodeListOf<HTMLElement>; \n    getElementsByTagName(name: "hr"): NodeListOf<HTMLHRElement>; \n    getElementsByTagName(name: "html"): NodeListOf<HTMLHtmlElement>; \n    getElementsByTagName(name: "i"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "iframe"): NodeListOf<HTMLIFrameElement>; \n    getElementsByTagName(name: "image"): NodeListOf<SVGImageElement>; \n    getElementsByTagName(name: "img"): NodeListOf<HTMLImageElement>; \n    getElementsByTagName(name: "input"): NodeListOf<HTMLInputElement>; \n    getElementsByTagName(name: "ins"): NodeListOf<HTMLModElement>; \n    getElementsByTagName(name: "isindex"): NodeListOf<HTMLIsIndexElement>; \n    getElementsByTagName(name: "kbd"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "keygen"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(name: "label"): NodeListOf<HTMLLabelElement>; \n    getElementsByTagName(name: "legend"): NodeListOf<HTMLLegendElement>; \n    getElementsByTagName(name: "li"): NodeListOf<HTMLLIElement>; \n    getElementsByTagName(name: "line"): NodeListOf<SVGLineElement>; \n    getElementsByTagName(name: "lineargradient"): NodeListOf<SVGLinearGradientElement>; \n    getElementsByTagName(name: "link"): NodeListOf<HTMLLinkElement>; \n    getElementsByTagName(name: "listing"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(name: "map"): NodeListOf<HTMLMapElement>; \n    getElementsByTagName(name: "mark"): NodeListOf<HTMLElement>; \n    getElementsByTagName(name: "marker"): NodeListOf<SVGMarkerElement>; \n    getElementsByTagName(name: "marquee"): NodeListOf<HTMLMarqueeElement>; \n    getElementsByTagName(name: "mask"): NodeListOf<SVGMaskElement>; \n    getElementsByTagName(name: "menu"): NodeListOf<HTMLMenuElement>; \n    getElementsByTagName(name: "meta"): NodeListOf<HTMLMetaElement>; \n    getElementsByTagName(name: "metadata"): NodeListOf<SVGMetadataElement>; \n    getElementsByTagName(name: "nav"): NodeListOf<HTMLElement>; \n    getElementsByTagName(name: "nextid"): NodeListOf<HTMLNextIdElement>; \n    getElementsByTagName(name: "nobr"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "noframes"): NodeListOf<HTMLElement>; \n    getElementsByTagName(name: "noscript"): NodeListOf<HTMLElement>; \n    getElementsByTagName(name: "object"): NodeListOf<HTMLObjectElement>; \n    getElementsByTagName(name: "ol"): NodeListOf<HTMLOListElement>; \n    getElementsByTagName(name: "optgroup"): NodeListOf<HTMLOptGroupElement>; \n    getElementsByTagName(name: "option"): NodeListOf<HTMLOptionElement>; \n    getElementsByTagName(name: "p"): NodeListOf<HTMLParagraphElement>; \n    getElementsByTagName(name: "param"): NodeListOf<HTMLParamElement>; \n    getElementsByTagName(name: "path"): NodeListOf<SVGPathElement>; \n    getElementsByTagName(name: "pattern"): NodeListOf<SVGPatternElement>; \n    getElementsByTagName(name: "plaintext"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(name: "polygon"): NodeListOf<SVGPolygonElement>; \n    getElementsByTagName(name: "polyline"): NodeListOf<SVGPolylineElement>; \n    getElementsByTagName(name: "pre"): NodeListOf<HTMLPreElement>; \n    getElementsByTagName(name: "progress"): NodeListOf<HTMLProgressElement>; \n    getElementsByTagName(name: "q"): NodeListOf<HTMLQuoteElement>; \n    getElementsByTagName(name: "radialgradient"): NodeListOf<SVGRadialGradientElement>; \n    getElementsByTagName(name: "rect"): NodeListOf<SVGRectElement>; \n    getElementsByTagName(name: "rt"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "ruby"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "s"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "samp"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "script"): NodeListOf<HTMLScriptElement>; \n    getElementsByTagName(name: "section"): NodeListOf<HTMLElement>; \n    getElementsByTagName(name: "select"): NodeListOf<HTMLSelectElement>; \n    getElementsByTagName(name: "small"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "source"): NodeListOf<HTMLSourceElement>; \n    getElementsByTagName(name: "span"): NodeListOf<HTMLSpanElement>; \n    getElementsByTagName(name: "stop"): NodeListOf<SVGStopElement>; \n    getElementsByTagName(name: "strike"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "strong"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "style"): NodeListOf<HTMLStyleElement>; \n    getElementsByTagName(name: "sub"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "sup"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "svg"): NodeListOf<SVGSVGElement>; \n    getElementsByTagName(name: "switch"): NodeListOf<SVGSwitchElement>; \n    getElementsByTagName(name: "symbol"): NodeListOf<SVGSymbolElement>; \n    getElementsByTagName(name: "table"): NodeListOf<HTMLTableElement>; \n    getElementsByTagName(name: "tbody"): NodeListOf<HTMLTableSectionElement>; \n    getElementsByTagName(name: "td"): NodeListOf<HTMLTableDataCellElement>; \n    getElementsByTagName(name: "text"): NodeListOf<SVGTextElement>; \n    getElementsByTagName(name: "textpath"): NodeListOf<SVGTextPathElement>; \n    getElementsByTagName(name: "textarea"): NodeListOf<HTMLTextAreaElement>; \n    getElementsByTagName(name: "tfoot"): NodeListOf<HTMLTableSectionElement>; \n    getElementsByTagName(name: "th"): NodeListOf<HTMLTableHeaderCellElement>; \n    getElementsByTagName(name: "thead"): NodeListOf<HTMLTableSectionElement>; \n    getElementsByTagName(name: "title"): NodeListOf<HTMLTitleElement>; \n    getElementsByTagName(name: "tr"): NodeListOf<HTMLTableRowElement>; \n    getElementsByTagName(name: "track"): NodeListOf<HTMLTrackElement>; \n    getElementsByTagName(name: "tspan"): NodeListOf<SVGTSpanElement>; \n    getElementsByTagName(name: "tt"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "u"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "ul"): NodeListOf<HTMLUListElement>; \n    getElementsByTagName(name: "use"): NodeListOf<SVGUseElement>; \n    getElementsByTagName(name: "var"): NodeListOf<HTMLPhraseElement>; \n    getElementsByTagName(name: "video"): NodeListOf<HTMLVideoElement>; \n    getElementsByTagName(name: "view"): NodeListOf<SVGViewElement>; \n    getElementsByTagName(name: "wbr"): NodeListOf<HTMLElement>; \n    getElementsByTagName(name: "x-ms-webview"): NodeListOf<MSHTMLWebViewElement>; \n    getElementsByTagName(name: "xmp"): NodeListOf<HTMLBlockElement>; \n    getElementsByTagName(name: string): NodeListOf<Element>; \n    getElementsByTagNameNS(namespaceURI: string, localName: string): NodeListOf<Element>; \n    hasAttribute(name: string): boolean; \n    hasAttributeNS(namespaceURI: string, localName: string): boolean; \n    msGetRegionContent(): MSRangeCollection; \n    msGetUntransformedBounds(): ClientRect; \n    msMatchesSelector(selectors: string): boolean; \n    msReleasePointerCapture(pointerId: number): void; \n    msSetPointerCapture(pointerId: number): void; \n    msZoomTo(args: MsZoomToOptions): void; \n    releasePointerCapture(pointerId: number): void; \n    removeAttribute(name?: string): void; \n    removeAttributeNS(namespaceURI: string, localName: string): void; \n    removeAttributeNode(oldAttr: Attr): Attr; \n    requestFullscreen(): void; \n    requestPointerLock(): void; \n    setAttribute(name?: string, value?: string): void; \n    setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void; \n    setAttributeNode(newAttr: Attr): Attr; \n    setAttributeNodeNS(newAttr: Attr): Attr; \n    setPointerCapture(pointerId: number): void; \n    webkitMatchesSelector(selectors: string): boolean; \n    webkitRequestFullScreen(): void; \n    webkitRequestFullscreen(): void; \n    getElementsByClassName(classNames: string): NodeListOf<Element>; \n    addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGotPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSLostPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ariarequest", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "command", listener: (ev: CommandEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "gotpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "lostpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchcancel", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchend", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchmove", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchstart", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var Element: { \n    prototype: Element; \n    new(): Element; \n} \n \ninterface ErrorEvent extends Event { \n    colno: number; \n    error: any; \n    filename: string; \n    lineno: number; \n    message: string; \n    initErrorEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, messageArg: string, filenameArg: string, linenoArg: number): void; \n} \n \ndeclare var ErrorEvent: { \n    prototype: ErrorEvent; \n    new(): ErrorEvent; \n} \n \ninterface Event { \n    bubbles: boolean; \n    cancelBubble: boolean; \n    cancelable: boolean; \n    currentTarget: EventTarget; \n    defaultPrevented: boolean; \n    eventPhase: number; \n    isTrusted: boolean; \n    returnValue: boolean; \n    srcElement: Element; \n    target: EventTarget; \n    timeStamp: number; \n    type: string; \n    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void; \n    preventDefault(): void; \n    stopImmediatePropagation(): void; \n    stopPropagation(): void; \n    AT_TARGET: number; \n    BUBBLING_PHASE: number; \n    CAPTURING_PHASE: number; \n} \n \ndeclare var Event: { \n    prototype: Event; \n    new(type: string, eventInitDict?: EventInit): Event; \n    AT_TARGET: number; \n    BUBBLING_PHASE: number; \n    CAPTURING_PHASE: number; \n} \n \ninterface EventTarget { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n    dispatchEvent(evt: Event): boolean; \n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var EventTarget: { \n    prototype: EventTarget; \n    new(): EventTarget; \n} \n \ninterface External { \n} \n \ndeclare var External: { \n    prototype: External; \n    new(): External; \n} \n \ninterface File extends Blob { \n    lastModifiedDate: any; \n    name: string; \n} \n \ndeclare var File: { \n    prototype: File; \n    new (parts: (ArrayBuffer | ArrayBufferView | Blob | string)[], filename: string, properties?: FilePropertyBag): File; \n} \n \ninterface FileList { \n    length: number; \n    item(index: number): File; \n    [index: number]: File; \n} \n \ndeclare var FileList: { \n    prototype: FileList; \n    new(): FileList; \n} \n \ninterface FileReader extends EventTarget, MSBaseReader { \n    error: DOMError; \n    readAsArrayBuffer(blob: Blob): void; \n    readAsBinaryString(blob: Blob): void; \n    readAsDataURL(blob: Blob): void; \n    readAsText(blob: Blob, encoding?: string): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var FileReader: { \n    prototype: FileReader; \n    new(): FileReader; \n} \n \ninterface FocusEvent extends UIEvent { \n    relatedTarget: EventTarget; \n    initFocusEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, relatedTargetArg: EventTarget): void; \n} \n \ndeclare var FocusEvent: { \n    prototype: FocusEvent; \n    new(typeArg: string, eventInitDict?: FocusEventInit): FocusEvent; \n} \n \ninterface FormData { \n    append(name: any, value: any, blobName?: string): void; \n} \n \ndeclare var FormData: { \n    prototype: FormData; \n    new (form?: HTMLFormElement): FormData; \n} \n \ninterface GainNode extends AudioNode { \n    gain: AudioParam; \n} \n \ndeclare var GainNode: { \n    prototype: GainNode; \n    new(): GainNode; \n} \n \ninterface Gamepad { \n    axes: number[]; \n    buttons: GamepadButton[]; \n    connected: boolean; \n    id: string; \n    index: number; \n    mapping: string; \n    timestamp: number; \n} \n \ndeclare var Gamepad: { \n    prototype: Gamepad; \n    new(): Gamepad; \n} \n \ninterface GamepadButton { \n    pressed: boolean; \n    value: number; \n} \n \ndeclare var GamepadButton: { \n    prototype: GamepadButton; \n    new(): GamepadButton; \n} \n \ninterface GamepadEvent extends Event { \n    gamepad: Gamepad; \n} \n \ndeclare var GamepadEvent: { \n    prototype: GamepadEvent; \n    new(): GamepadEvent; \n} \n \ninterface Geolocation { \n    clearWatch(watchId: number): void; \n    getCurrentPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): void; \n    watchPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): number; \n} \n \ndeclare var Geolocation: { \n    prototype: Geolocation; \n    new(): Geolocation; \n} \n \ninterface HTMLAllCollection extends HTMLCollection { \n    namedItem(name: string): Element; \n} \n \ndeclare var HTMLAllCollection: { \n    prototype: HTMLAllCollection; \n    new(): HTMLAllCollection; \n} \n \ninterface HTMLAnchorElement extends HTMLElement { \n    Methods: string; \n    /** \n      * Sets or retrieves the character set used to encode the object. \n      */ \n    charset: string; \n    /** \n      * Sets or retrieves the coordinates of the object. \n      */ \n    coords: string; \n    /** \n      * Contains the anchor portion of the URL including the hash sign (#). \n      */ \n    hash: string; \n    /** \n      * Contains the hostname and port values of the URL. \n      */ \n    host: string; \n    /** \n      * Contains the hostname of a URL. \n      */ \n    hostname: string; \n    /** \n      * Sets or retrieves a destination URL or an anchor point. \n      */ \n    href: string; \n    /** \n      * Sets or retrieves the language code of the object. \n      */ \n    hreflang: string; \n    mimeType: string; \n    /** \n      * Sets or retrieves the shape of the object. \n      */ \n    name: string; \n    nameProp: string; \n    /** \n      * Contains the pathname of the URL. \n      */ \n    pathname: string; \n    /** \n      * Sets or retrieves the port number associated with a URL. \n      */ \n    port: string; \n    /** \n      * Contains the protocol of the URL. \n      */ \n    protocol: string; \n    protocolLong: string; \n    /** \n      * Sets or retrieves the relationship between the object and the destination of the link. \n      */ \n    rel: string; \n    /** \n      * Sets or retrieves the relationship between the object and the destination of the link. \n      */ \n    rev: string; \n    /** \n      * Sets or retrieves the substring of the href property that follows the question mark. \n      */ \n    search: string; \n    /** \n      * Sets or retrieves the shape of the object. \n      */ \n    shape: string; \n    /** \n      * Sets or retrieves the window or frame at which to target content. \n      */ \n    target: string; \n    /** \n      * Retrieves or sets the text of the object as a string.  \n      */ \n    text: string; \n    type: string; \n    urn: string; \n    /**  \n      * Returns a string representation of an object. \n      */ \n    toString(): string; \n} \n \ndeclare var HTMLAnchorElement: { \n    prototype: HTMLAnchorElement; \n    new(): HTMLAnchorElement; \n} \n \ninterface HTMLAppletElement extends HTMLElement { \n    /** \n      * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element. \n      */ \n    BaseHref: string; \n    align: string; \n    /** \n      * Sets or retrieves a text alternative to the graphic. \n      */ \n    alt: string; \n    /** \n      * Gets or sets the optional alternative HTML script to execute if the object fails to load. \n      */ \n    altHtml: string; \n    /** \n      * Sets or retrieves a character string that can be used to implement your own archive functionality for the object. \n      */ \n    archive: string; \n    border: string; \n    code: string; \n    /** \n      * Sets or retrieves the URL of the component. \n      */ \n    codeBase: string; \n    /** \n      * Sets or retrieves the Internet media type for the code associated with the object. \n      */ \n    codeType: string; \n    /** \n      * Address of a pointer to the document this page or frame contains. If there is no document, then null will be returned. \n      */ \n    contentDocument: Document; \n    /** \n      * Sets or retrieves the URL that references the data of the object. \n      */ \n    data: string; \n    /** \n      * Sets or retrieves a character string that can be used to implement your own declare functionality for the object. \n      */ \n    declare: boolean; \n    form: HTMLFormElement; \n    /** \n      * Sets or retrieves the height of the object. \n      */ \n    height: string; \n    hspace: number; \n    /** \n      * Sets or retrieves the shape of the object. \n      */ \n    name: string; \n    object: string; \n    /** \n      * Sets or retrieves a message to be displayed while an object is loading. \n      */ \n    standby: string; \n    /** \n      * Returns the content type of the object. \n      */ \n    type: string; \n    /** \n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map. \n      */ \n    useMap: string; \n    vspace: number; \n    width: number; \n} \n \ndeclare var HTMLAppletElement: { \n    prototype: HTMLAppletElement; \n    new(): HTMLAppletElement; \n} \n \ninterface HTMLAreaElement extends HTMLElement { \n    /** \n      * Sets or retrieves a text alternative to the graphic. \n      */ \n    alt: string; \n    /** \n      * Sets or retrieves the coordinates of the object. \n      */ \n    coords: string; \n    /** \n      * Sets or retrieves the subsection of the href property that follows the number sign (#). \n      */ \n    hash: string; \n    /** \n      * Sets or retrieves the hostname and port number of the location or URL. \n      */ \n    host: string; \n    /** \n      * Sets or retrieves the host name part of the location or URL.  \n      */ \n    hostname: string; \n    /** \n      * Sets or retrieves a destination URL or an anchor point. \n      */ \n    href: string; \n    /** \n      * Sets or gets whether clicks in this region cause action. \n      */ \n    noHref: boolean; \n    /** \n      * Sets or retrieves the file name or path specified by the object. \n      */ \n    pathname: string; \n    /** \n      * Sets or retrieves the port number associated with a URL. \n      */ \n    port: string; \n    /** \n      * Sets or retrieves the protocol portion of a URL. \n      */ \n    protocol: string; \n    rel: string; \n    /** \n      * Sets or retrieves the substring of the href property that follows the question mark. \n      */ \n    search: string; \n    /** \n      * Sets or retrieves the shape of the object. \n      */ \n    shape: string; \n    /** \n      * Sets or retrieves the window or frame at which to target content. \n      */ \n    target: string; \n    /**  \n      * Returns a string representation of an object. \n      */ \n    toString(): string; \n} \n \ndeclare var HTMLAreaElement: { \n    prototype: HTMLAreaElement; \n    new(): HTMLAreaElement; \n} \n \ninterface HTMLAreasCollection extends HTMLCollection { \n    /** \n      * Adds an element to the areas, controlRange, or options collection. \n      */ \n    add(element: HTMLElement, before?: HTMLElement | number): void; \n    /** \n      * Removes an element from the collection. \n      */ \n    remove(index?: number): void; \n} \n \ndeclare var HTMLAreasCollection: { \n    prototype: HTMLAreasCollection; \n    new(): HTMLAreasCollection; \n} \n \ninterface HTMLAudioElement extends HTMLMediaElement { \n} \n \ndeclare var HTMLAudioElement: { \n    prototype: HTMLAudioElement; \n    new(): HTMLAudioElement; \n} \n \ninterface HTMLBRElement extends HTMLElement { \n    /** \n      * Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document. \n      */ \n    clear: string; \n} \n \ndeclare var HTMLBRElement: { \n    prototype: HTMLBRElement; \n    new(): HTMLBRElement; \n} \n \ninterface HTMLBaseElement extends HTMLElement { \n    /** \n      * Gets or sets the baseline URL on which relative links are based. \n      */ \n    href: string; \n    /** \n      * Sets or retrieves the window or frame at which to target content. \n      */ \n    target: string; \n} \n \ndeclare var HTMLBaseElement: { \n    prototype: HTMLBaseElement; \n    new(): HTMLBaseElement; \n} \n \ninterface HTMLBaseFontElement extends HTMLElement, DOML2DeprecatedColorProperty { \n    /** \n      * Sets or retrieves the current typeface family. \n      */ \n    face: string; \n    /** \n      * Sets or retrieves the font size of the object. \n      */ \n    size: number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLBaseFontElement: { \n    prototype: HTMLBaseFontElement; \n    new(): HTMLBaseFontElement; \n} \n \ninterface HTMLBlockElement extends HTMLElement { \n    /** \n      * Sets or retrieves reference information about the object. \n      */ \n    cite: string; \n    clear: string; \n    /** \n      * Sets or retrieves the width of the object. \n      */ \n    width: number; \n} \n \ndeclare var HTMLBlockElement: { \n    prototype: HTMLBlockElement; \n    new(): HTMLBlockElement; \n} \n \ninterface HTMLBodyElement extends HTMLElement { \n    aLink: any; \n    background: string; \n    bgColor: any; \n    bgProperties: string; \n    link: any; \n    noWrap: boolean; \n    onafterprint: (ev: Event) => any; \n    onbeforeprint: (ev: Event) => any; \n    onbeforeunload: (ev: BeforeUnloadEvent) => any; \n    onblur: (ev: FocusEvent) => any; \n    onerror: (ev: Event) => any; \n    onfocus: (ev: FocusEvent) => any; \n    onhashchange: (ev: HashChangeEvent) => any; \n    onload: (ev: Event) => any; \n    onmessage: (ev: MessageEvent) => any; \n    onoffline: (ev: Event) => any; \n    ononline: (ev: Event) => any; \n    onorientationchange: (ev: Event) => any; \n    onpagehide: (ev: PageTransitionEvent) => any; \n    onpageshow: (ev: PageTransitionEvent) => any; \n    onpopstate: (ev: PopStateEvent) => any; \n    onresize: (ev: UIEvent) => any; \n    onstorage: (ev: StorageEvent) => any; \n    onunload: (ev: Event) => any; \n    text: any; \n    vLink: any; \n    createTextRange(): TextRange; \n    addEventListener(type: "MSContentZoom", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGotPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSLostPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSManipulationStateChanged", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "activate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "afterprint", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "ariarequest", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecopy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforedeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforepaste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeprint", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeunload", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "command", listener: (ev: CommandEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "contextmenu", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "copy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "cuechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "cut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "deactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "gotpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "hashchange", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "lostpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "message", listener: (ev: MessageEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseenter", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseleave", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "offline", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "online", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "orientationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pagehide", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pageshow", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "paste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "popstate", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "resize", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "selectstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "storage", listener: (ev: StorageEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchcancel", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchend", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchmove", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchstart", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "unload", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLBodyElement: { \n    prototype: HTMLBodyElement; \n    new(): HTMLBodyElement; \n} \n \ninterface HTMLButtonElement extends HTMLElement { \n    /** \n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing. \n      */ \n    autofocus: boolean; \n    disabled: boolean; \n    /** \n      * Retrieves a reference to the form that the object is embedded in. \n      */ \n    form: HTMLFormElement; \n    /** \n      * Overrides the action attribute (where the data on a form is sent) on the parent form element. \n      */ \n    formAction: string; \n    /** \n      * Used to override the encoding (formEnctype attribute) specified on the form element. \n      */ \n    formEnctype: string; \n    /** \n      * Overrides the submit method attribute previously specified on a form element. \n      */ \n    formMethod: string; \n    /** \n      * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option. \n      */ \n    formNoValidate: string; \n    /** \n      * Overrides the target attribute on a form element. \n      */ \n    formTarget: string; \n    /**  \n      * Sets or retrieves the name of the object. \n      */ \n    name: string; \n    status: any; \n    /** \n      * Gets the classification and default behavior of the button. \n      */ \n    type: string; \n    /** \n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting. \n      */ \n    validationMessage: string; \n    /** \n      * Returns a  ValidityState object that represents the validity states of an element. \n      */ \n    validity: ValidityState; \n    /**  \n      * Sets or retrieves the default or selected value of the control. \n      */ \n    value: string; \n    /** \n      * Returns whether an element will successfully validate based on forms validation rules and constraints. \n      */ \n    willValidate: boolean; \n    /** \n      * Returns whether a form will validate when it is submitted, without having to submit it. \n      */ \n    checkValidity(): boolean; \n    /** \n      * Creates a TextRange object for the element. \n      */ \n    createTextRange(): TextRange; \n    /** \n      * Sets a custom error message that is displayed when a form is submitted. \n      * @param error Sets a custom error message that is displayed when a form is submitted. \n      */ \n    setCustomValidity(error: string): void; \n} \n \ndeclare var HTMLButtonElement: { \n    prototype: HTMLButtonElement; \n    new(): HTMLButtonElement; \n} \n \ninterface HTMLCanvasElement extends HTMLElement { \n    /** \n      * Gets or sets the height of a canvas element on a document. \n      */ \n    height: number; \n    /** \n      * Gets or sets the width of a canvas element on a document. \n      */ \n    width: number; \n    /** \n      * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas. \n      * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext("2d"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext("experimental-webgl"); \n      */ \n    getContext(contextId: "2d"): CanvasRenderingContext2D; \n    getContext(contextId: "experimental-webgl"): WebGLRenderingContext; \n    getContext(contextId: string, ...args: any[]): CanvasRenderingContext2D | WebGLRenderingContext; \n    /** \n      * Returns a blob object encoded as a Portable Network Graphics (PNG) format from a canvas image or drawing. \n      */ \n    msToBlob(): Blob; \n    /** \n      * Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element. \n      * @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image. \n      */ \n    toDataURL(type?: string, ...args: any[]): string; \n} \n \ndeclare var HTMLCanvasElement: { \n    prototype: HTMLCanvasElement; \n    new(): HTMLCanvasElement; \n} \n \ninterface HTMLCollection { \n    /** \n      * Sets or retrieves the number of objects in a collection. \n      */ \n    length: number; \n    /** \n      * Retrieves an object from various collections. \n      */ \n    item(nameOrIndex?: any, optionalIndex?: any): Element; \n    /** \n      * Retrieves a select object or an object from an options collection. \n      */ \n    namedItem(name: string): Element; \n    [index: number]: Element; \n} \n \ndeclare var HTMLCollection: { \n    prototype: HTMLCollection; \n    new(): HTMLCollection; \n} \n \ninterface HTMLDDElement extends HTMLElement { \n    /** \n      * Sets or retrieves whether the browser automatically performs wordwrap. \n      */ \n    noWrap: boolean; \n} \n \ndeclare var HTMLDDElement: { \n    prototype: HTMLDDElement; \n    new(): HTMLDDElement; \n} \n \ninterface HTMLDListElement extends HTMLElement { \n    compact: boolean; \n} \n \ndeclare var HTMLDListElement: { \n    prototype: HTMLDListElement; \n    new(): HTMLDListElement; \n} \n \ninterface HTMLDTElement extends HTMLElement { \n    /** \n      * Sets or retrieves whether the browser automatically performs wordwrap. \n      */ \n    noWrap: boolean; \n} \n \ndeclare var HTMLDTElement: { \n    prototype: HTMLDTElement; \n    new(): HTMLDTElement; \n} \n \ninterface HTMLDataListElement extends HTMLElement { \n    options: HTMLCollection; \n} \n \ndeclare var HTMLDataListElement: { \n    prototype: HTMLDataListElement; \n    new(): HTMLDataListElement; \n} \n \ninterface HTMLDirectoryElement extends HTMLElement { \n    compact: boolean; \n} \n \ndeclare var HTMLDirectoryElement: { \n    prototype: HTMLDirectoryElement; \n    new(): HTMLDirectoryElement; \n} \n \ninterface HTMLDivElement extends HTMLElement { \n    /** \n      * Sets or retrieves how the object is aligned with adjacent text.  \n      */ \n    align: string; \n    /** \n      * Sets or retrieves whether the browser automatically performs wordwrap. \n      */ \n    noWrap: boolean; \n} \n \ndeclare var HTMLDivElement: { \n    prototype: HTMLDivElement; \n    new(): HTMLDivElement; \n} \n \ninterface HTMLDocument extends Document { \n} \n \ndeclare var HTMLDocument: { \n    prototype: HTMLDocument; \n    new(): HTMLDocument; \n} \n \ninterface HTMLElement extends Element { \n    accessKey: string; \n    children: HTMLCollection; \n    contentEditable: string; \n    dataset: DOMStringMap; \n    dir: string; \n    draggable: boolean; \n    hidden: boolean; \n    hideFocus: boolean; \n    innerHTML: string; \n    innerText: string; \n    isContentEditable: boolean; \n    lang: string; \n    offsetHeight: number; \n    offsetLeft: number; \n    offsetParent: Element; \n    offsetTop: number; \n    offsetWidth: number; \n    onabort: (ev: Event) => any; \n    onactivate: (ev: UIEvent) => any; \n    onbeforeactivate: (ev: UIEvent) => any; \n    onbeforecopy: (ev: DragEvent) => any; \n    onbeforecut: (ev: DragEvent) => any; \n    onbeforedeactivate: (ev: UIEvent) => any; \n    onbeforepaste: (ev: DragEvent) => any; \n    onblur: (ev: FocusEvent) => any; \n    oncanplay: (ev: Event) => any; \n    oncanplaythrough: (ev: Event) => any; \n    onchange: (ev: Event) => any; \n    onclick: (ev: MouseEvent) => any; \n    oncontextmenu: (ev: PointerEvent) => any; \n    oncopy: (ev: DragEvent) => any; \n    oncuechange: (ev: Event) => any; \n    oncut: (ev: DragEvent) => any; \n    ondblclick: (ev: MouseEvent) => any; \n    ondeactivate: (ev: UIEvent) => any; \n    ondrag: (ev: DragEvent) => any; \n    ondragend: (ev: DragEvent) => any; \n    ondragenter: (ev: DragEvent) => any; \n    ondragleave: (ev: DragEvent) => any; \n    ondragover: (ev: DragEvent) => any; \n    ondragstart: (ev: DragEvent) => any; \n    ondrop: (ev: DragEvent) => any; \n    ondurationchange: (ev: Event) => any; \n    onemptied: (ev: Event) => any; \n    onended: (ev: Event) => any; \n    onerror: (ev: Event) => any; \n    onfocus: (ev: FocusEvent) => any; \n    oninput: (ev: Event) => any; \n    onkeydown: (ev: KeyboardEvent) => any; \n    onkeypress: (ev: KeyboardEvent) => any; \n    onkeyup: (ev: KeyboardEvent) => any; \n    onload: (ev: Event) => any; \n    onloadeddata: (ev: Event) => any; \n    onloadedmetadata: (ev: Event) => any; \n    onloadstart: (ev: Event) => any; \n    onmousedown: (ev: MouseEvent) => any; \n    onmouseenter: (ev: MouseEvent) => any; \n    onmouseleave: (ev: MouseEvent) => any; \n    onmousemove: (ev: MouseEvent) => any; \n    onmouseout: (ev: MouseEvent) => any; \n    onmouseover: (ev: MouseEvent) => any; \n    onmouseup: (ev: MouseEvent) => any; \n    onmousewheel: (ev: MouseWheelEvent) => any; \n    onmscontentzoom: (ev: UIEvent) => any; \n    onmsmanipulationstatechanged: (ev: MSManipulationEvent) => any; \n    onpaste: (ev: DragEvent) => any; \n    onpause: (ev: Event) => any; \n    onplay: (ev: Event) => any; \n    onplaying: (ev: Event) => any; \n    onprogress: (ev: ProgressEvent) => any; \n    onratechange: (ev: Event) => any; \n    onreset: (ev: Event) => any; \n    onscroll: (ev: UIEvent) => any; \n    onseeked: (ev: Event) => any; \n    onseeking: (ev: Event) => any; \n    onselect: (ev: UIEvent) => any; \n    onselectstart: (ev: Event) => any; \n    onstalled: (ev: Event) => any; \n    onsubmit: (ev: Event) => any; \n    onsuspend: (ev: Event) => any; \n    ontimeupdate: (ev: Event) => any; \n    onvolumechange: (ev: Event) => any; \n    onwaiting: (ev: Event) => any; \n    outerHTML: string; \n    outerText: string; \n    spellcheck: boolean; \n    style: CSSStyleDeclaration; \n    tabIndex: number; \n    title: string; \n    blur(): void; \n    click(): void; \n    contains(child: HTMLElement): boolean; \n    dragDrop(): boolean; \n    focus(): void; \n    insertAdjacentElement(position: string, insertedElement: Element): Element; \n    insertAdjacentHTML(where: string, html: string): void; \n    insertAdjacentText(where: string, text: string): void; \n    msGetInputContext(): MSInputMethodContext; \n    scrollIntoView(top?: boolean): void; \n    setActive(): void; \n    addEventListener(type: "MSContentZoom", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGotPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSLostPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSManipulationStateChanged", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "activate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ariarequest", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecopy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforedeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforepaste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "command", listener: (ev: CommandEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "contextmenu", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "copy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "cuechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "cut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "deactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "gotpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "lostpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseenter", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseleave", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "paste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "selectstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchcancel", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchend", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchmove", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchstart", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLElement: { \n    prototype: HTMLElement; \n    new(): HTMLElement; \n} \n \ninterface HTMLEmbedElement extends HTMLElement, GetSVGDocument { \n    /** \n      * Sets or retrieves the height of the object. \n      */ \n    height: string; \n    hidden: any; \n    /** \n      * Gets or sets whether the DLNA PlayTo device is available. \n      */ \n    msPlayToDisabled: boolean; \n    /** \n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server. \n      */ \n    msPlayToPreferredSourceUri: string; \n    /** \n      * Gets or sets the primary DLNA PlayTo device. \n      */ \n    msPlayToPrimary: boolean; \n    /** \n      * Gets the source associated with the media element for use by the PlayToManager. \n      */ \n    msPlayToSource: any; \n    /** \n      * Sets or retrieves the name of the object. \n      */ \n    name: string; \n    /** \n      * Retrieves the palette used for the embedded document. \n      */ \n    palette: string; \n    /** \n      * Retrieves the URL of the plug-in used to view an embedded document. \n      */ \n    pluginspage: string; \n    readyState: string; \n    /** \n      * Sets or retrieves a URL to be loaded by the object. \n      */ \n    src: string; \n    /** \n      * Sets or retrieves the height and width units of the embed object. \n      */ \n    units: string; \n    /** \n      * Sets or retrieves the width of the object. \n      */ \n    width: string; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLEmbedElement: { \n    prototype: HTMLEmbedElement; \n    new(): HTMLEmbedElement; \n} \n \ninterface HTMLFieldSetElement extends HTMLElement { \n    /** \n      * Sets or retrieves how the object is aligned with adjacent text. \n      */ \n    align: string; \n    disabled: boolean; \n    /** \n      * Retrieves a reference to the form that the object is embedded in. \n      */ \n    form: HTMLFormElement; \n    /** \n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting. \n      */ \n    validationMessage: string; \n    /** \n      * Returns a  ValidityState object that represents the validity states of an element. \n      */ \n    validity: ValidityState; \n    /** \n      * Returns whether an element will successfully validate based on forms validation rules and constraints. \n      */ \n    willValidate: boolean; \n    /** \n      * Returns whether a form will validate when it is submitted, without having to submit it. \n      */ \n    checkValidity(): boolean; \n    /** \n      * Sets a custom error message that is displayed when a form is submitted. \n      * @param error Sets a custom error message that is displayed when a form is submitted. \n      */ \n    setCustomValidity(error: string): void; \n} \n \ndeclare var HTMLFieldSetElement: { \n    prototype: HTMLFieldSetElement; \n    new(): HTMLFieldSetElement; \n} \n \ninterface HTMLFontElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty { \n    /** \n      * Sets or retrieves the current typeface family. \n      */ \n    face: string; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLFontElement: { \n    prototype: HTMLFontElement; \n    new(): HTMLFontElement; \n} \n \ninterface HTMLFormElement extends HTMLElement { \n    /** \n      * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form. \n      */ \n    acceptCharset: string; \n    /** \n      * Sets or retrieves the URL to which the form content is sent for processing. \n      */ \n    action: string; \n    /** \n      * Specifies whether autocomplete is applied to an editable text field. \n      */ \n    autocomplete: string; \n    /** \n      * Retrieves a collection, in source order, of all controls in a given form. \n      */ \n    elements: HTMLCollection; \n    /** \n      * Sets or retrieves the MIME encoding for the form. \n      */ \n    encoding: string; \n    /** \n      * Sets or retrieves the encoding type for the form. \n      */ \n    enctype: string; \n    /** \n      * Sets or retrieves the number of objects in a collection. \n      */ \n    length: number; \n    /** \n      * Sets or retrieves how to send the form data to the server. \n      */ \n    method: string; \n    /** \n      * Sets or retrieves the name of the object. \n      */ \n    name: string; \n    /** \n      * Designates a form that is not validated when submitted. \n      */ \n    noValidate: boolean; \n    /** \n      * Sets or retrieves the window or frame at which to target content. \n      */ \n    target: string; \n    /** \n      * Returns whether a form will validate when it is submitted, without having to submit it. \n      */ \n    checkValidity(): boolean; \n    /** \n      * Retrieves a form object or an object from an elements collection. \n      * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is a Number, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made. \n      * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned. \n      */ \n    item(name?: any, index?: any): any; \n    /** \n      * Retrieves a form object or an object from an elements collection. \n      */ \n    namedItem(name: string): any; \n    /** \n      * Fires when the user resets a form. \n      */ \n    reset(): void; \n    /** \n      * Fires when a FORM is about to be submitted. \n      */ \n    submit(): void; \n    [name: string]: any; \n} \n \ndeclare var HTMLFormElement: { \n    prototype: HTMLFormElement; \n    new(): HTMLFormElement; \n} \n \ninterface HTMLFrameElement extends HTMLElement, GetSVGDocument { \n    /** \n      * Specifies the properties of a border drawn around an object. \n      */ \n    border: string; \n    /** \n      * Sets or retrieves the border color of the object. \n      */ \n    borderColor: any; \n    /** \n      * Retrieves the document object of the page or frame. \n      */ \n    contentDocument: Document; \n    /** \n      * Retrieves the object of the specified. \n      */ \n    contentWindow: Window; \n    /** \n      * Sets or retrieves whether to display a border for the frame. \n      */ \n    frameBorder: string; \n    /** \n      * Sets or retrieves the amount of additional space between the frames. \n      */ \n    frameSpacing: any; \n    /** \n      * Sets or retrieves the height of the object. \n      */ \n    height: string | number; \n    /** \n      * Sets or retrieves a URI to a long description of the object. \n      */ \n    longDesc: string; \n    /** \n      * Sets or retrieves the top and bottom margin heights before displaying the text in a frame. \n      */ \n    marginHeight: string; \n    /** \n      * Sets or retrieves the left and right margin widths before displaying the text in a frame. \n      */ \n    marginWidth: string; \n    /** \n      * Sets or retrieves the frame name. \n      */ \n    name: string; \n    /** \n      * Sets or retrieves whether the user can resize the frame. \n      */ \n    noResize: boolean; \n    /** \n      * Raised when the object has been completely received from the server. \n      */ \n    onload: (ev: Event) => any; \n    /** \n      * Sets or retrieves whether the frame can be scrolled. \n      */ \n    scrolling: string; \n    /** \n      * Sets the value indicating whether the source file of a frame or iframe has specific security restrictions applied. \n      */ \n    security: any; \n    /** \n      * Sets or retrieves a URL to be loaded by the object. \n      */ \n    src: string; \n    /** \n      * Sets or retrieves the width of the object. \n      */ \n    width: string | number; \n    addEventListener(type: "MSContentZoom", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGotPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSLostPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSManipulationStateChanged", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "activate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ariarequest", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecopy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforedeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforepaste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "command", listener: (ev: CommandEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "contextmenu", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "copy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "cuechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "cut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "deactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "gotpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "lostpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseenter", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseleave", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "paste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "selectstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchcancel", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchend", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchmove", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchstart", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLFrameElement: { \n    prototype: HTMLFrameElement; \n    new(): HTMLFrameElement; \n} \n \ninterface HTMLFrameSetElement extends HTMLElement { \n    border: string; \n    /** \n      * Sets or retrieves the border color of the object. \n      */ \n    borderColor: any; \n    /** \n      * Sets or retrieves the frame widths of the object. \n      */ \n    cols: string; \n    /** \n      * Sets or retrieves whether to display a border for the frame. \n      */ \n    frameBorder: string; \n    /** \n      * Sets or retrieves the amount of additional space between the frames. \n      */ \n    frameSpacing: any; \n    name: string; \n    onafterprint: (ev: Event) => any; \n    onbeforeprint: (ev: Event) => any; \n    onbeforeunload: (ev: BeforeUnloadEvent) => any; \n    /** \n      * Fires when the object loses the input focus. \n      */ \n    onblur: (ev: FocusEvent) => any; \n    onerror: (ev: Event) => any; \n    /** \n      * Fires when the object receives focus. \n      */ \n    onfocus: (ev: FocusEvent) => any; \n    onhashchange: (ev: HashChangeEvent) => any; \n    onload: (ev: Event) => any; \n    onmessage: (ev: MessageEvent) => any; \n    onoffline: (ev: Event) => any; \n    ononline: (ev: Event) => any; \n    onorientationchange: (ev: Event) => any; \n    onpagehide: (ev: PageTransitionEvent) => any; \n    onpageshow: (ev: PageTransitionEvent) => any; \n    onresize: (ev: UIEvent) => any; \n    onstorage: (ev: StorageEvent) => any; \n    onunload: (ev: Event) => any; \n    /** \n      * Sets or retrieves the frame heights of the object. \n      */ \n    rows: string; \n    addEventListener(type: "MSContentZoom", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGotPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSLostPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSManipulationStateChanged", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "activate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ariarequest", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecopy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforedeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforepaste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeprint", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeunload", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "command", listener: (ev: CommandEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "contextmenu", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "copy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "cuechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "cut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "deactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "gotpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "hashchange", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "lostpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "message", listener: (ev: MessageEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseenter", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseleave", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "offline", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "online", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "orientationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pagehide", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pageshow", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "paste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "resize", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "selectstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "storage", listener: (ev: StorageEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchcancel", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchend", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchmove", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchstart", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "unload", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLFrameSetElement: { \n    prototype: HTMLFrameSetElement; \n    new(): HTMLFrameSetElement; \n} \n \ninterface HTMLHRElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty { \n    /** \n      * Sets or retrieves how the object is aligned with adjacent text. \n      */ \n    align: string; \n    /** \n      * Sets or retrieves whether the horizontal rule is drawn with 3-D shading. \n      */ \n    noShade: boolean; \n    /** \n      * Sets or retrieves the width of the object. \n      */ \n    width: number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLHRElement: { \n    prototype: HTMLHRElement; \n    new(): HTMLHRElement; \n} \n \ninterface HTMLHeadElement extends HTMLElement { \n    profile: string; \n} \n \ndeclare var HTMLHeadElement: { \n    prototype: HTMLHeadElement; \n    new(): HTMLHeadElement; \n} \n \ninterface HTMLHeadingElement extends HTMLElement { \n    /** \n      * Sets or retrieves a value that indicates the table alignment. \n      */ \n    align: string; \n    clear: string; \n} \n \ndeclare var HTMLHeadingElement: { \n    prototype: HTMLHeadingElement; \n    new(): HTMLHeadingElement; \n} \n \ninterface HTMLHtmlElement extends HTMLElement { \n    /** \n      * Sets or retrieves the DTD version that governs the current document. \n      */ \n    version: string; \n} \n \ndeclare var HTMLHtmlElement: { \n    prototype: HTMLHtmlElement; \n    new(): HTMLHtmlElement; \n} \n \ninterface HTMLIFrameElement extends HTMLElement, GetSVGDocument { \n    /** \n      * Sets or retrieves how the object is aligned with adjacent text. \n      */ \n    align: string; \n    allowFullscreen: boolean; \n    /** \n      * Specifies the properties of a border drawn around an object. \n      */ \n    border: string; \n    /** \n      * Retrieves the document object of the page or frame. \n      */ \n    contentDocument: Document; \n    /** \n      * Retrieves the object of the specified. \n      */ \n    contentWindow: Window; \n    /** \n      * Sets or retrieves whether to display a border for the frame. \n      */ \n    frameBorder: string; \n    /** \n      * Sets or retrieves the amount of additional space between the frames. \n      */ \n    frameSpacing: any; \n    /** \n      * Sets or retrieves the height of the object. \n      */ \n    height: string; \n    /** \n      * Sets or retrieves the horizontal margin for the object. \n      */ \n    hspace: number; \n    /** \n      * Sets or retrieves a URI to a long description of the object. \n      */ \n    longDesc: string; \n    /** \n      * Sets or retrieves the top and bottom margin heights before displaying the text in a frame. \n      */ \n    marginHeight: string; \n    /** \n      * Sets or retrieves the left and right margin widths before displaying the text in a frame. \n      */ \n    marginWidth: string; \n    /** \n      * Sets or retrieves the frame name. \n      */ \n    name: string; \n    /** \n      * Sets or retrieves whether the user can resize the frame. \n      */ \n    noResize: boolean; \n    /** \n      * Raised when the object has been completely received from the server. \n      */ \n    onload: (ev: Event) => any; \n    sandbox: DOMSettableTokenList; \n    /** \n      * Sets or retrieves whether the frame can be scrolled. \n      */ \n    scrolling: string; \n    /** \n      * Sets the value indicating whether the source file of a frame or iframe has specific security restrictions applied. \n      */ \n    security: any; \n    /** \n      * Sets or retrieves a URL to be loaded by the object. \n      */ \n    src: string; \n    /** \n      * Sets or retrieves the vertical margin for the object. \n      */ \n    vspace: number; \n    /** \n      * Sets or retrieves the width of the object. \n      */ \n    width: string; \n    addEventListener(type: "MSContentZoom", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGotPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSLostPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSManipulationStateChanged", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "activate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ariarequest", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecopy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforedeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforepaste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "command", listener: (ev: CommandEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "contextmenu", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "copy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "cuechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "cut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "deactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "gotpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "lostpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseenter", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseleave", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "paste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "selectstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchcancel", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchend", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchmove", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchstart", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLIFrameElement: { \n    prototype: HTMLIFrameElement; \n    new(): HTMLIFrameElement; \n} \n \ninterface HTMLImageElement extends HTMLElement { \n    /** \n      * Sets or retrieves how the object is aligned with adjacent text. \n      */ \n    align: string; \n    /** \n      * Sets or retrieves a text alternative to the graphic. \n      */ \n    alt: string; \n    /** \n      * Specifies the properties of a border drawn around an object. \n      */ \n    border: string; \n    /** \n      * Retrieves whether the object is fully loaded. \n      */ \n    complete: boolean; \n    crossOrigin: string; \n    currentSrc: string; \n    /** \n      * Sets or retrieves the height of the object. \n      */ \n    height: number; \n    /** \n      * Sets or retrieves the width of the border to draw around the object. \n      */ \n    hspace: number; \n    /** \n      * Sets or retrieves whether the image is a server-side image map. \n      */ \n    isMap: boolean; \n    /** \n      * Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object. \n      */ \n    longDesc: string; \n    /** \n      * Gets or sets whether the DLNA PlayTo device is available. \n      */ \n    msPlayToDisabled: boolean; \n    msPlayToPreferredSourceUri: string; \n    /** \n      * Gets or sets the primary DLNA PlayTo device. \n      */ \n    msPlayToPrimary: boolean; \n    /** \n      * Gets the source associated with the media element for use by the PlayToManager. \n      */ \n    msPlayToSource: any; \n    /** \n      * Sets or retrieves the name of the object. \n      */ \n    name: string; \n    /** \n      * The original height of the image resource before sizing. \n      */ \n    naturalHeight: number; \n    /** \n      * The original width of the image resource before sizing. \n      */ \n    naturalWidth: number; \n    /** \n      * The address or URL of the a media resource that is to be considered. \n      */ \n    src: string; \n    srcset: string; \n    /** \n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map. \n      */ \n    useMap: string; \n    /** \n      * Sets or retrieves the vertical margin for the object. \n      */ \n    vspace: number; \n    /** \n      * Sets or retrieves the width of the object. \n      */ \n    width: number; \n    x: number; \n    y: number; \n    msGetAsCastingSource(): any; \n} \n \ndeclare var HTMLImageElement: { \n    prototype: HTMLImageElement; \n    new(): HTMLImageElement; \n    create(): HTMLImageElement; \n} \n \ninterface HTMLInputElement extends HTMLElement { \n    /** \n      * Sets or retrieves a comma-separated list of content types. \n      */ \n    accept: string; \n    /** \n      * Sets or retrieves how the object is aligned with adjacent text. \n      */ \n    align: string; \n    /** \n      * Sets or retrieves a text alternative to the graphic. \n      */ \n    alt: string; \n    /** \n      * Specifies whether autocomplete is applied to an editable text field. \n      */ \n    autocomplete: string; \n    /** \n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing. \n      */ \n    autofocus: boolean; \n    /** \n      * Sets or retrieves the width of the border to draw around the object. \n      */ \n    border: string; \n    /** \n      * Sets or retrieves the state of the check box or radio button. \n      */ \n    checked: boolean; \n    /** \n      * Retrieves whether the object is fully loaded. \n      */ \n    complete: boolean; \n    /** \n      * Sets or retrieves the state of the check box or radio button. \n      */ \n    defaultChecked: boolean; \n    /** \n      * Sets or retrieves the initial contents of the object. \n      */ \n    defaultValue: string; \n    disabled: boolean; \n    /** \n      * Returns a FileList object on a file type input object. \n      */ \n    files: FileList; \n    /** \n      * Retrieves a reference to the form that the object is embedded in.  \n      */ \n    form: HTMLFormElement; \n    /** \n      * Overrides the action attribute (where the data on a form is sent) on the parent form element. \n      */ \n    formAction: string; \n    /** \n      * Used to override the encoding (formEnctype attribute) specified on the form element. \n      */ \n    formEnctype: string; \n    /** \n      * Overrides the submit method attribute previously specified on a form element. \n      */ \n    formMethod: string; \n    /** \n      * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option. \n      */ \n    formNoValidate: string; \n    /** \n      * Overrides the target attribute on a form element. \n      */ \n    formTarget: string; \n    /** \n      * Sets or retrieves the height of the object. \n      */ \n    height: string; \n    /** \n      * Sets or retrieves the width of the border to draw around the object. \n      */ \n    hspace: number; \n    indeterminate: boolean; \n    /** \n      * Specifies the ID of a pre-defined datalist of options for an input element. \n      */ \n    list: HTMLElement; \n    /** \n      * Defines the maximum acceptable value for an input element with type="number".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field. \n      */ \n    max: string; \n    /** \n      * Sets or retrieves the maximum number of characters that the user can enter in a text control. \n      */ \n    maxLength: number; \n    /** \n      * Defines the minimum acceptable value for an input element with type="number". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field. \n      */ \n    min: string; \n    /** \n      * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list. \n      */ \n    multiple: boolean; \n    /** \n      * Sets or retrieves the name of the object. \n      */ \n    name: string; \n    /** \n      * Gets or sets a string containing a regular expression that the user\'s input must match. \n      */ \n    pattern: string; \n    /** \n      * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field. \n      */ \n    placeholder: string; \n    readOnly: boolean; \n    /** \n      * When present, marks an element that can\'t be submitted without a value. \n      */ \n    required: boolean; \n    /** \n      * Gets or sets the end position or offset of a text selection. \n      */ \n    selectionEnd: number; \n    /** \n      * Gets or sets the starting position or offset of a text selection. \n      */ \n    selectionStart: number; \n    size: number; \n    /** \n      * The address or URL of the a media resource that is to be considered. \n      */ \n    src: string; \n    status: boolean; \n    /** \n      * Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field. \n      */ \n    step: string; \n    /** \n      * Returns the content type of the object. \n      */ \n    type: string; \n    /** \n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map. \n      */ \n    useMap: string; \n    /** \n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting. \n      */ \n    validationMessage: string; \n    /** \n      * Returns a  ValidityState object that represents the validity states of an element. \n      */ \n    validity: ValidityState; \n    /** \n      * Returns the value of the data at the cursor\'s current position. \n      */ \n    value: string; \n    valueAsDate: Date; \n    /** \n      * Returns the input field value as a number. \n      */ \n    valueAsNumber: number; \n    /** \n      * Sets or retrieves the vertical margin for the object. \n      */ \n    vspace: number; \n    /** \n      * Sets or retrieves the width of the object. \n      */ \n    width: string; \n    /** \n      * Returns whether an element will successfully validate based on forms validation rules and constraints. \n      */ \n    willValidate: boolean; \n    /** \n      * Returns whether a form will validate when it is submitted, without having to submit it. \n      */ \n    checkValidity(): boolean; \n    /** \n      * Creates a TextRange object for the element. \n      */ \n    createTextRange(): TextRange; \n    /** \n      * Makes the selection equal to the current object. \n      */ \n    select(): void; \n    /** \n      * Sets a custom error message that is displayed when a form is submitted. \n      * @param error Sets a custom error message that is displayed when a form is submitted. \n      */ \n    setCustomValidity(error: string): void; \n    /** \n      * Sets the start and end positions of a selection in a text field. \n      * @param start The offset into the text field for the start of the selection. \n      * @param end The offset into the text field for the end of the selection. \n      */ \n    setSelectionRange(start: number, end: number): void; \n    /** \n      * Decrements a range input control\'s value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control\'s step value multiplied by the parameter\'s value. \n      * @param n Value to decrement the value by. \n      */ \n    stepDown(n?: number): void; \n    /** \n      * Increments a range input control\'s value by the value given by the Step attribute. If the optional parameter is used, will increment the input control\'s value by that value. \n      * @param n Value to increment the value by. \n      */ \n    stepUp(n?: number): void; \n} \n \ndeclare var HTMLInputElement: { \n    prototype: HTMLInputElement; \n    new(): HTMLInputElement; \n} \n \ninterface HTMLIsIndexElement extends HTMLElement { \n    /** \n      * Sets or retrieves the URL to which the form content is sent for processing. \n      */ \n    action: string; \n    /** \n      * Retrieves a reference to the form that the object is embedded in.  \n      */ \n    form: HTMLFormElement; \n    prompt: string; \n} \n \ndeclare var HTMLIsIndexElement: { \n    prototype: HTMLIsIndexElement; \n    new(): HTMLIsIndexElement; \n} \n \ninterface HTMLLIElement extends HTMLElement { \n    type: string; \n    /** \n      * Sets or retrieves the value of a list item. \n      */ \n    value: number; \n} \n \ndeclare var HTMLLIElement: { \n    prototype: HTMLLIElement; \n    new(): HTMLLIElement; \n} \n \ninterface HTMLLabelElement extends HTMLElement { \n    /** \n      * Retrieves a reference to the form that the object is embedded in. \n      */ \n    form: HTMLFormElement; \n    /** \n      * Sets or retrieves the object to which the given label object is assigned. \n      */ \n    htmlFor: string; \n} \n \ndeclare var HTMLLabelElement: { \n    prototype: HTMLLabelElement; \n    new(): HTMLLabelElement; \n} \n \ninterface HTMLLegendElement extends HTMLElement { \n    /** \n      * Retrieves a reference to the form that the object is embedded in. \n      */ \n    align: string; \n    /** \n      * Retrieves a reference to the form that the object is embedded in. \n      */ \n    form: HTMLFormElement; \n} \n \ndeclare var HTMLLegendElement: { \n    prototype: HTMLLegendElement; \n    new(): HTMLLegendElement; \n} \n \ninterface HTMLLinkElement extends HTMLElement, LinkStyle { \n    /** \n      * Sets or retrieves the character set used to encode the object. \n      */ \n    charset: string; \n    disabled: boolean; \n    /** \n      * Sets or retrieves a destination URL or an anchor point. \n      */ \n    href: string; \n    /** \n      * Sets or retrieves the language code of the object. \n      */ \n    hreflang: string; \n    /** \n      * Sets or retrieves the media type. \n      */ \n    media: string; \n    /** \n      * Sets or retrieves the relationship between the object and the destination of the link. \n      */ \n    rel: string; \n    /** \n      * Sets or retrieves the relationship between the object and the destination of the link. \n      */ \n    rev: string; \n    /** \n      * Sets or retrieves the window or frame at which to target content. \n      */ \n    target: string; \n    /** \n      * Sets or retrieves the MIME type of the object. \n      */ \n    type: string; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLLinkElement: { \n    prototype: HTMLLinkElement; \n    new(): HTMLLinkElement; \n} \n \ninterface HTMLMapElement extends HTMLElement { \n    /** \n      * Retrieves a collection of the area objects defined for the given map object. \n      */ \n    areas: HTMLAreasCollection; \n    /** \n      * Sets or retrieves the name of the object. \n      */ \n    name: string; \n} \n \ndeclare var HTMLMapElement: { \n    prototype: HTMLMapElement; \n    new(): HTMLMapElement; \n} \n \ninterface HTMLMarqueeElement extends HTMLElement { \n    behavior: string; \n    bgColor: any; \n    direction: string; \n    height: string; \n    hspace: number; \n    loop: number; \n    onbounce: (ev: Event) => any; \n    onfinish: (ev: Event) => any; \n    onstart: (ev: Event) => any; \n    scrollAmount: number; \n    scrollDelay: number; \n    trueSpeed: boolean; \n    vspace: number; \n    width: string; \n    start(): void; \n    stop(): void; \n    addEventListener(type: "MSContentZoom", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGotPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSLostPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSManipulationStateChanged", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "activate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ariarequest", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecopy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforedeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforepaste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "bounce", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "command", listener: (ev: CommandEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "contextmenu", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "copy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "cuechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "cut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "deactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "finish", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "gotpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "lostpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseenter", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseleave", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "paste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "selectstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "start", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchcancel", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchend", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchmove", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchstart", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLMarqueeElement: { \n    prototype: HTMLMarqueeElement; \n    new(): HTMLMarqueeElement; \n} \n \ninterface HTMLMediaElement extends HTMLElement { \n    /** \n      * Returns an AudioTrackList object with the audio tracks for a given video element. \n      */ \n    audioTracks: AudioTrackList; \n    /** \n      * Gets or sets a value that indicates whether to start playing the media automatically. \n      */ \n    autoplay: boolean; \n    /** \n      * Gets a collection of buffered time ranges. \n      */ \n    buffered: TimeRanges; \n    /** \n      * Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player). \n      */ \n    controls: boolean; \n    /** \n      * Gets the address or URL of the current media resource that is selected by IHTMLMediaElement. \n      */ \n    currentSrc: string; \n    /** \n      * Gets or sets the current playback position, in seconds. \n      */ \n    currentTime: number; \n    defaultMuted: boolean; \n    /** \n      * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource. \n      */ \n    defaultPlaybackRate: number; \n    /** \n      * Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming. \n      */ \n    duration: number; \n    /** \n      * Gets information about whether the playback has ended or not. \n      */ \n    ended: boolean; \n    /** \n      * Returns an object representing the current error state of the audio or video element. \n      */ \n    error: MediaError; \n    /** \n      * Gets or sets a flag to specify whether playback should restart after it completes. \n      */ \n    loop: boolean; \n    /** \n      * Specifies the purpose of the audio or video media, such as background audio or alerts. \n      */ \n    msAudioCategory: string; \n    /** \n      * Specifies the output device id that the audio will be sent to. \n      */ \n    msAudioDeviceType: string; \n    msGraphicsTrustStatus: MSGraphicsTrust; \n    /** \n      * Gets the MSMediaKeys object, which is used for decrypting media data, that is associated with this media element. \n      */ \n    msKeys: MSMediaKeys; \n    /** \n      * Gets or sets whether the DLNA PlayTo device is available. \n      */ \n    msPlayToDisabled: boolean; \n    /** \n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server. \n      */ \n    msPlayToPreferredSourceUri: string; \n    /** \n      * Gets or sets the primary DLNA PlayTo device. \n      */ \n    msPlayToPrimary: boolean; \n    /** \n      * Gets the source associated with the media element for use by the PlayToManager. \n      */ \n    msPlayToSource: any; \n    /** \n      * Specifies whether or not to enable low-latency playback on the media element. \n      */ \n    msRealTime: boolean; \n    /** \n      * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted. \n      */ \n    muted: boolean; \n    /** \n      * Gets the current network activity for the element. \n      */ \n    networkState: number; \n    onmsneedkey: (ev: MSMediaKeyNeededEvent) => any; \n    /** \n      * Gets a flag that specifies whether playback is paused. \n      */ \n    paused: boolean; \n    /** \n      * Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource. \n      */ \n    playbackRate: number; \n    /** \n      * Gets TimeRanges for the current media resource that has been played. \n      */ \n    played: TimeRanges; \n    /** \n      * Gets or sets the current playback position, in seconds. \n      */ \n    preload: string; \n    readyState: any; \n    /** \n      * Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked. \n      */ \n    seekable: TimeRanges; \n    /** \n      * Gets a flag that indicates whether the the client is currently moving to a new playback position in the media resource. \n      */ \n    seeking: boolean; \n    /** \n      * The address or URL of the a media resource that is to be considered. \n      */ \n    src: string; \n    textTracks: TextTrackList; \n    videoTracks: VideoTrackList; \n    /** \n      * Gets or sets the volume level for audio portions of the media element. \n      */ \n    volume: number; \n    addTextTrack(kind: string, label?: string, language?: string): TextTrack; \n    /** \n      * Returns a string that specifies whether the client can play a given media resource type. \n      */ \n    canPlayType(type: string): string; \n    /** \n      * Fires immediately after the client loads the object. \n      */ \n    load(): void; \n    /** \n      * Clears all effects from the media pipeline. \n      */ \n    msClearEffects(): void; \n    msGetAsCastingSource(): any; \n    /** \n      * Inserts the specified audio effect into media pipeline. \n      */ \n    msInsertAudioEffect(activatableClassId: string, effectRequired: boolean, config?: any): void; \n    msSetMediaKeys(mediaKeys: MSMediaKeys): void; \n    /** \n      * Specifies the media protection manager for a given media pipeline. \n      */ \n    msSetMediaProtectionManager(mediaProtectionManager?: any): void; \n    /** \n      * Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is playing or paused. You can also use the pause or play events to tell whether the media is playing or not. \n      */ \n    pause(): void; \n    /** \n      * Loads and starts playback of a media resource. \n      */ \n    play(): void; \n    HAVE_CURRENT_DATA: number; \n    HAVE_ENOUGH_DATA: number; \n    HAVE_FUTURE_DATA: number; \n    HAVE_METADATA: number; \n    HAVE_NOTHING: number; \n    NETWORK_EMPTY: number; \n    NETWORK_IDLE: number; \n    NETWORK_LOADING: number; \n    NETWORK_NO_SOURCE: number; \n    addEventListener(type: "MSContentZoom", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGotPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSLostPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSManipulationStateChanged", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "activate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ariarequest", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecopy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforedeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforepaste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "command", listener: (ev: CommandEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "contextmenu", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "copy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "cuechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "cut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "deactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "gotpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "lostpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseenter", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseleave", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "msneedkey", listener: (ev: MSMediaKeyNeededEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "paste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "selectstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchcancel", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchend", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchmove", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchstart", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLMediaElement: { \n    prototype: HTMLMediaElement; \n    new(): HTMLMediaElement; \n    HAVE_CURRENT_DATA: number; \n    HAVE_ENOUGH_DATA: number; \n    HAVE_FUTURE_DATA: number; \n    HAVE_METADATA: number; \n    HAVE_NOTHING: number; \n    NETWORK_EMPTY: number; \n    NETWORK_IDLE: number; \n    NETWORK_LOADING: number; \n    NETWORK_NO_SOURCE: number; \n} \n \ninterface HTMLMenuElement extends HTMLElement { \n    compact: boolean; \n    type: string; \n} \n \ndeclare var HTMLMenuElement: { \n    prototype: HTMLMenuElement; \n    new(): HTMLMenuElement; \n} \n \ninterface HTMLMetaElement extends HTMLElement { \n    /** \n      * Sets or retrieves the character set used to encode the object. \n      */ \n    charset: string; \n    /** \n      * Gets or sets meta-information to associate with httpEquiv or name. \n      */ \n    content: string; \n    /** \n      * Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header. \n      */ \n    httpEquiv: string; \n    /** \n      * Sets or retrieves the value specified in the content attribute of the meta object. \n      */ \n    name: string; \n    /** \n      * Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object. \n      */ \n    scheme: string; \n    /** \n      * Sets or retrieves the URL property that will be loaded after the specified time has elapsed.  \n      */ \n    url: string; \n} \n \ndeclare var HTMLMetaElement: { \n    prototype: HTMLMetaElement; \n    new(): HTMLMetaElement; \n} \n \ninterface HTMLModElement extends HTMLElement { \n    /** \n      * Sets or retrieves reference information about the object. \n      */ \n    cite: string; \n    /** \n      * Sets or retrieves the date and time of a modification to the object. \n      */ \n    dateTime: string; \n} \n \ndeclare var HTMLModElement: { \n    prototype: HTMLModElement; \n    new(): HTMLModElement; \n} \n \ninterface HTMLNextIdElement extends HTMLElement { \n    n: string; \n} \n \ndeclare var HTMLNextIdElement: { \n    prototype: HTMLNextIdElement; \n    new(): HTMLNextIdElement; \n} \n \ninterface HTMLOListElement extends HTMLElement { \n    compact: boolean; \n    /** \n      * The starting number. \n      */ \n    start: number; \n    type: string; \n} \n \ndeclare var HTMLOListElement: { \n    prototype: HTMLOListElement; \n    new(): HTMLOListElement; \n} \n \ninterface HTMLObjectElement extends HTMLElement, GetSVGDocument { \n    /** \n      * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element. \n      */ \n    BaseHref: string; \n    align: string; \n    /** \n      * Sets or retrieves a text alternative to the graphic. \n      */ \n    alt: string; \n    /** \n      * Gets or sets the optional alternative HTML script to execute if the object fails to load. \n      */ \n    altHtml: string; \n    /** \n      * Sets or retrieves a character string that can be used to implement your own archive functionality for the object. \n      */ \n    archive: string; \n    border: string; \n    /** \n      * Sets or retrieves the URL of the file containing the compiled Java class. \n      */ \n    code: string; \n    /** \n      * Sets or retrieves the URL of the component. \n      */ \n    codeBase: string; \n    /** \n      * Sets or retrieves the Internet media type for the code associated with the object. \n      */ \n    codeType: string; \n    /** \n      * Retrieves the document object of the page or frame. \n      */ \n    contentDocument: Document; \n    /** \n      * Sets or retrieves the URL that references the data of the object. \n      */ \n    data: string; \n    declare: boolean; \n    /** \n      * Retrieves a reference to the form that the object is embedded in. \n      */ \n    form: HTMLFormElement; \n    /** \n      * Sets or retrieves the height of the object. \n      */ \n    height: string; \n    hspace: number; \n    /** \n      * Gets or sets whether the DLNA PlayTo device is available. \n      */ \n    msPlayToDisabled: boolean; \n    /** \n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server. \n      */ \n    msPlayToPreferredSourceUri: string; \n    /** \n      * Gets or sets the primary DLNA PlayTo device. \n      */ \n    msPlayToPrimary: boolean; \n    /** \n      * Gets the source associated with the media element for use by the PlayToManager. \n      */ \n    msPlayToSource: any; \n    /** \n      * Sets or retrieves the name of the object. \n      */ \n    name: string; \n    /** \n      * Retrieves the contained object. \n      */ \n    object: any; \n    readyState: number; \n    /** \n      * Sets or retrieves a message to be displayed while an object is loading. \n      */ \n    standby: string; \n    /** \n      * Sets or retrieves the MIME type of the object. \n      */ \n    type: string; \n    /** \n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map. \n      */ \n    useMap: string; \n    /** \n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting. \n      */ \n    validationMessage: string; \n    /** \n      * Returns a  ValidityState object that represents the validity states of an element. \n      */ \n    validity: ValidityState; \n    vspace: number; \n    /** \n      * Sets or retrieves the width of the object. \n      */ \n    width: string; \n    /** \n      * Returns whether an element will successfully validate based on forms validation rules and constraints. \n      */ \n    willValidate: boolean; \n    /** \n      * Returns whether a form will validate when it is submitted, without having to submit it. \n      */ \n    checkValidity(): boolean; \n    /** \n      * Sets a custom error message that is displayed when a form is submitted. \n      * @param error Sets a custom error message that is displayed when a form is submitted. \n      */ \n    setCustomValidity(error: string): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLObjectElement: { \n    prototype: HTMLObjectElement; \n    new(): HTMLObjectElement; \n} \n \ninterface HTMLOptGroupElement extends HTMLElement { \n    /** \n      * Sets or retrieves the status of an option. \n      */ \n    defaultSelected: boolean; \n    disabled: boolean; \n    /** \n      * Retrieves a reference to the form that the object is embedded in. \n      */ \n    form: HTMLFormElement; \n    /** \n      * Sets or retrieves the ordinal position of an option in a list box. \n      */ \n    index: number; \n    /** \n      * Sets or retrieves a value that you can use to implement your own label functionality for the object. \n      */ \n    label: string; \n    /** \n      * Sets or retrieves whether the option in the list box is the default item. \n      */ \n    selected: boolean; \n    /** \n      * Sets or retrieves the text string specified by the option tag. \n      */ \n    text: string; \n    /** \n      * Sets or retrieves the value which is returned to the server when the form control is submitted. \n      */ \n    value: string; \n} \n \ndeclare var HTMLOptGroupElement: { \n    prototype: HTMLOptGroupElement; \n    new(): HTMLOptGroupElement; \n} \n \ninterface HTMLOptionElement extends HTMLElement { \n    /** \n      * Sets or retrieves the status of an option. \n      */ \n    defaultSelected: boolean; \n    disabled: boolean; \n    /** \n      * Retrieves a reference to the form that the object is embedded in. \n      */ \n    form: HTMLFormElement; \n    /** \n      * Sets or retrieves the ordinal position of an option in a list box. \n      */ \n    index: number; \n    /** \n      * Sets or retrieves a value that you can use to implement your own label functionality for the object. \n      */ \n    label: string; \n    /** \n      * Sets or retrieves whether the option in the list box is the default item. \n      */ \n    selected: boolean; \n    /** \n      * Sets or retrieves the text string specified by the option tag. \n      */ \n    text: string; \n    /** \n      * Sets or retrieves the value which is returned to the server when the form control is submitted. \n      */ \n    value: string; \n} \n \ndeclare var HTMLOptionElement: { \n    prototype: HTMLOptionElement; \n    new(): HTMLOptionElement; \n    create(): HTMLOptionElement; \n} \n \ninterface HTMLParagraphElement extends HTMLElement { \n    /** \n      * Sets or retrieves how the object is aligned with adjacent text.  \n      */ \n    align: string; \n    clear: string; \n} \n \ndeclare var HTMLParagraphElement: { \n    prototype: HTMLParagraphElement; \n    new(): HTMLParagraphElement; \n} \n \ninterface HTMLParamElement extends HTMLElement { \n    /** \n      * Sets or retrieves the name of an input parameter for an element. \n      */ \n    name: string; \n    /** \n      * Sets or retrieves the content type of the resource designated by the value attribute. \n      */ \n    type: string; \n    /** \n      * Sets or retrieves the value of an input parameter for an element. \n      */ \n    value: string; \n    /** \n      * Sets or retrieves the data type of the value attribute. \n      */ \n    valueType: string; \n} \n \ndeclare var HTMLParamElement: { \n    prototype: HTMLParamElement; \n    new(): HTMLParamElement; \n} \n \ninterface HTMLPhraseElement extends HTMLElement { \n    /** \n      * Sets or retrieves reference information about the object. \n      */ \n    cite: string; \n    /** \n      * Sets or retrieves the date and time of a modification to the object. \n      */ \n    dateTime: string; \n} \n \ndeclare var HTMLPhraseElement: { \n    prototype: HTMLPhraseElement; \n    new(): HTMLPhraseElement; \n} \n \ninterface HTMLPreElement extends HTMLElement { \n    /** \n      * Indicates a citation by rendering text in italic type. \n      */ \n    cite: string; \n    clear: string; \n    /** \n      * Sets or gets a value that you can use to implement your own width functionality for the object. \n      */ \n    width: number; \n} \n \ndeclare var HTMLPreElement: { \n    prototype: HTMLPreElement; \n    new(): HTMLPreElement; \n} \n \ninterface HTMLProgressElement extends HTMLElement { \n    /** \n      * Retrieves a reference to the form that the object is embedded in. \n      */ \n    form: HTMLFormElement; \n    /** \n      * Defines the maximum, or "done" value for a progress element. \n      */ \n    max: number; \n    /** \n      * Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar). \n      */ \n    position: number; \n    /** \n      * Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value. \n      */ \n    value: number; \n} \n \ndeclare var HTMLProgressElement: { \n    prototype: HTMLProgressElement; \n    new(): HTMLProgressElement; \n} \n \ninterface HTMLQuoteElement extends HTMLElement { \n    /** \n      * Sets or retrieves reference information about the object. \n      */ \n    cite: string; \n    /** \n      * Sets or retrieves the date and time of a modification to the object. \n      */ \n    dateTime: string; \n} \n \ndeclare var HTMLQuoteElement: { \n    prototype: HTMLQuoteElement; \n    new(): HTMLQuoteElement; \n} \n \ninterface HTMLScriptElement extends HTMLElement { \n    async: boolean; \n    /** \n      * Sets or retrieves the character set used to encode the object. \n      */ \n    charset: string; \n    /** \n      * Sets or retrieves the status of the script. \n      */ \n    defer: boolean; \n    /** \n      * Sets or retrieves the event for which the script is written.  \n      */ \n    event: string; \n    /**  \n      * Sets or retrieves the object that is bound to the event script. \n      */ \n    htmlFor: string; \n    /** \n      * Retrieves the URL to an external file that contains the source code or data. \n      */ \n    src: string; \n    /** \n      * Retrieves or sets the text of the object as a string.  \n      */ \n    text: string; \n    /** \n      * Sets or retrieves the MIME type for the associated scripting engine. \n      */ \n    type: string; \n} \n \ndeclare var HTMLScriptElement: { \n    prototype: HTMLScriptElement; \n    new(): HTMLScriptElement; \n} \n \ninterface HTMLSelectElement extends HTMLElement { \n    /** \n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing. \n      */ \n    autofocus: boolean; \n    disabled: boolean; \n    /** \n      * Retrieves a reference to the form that the object is embedded in.  \n      */ \n    form: HTMLFormElement; \n    /** \n      * Sets or retrieves the number of objects in a collection. \n      */ \n    length: number; \n    /** \n      * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list. \n      */ \n    multiple: boolean; \n    /** \n      * Sets or retrieves the name of the object. \n      */ \n    name: string; \n    options: HTMLSelectElement; \n    /** \n      * When present, marks an element that can\'t be submitted without a value. \n      */ \n    required: boolean; \n    /** \n      * Sets or retrieves the index of the selected option in a select object. \n      */ \n    selectedIndex: number; \n    /** \n      * Sets or retrieves the number of rows in the list box.  \n      */ \n    size: number; \n    /** \n      * Retrieves the type of select control based on the value of the MULTIPLE attribute. \n      */ \n    type: string; \n    /** \n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting. \n      */ \n    validationMessage: string; \n    /** \n      * Returns a  ValidityState object that represents the validity states of an element. \n      */ \n    validity: ValidityState; \n    /** \n      * Sets or retrieves the value which is returned to the server when the form control is submitted. \n      */ \n    value: string; \n    /** \n      * Returns whether an element will successfully validate based on forms validation rules and constraints. \n      */ \n    willValidate: boolean; \n    /** \n      * Adds an element to the areas, controlRange, or options collection. \n      * @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection. \n      * @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection.  \n      */ \n    add(element: HTMLElement, before?: HTMLElement | number): void; \n    /** \n      * Returns whether a form will validate when it is submitted, without having to submit it. \n      */ \n    checkValidity(): boolean; \n    /** \n      * Retrieves a select object or an object from an options collection. \n      * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made. \n      * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned. \n      */ \n    item(name?: any, index?: any): any; \n    /** \n      * Retrieves a select object or an object from an options collection. \n      * @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made. \n      */ \n    namedItem(name: string): any; \n    /** \n      * Removes an element from the collection. \n      * @param index Number that specifies the zero-based index of the element to remove from the collection. \n      */ \n    remove(index?: number): void; \n    /** \n      * Sets a custom error message that is displayed when a form is submitted. \n      * @param error Sets a custom error message that is displayed when a form is submitted. \n      */ \n    setCustomValidity(error: string): void; \n    [name: string]: any; \n} \n \ndeclare var HTMLSelectElement: { \n    prototype: HTMLSelectElement; \n    new(): HTMLSelectElement; \n} \n \ninterface HTMLSourceElement extends HTMLElement { \n    /** \n      * Gets or sets the intended media type of the media source. \n     */ \n    media: string; \n    msKeySystem: string; \n    /** \n      * The address or URL of the a media resource that is to be considered. \n      */ \n    src: string; \n    /** \n     * Gets or sets the MIME type of a media resource. \n     */ \n    type: string; \n} \n \ndeclare var HTMLSourceElement: { \n    prototype: HTMLSourceElement; \n    new(): HTMLSourceElement; \n} \n \ninterface HTMLSpanElement extends HTMLElement { \n} \n \ndeclare var HTMLSpanElement: { \n    prototype: HTMLSpanElement; \n    new(): HTMLSpanElement; \n} \n \ninterface HTMLStyleElement extends HTMLElement, LinkStyle { \n    /** \n      * Sets or retrieves the media type. \n      */ \n    media: string; \n    /** \n      * Retrieves the CSS language in which the style sheet is written. \n      */ \n    type: string; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLStyleElement: { \n    prototype: HTMLStyleElement; \n    new(): HTMLStyleElement; \n} \n \ninterface HTMLTableCaptionElement extends HTMLElement { \n    /** \n      * Sets or retrieves the alignment of the caption or legend. \n      */ \n    align: string; \n    /** \n      * Sets or retrieves whether the caption appears at the top or bottom of the table. \n      */ \n    vAlign: string; \n} \n \ndeclare var HTMLTableCaptionElement: { \n    prototype: HTMLTableCaptionElement; \n    new(): HTMLTableCaptionElement; \n} \n \ninterface HTMLTableCellElement extends HTMLElement, HTMLTableAlignment { \n    /** \n      * Sets or retrieves abbreviated text for the object. \n      */ \n    abbr: string; \n    /** \n      * Sets or retrieves how the object is aligned with adjacent text. \n      */ \n    align: string; \n    /** \n      * Sets or retrieves a comma-delimited list of conceptual categories associated with the object. \n      */ \n    axis: string; \n    bgColor: any; \n    /** \n      * Retrieves the position of the object in the cells collection of a row. \n      */ \n    cellIndex: number; \n    /** \n      * Sets or retrieves the number columns in the table that the object should span. \n      */ \n    colSpan: number; \n    /** \n      * Sets or retrieves a list of header cells that provide information for the object. \n      */ \n    headers: string; \n    /** \n      * Sets or retrieves the height of the object. \n      */ \n    height: any; \n    /** \n      * Sets or retrieves whether the browser automatically performs wordwrap. \n      */ \n    noWrap: boolean; \n    /** \n      * Sets or retrieves how many rows in a table the cell should span. \n      */ \n    rowSpan: number; \n    /** \n      * Sets or retrieves the group of cells in a table to which the object\'s information applies. \n      */ \n    scope: string; \n    /** \n      * Sets or retrieves the width of the object. \n      */ \n    width: string; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLTableCellElement: { \n    prototype: HTMLTableCellElement; \n    new(): HTMLTableCellElement; \n} \n \ninterface HTMLTableColElement extends HTMLElement, HTMLTableAlignment { \n    /** \n      * Sets or retrieves the alignment of the object relative to the display or table. \n      */ \n    align: string; \n    /** \n      * Sets or retrieves the number of columns in the group. \n      */ \n    span: number; \n    /** \n      * Sets or retrieves the width of the object. \n      */ \n    width: any; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLTableColElement: { \n    prototype: HTMLTableColElement; \n    new(): HTMLTableColElement; \n} \n \ninterface HTMLTableDataCellElement extends HTMLTableCellElement { \n} \n \ndeclare var HTMLTableDataCellElement: { \n    prototype: HTMLTableDataCellElement; \n    new(): HTMLTableDataCellElement; \n} \n \ninterface HTMLTableElement extends HTMLElement { \n    /** \n      * Sets or retrieves a value that indicates the table alignment. \n      */ \n    align: string; \n    bgColor: any; \n    /** \n      * Sets or retrieves the width of the border to draw around the object. \n      */ \n    border: string; \n    /** \n      * Sets or retrieves the border color of the object.  \n      */ \n    borderColor: any; \n    /** \n      * Retrieves the caption object of a table. \n      */ \n    caption: HTMLTableCaptionElement; \n    /** \n      * Sets or retrieves the amount of space between the border of the cell and the content of the cell. \n      */ \n    cellPadding: string; \n    /** \n      * Sets or retrieves the amount of space between cells in a table. \n      */ \n    cellSpacing: string; \n    /** \n      * Sets or retrieves the number of columns in the table. \n      */ \n    cols: number; \n    /** \n      * Sets or retrieves the way the border frame around the table is displayed. \n      */ \n    frame: string; \n    /** \n      * Sets or retrieves the height of the object. \n      */ \n    height: any; \n    /** \n      * Sets or retrieves the number of horizontal rows contained in the object. \n      */ \n    rows: HTMLCollection; \n    /** \n      * Sets or retrieves which dividing lines (inner borders) are displayed. \n      */ \n    rules: string; \n    /** \n      * Sets or retrieves a description and/or structure of the object. \n      */ \n    summary: string; \n    /** \n      * Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order. \n      */ \n    tBodies: HTMLCollection; \n    /** \n      * Retrieves the tFoot object of the table. \n      */ \n    tFoot: HTMLTableSectionElement; \n    /** \n      * Retrieves the tHead object of the table. \n      */ \n    tHead: HTMLTableSectionElement; \n    /** \n      * Sets or retrieves the width of the object. \n      */ \n    width: string; \n    /** \n      * Creates an empty caption element in the table. \n      */ \n    createCaption(): HTMLElement; \n    /** \n      * Creates an empty tBody element in the table. \n      */ \n    createTBody(): HTMLElement; \n    /** \n      * Creates an empty tFoot element in the table. \n      */ \n    createTFoot(): HTMLElement; \n    /** \n      * Returns the tHead element object if successful, or null otherwise. \n      */ \n    createTHead(): HTMLElement; \n    /** \n      * Deletes the caption element and its contents from the table. \n      */ \n    deleteCaption(): void; \n    /** \n      * Removes the specified row (tr) from the element and from the rows collection. \n      * @param index Number that specifies the zero-based position in the rows collection of the row to remove. \n      */ \n    deleteRow(index?: number): void; \n    /** \n      * Deletes the tFoot element and its contents from the table. \n      */ \n    deleteTFoot(): void; \n    /** \n      * Deletes the tHead element and its contents from the table. \n      */ \n    deleteTHead(): void; \n    /** \n      * Creates a new row (tr) in the table, and adds the row to the rows collection. \n      * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection. \n      */ \n    insertRow(index?: number): HTMLElement; \n} \n \ndeclare var HTMLTableElement: { \n    prototype: HTMLTableElement; \n    new(): HTMLTableElement; \n} \n \ninterface HTMLTableHeaderCellElement extends HTMLTableCellElement { \n    /** \n      * Sets or retrieves the group of cells in a table to which the object\'s information applies. \n      */ \n    scope: string; \n} \n \ndeclare var HTMLTableHeaderCellElement: { \n    prototype: HTMLTableHeaderCellElement; \n    new(): HTMLTableHeaderCellElement; \n} \n \ninterface HTMLTableRowElement extends HTMLElement, HTMLTableAlignment { \n    /** \n      * Sets or retrieves how the object is aligned with adjacent text. \n      */ \n    align: string; \n    bgColor: any; \n    /** \n      * Retrieves a collection of all cells in the table row. \n      */ \n    cells: HTMLCollection; \n    /** \n      * Sets or retrieves the height of the object. \n      */ \n    height: any; \n    /** \n      * Retrieves the position of the object in the rows collection for the table. \n      */ \n    rowIndex: number; \n    /** \n      * Retrieves the position of the object in the collection. \n      */ \n    sectionRowIndex: number; \n    /** \n      * Removes the specified cell from the table row, as well as from the cells collection. \n      * @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted. \n      */ \n    deleteCell(index?: number): void; \n    /** \n      * Creates a new cell in the table row, and adds the cell to the cells collection. \n      * @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection. \n      */ \n    insertCell(index?: number): HTMLElement; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLTableRowElement: { \n    prototype: HTMLTableRowElement; \n    new(): HTMLTableRowElement; \n} \n \ninterface HTMLTableSectionElement extends HTMLElement, HTMLTableAlignment { \n    /** \n      * Sets or retrieves a value that indicates the table alignment. \n      */ \n    align: string; \n    /** \n      * Sets or retrieves the number of horizontal rows contained in the object. \n      */ \n    rows: HTMLCollection; \n    /** \n      * Removes the specified row (tr) from the element and from the rows collection. \n      * @param index Number that specifies the zero-based position in the rows collection of the row to remove. \n      */ \n    deleteRow(index?: number): void; \n    /** \n      * Creates a new row (tr) in the table, and adds the row to the rows collection. \n      * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection. \n      */ \n    insertRow(index?: number): HTMLElement; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLTableSectionElement: { \n    prototype: HTMLTableSectionElement; \n    new(): HTMLTableSectionElement; \n} \n \ninterface HTMLTextAreaElement extends HTMLElement { \n    /** \n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing. \n      */ \n    autofocus: boolean; \n    /** \n      * Sets or retrieves the width of the object. \n      */ \n    cols: number; \n    /** \n      * Sets or retrieves the initial contents of the object. \n      */ \n    defaultValue: string; \n    disabled: boolean; \n    /** \n      * Retrieves a reference to the form that the object is embedded in. \n      */ \n    form: HTMLFormElement; \n    /** \n      * Sets or retrieves the maximum number of characters that the user can enter in a text control. \n      */ \n    maxLength: number; \n    /** \n      * Sets or retrieves the name of the object. \n      */ \n    name: string; \n    /** \n      * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field. \n      */ \n    placeholder: string; \n    /** \n      * Sets or retrieves the value indicated whether the content of the object is read-only. \n      */ \n    readOnly: boolean; \n    /** \n      * When present, marks an element that can\'t be submitted without a value. \n      */ \n    required: boolean; \n    /** \n      * Sets or retrieves the number of horizontal rows contained in the object. \n      */ \n    rows: number; \n    /** \n      * Gets or sets the end position or offset of a text selection. \n      */ \n    selectionEnd: number; \n    /** \n      * Gets or sets the starting position or offset of a text selection. \n      */ \n    selectionStart: number; \n    /** \n      * Sets or retrieves the value indicating whether the control is selected. \n      */ \n    status: any; \n    /** \n      * Retrieves the type of control. \n      */ \n    type: string; \n    /** \n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting. \n      */ \n    validationMessage: string; \n    /** \n      * Returns a  ValidityState object that represents the validity states of an element. \n      */ \n    validity: ValidityState; \n    /** \n      * Retrieves or sets the text in the entry field of the textArea element. \n      */ \n    value: string; \n    /** \n      * Returns whether an element will successfully validate based on forms validation rules and constraints. \n      */ \n    willValidate: boolean; \n    /** \n      * Sets or retrieves how to handle wordwrapping in the object. \n      */ \n    wrap: string; \n    /** \n      * Returns whether a form will validate when it is submitted, without having to submit it. \n      */ \n    checkValidity(): boolean; \n    /** \n      * Creates a TextRange object for the element. \n      */ \n    createTextRange(): TextRange; \n    /** \n      * Highlights the input area of a form element. \n      */ \n    select(): void; \n    /** \n      * Sets a custom error message that is displayed when a form is submitted. \n      * @param error Sets a custom error message that is displayed when a form is submitted. \n      */ \n    setCustomValidity(error: string): void; \n    /** \n      * Sets the start and end positions of a selection in a text field. \n      * @param start The offset into the text field for the start of the selection. \n      * @param end The offset into the text field for the end of the selection. \n      */ \n    setSelectionRange(start: number, end: number): void; \n} \n \ndeclare var HTMLTextAreaElement: { \n    prototype: HTMLTextAreaElement; \n    new(): HTMLTextAreaElement; \n} \n \ninterface HTMLTitleElement extends HTMLElement { \n    /** \n      * Retrieves or sets the text of the object as a string.  \n      */ \n    text: string; \n} \n \ndeclare var HTMLTitleElement: { \n    prototype: HTMLTitleElement; \n    new(): HTMLTitleElement; \n} \n \ninterface HTMLTrackElement extends HTMLElement { \n    default: boolean; \n    kind: string; \n    label: string; \n    readyState: number; \n    src: string; \n    srclang: string; \n    track: TextTrack; \n    ERROR: number; \n    LOADED: number; \n    LOADING: number; \n    NONE: number; \n} \n \ndeclare var HTMLTrackElement: { \n    prototype: HTMLTrackElement; \n    new(): HTMLTrackElement; \n    ERROR: number; \n    LOADED: number; \n    LOADING: number; \n    NONE: number; \n} \n \ninterface HTMLUListElement extends HTMLElement { \n    compact: boolean; \n    type: string; \n} \n \ndeclare var HTMLUListElement: { \n    prototype: HTMLUListElement; \n    new(): HTMLUListElement; \n} \n \ninterface HTMLUnknownElement extends HTMLElement { \n} \n \ndeclare var HTMLUnknownElement: { \n    prototype: HTMLUnknownElement; \n    new(): HTMLUnknownElement; \n} \n \ninterface HTMLVideoElement extends HTMLMediaElement { \n    /** \n      * Gets or sets the height of the video element. \n      */ \n    height: number; \n    msHorizontalMirror: boolean; \n    msIsLayoutOptimalForPlayback: boolean; \n    msIsStereo3D: boolean; \n    msStereo3DPackingMode: string; \n    msStereo3DRenderMode: string; \n    msZoom: boolean; \n    onMSVideoFormatChanged: (ev: Event) => any; \n    onMSVideoFrameStepCompleted: (ev: Event) => any; \n    onMSVideoOptimalLayoutChanged: (ev: Event) => any; \n    /** \n      * Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available. \n      */ \n    poster: string; \n    /** \n      * Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known. \n      */ \n    videoHeight: number; \n    /** \n      * Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known. \n      */ \n    videoWidth: number; \n    webkitDisplayingFullscreen: boolean; \n    webkitSupportsFullscreen: boolean; \n    /** \n      * Gets or sets the width of the video element. \n      */ \n    width: number; \n    getVideoPlaybackQuality(): VideoPlaybackQuality; \n    msFrameStep(forward: boolean): void; \n    msInsertVideoEffect(activatableClassId: string, effectRequired: boolean, config?: any): void; \n    msSetVideoRectangle(left: number, top: number, right: number, bottom: number): void; \n    webkitEnterFullScreen(): void; \n    webkitEnterFullscreen(): void; \n    webkitExitFullScreen(): void; \n    webkitExitFullscreen(): void; \n    addEventListener(type: "MSContentZoom", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGotPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSLostPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSManipulationStateChanged", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSVideoFormatChanged", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSVideoFrameStepCompleted", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSVideoOptimalLayoutChanged", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "activate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ariarequest", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecopy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforecut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforedeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforepaste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "command", listener: (ev: CommandEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "contextmenu", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "copy", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "cuechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "cut", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "deactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "gotpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "lostpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseenter", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseleave", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "msneedkey", listener: (ev: MSMediaKeyNeededEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "paste", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "selectstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchcancel", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchend", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchmove", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchstart", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var HTMLVideoElement: { \n    prototype: HTMLVideoElement; \n    new(): HTMLVideoElement; \n} \n \ninterface HashChangeEvent extends Event { \n    newURL: string; \n    oldURL: string; \n} \n \ndeclare var HashChangeEvent: { \n    prototype: HashChangeEvent; \n    new(type: string, eventInitDict?: HashChangeEventInit): HashChangeEvent; \n} \n \ninterface History { \n    length: number; \n    state: any; \n    back(distance?: any): void; \n    forward(distance?: any): void; \n    go(delta?: any): void; \n    pushState(statedata: any, title?: string, url?: string): void; \n    replaceState(statedata: any, title?: string, url?: string): void; \n} \n \ndeclare var History: { \n    prototype: History; \n    new(): History; \n} \n \ninterface IDBCursor { \n    direction: string; \n    key: any; \n    primaryKey: any; \n    source: any; \n    advance(count: number): void; \n    continue(key?: any): void; \n    delete(): IDBRequest; \n    update(value: any): IDBRequest; \n    NEXT: string; \n    NEXT_NO_DUPLICATE: string; \n    PREV: string; \n    PREV_NO_DUPLICATE: string; \n} \n \ndeclare var IDBCursor: { \n    prototype: IDBCursor; \n    new(): IDBCursor; \n    NEXT: string; \n    NEXT_NO_DUPLICATE: string; \n    PREV: string; \n    PREV_NO_DUPLICATE: string; \n} \n \ninterface IDBCursorWithValue extends IDBCursor { \n    value: any; \n} \n \ndeclare var IDBCursorWithValue: { \n    prototype: IDBCursorWithValue; \n    new(): IDBCursorWithValue; \n} \n \ninterface IDBDatabase extends EventTarget { \n    name: string; \n    objectStoreNames: DOMStringList; \n    onabort: (ev: Event) => any; \n    onerror: (ev: Event) => any; \n    version: string; \n    close(): void; \n    createObjectStore(name: string, optionalParameters?: any): IDBObjectStore; \n    deleteObjectStore(name: string): void; \n    transaction(storeNames: any, mode?: string): IDBTransaction; \n    addEventListener(type: "abort", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var IDBDatabase: { \n    prototype: IDBDatabase; \n    new(): IDBDatabase; \n} \n \ninterface IDBFactory { \n    cmp(first: any, second: any): number; \n    deleteDatabase(name: string): IDBOpenDBRequest; \n    open(name: string, version?: number): IDBOpenDBRequest; \n} \n \ndeclare var IDBFactory: { \n    prototype: IDBFactory; \n    new(): IDBFactory; \n} \n \ninterface IDBIndex { \n    keyPath: string; \n    name: string; \n    objectStore: IDBObjectStore; \n    unique: boolean; \n    count(key?: any): IDBRequest; \n    get(key: any): IDBRequest; \n    getKey(key: any): IDBRequest; \n    openCursor(range?: IDBKeyRange, direction?: string): IDBRequest; \n    openKeyCursor(range?: IDBKeyRange, direction?: string): IDBRequest; \n} \n \ndeclare var IDBIndex: { \n    prototype: IDBIndex; \n    new(): IDBIndex; \n} \n \ninterface IDBKeyRange { \n    lower: any; \n    lowerOpen: boolean; \n    upper: any; \n    upperOpen: boolean; \n} \n \ndeclare var IDBKeyRange: { \n    prototype: IDBKeyRange; \n    new(): IDBKeyRange; \n    bound(lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean): IDBKeyRange; \n    lowerBound(bound: any, open?: boolean): IDBKeyRange; \n    only(value: any): IDBKeyRange; \n    upperBound(bound: any, open?: boolean): IDBKeyRange; \n} \n \ninterface IDBObjectStore { \n    indexNames: DOMStringList; \n    keyPath: string; \n    name: string; \n    transaction: IDBTransaction; \n    add(value: any, key?: any): IDBRequest; \n    clear(): IDBRequest; \n    count(key?: any): IDBRequest; \n    createIndex(name: string, keyPath: string, optionalParameters?: any): IDBIndex; \n    delete(key: any): IDBRequest; \n    deleteIndex(indexName: string): void; \n    get(key: any): IDBRequest; \n    index(name: string): IDBIndex; \n    openCursor(range?: any, direction?: string): IDBRequest; \n    put(value: any, key?: any): IDBRequest; \n} \n \ndeclare var IDBObjectStore: { \n    prototype: IDBObjectStore; \n    new(): IDBObjectStore; \n} \n \ninterface IDBOpenDBRequest extends IDBRequest { \n    onblocked: (ev: Event) => any; \n    onupgradeneeded: (ev: IDBVersionChangeEvent) => any; \n    addEventListener(type: "blocked", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "success", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "upgradeneeded", listener: (ev: IDBVersionChangeEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var IDBOpenDBRequest: { \n    prototype: IDBOpenDBRequest; \n    new(): IDBOpenDBRequest; \n} \n \ninterface IDBRequest extends EventTarget { \n    error: DOMError; \n    onerror: (ev: Event) => any; \n    onsuccess: (ev: Event) => any; \n    readyState: string; \n    result: any; \n    source: any; \n    transaction: IDBTransaction; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "success", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var IDBRequest: { \n    prototype: IDBRequest; \n    new(): IDBRequest; \n} \n \ninterface IDBTransaction extends EventTarget { \n    db: IDBDatabase; \n    error: DOMError; \n    mode: string; \n    onabort: (ev: Event) => any; \n    oncomplete: (ev: Event) => any; \n    onerror: (ev: Event) => any; \n    abort(): void; \n    objectStore(name: string): IDBObjectStore; \n    READ_ONLY: string; \n    READ_WRITE: string; \n    VERSION_CHANGE: string; \n    addEventListener(type: "abort", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "complete", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var IDBTransaction: { \n    prototype: IDBTransaction; \n    new(): IDBTransaction; \n    READ_ONLY: string; \n    READ_WRITE: string; \n    VERSION_CHANGE: string; \n} \n \ninterface IDBVersionChangeEvent extends Event { \n    newVersion: number; \n    oldVersion: number; \n} \n \ndeclare var IDBVersionChangeEvent: { \n    prototype: IDBVersionChangeEvent; \n    new(): IDBVersionChangeEvent; \n} \n \ninterface ImageData { \n    data: number[]; \n    height: number; \n    width: number; \n} \n \ninterface ImageDataConstructor { \n    prototype: ImageData; \n    new(width: number, height: number): ImageData; \n    new(array: Uint8ClampedArray, width: number, height: number): ImageData; \n} \n \ndeclare var ImageData: ImageDataConstructor;  \n \ninterface KeyboardEvent extends UIEvent { \n    altKey: boolean; \n    char: string; \n    charCode: number; \n    ctrlKey: boolean; \n    key: string; \n    keyCode: number; \n    locale: string; \n    location: number; \n    metaKey: boolean; \n    repeat: boolean; \n    shiftKey: boolean; \n    which: number; \n    getModifierState(keyArg: string): boolean; \n    initKeyboardEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, keyArg: string, locationArg: number, modifiersListArg: string, repeat: boolean, locale: string): void; \n    DOM_KEY_LOCATION_JOYSTICK: number; \n    DOM_KEY_LOCATION_LEFT: number; \n    DOM_KEY_LOCATION_MOBILE: number; \n    DOM_KEY_LOCATION_NUMPAD: number; \n    DOM_KEY_LOCATION_RIGHT: number; \n    DOM_KEY_LOCATION_STANDARD: number; \n} \n \ndeclare var KeyboardEvent: { \n    prototype: KeyboardEvent; \n    new(typeArg: string, eventInitDict?: KeyboardEventInit): KeyboardEvent; \n    DOM_KEY_LOCATION_JOYSTICK: number; \n    DOM_KEY_LOCATION_LEFT: number; \n    DOM_KEY_LOCATION_MOBILE: number; \n    DOM_KEY_LOCATION_NUMPAD: number; \n    DOM_KEY_LOCATION_RIGHT: number; \n    DOM_KEY_LOCATION_STANDARD: number; \n} \n \ninterface Location { \n    hash: string; \n    host: string; \n    hostname: string; \n    href: string; \n    origin: string; \n    pathname: string; \n    port: string; \n    protocol: string; \n    search: string; \n    assign(url: string): void; \n    reload(forcedReload?: boolean): void; \n    replace(url: string): void; \n    toString(): string; \n} \n \ndeclare var Location: { \n    prototype: Location; \n    new(): Location; \n} \n \ninterface LongRunningScriptDetectedEvent extends Event { \n    executionTime: number; \n    stopPageScriptExecution: boolean; \n} \n \ndeclare var LongRunningScriptDetectedEvent: { \n    prototype: LongRunningScriptDetectedEvent; \n    new(): LongRunningScriptDetectedEvent; \n} \n \ninterface MSApp { \n    clearTemporaryWebDataAsync(): MSAppAsyncOperation; \n    createBlobFromRandomAccessStream(type: string, seeker: any): Blob; \n    createDataPackage(object: any): any; \n    createDataPackageFromSelection(): any; \n    createFileFromStorageFile(storageFile: any): File; \n    createStreamFromInputStream(type: string, inputStream: any): MSStream; \n    execAsyncAtPriority(asynchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, ...args: any[]): void; \n    execAtPriority(synchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, ...args: any[]): any; \n    getCurrentPriority(): string; \n    getHtmlPrintDocumentSourceAsync(htmlDoc: any): any; \n    getViewId(view: any): any; \n    isTaskScheduledAtPriorityOrHigher(priority: string): boolean; \n    pageHandlesAllApplicationActivations(enabled: boolean): void; \n    suppressSubdownloadCredentialPrompts(suppress: boolean): void; \n    terminateApp(exceptionObject: any): void; \n    CURRENT: string; \n    HIGH: string; \n    IDLE: string; \n    NORMAL: string; \n} \ndeclare var MSApp: MSApp; \n \ninterface MSAppAsyncOperation extends EventTarget { \n    error: DOMError; \n    oncomplete: (ev: Event) => any; \n    onerror: (ev: Event) => any; \n    readyState: number; \n    result: any; \n    start(): void; \n    COMPLETED: number; \n    ERROR: number; \n    STARTED: number; \n    addEventListener(type: "complete", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var MSAppAsyncOperation: { \n    prototype: MSAppAsyncOperation; \n    new(): MSAppAsyncOperation; \n    COMPLETED: number; \n    ERROR: number; \n    STARTED: number; \n} \n \ninterface MSBlobBuilder { \n    append(data: any, endings?: string): void; \n    getBlob(contentType?: string): Blob; \n} \n \ndeclare var MSBlobBuilder: { \n    prototype: MSBlobBuilder; \n    new(): MSBlobBuilder; \n} \n \ninterface MSCSSMatrix { \n    a: number; \n    b: number; \n    c: number; \n    d: number; \n    e: number; \n    f: number; \n    m11: number; \n    m12: number; \n    m13: number; \n    m14: number; \n    m21: number; \n    m22: number; \n    m23: number; \n    m24: number; \n    m31: number; \n    m32: number; \n    m33: number; \n    m34: number; \n    m41: number; \n    m42: number; \n    m43: number; \n    m44: number; \n    inverse(): MSCSSMatrix; \n    multiply(secondMatrix: MSCSSMatrix): MSCSSMatrix; \n    rotate(angleX: number, angleY?: number, angleZ?: number): MSCSSMatrix; \n    rotateAxisAngle(x: number, y: number, z: number, angle: number): MSCSSMatrix; \n    scale(scaleX: number, scaleY?: number, scaleZ?: number): MSCSSMatrix; \n    setMatrixValue(value: string): void; \n    skewX(angle: number): MSCSSMatrix; \n    skewY(angle: number): MSCSSMatrix; \n    toString(): string; \n    translate(x: number, y: number, z?: number): MSCSSMatrix; \n} \n \ndeclare var MSCSSMatrix: { \n    prototype: MSCSSMatrix; \n    new(text?: string): MSCSSMatrix; \n} \n \ninterface MSGesture { \n    target: Element; \n    addPointer(pointerId: number): void; \n    stop(): void; \n} \n \ndeclare var MSGesture: { \n    prototype: MSGesture; \n    new(): MSGesture; \n} \n \ninterface MSGestureEvent extends UIEvent { \n    clientX: number; \n    clientY: number; \n    expansion: number; \n    gestureObject: any; \n    hwTimestamp: number; \n    offsetX: number; \n    offsetY: number; \n    rotation: number; \n    scale: number; \n    screenX: number; \n    screenY: number; \n    translationX: number; \n    translationY: number; \n    velocityAngular: number; \n    velocityExpansion: number; \n    velocityX: number; \n    velocityY: number; \n    initGestureEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, offsetXArg: number, offsetYArg: number, translationXArg: number, translationYArg: number, scaleArg: number, expansionArg: number, rotationArg: number, velocityXArg: number, velocityYArg: number, velocityExpansionArg: number, velocityAngularArg: number, hwTimestampArg: number): void; \n    MSGESTURE_FLAG_BEGIN: number; \n    MSGESTURE_FLAG_CANCEL: number; \n    MSGESTURE_FLAG_END: number; \n    MSGESTURE_FLAG_INERTIA: number; \n    MSGESTURE_FLAG_NONE: number; \n} \n \ndeclare var MSGestureEvent: { \n    prototype: MSGestureEvent; \n    new(): MSGestureEvent; \n    MSGESTURE_FLAG_BEGIN: number; \n    MSGESTURE_FLAG_CANCEL: number; \n    MSGESTURE_FLAG_END: number; \n    MSGESTURE_FLAG_INERTIA: number; \n    MSGESTURE_FLAG_NONE: number; \n} \n \ninterface MSGraphicsTrust { \n    constrictionActive: boolean; \n    status: string; \n} \n \ndeclare var MSGraphicsTrust: { \n    prototype: MSGraphicsTrust; \n    new(): MSGraphicsTrust; \n} \n \ninterface MSHTMLWebViewElement extends HTMLElement { \n    canGoBack: boolean; \n    canGoForward: boolean; \n    containsFullScreenElement: boolean; \n    documentTitle: string; \n    height: number; \n    settings: MSWebViewSettings; \n    src: string; \n    width: number; \n    addWebAllowedObject(name: string, applicationObject: any): void; \n    buildLocalStreamUri(contentIdentifier: string, relativePath: string): string; \n    capturePreviewToBlobAsync(): MSWebViewAsyncOperation; \n    captureSelectedContentToDataPackageAsync(): MSWebViewAsyncOperation; \n    getDeferredPermissionRequestById(id: number): DeferredPermissionRequest; \n    getDeferredPermissionRequests(): DeferredPermissionRequest[]; \n    goBack(): void; \n    goForward(): void; \n    invokeScriptAsync(scriptName: string, ...args: any[]): MSWebViewAsyncOperation; \n    navigate(uri: string): void; \n    navigateToLocalStreamUri(source: string, streamResolver: any): void; \n    navigateToString(contents: string): void; \n    navigateWithHttpRequestMessage(requestMessage: any): void; \n    refresh(): void; \n    stop(): void; \n} \n \ndeclare var MSHTMLWebViewElement: { \n    prototype: MSHTMLWebViewElement; \n    new(): MSHTMLWebViewElement; \n} \n \ninterface MSHeaderFooter { \n    URL: string; \n    dateLong: string; \n    dateShort: string; \n    font: string; \n    htmlFoot: string; \n    htmlHead: string; \n    page: number; \n    pageTotal: number; \n    textFoot: string; \n    textHead: string; \n    timeLong: string; \n    timeShort: string; \n    title: string; \n} \n \ndeclare var MSHeaderFooter: { \n    prototype: MSHeaderFooter; \n    new(): MSHeaderFooter; \n} \n \ninterface MSInputMethodContext extends EventTarget { \n    compositionEndOffset: number; \n    compositionStartOffset: number; \n    oncandidatewindowhide: (ev: Event) => any; \n    oncandidatewindowshow: (ev: Event) => any; \n    oncandidatewindowupdate: (ev: Event) => any; \n    target: HTMLElement; \n    getCandidateWindowClientRect(): ClientRect; \n    getCompositionAlternatives(): string[]; \n    hasComposition(): boolean; \n    isCandidateWindowVisible(): boolean; \n    addEventListener(type: "MSCandidateWindowHide", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSCandidateWindowShow", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSCandidateWindowUpdate", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var MSInputMethodContext: { \n    prototype: MSInputMethodContext; \n    new(): MSInputMethodContext; \n} \n \ninterface MSManipulationEvent extends UIEvent { \n    currentState: number; \n    inertiaDestinationX: number; \n    inertiaDestinationY: number; \n    lastState: number; \n    initMSManipulationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, lastState: number, currentState: number): void; \n    MS_MANIPULATION_STATE_ACTIVE: number; \n    MS_MANIPULATION_STATE_CANCELLED: number; \n    MS_MANIPULATION_STATE_COMMITTED: number; \n    MS_MANIPULATION_STATE_DRAGGING: number; \n    MS_MANIPULATION_STATE_INERTIA: number; \n    MS_MANIPULATION_STATE_PRESELECT: number; \n    MS_MANIPULATION_STATE_SELECTING: number; \n    MS_MANIPULATION_STATE_STOPPED: number; \n} \n \ndeclare var MSManipulationEvent: { \n    prototype: MSManipulationEvent; \n    new(): MSManipulationEvent; \n    MS_MANIPULATION_STATE_ACTIVE: number; \n    MS_MANIPULATION_STATE_CANCELLED: number; \n    MS_MANIPULATION_STATE_COMMITTED: number; \n    MS_MANIPULATION_STATE_DRAGGING: number; \n    MS_MANIPULATION_STATE_INERTIA: number; \n    MS_MANIPULATION_STATE_PRESELECT: number; \n    MS_MANIPULATION_STATE_SELECTING: number; \n    MS_MANIPULATION_STATE_STOPPED: number; \n} \n \ninterface MSMediaKeyError { \n    code: number; \n    systemCode: number; \n    MS_MEDIA_KEYERR_CLIENT: number; \n    MS_MEDIA_KEYERR_DOMAIN: number; \n    MS_MEDIA_KEYERR_HARDWARECHANGE: number; \n    MS_MEDIA_KEYERR_OUTPUT: number; \n    MS_MEDIA_KEYERR_SERVICE: number; \n    MS_MEDIA_KEYERR_UNKNOWN: number; \n} \n \ndeclare var MSMediaKeyError: { \n    prototype: MSMediaKeyError; \n    new(): MSMediaKeyError; \n    MS_MEDIA_KEYERR_CLIENT: number; \n    MS_MEDIA_KEYERR_DOMAIN: number; \n    MS_MEDIA_KEYERR_HARDWARECHANGE: number; \n    MS_MEDIA_KEYERR_OUTPUT: number; \n    MS_MEDIA_KEYERR_SERVICE: number; \n    MS_MEDIA_KEYERR_UNKNOWN: number; \n} \n \ninterface MSMediaKeyMessageEvent extends Event { \n    destinationURL: string; \n    message: Uint8Array; \n} \n \ndeclare var MSMediaKeyMessageEvent: { \n    prototype: MSMediaKeyMessageEvent; \n    new(): MSMediaKeyMessageEvent; \n} \n \ninterface MSMediaKeyNeededEvent extends Event { \n    initData: Uint8Array; \n} \n \ndeclare var MSMediaKeyNeededEvent: { \n    prototype: MSMediaKeyNeededEvent; \n    new(): MSMediaKeyNeededEvent; \n} \n \ninterface MSMediaKeySession extends EventTarget { \n    error: MSMediaKeyError; \n    keySystem: string; \n    sessionId: string; \n    close(): void; \n    update(key: Uint8Array): void; \n} \n \ndeclare var MSMediaKeySession: { \n    prototype: MSMediaKeySession; \n    new(): MSMediaKeySession; \n} \n \ninterface MSMediaKeys { \n    keySystem: string; \n    createSession(type: string, initData: Uint8Array, cdmData?: Uint8Array): MSMediaKeySession; \n} \n \ndeclare var MSMediaKeys: { \n    prototype: MSMediaKeys; \n    new(keySystem: string): MSMediaKeys; \n    isTypeSupported(keySystem: string, type?: string): boolean; \n} \n \ninterface MSMimeTypesCollection { \n    length: number; \n} \n \ndeclare var MSMimeTypesCollection: { \n    prototype: MSMimeTypesCollection; \n    new(): MSMimeTypesCollection; \n} \n \ninterface MSPluginsCollection { \n    length: number; \n    refresh(reload?: boolean): void; \n} \n \ndeclare var MSPluginsCollection: { \n    prototype: MSPluginsCollection; \n    new(): MSPluginsCollection; \n} \n \ninterface MSPointerEvent extends MouseEvent { \n    currentPoint: any; \n    height: number; \n    hwTimestamp: number; \n    intermediatePoints: any; \n    isPrimary: boolean; \n    pointerId: number; \n    pointerType: any; \n    pressure: number; \n    rotation: number; \n    tiltX: number; \n    tiltY: number; \n    width: number; \n    getCurrentPoint(element: Element): void; \n    getIntermediatePoints(element: Element): void; \n    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void; \n} \n \ndeclare var MSPointerEvent: { \n    prototype: MSPointerEvent; \n    new(typeArg: string, eventInitDict?: PointerEventInit): MSPointerEvent; \n} \n \ninterface MSPrintManagerTemplatePrinter extends MSTemplatePrinter, EventTarget { \n    percentScale: number; \n    showHeaderFooter: boolean; \n    shrinkToFit: boolean; \n    drawPreviewPage(element: HTMLElement, pageNumber: number): void; \n    endPrint(): void; \n    getPrintTaskOptionValue(key: string): any; \n    invalidatePreview(): void; \n    setPageCount(pageCount: number): void; \n    startPrint(): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var MSPrintManagerTemplatePrinter: { \n    prototype: MSPrintManagerTemplatePrinter; \n    new(): MSPrintManagerTemplatePrinter; \n} \n \ninterface MSRangeCollection { \n    length: number; \n    item(index: number): Range; \n    [index: number]: Range; \n} \n \ndeclare var MSRangeCollection: { \n    prototype: MSRangeCollection; \n    new(): MSRangeCollection; \n} \n \ninterface MSSiteModeEvent extends Event { \n    actionURL: string; \n    buttonID: number; \n} \n \ndeclare var MSSiteModeEvent: { \n    prototype: MSSiteModeEvent; \n    new(): MSSiteModeEvent; \n} \n \ninterface MSStream { \n    type: string; \n    msClose(): void; \n    msDetachStream(): any; \n} \n \ndeclare var MSStream: { \n    prototype: MSStream; \n    new(): MSStream; \n} \n \ninterface MSStreamReader extends EventTarget, MSBaseReader { \n    error: DOMError; \n    readAsArrayBuffer(stream: MSStream, size?: number): void; \n    readAsBinaryString(stream: MSStream, size?: number): void; \n    readAsBlob(stream: MSStream, size?: number): void; \n    readAsDataURL(stream: MSStream, size?: number): void; \n    readAsText(stream: MSStream, encoding?: string, size?: number): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var MSStreamReader: { \n    prototype: MSStreamReader; \n    new(): MSStreamReader; \n} \n \ninterface MSTemplatePrinter { \n    collate: boolean; \n    copies: number; \n    currentPage: boolean; \n    currentPageAvail: boolean; \n    duplex: boolean; \n    footer: string; \n    frameActive: boolean; \n    frameActiveEnabled: boolean; \n    frameAsShown: boolean; \n    framesetDocument: boolean; \n    header: string; \n    headerFooterFont: string; \n    marginBottom: number; \n    marginLeft: number; \n    marginRight: number; \n    marginTop: number; \n    orientation: string; \n    pageFrom: number; \n    pageHeight: number; \n    pageTo: number; \n    pageWidth: number; \n    selectedPages: boolean; \n    selection: boolean; \n    selectionEnabled: boolean; \n    unprintableBottom: number; \n    unprintableLeft: number; \n    unprintableRight: number; \n    unprintableTop: number; \n    usePrinterCopyCollate: boolean; \n    createHeaderFooter(): MSHeaderFooter; \n    deviceSupports(property: string): any; \n    ensurePrintDialogDefaults(): boolean; \n    getPageMarginBottom(pageRule: CSSPageRule, pageWidth: number, pageHeight: number): any; \n    getPageMarginBottomImportant(pageRule: CSSPageRule): boolean; \n    getPageMarginLeft(pageRule: CSSPageRule, pageWidth: number, pageHeight: number): any; \n    getPageMarginLeftImportant(pageRule: CSSPageRule): boolean; \n    getPageMarginRight(pageRule: CSSPageRule, pageWidth: number, pageHeight: number): any; \n    getPageMarginRightImportant(pageRule: CSSPageRule): boolean; \n    getPageMarginTop(pageRule: CSSPageRule, pageWidth: number, pageHeight: number): any; \n    getPageMarginTopImportant(pageRule: CSSPageRule): boolean; \n    printBlankPage(): void; \n    printNonNative(document: any): boolean; \n    printNonNativeFrames(document: any, activeFrame: boolean): void; \n    printPage(element: HTMLElement): void; \n    showPageSetupDialog(): boolean; \n    showPrintDialog(): boolean; \n    startDoc(title: string): boolean; \n    stopDoc(): void; \n    updatePageStatus(status: number): void; \n} \n \ndeclare var MSTemplatePrinter: { \n    prototype: MSTemplatePrinter; \n    new(): MSTemplatePrinter; \n} \n \ninterface MSWebViewAsyncOperation extends EventTarget { \n    error: DOMError; \n    oncomplete: (ev: Event) => any; \n    onerror: (ev: Event) => any; \n    readyState: number; \n    result: any; \n    target: MSHTMLWebViewElement; \n    type: number; \n    start(): void; \n    COMPLETED: number; \n    ERROR: number; \n    STARTED: number; \n    TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM: number; \n    TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION: number; \n    TYPE_INVOKE_SCRIPT: number; \n    addEventListener(type: "complete", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var MSWebViewAsyncOperation: { \n    prototype: MSWebViewAsyncOperation; \n    new(): MSWebViewAsyncOperation; \n    COMPLETED: number; \n    ERROR: number; \n    STARTED: number; \n    TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM: number; \n    TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION: number; \n    TYPE_INVOKE_SCRIPT: number; \n} \n \ninterface MSWebViewSettings { \n    isIndexedDBEnabled: boolean; \n    isJavaScriptEnabled: boolean; \n} \n \ndeclare var MSWebViewSettings: { \n    prototype: MSWebViewSettings; \n    new(): MSWebViewSettings; \n} \n \ninterface MediaElementAudioSourceNode extends AudioNode { \n} \n \ndeclare var MediaElementAudioSourceNode: { \n    prototype: MediaElementAudioSourceNode; \n    new(): MediaElementAudioSourceNode; \n} \n \ninterface MediaError { \n    code: number; \n    msExtendedCode: number; \n    MEDIA_ERR_ABORTED: number; \n    MEDIA_ERR_DECODE: number; \n    MEDIA_ERR_NETWORK: number; \n    MEDIA_ERR_SRC_NOT_SUPPORTED: number; \n    MS_MEDIA_ERR_ENCRYPTED: number; \n} \n \ndeclare var MediaError: { \n    prototype: MediaError; \n    new(): MediaError; \n    MEDIA_ERR_ABORTED: number; \n    MEDIA_ERR_DECODE: number; \n    MEDIA_ERR_NETWORK: number; \n    MEDIA_ERR_SRC_NOT_SUPPORTED: number; \n    MS_MEDIA_ERR_ENCRYPTED: number; \n} \n \ninterface MediaList { \n    length: number; \n    mediaText: string; \n    appendMedium(newMedium: string): void; \n    deleteMedium(oldMedium: string): void; \n    item(index: number): string; \n    toString(): string; \n    [index: number]: string; \n} \n \ndeclare var MediaList: { \n    prototype: MediaList; \n    new(): MediaList; \n} \n \ninterface MediaQueryList { \n    matches: boolean; \n    media: string; \n    addListener(listener: MediaQueryListListener): void; \n    removeListener(listener: MediaQueryListListener): void; \n} \n \ndeclare var MediaQueryList: { \n    prototype: MediaQueryList; \n    new(): MediaQueryList; \n} \n \ninterface MediaSource extends EventTarget { \n    activeSourceBuffers: SourceBufferList; \n    duration: number; \n    readyState: number; \n    sourceBuffers: SourceBufferList; \n    addSourceBuffer(type: string): SourceBuffer; \n    endOfStream(error?: number): void; \n    removeSourceBuffer(sourceBuffer: SourceBuffer): void; \n} \n \ndeclare var MediaSource: { \n    prototype: MediaSource; \n    new(): MediaSource; \n    isTypeSupported(type: string): boolean; \n} \n \ninterface MessageChannel { \n    port1: MessagePort; \n    port2: MessagePort; \n} \n \ndeclare var MessageChannel: { \n    prototype: MessageChannel; \n    new(): MessageChannel; \n} \n \ninterface MessageEvent extends Event { \n    data: any; \n    origin: string; \n    ports: any; \n    source: Window; \n    initMessageEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, dataArg: any, originArg: string, lastEventIdArg: string, sourceArg: Window): void; \n} \n \ndeclare var MessageEvent: { \n    prototype: MessageEvent; \n    new(type: string, eventInitDict?: MessageEventInit): MessageEvent; \n} \n \ninterface MessagePort extends EventTarget { \n    onmessage: (ev: MessageEvent) => any; \n    close(): void; \n    postMessage(message?: any, ports?: any): void; \n    start(): void; \n    addEventListener(type: "message", listener: (ev: MessageEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var MessagePort: { \n    prototype: MessagePort; \n    new(): MessagePort; \n} \n \ninterface MimeType { \n    description: string; \n    enabledPlugin: Plugin; \n    suffixes: string; \n    type: string; \n} \n \ndeclare var MimeType: { \n    prototype: MimeType; \n    new(): MimeType; \n} \n \ninterface MimeTypeArray { \n    length: number; \n    item(index: number): Plugin; \n    namedItem(type: string): Plugin; \n    [index: number]: Plugin; \n} \n \ndeclare var MimeTypeArray: { \n    prototype: MimeTypeArray; \n    new(): MimeTypeArray; \n} \n \ninterface MouseEvent extends UIEvent { \n    altKey: boolean; \n    button: number; \n    buttons: number; \n    clientX: number; \n    clientY: number; \n    ctrlKey: boolean; \n    fromElement: Element; \n    layerX: number; \n    layerY: number; \n    metaKey: boolean; \n    movementX: number; \n    movementY: number; \n    offsetX: number; \n    offsetY: number; \n    pageX: number; \n    pageY: number; \n    relatedTarget: EventTarget; \n    screenX: number; \n    screenY: number; \n    shiftKey: boolean; \n    toElement: Element; \n    which: number; \n    x: number; \n    y: number; \n    getModifierState(keyArg: string): boolean; \n    initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget): void; \n} \n \ndeclare var MouseEvent: { \n    prototype: MouseEvent; \n    new(typeArg: string, eventInitDict?: MouseEventInit): MouseEvent; \n} \n \ninterface MouseWheelEvent extends MouseEvent { \n    wheelDelta: number; \n    wheelDeltaX: number; \n    wheelDeltaY: number; \n    initMouseWheelEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, wheelDeltaArg: number): void; \n} \n \ndeclare var MouseWheelEvent: { \n    prototype: MouseWheelEvent; \n    new(): MouseWheelEvent; \n} \n \ninterface MutationEvent extends Event { \n    attrChange: number; \n    attrName: string; \n    newValue: string; \n    prevValue: string; \n    relatedNode: Node; \n    initMutationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, relatedNodeArg: Node, prevValueArg: string, newValueArg: string, attrNameArg: string, attrChangeArg: number): void; \n    ADDITION: number; \n    MODIFICATION: number; \n    REMOVAL: number; \n} \n \ndeclare var MutationEvent: { \n    prototype: MutationEvent; \n    new(): MutationEvent; \n    ADDITION: number; \n    MODIFICATION: number; \n    REMOVAL: number; \n} \n \ninterface MutationObserver { \n    disconnect(): void; \n    observe(target: Node, options: MutationObserverInit): void; \n    takeRecords(): MutationRecord[]; \n} \n \ndeclare var MutationObserver: { \n    prototype: MutationObserver; \n    new(callback: MutationCallback): MutationObserver; \n} \n \ninterface MutationRecord { \n    addedNodes: NodeList; \n    attributeName: string; \n    attributeNamespace: string; \n    nextSibling: Node; \n    oldValue: string; \n    previousSibling: Node; \n    removedNodes: NodeList; \n    target: Node; \n    type: string; \n} \n \ndeclare var MutationRecord: { \n    prototype: MutationRecord; \n    new(): MutationRecord; \n} \n \ninterface NamedNodeMap { \n    length: number; \n    getNamedItem(name: string): Attr; \n    getNamedItemNS(namespaceURI: string, localName: string): Attr; \n    item(index: number): Attr; \n    removeNamedItem(name: string): Attr; \n    removeNamedItemNS(namespaceURI: string, localName: string): Attr; \n    setNamedItem(arg: Attr): Attr; \n    setNamedItemNS(arg: Attr): Attr; \n    [index: number]: Attr; \n} \n \ndeclare var NamedNodeMap: { \n    prototype: NamedNodeMap; \n    new(): NamedNodeMap; \n} \n \ninterface NavigationCompletedEvent extends NavigationEvent { \n    isSuccess: boolean; \n    webErrorStatus: number; \n} \n \ndeclare var NavigationCompletedEvent: { \n    prototype: NavigationCompletedEvent; \n    new(): NavigationCompletedEvent; \n} \n \ninterface NavigationEvent extends Event { \n    uri: string; \n} \n \ndeclare var NavigationEvent: { \n    prototype: NavigationEvent; \n    new(): NavigationEvent; \n} \n \ninterface NavigationEventWithReferrer extends NavigationEvent { \n    referer: string; \n} \n \ndeclare var NavigationEventWithReferrer: { \n    prototype: NavigationEventWithReferrer; \n    new(): NavigationEventWithReferrer; \n} \n \ninterface Navigator extends Object, NavigatorID, NavigatorOnLine, NavigatorContentUtils, NavigatorStorageUtils, NavigatorGeolocation, MSNavigatorDoNotTrack, MSFileSaver { \n    appCodeName: string; \n    appMinorVersion: string; \n    browserLanguage: string; \n    connectionSpeed: number; \n    cookieEnabled: boolean; \n    cpuClass: string; \n    language: string; \n    maxTouchPoints: number; \n    mimeTypes: MSMimeTypesCollection; \n    msManipulationViewsEnabled: boolean; \n    msMaxTouchPoints: number; \n    msPointerEnabled: boolean; \n    plugins: MSPluginsCollection; \n    pointerEnabled: boolean; \n    systemLanguage: string; \n    userLanguage: string; \n    webdriver: boolean; \n    getGamepads(): Gamepad[]; \n    javaEnabled(): boolean; \n    msLaunchUri(uri: string, successCallback?: MSLaunchUriCallback, noHandlerCallback?: MSLaunchUriCallback): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var Navigator: { \n    prototype: Navigator; \n    new(): Navigator; \n} \n \ninterface Node extends EventTarget { \n    attributes: NamedNodeMap; \n    baseURI: string; \n    childNodes: NodeList; \n    firstChild: Node; \n    lastChild: Node; \n    localName: string; \n    namespaceURI: string; \n    nextSibling: Node; \n    nodeName: string; \n    nodeType: number; \n    nodeValue: string; \n    ownerDocument: Document; \n    parentElement: HTMLElement; \n    parentNode: Node; \n    prefix: string; \n    previousSibling: Node; \n    textContent: string; \n    appendChild(newChild: Node): Node; \n    cloneNode(deep?: boolean): Node; \n    compareDocumentPosition(other: Node): number; \n    hasAttributes(): boolean; \n    hasChildNodes(): boolean; \n    insertBefore(newChild: Node, refChild?: Node): Node; \n    isDefaultNamespace(namespaceURI: string): boolean; \n    isEqualNode(arg: Node): boolean; \n    isSameNode(other: Node): boolean; \n    lookupNamespaceURI(prefix: string): string; \n    lookupPrefix(namespaceURI: string): string; \n    normalize(): void; \n    removeChild(oldChild: Node): Node; \n    replaceChild(newChild: Node, oldChild: Node): Node; \n    ATTRIBUTE_NODE: number; \n    CDATA_SECTION_NODE: number; \n    COMMENT_NODE: number; \n    DOCUMENT_FRAGMENT_NODE: number; \n    DOCUMENT_NODE: number; \n    DOCUMENT_POSITION_CONTAINED_BY: number; \n    DOCUMENT_POSITION_CONTAINS: number; \n    DOCUMENT_POSITION_DISCONNECTED: number; \n    DOCUMENT_POSITION_FOLLOWING: number; \n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number; \n    DOCUMENT_POSITION_PRECEDING: number; \n    DOCUMENT_TYPE_NODE: number; \n    ELEMENT_NODE: number; \n    ENTITY_NODE: number; \n    ENTITY_REFERENCE_NODE: number; \n    NOTATION_NODE: number; \n    PROCESSING_INSTRUCTION_NODE: number; \n    TEXT_NODE: number; \n} \n \ndeclare var Node: { \n    prototype: Node; \n    new(): Node; \n    ATTRIBUTE_NODE: number; \n    CDATA_SECTION_NODE: number; \n    COMMENT_NODE: number; \n    DOCUMENT_FRAGMENT_NODE: number; \n    DOCUMENT_NODE: number; \n    DOCUMENT_POSITION_CONTAINED_BY: number; \n    DOCUMENT_POSITION_CONTAINS: number; \n    DOCUMENT_POSITION_DISCONNECTED: number; \n    DOCUMENT_POSITION_FOLLOWING: number; \n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number; \n    DOCUMENT_POSITION_PRECEDING: number; \n    DOCUMENT_TYPE_NODE: number; \n    ELEMENT_NODE: number; \n    ENTITY_NODE: number; \n    ENTITY_REFERENCE_NODE: number; \n    NOTATION_NODE: number; \n    PROCESSING_INSTRUCTION_NODE: number; \n    TEXT_NODE: number; \n} \n \ninterface NodeFilter { \n    FILTER_ACCEPT: number; \n    FILTER_REJECT: number; \n    FILTER_SKIP: number; \n    SHOW_ALL: number; \n    SHOW_ATTRIBUTE: number; \n    SHOW_CDATA_SECTION: number; \n    SHOW_COMMENT: number; \n    SHOW_DOCUMENT: number; \n    SHOW_DOCUMENT_FRAGMENT: number; \n    SHOW_DOCUMENT_TYPE: number; \n    SHOW_ELEMENT: number; \n    SHOW_ENTITY: number; \n    SHOW_ENTITY_REFERENCE: number; \n    SHOW_NOTATION: number; \n    SHOW_PROCESSING_INSTRUCTION: number; \n    SHOW_TEXT: number; \n} \ndeclare var NodeFilter: NodeFilter; \n \ninterface NodeIterator { \n    expandEntityReferences: boolean; \n    filter: NodeFilter; \n    root: Node; \n    whatToShow: number; \n    detach(): void; \n    nextNode(): Node; \n    previousNode(): Node; \n} \n \ndeclare var NodeIterator: { \n    prototype: NodeIterator; \n    new(): NodeIterator; \n} \n \ninterface NodeList { \n    length: number; \n    item(index: number): Node; \n    [index: number]: Node; \n} \n \ndeclare var NodeList: { \n    prototype: NodeList; \n    new(): NodeList; \n} \n \ninterface OES_element_index_uint { \n} \n \ndeclare var OES_element_index_uint: { \n    prototype: OES_element_index_uint; \n    new(): OES_element_index_uint; \n} \n \ninterface OES_standard_derivatives { \n    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number; \n} \n \ndeclare var OES_standard_derivatives: { \n    prototype: OES_standard_derivatives; \n    new(): OES_standard_derivatives; \n    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number; \n} \n \ninterface OES_texture_float { \n} \n \ndeclare var OES_texture_float: { \n    prototype: OES_texture_float; \n    new(): OES_texture_float; \n} \n \ninterface OES_texture_float_linear { \n} \n \ndeclare var OES_texture_float_linear: { \n    prototype: OES_texture_float_linear; \n    new(): OES_texture_float_linear; \n} \n \ninterface OfflineAudioCompletionEvent extends Event { \n    renderedBuffer: AudioBuffer; \n} \n \ndeclare var OfflineAudioCompletionEvent: { \n    prototype: OfflineAudioCompletionEvent; \n    new(): OfflineAudioCompletionEvent; \n} \n \ninterface OfflineAudioContext extends AudioContext { \n    oncomplete: (ev: Event) => any; \n    startRendering(): void; \n    addEventListener(type: "complete", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var OfflineAudioContext: { \n    prototype: OfflineAudioContext; \n    new(numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext; \n} \n \ninterface OscillatorNode extends AudioNode { \n    detune: AudioParam; \n    frequency: AudioParam; \n    onended: (ev: Event) => any; \n    type: string; \n    setPeriodicWave(periodicWave: PeriodicWave): void; \n    start(when?: number): void; \n    stop(when?: number): void; \n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var OscillatorNode: { \n    prototype: OscillatorNode; \n    new(): OscillatorNode; \n} \n \ninterface PageTransitionEvent extends Event { \n    persisted: boolean; \n} \n \ndeclare var PageTransitionEvent: { \n    prototype: PageTransitionEvent; \n    new(): PageTransitionEvent; \n} \n \ninterface PannerNode extends AudioNode { \n    coneInnerAngle: number; \n    coneOuterAngle: number; \n    coneOuterGain: number; \n    distanceModel: string; \n    maxDistance: number; \n    panningModel: string; \n    refDistance: number; \n    rolloffFactor: number; \n    setOrientation(x: number, y: number, z: number): void; \n    setPosition(x: number, y: number, z: number): void; \n    setVelocity(x: number, y: number, z: number): void; \n} \n \ndeclare var PannerNode: { \n    prototype: PannerNode; \n    new(): PannerNode; \n} \n \ninterface PerfWidgetExternal { \n    activeNetworkRequestCount: number; \n    averageFrameTime: number; \n    averagePaintTime: number; \n    extraInformationEnabled: boolean; \n    independentRenderingEnabled: boolean; \n    irDisablingContentString: string; \n    irStatusAvailable: boolean; \n    maxCpuSpeed: number; \n    paintRequestsPerSecond: number; \n    performanceCounter: number; \n    performanceCounterFrequency: number; \n    addEventListener(eventType: string, callback: Function): void; \n    getMemoryUsage(): number; \n    getProcessCpuUsage(): number; \n    getRecentCpuUsage(last: number): any; \n    getRecentFrames(last: number): any; \n    getRecentMemoryUsage(last: number): any; \n    getRecentPaintRequests(last: number): any; \n    removeEventListener(eventType: string, callback: Function): void; \n    repositionWindow(x: number, y: number): void; \n    resizeWindow(width: number, height: number): void; \n} \n \ndeclare var PerfWidgetExternal: { \n    prototype: PerfWidgetExternal; \n    new(): PerfWidgetExternal; \n} \n \ninterface Performance { \n    navigation: PerformanceNavigation; \n    timing: PerformanceTiming; \n    clearMarks(markName?: string): void; \n    clearMeasures(measureName?: string): void; \n    clearResourceTimings(): void; \n    getEntries(): any; \n    getEntriesByName(name: string, entryType?: string): any; \n    getEntriesByType(entryType: string): any; \n    getMarks(markName?: string): any; \n    getMeasures(measureName?: string): any; \n    mark(markName: string): void; \n    measure(measureName: string, startMarkName?: string, endMarkName?: string): void; \n    now(): number; \n    setResourceTimingBufferSize(maxSize: number): void; \n    toJSON(): any; \n} \n \ndeclare var Performance: { \n    prototype: Performance; \n    new(): Performance; \n} \n \ninterface PerformanceEntry { \n    duration: number; \n    entryType: string; \n    name: string; \n    startTime: number; \n} \n \ndeclare var PerformanceEntry: { \n    prototype: PerformanceEntry; \n    new(): PerformanceEntry; \n} \n \ninterface PerformanceMark extends PerformanceEntry { \n} \n \ndeclare var PerformanceMark: { \n    prototype: PerformanceMark; \n    new(): PerformanceMark; \n} \n \ninterface PerformanceMeasure extends PerformanceEntry { \n} \n \ndeclare var PerformanceMeasure: { \n    prototype: PerformanceMeasure; \n    new(): PerformanceMeasure; \n} \n \ninterface PerformanceNavigation { \n    redirectCount: number; \n    type: number; \n    toJSON(): any; \n    TYPE_BACK_FORWARD: number; \n    TYPE_NAVIGATE: number; \n    TYPE_RELOAD: number; \n    TYPE_RESERVED: number; \n} \n \ndeclare var PerformanceNavigation: { \n    prototype: PerformanceNavigation; \n    new(): PerformanceNavigation; \n    TYPE_BACK_FORWARD: number; \n    TYPE_NAVIGATE: number; \n    TYPE_RELOAD: number; \n    TYPE_RESERVED: number; \n} \n \ninterface PerformanceNavigationTiming extends PerformanceEntry { \n    connectEnd: number; \n    connectStart: number; \n    domComplete: number; \n    domContentLoadedEventEnd: number; \n    domContentLoadedEventStart: number; \n    domInteractive: number; \n    domLoading: number; \n    domainLookupEnd: number; \n    domainLookupStart: number; \n    fetchStart: number; \n    loadEventEnd: number; \n    loadEventStart: number; \n    navigationStart: number; \n    redirectCount: number; \n    redirectEnd: number; \n    redirectStart: number; \n    requestStart: number; \n    responseEnd: number; \n    responseStart: number; \n    type: string; \n    unloadEventEnd: number; \n    unloadEventStart: number; \n} \n \ndeclare var PerformanceNavigationTiming: { \n    prototype: PerformanceNavigationTiming; \n    new(): PerformanceNavigationTiming; \n} \n \ninterface PerformanceResourceTiming extends PerformanceEntry { \n    connectEnd: number; \n    connectStart: number; \n    domainLookupEnd: number; \n    domainLookupStart: number; \n    fetchStart: number; \n    initiatorType: string; \n    redirectEnd: number; \n    redirectStart: number; \n    requestStart: number; \n    responseEnd: number; \n    responseStart: number; \n} \n \ndeclare var PerformanceResourceTiming: { \n    prototype: PerformanceResourceTiming; \n    new(): PerformanceResourceTiming; \n} \n \ninterface PerformanceTiming { \n    connectEnd: number; \n    connectStart: number; \n    domComplete: number; \n    domContentLoadedEventEnd: number; \n    domContentLoadedEventStart: number; \n    domInteractive: number; \n    domLoading: number; \n    domainLookupEnd: number; \n    domainLookupStart: number; \n    fetchStart: number; \n    loadEventEnd: number; \n    loadEventStart: number; \n    msFirstPaint: number; \n    navigationStart: number; \n    redirectEnd: number; \n    redirectStart: number; \n    requestStart: number; \n    responseEnd: number; \n    responseStart: number; \n    unloadEventEnd: number; \n    unloadEventStart: number; \n    toJSON(): any; \n} \n \ndeclare var PerformanceTiming: { \n    prototype: PerformanceTiming; \n    new(): PerformanceTiming; \n} \n \ninterface PeriodicWave { \n} \n \ndeclare var PeriodicWave: { \n    prototype: PeriodicWave; \n    new(): PeriodicWave; \n} \n \ninterface PermissionRequest extends DeferredPermissionRequest { \n    state: string; \n    defer(): void; \n} \n \ndeclare var PermissionRequest: { \n    prototype: PermissionRequest; \n    new(): PermissionRequest; \n} \n \ninterface PermissionRequestedEvent extends Event { \n    permissionRequest: PermissionRequest; \n} \n \ndeclare var PermissionRequestedEvent: { \n    prototype: PermissionRequestedEvent; \n    new(): PermissionRequestedEvent; \n} \n \ninterface Plugin { \n    description: string; \n    filename: string; \n    length: number; \n    name: string; \n    version: string; \n    item(index: number): MimeType; \n    namedItem(type: string): MimeType; \n    [index: number]: MimeType; \n} \n \ndeclare var Plugin: { \n    prototype: Plugin; \n    new(): Plugin; \n} \n \ninterface PluginArray { \n    length: number; \n    item(index: number): Plugin; \n    namedItem(name: string): Plugin; \n    refresh(reload?: boolean): void; \n    [index: number]: Plugin; \n} \n \ndeclare var PluginArray: { \n    prototype: PluginArray; \n    new(): PluginArray; \n} \n \ninterface PointerEvent extends MouseEvent { \n    currentPoint: any; \n    height: number; \n    hwTimestamp: number; \n    intermediatePoints: any; \n    isPrimary: boolean; \n    pointerId: number; \n    pointerType: any; \n    pressure: number; \n    rotation: number; \n    tiltX: number; \n    tiltY: number; \n    width: number; \n    getCurrentPoint(element: Element): void; \n    getIntermediatePoints(element: Element): void; \n    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void; \n} \n \ndeclare var PointerEvent: { \n    prototype: PointerEvent; \n    new(typeArg: string, eventInitDict?: PointerEventInit): PointerEvent; \n} \n \ninterface PopStateEvent extends Event { \n    state: any; \n    initPopStateEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, stateArg: any): void; \n} \n \ndeclare var PopStateEvent: { \n    prototype: PopStateEvent; \n    new(): PopStateEvent; \n} \n \ninterface Position { \n    coords: Coordinates; \n    timestamp: number; \n} \n \ndeclare var Position: { \n    prototype: Position; \n    new(): Position; \n} \n \ninterface PositionError { \n    code: number; \n    message: string; \n    toString(): string; \n    PERMISSION_DENIED: number; \n    POSITION_UNAVAILABLE: number; \n    TIMEOUT: number; \n} \n \ndeclare var PositionError: { \n    prototype: PositionError; \n    new(): PositionError; \n    PERMISSION_DENIED: number; \n    POSITION_UNAVAILABLE: number; \n    TIMEOUT: number; \n} \n \ninterface ProcessingInstruction extends CharacterData { \n    target: string; \n} \n \ndeclare var ProcessingInstruction: { \n    prototype: ProcessingInstruction; \n    new(): ProcessingInstruction; \n} \n \ninterface ProgressEvent extends Event { \n    lengthComputable: boolean; \n    loaded: number; \n    total: number; \n    initProgressEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, lengthComputableArg: boolean, loadedArg: number, totalArg: number): void; \n} \n \ndeclare var ProgressEvent: { \n    prototype: ProgressEvent; \n    new(type: string, eventInitDict?: ProgressEventInit): ProgressEvent; \n} \n \ninterface Range { \n    collapsed: boolean; \n    commonAncestorContainer: Node; \n    endContainer: Node; \n    endOffset: number; \n    startContainer: Node; \n    startOffset: number; \n    cloneContents(): DocumentFragment; \n    cloneRange(): Range; \n    collapse(toStart: boolean): void; \n    compareBoundaryPoints(how: number, sourceRange: Range): number; \n    createContextualFragment(fragment: string): DocumentFragment; \n    deleteContents(): void; \n    detach(): void; \n    expand(Unit: string): boolean; \n    extractContents(): DocumentFragment; \n    getBoundingClientRect(): ClientRect; \n    getClientRects(): ClientRectList; \n    insertNode(newNode: Node): void; \n    selectNode(refNode: Node): void; \n    selectNodeContents(refNode: Node): void; \n    setEnd(refNode: Node, offset: number): void; \n    setEndAfter(refNode: Node): void; \n    setEndBefore(refNode: Node): void; \n    setStart(refNode: Node, offset: number): void; \n    setStartAfter(refNode: Node): void; \n    setStartBefore(refNode: Node): void; \n    surroundContents(newParent: Node): void; \n    toString(): string; \n    END_TO_END: number; \n    END_TO_START: number; \n    START_TO_END: number; \n    START_TO_START: number; \n} \n \ndeclare var Range: { \n    prototype: Range; \n    new(): Range; \n    END_TO_END: number; \n    END_TO_START: number; \n    START_TO_END: number; \n    START_TO_START: number; \n} \n \ninterface SVGAElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGURIReference { \n    target: SVGAnimatedString; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGAElement: { \n    prototype: SVGAElement; \n    new(): SVGAElement; \n} \n \ninterface SVGAngle { \n    unitType: number; \n    value: number; \n    valueAsString: string; \n    valueInSpecifiedUnits: number; \n    convertToSpecifiedUnits(unitType: number): void; \n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void; \n    SVG_ANGLETYPE_DEG: number; \n    SVG_ANGLETYPE_GRAD: number; \n    SVG_ANGLETYPE_RAD: number; \n    SVG_ANGLETYPE_UNKNOWN: number; \n    SVG_ANGLETYPE_UNSPECIFIED: number; \n} \n \ndeclare var SVGAngle: { \n    prototype: SVGAngle; \n    new(): SVGAngle; \n    SVG_ANGLETYPE_DEG: number; \n    SVG_ANGLETYPE_GRAD: number; \n    SVG_ANGLETYPE_RAD: number; \n    SVG_ANGLETYPE_UNKNOWN: number; \n    SVG_ANGLETYPE_UNSPECIFIED: number; \n} \n \ninterface SVGAnimatedAngle { \n    animVal: SVGAngle; \n    baseVal: SVGAngle; \n} \n \ndeclare var SVGAnimatedAngle: { \n    prototype: SVGAnimatedAngle; \n    new(): SVGAnimatedAngle; \n} \n \ninterface SVGAnimatedBoolean { \n    animVal: boolean; \n    baseVal: boolean; \n} \n \ndeclare var SVGAnimatedBoolean: { \n    prototype: SVGAnimatedBoolean; \n    new(): SVGAnimatedBoolean; \n} \n \ninterface SVGAnimatedEnumeration { \n    animVal: number; \n    baseVal: number; \n} \n \ndeclare var SVGAnimatedEnumeration: { \n    prototype: SVGAnimatedEnumeration; \n    new(): SVGAnimatedEnumeration; \n} \n \ninterface SVGAnimatedInteger { \n    animVal: number; \n    baseVal: number; \n} \n \ndeclare var SVGAnimatedInteger: { \n    prototype: SVGAnimatedInteger; \n    new(): SVGAnimatedInteger; \n} \n \ninterface SVGAnimatedLength { \n    animVal: SVGLength; \n    baseVal: SVGLength; \n} \n \ndeclare var SVGAnimatedLength: { \n    prototype: SVGAnimatedLength; \n    new(): SVGAnimatedLength; \n} \n \ninterface SVGAnimatedLengthList { \n    animVal: SVGLengthList; \n    baseVal: SVGLengthList; \n} \n \ndeclare var SVGAnimatedLengthList: { \n    prototype: SVGAnimatedLengthList; \n    new(): SVGAnimatedLengthList; \n} \n \ninterface SVGAnimatedNumber { \n    animVal: number; \n    baseVal: number; \n} \n \ndeclare var SVGAnimatedNumber: { \n    prototype: SVGAnimatedNumber; \n    new(): SVGAnimatedNumber; \n} \n \ninterface SVGAnimatedNumberList { \n    animVal: SVGNumberList; \n    baseVal: SVGNumberList; \n} \n \ndeclare var SVGAnimatedNumberList: { \n    prototype: SVGAnimatedNumberList; \n    new(): SVGAnimatedNumberList; \n} \n \ninterface SVGAnimatedPreserveAspectRatio { \n    animVal: SVGPreserveAspectRatio; \n    baseVal: SVGPreserveAspectRatio; \n} \n \ndeclare var SVGAnimatedPreserveAspectRatio: { \n    prototype: SVGAnimatedPreserveAspectRatio; \n    new(): SVGAnimatedPreserveAspectRatio; \n} \n \ninterface SVGAnimatedRect { \n    animVal: SVGRect; \n    baseVal: SVGRect; \n} \n \ndeclare var SVGAnimatedRect: { \n    prototype: SVGAnimatedRect; \n    new(): SVGAnimatedRect; \n} \n \ninterface SVGAnimatedString { \n    animVal: string; \n    baseVal: string; \n} \n \ndeclare var SVGAnimatedString: { \n    prototype: SVGAnimatedString; \n    new(): SVGAnimatedString; \n} \n \ninterface SVGAnimatedTransformList { \n    animVal: SVGTransformList; \n    baseVal: SVGTransformList; \n} \n \ndeclare var SVGAnimatedTransformList: { \n    prototype: SVGAnimatedTransformList; \n    new(): SVGAnimatedTransformList; \n} \n \ninterface SVGCircleElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired { \n    cx: SVGAnimatedLength; \n    cy: SVGAnimatedLength; \n    r: SVGAnimatedLength; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGCircleElement: { \n    prototype: SVGCircleElement; \n    new(): SVGCircleElement; \n} \n \ninterface SVGClipPathElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGUnitTypes { \n    clipPathUnits: SVGAnimatedEnumeration; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGClipPathElement: { \n    prototype: SVGClipPathElement; \n    new(): SVGClipPathElement; \n} \n \ninterface SVGComponentTransferFunctionElement extends SVGElement { \n    amplitude: SVGAnimatedNumber; \n    exponent: SVGAnimatedNumber; \n    intercept: SVGAnimatedNumber; \n    offset: SVGAnimatedNumber; \n    slope: SVGAnimatedNumber; \n    tableValues: SVGAnimatedNumberList; \n    type: SVGAnimatedEnumeration; \n    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number; \n    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number; \n    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number; \n    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number; \n    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number; \n    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number; \n} \n \ndeclare var SVGComponentTransferFunctionElement: { \n    prototype: SVGComponentTransferFunctionElement; \n    new(): SVGComponentTransferFunctionElement; \n    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number; \n    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number; \n    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number; \n    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number; \n    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number; \n    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number; \n} \n \ninterface SVGDefsElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGDefsElement: { \n    prototype: SVGDefsElement; \n    new(): SVGDefsElement; \n} \n \ninterface SVGDescElement extends SVGElement, SVGStylable, SVGLangSpace { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGDescElement: { \n    prototype: SVGDescElement; \n    new(): SVGDescElement; \n} \n \ninterface SVGElement extends Element { \n    id: string; \n    className: any; \n    onclick: (ev: MouseEvent) => any; \n    ondblclick: (ev: MouseEvent) => any; \n    onfocusin: (ev: FocusEvent) => any; \n    onfocusout: (ev: FocusEvent) => any; \n    onload: (ev: Event) => any; \n    onmousedown: (ev: MouseEvent) => any; \n    onmousemove: (ev: MouseEvent) => any; \n    onmouseout: (ev: MouseEvent) => any; \n    onmouseover: (ev: MouseEvent) => any; \n    onmouseup: (ev: MouseEvent) => any; \n    ownerSVGElement: SVGSVGElement; \n    viewportElement: SVGElement; \n    xmlbase: string; \n    addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGotPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSLostPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ariarequest", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "command", listener: (ev: CommandEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focusin", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focusout", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "gotpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "lostpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchcancel", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchend", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchmove", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchstart", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGElement: { \n    prototype: SVGElement; \n    new(): SVGElement; \n} \n \ninterface SVGElementInstance extends EventTarget { \n    childNodes: SVGElementInstanceList; \n    correspondingElement: SVGElement; \n    correspondingUseElement: SVGUseElement; \n    firstChild: SVGElementInstance; \n    lastChild: SVGElementInstance; \n    nextSibling: SVGElementInstance; \n    parentNode: SVGElementInstance; \n    previousSibling: SVGElementInstance; \n} \n \ndeclare var SVGElementInstance: { \n    prototype: SVGElementInstance; \n    new(): SVGElementInstance; \n} \n \ninterface SVGElementInstanceList { \n    length: number; \n    item(index: number): SVGElementInstance; \n} \n \ndeclare var SVGElementInstanceList: { \n    prototype: SVGElementInstanceList; \n    new(): SVGElementInstanceList; \n} \n \ninterface SVGEllipseElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired { \n    cx: SVGAnimatedLength; \n    cy: SVGAnimatedLength; \n    rx: SVGAnimatedLength; \n    ry: SVGAnimatedLength; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGEllipseElement: { \n    prototype: SVGEllipseElement; \n    new(): SVGEllipseElement; \n} \n \ninterface SVGFEBlendElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    in1: SVGAnimatedString; \n    in2: SVGAnimatedString; \n    mode: SVGAnimatedEnumeration; \n    SVG_FEBLEND_MODE_COLOR: number; \n    SVG_FEBLEND_MODE_COLOR_BURN: number; \n    SVG_FEBLEND_MODE_COLOR_DODGE: number; \n    SVG_FEBLEND_MODE_DARKEN: number; \n    SVG_FEBLEND_MODE_DIFFERENCE: number; \n    SVG_FEBLEND_MODE_EXCLUSION: number; \n    SVG_FEBLEND_MODE_HARD_LIGHT: number; \n    SVG_FEBLEND_MODE_HUE: number; \n    SVG_FEBLEND_MODE_LIGHTEN: number; \n    SVG_FEBLEND_MODE_LUMINOSITY: number; \n    SVG_FEBLEND_MODE_MULTIPLY: number; \n    SVG_FEBLEND_MODE_NORMAL: number; \n    SVG_FEBLEND_MODE_OVERLAY: number; \n    SVG_FEBLEND_MODE_SATURATION: number; \n    SVG_FEBLEND_MODE_SCREEN: number; \n    SVG_FEBLEND_MODE_SOFT_LIGHT: number; \n    SVG_FEBLEND_MODE_UNKNOWN: number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFEBlendElement: { \n    prototype: SVGFEBlendElement; \n    new(): SVGFEBlendElement; \n    SVG_FEBLEND_MODE_COLOR: number; \n    SVG_FEBLEND_MODE_COLOR_BURN: number; \n    SVG_FEBLEND_MODE_COLOR_DODGE: number; \n    SVG_FEBLEND_MODE_DARKEN: number; \n    SVG_FEBLEND_MODE_DIFFERENCE: number; \n    SVG_FEBLEND_MODE_EXCLUSION: number; \n    SVG_FEBLEND_MODE_HARD_LIGHT: number; \n    SVG_FEBLEND_MODE_HUE: number; \n    SVG_FEBLEND_MODE_LIGHTEN: number; \n    SVG_FEBLEND_MODE_LUMINOSITY: number; \n    SVG_FEBLEND_MODE_MULTIPLY: number; \n    SVG_FEBLEND_MODE_NORMAL: number; \n    SVG_FEBLEND_MODE_OVERLAY: number; \n    SVG_FEBLEND_MODE_SATURATION: number; \n    SVG_FEBLEND_MODE_SCREEN: number; \n    SVG_FEBLEND_MODE_SOFT_LIGHT: number; \n    SVG_FEBLEND_MODE_UNKNOWN: number; \n} \n \ninterface SVGFEColorMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    in1: SVGAnimatedString; \n    type: SVGAnimatedEnumeration; \n    values: SVGAnimatedNumberList; \n    SVG_FECOLORMATRIX_TYPE_HUEROTATE: number; \n    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number; \n    SVG_FECOLORMATRIX_TYPE_MATRIX: number; \n    SVG_FECOLORMATRIX_TYPE_SATURATE: number; \n    SVG_FECOLORMATRIX_TYPE_UNKNOWN: number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFEColorMatrixElement: { \n    prototype: SVGFEColorMatrixElement; \n    new(): SVGFEColorMatrixElement; \n    SVG_FECOLORMATRIX_TYPE_HUEROTATE: number; \n    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number; \n    SVG_FECOLORMATRIX_TYPE_MATRIX: number; \n    SVG_FECOLORMATRIX_TYPE_SATURATE: number; \n    SVG_FECOLORMATRIX_TYPE_UNKNOWN: number; \n} \n \ninterface SVGFEComponentTransferElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    in1: SVGAnimatedString; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFEComponentTransferElement: { \n    prototype: SVGFEComponentTransferElement; \n    new(): SVGFEComponentTransferElement; \n} \n \ninterface SVGFECompositeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    in1: SVGAnimatedString; \n    in2: SVGAnimatedString; \n    k1: SVGAnimatedNumber; \n    k2: SVGAnimatedNumber; \n    k3: SVGAnimatedNumber; \n    k4: SVGAnimatedNumber; \n    operator: SVGAnimatedEnumeration; \n    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number; \n    SVG_FECOMPOSITE_OPERATOR_ATOP: number; \n    SVG_FECOMPOSITE_OPERATOR_IN: number; \n    SVG_FECOMPOSITE_OPERATOR_OUT: number; \n    SVG_FECOMPOSITE_OPERATOR_OVER: number; \n    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number; \n    SVG_FECOMPOSITE_OPERATOR_XOR: number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFECompositeElement: { \n    prototype: SVGFECompositeElement; \n    new(): SVGFECompositeElement; \n    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number; \n    SVG_FECOMPOSITE_OPERATOR_ATOP: number; \n    SVG_FECOMPOSITE_OPERATOR_IN: number; \n    SVG_FECOMPOSITE_OPERATOR_OUT: number; \n    SVG_FECOMPOSITE_OPERATOR_OVER: number; \n    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number; \n    SVG_FECOMPOSITE_OPERATOR_XOR: number; \n} \n \ninterface SVGFEConvolveMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    bias: SVGAnimatedNumber; \n    divisor: SVGAnimatedNumber; \n    edgeMode: SVGAnimatedEnumeration; \n    in1: SVGAnimatedString; \n    kernelMatrix: SVGAnimatedNumberList; \n    kernelUnitLengthX: SVGAnimatedNumber; \n    kernelUnitLengthY: SVGAnimatedNumber; \n    orderX: SVGAnimatedInteger; \n    orderY: SVGAnimatedInteger; \n    preserveAlpha: SVGAnimatedBoolean; \n    targetX: SVGAnimatedInteger; \n    targetY: SVGAnimatedInteger; \n    SVG_EDGEMODE_DUPLICATE: number; \n    SVG_EDGEMODE_NONE: number; \n    SVG_EDGEMODE_UNKNOWN: number; \n    SVG_EDGEMODE_WRAP: number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFEConvolveMatrixElement: { \n    prototype: SVGFEConvolveMatrixElement; \n    new(): SVGFEConvolveMatrixElement; \n    SVG_EDGEMODE_DUPLICATE: number; \n    SVG_EDGEMODE_NONE: number; \n    SVG_EDGEMODE_UNKNOWN: number; \n    SVG_EDGEMODE_WRAP: number; \n} \n \ninterface SVGFEDiffuseLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    diffuseConstant: SVGAnimatedNumber; \n    in1: SVGAnimatedString; \n    kernelUnitLengthX: SVGAnimatedNumber; \n    kernelUnitLengthY: SVGAnimatedNumber; \n    surfaceScale: SVGAnimatedNumber; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFEDiffuseLightingElement: { \n    prototype: SVGFEDiffuseLightingElement; \n    new(): SVGFEDiffuseLightingElement; \n} \n \ninterface SVGFEDisplacementMapElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    in1: SVGAnimatedString; \n    in2: SVGAnimatedString; \n    scale: SVGAnimatedNumber; \n    xChannelSelector: SVGAnimatedEnumeration; \n    yChannelSelector: SVGAnimatedEnumeration; \n    SVG_CHANNEL_A: number; \n    SVG_CHANNEL_B: number; \n    SVG_CHANNEL_G: number; \n    SVG_CHANNEL_R: number; \n    SVG_CHANNEL_UNKNOWN: number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFEDisplacementMapElement: { \n    prototype: SVGFEDisplacementMapElement; \n    new(): SVGFEDisplacementMapElement; \n    SVG_CHANNEL_A: number; \n    SVG_CHANNEL_B: number; \n    SVG_CHANNEL_G: number; \n    SVG_CHANNEL_R: number; \n    SVG_CHANNEL_UNKNOWN: number; \n} \n \ninterface SVGFEDistantLightElement extends SVGElement { \n    azimuth: SVGAnimatedNumber; \n    elevation: SVGAnimatedNumber; \n} \n \ndeclare var SVGFEDistantLightElement: { \n    prototype: SVGFEDistantLightElement; \n    new(): SVGFEDistantLightElement; \n} \n \ninterface SVGFEFloodElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFEFloodElement: { \n    prototype: SVGFEFloodElement; \n    new(): SVGFEFloodElement; \n} \n \ninterface SVGFEFuncAElement extends SVGComponentTransferFunctionElement { \n} \n \ndeclare var SVGFEFuncAElement: { \n    prototype: SVGFEFuncAElement; \n    new(): SVGFEFuncAElement; \n} \n \ninterface SVGFEFuncBElement extends SVGComponentTransferFunctionElement { \n} \n \ndeclare var SVGFEFuncBElement: { \n    prototype: SVGFEFuncBElement; \n    new(): SVGFEFuncBElement; \n} \n \ninterface SVGFEFuncGElement extends SVGComponentTransferFunctionElement { \n} \n \ndeclare var SVGFEFuncGElement: { \n    prototype: SVGFEFuncGElement; \n    new(): SVGFEFuncGElement; \n} \n \ninterface SVGFEFuncRElement extends SVGComponentTransferFunctionElement { \n} \n \ndeclare var SVGFEFuncRElement: { \n    prototype: SVGFEFuncRElement; \n    new(): SVGFEFuncRElement; \n} \n \ninterface SVGFEGaussianBlurElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    in1: SVGAnimatedString; \n    stdDeviationX: SVGAnimatedNumber; \n    stdDeviationY: SVGAnimatedNumber; \n    setStdDeviation(stdDeviationX: number, stdDeviationY: number): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFEGaussianBlurElement: { \n    prototype: SVGFEGaussianBlurElement; \n    new(): SVGFEGaussianBlurElement; \n} \n \ninterface SVGFEImageElement extends SVGElement, SVGFilterPrimitiveStandardAttributes, SVGLangSpace, SVGURIReference, SVGExternalResourcesRequired { \n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFEImageElement: { \n    prototype: SVGFEImageElement; \n    new(): SVGFEImageElement; \n} \n \ninterface SVGFEMergeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFEMergeElement: { \n    prototype: SVGFEMergeElement; \n    new(): SVGFEMergeElement; \n} \n \ninterface SVGFEMergeNodeElement extends SVGElement { \n    in1: SVGAnimatedString; \n} \n \ndeclare var SVGFEMergeNodeElement: { \n    prototype: SVGFEMergeNodeElement; \n    new(): SVGFEMergeNodeElement; \n} \n \ninterface SVGFEMorphologyElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    in1: SVGAnimatedString; \n    operator: SVGAnimatedEnumeration; \n    radiusX: SVGAnimatedNumber; \n    radiusY: SVGAnimatedNumber; \n    SVG_MORPHOLOGY_OPERATOR_DILATE: number; \n    SVG_MORPHOLOGY_OPERATOR_ERODE: number; \n    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFEMorphologyElement: { \n    prototype: SVGFEMorphologyElement; \n    new(): SVGFEMorphologyElement; \n    SVG_MORPHOLOGY_OPERATOR_DILATE: number; \n    SVG_MORPHOLOGY_OPERATOR_ERODE: number; \n    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number; \n} \n \ninterface SVGFEOffsetElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    dx: SVGAnimatedNumber; \n    dy: SVGAnimatedNumber; \n    in1: SVGAnimatedString; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFEOffsetElement: { \n    prototype: SVGFEOffsetElement; \n    new(): SVGFEOffsetElement; \n} \n \ninterface SVGFEPointLightElement extends SVGElement { \n    x: SVGAnimatedNumber; \n    y: SVGAnimatedNumber; \n    z: SVGAnimatedNumber; \n} \n \ndeclare var SVGFEPointLightElement: { \n    prototype: SVGFEPointLightElement; \n    new(): SVGFEPointLightElement; \n} \n \ninterface SVGFESpecularLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    in1: SVGAnimatedString; \n    kernelUnitLengthX: SVGAnimatedNumber; \n    kernelUnitLengthY: SVGAnimatedNumber; \n    specularConstant: SVGAnimatedNumber; \n    specularExponent: SVGAnimatedNumber; \n    surfaceScale: SVGAnimatedNumber; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFESpecularLightingElement: { \n    prototype: SVGFESpecularLightingElement; \n    new(): SVGFESpecularLightingElement; \n} \n \ninterface SVGFESpotLightElement extends SVGElement { \n    limitingConeAngle: SVGAnimatedNumber; \n    pointsAtX: SVGAnimatedNumber; \n    pointsAtY: SVGAnimatedNumber; \n    pointsAtZ: SVGAnimatedNumber; \n    specularExponent: SVGAnimatedNumber; \n    x: SVGAnimatedNumber; \n    y: SVGAnimatedNumber; \n    z: SVGAnimatedNumber; \n} \n \ndeclare var SVGFESpotLightElement: { \n    prototype: SVGFESpotLightElement; \n    new(): SVGFESpotLightElement; \n} \n \ninterface SVGFETileElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    in1: SVGAnimatedString; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFETileElement: { \n    prototype: SVGFETileElement; \n    new(): SVGFETileElement; \n} \n \ninterface SVGFETurbulenceElement extends SVGElement, SVGFilterPrimitiveStandardAttributes { \n    baseFrequencyX: SVGAnimatedNumber; \n    baseFrequencyY: SVGAnimatedNumber; \n    numOctaves: SVGAnimatedInteger; \n    seed: SVGAnimatedNumber; \n    stitchTiles: SVGAnimatedEnumeration; \n    type: SVGAnimatedEnumeration; \n    SVG_STITCHTYPE_NOSTITCH: number; \n    SVG_STITCHTYPE_STITCH: number; \n    SVG_STITCHTYPE_UNKNOWN: number; \n    SVG_TURBULENCE_TYPE_FRACTALNOISE: number; \n    SVG_TURBULENCE_TYPE_TURBULENCE: number; \n    SVG_TURBULENCE_TYPE_UNKNOWN: number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFETurbulenceElement: { \n    prototype: SVGFETurbulenceElement; \n    new(): SVGFETurbulenceElement; \n    SVG_STITCHTYPE_NOSTITCH: number; \n    SVG_STITCHTYPE_STITCH: number; \n    SVG_STITCHTYPE_UNKNOWN: number; \n    SVG_TURBULENCE_TYPE_FRACTALNOISE: number; \n    SVG_TURBULENCE_TYPE_TURBULENCE: number; \n    SVG_TURBULENCE_TYPE_UNKNOWN: number; \n} \n \ninterface SVGFilterElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGLangSpace, SVGURIReference, SVGExternalResourcesRequired { \n    filterResX: SVGAnimatedInteger; \n    filterResY: SVGAnimatedInteger; \n    filterUnits: SVGAnimatedEnumeration; \n    height: SVGAnimatedLength; \n    primitiveUnits: SVGAnimatedEnumeration; \n    width: SVGAnimatedLength; \n    x: SVGAnimatedLength; \n    y: SVGAnimatedLength; \n    setFilterRes(filterResX: number, filterResY: number): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGFilterElement: { \n    prototype: SVGFilterElement; \n    new(): SVGFilterElement; \n} \n \ninterface SVGForeignObjectElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired { \n    height: SVGAnimatedLength; \n    width: SVGAnimatedLength; \n    x: SVGAnimatedLength; \n    y: SVGAnimatedLength; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGForeignObjectElement: { \n    prototype: SVGForeignObjectElement; \n    new(): SVGForeignObjectElement; \n} \n \ninterface SVGGElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGGElement: { \n    prototype: SVGGElement; \n    new(): SVGGElement; \n} \n \ninterface SVGGradientElement extends SVGElement, SVGStylable, SVGExternalResourcesRequired, SVGURIReference, SVGUnitTypes { \n    gradientTransform: SVGAnimatedTransformList; \n    gradientUnits: SVGAnimatedEnumeration; \n    spreadMethod: SVGAnimatedEnumeration; \n    SVG_SPREADMETHOD_PAD: number; \n    SVG_SPREADMETHOD_REFLECT: number; \n    SVG_SPREADMETHOD_REPEAT: number; \n    SVG_SPREADMETHOD_UNKNOWN: number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGGradientElement: { \n    prototype: SVGGradientElement; \n    new(): SVGGradientElement; \n    SVG_SPREADMETHOD_PAD: number; \n    SVG_SPREADMETHOD_REFLECT: number; \n    SVG_SPREADMETHOD_REPEAT: number; \n    SVG_SPREADMETHOD_UNKNOWN: number; \n} \n \ninterface SVGImageElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGURIReference { \n    height: SVGAnimatedLength; \n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio; \n    width: SVGAnimatedLength; \n    x: SVGAnimatedLength; \n    y: SVGAnimatedLength; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGImageElement: { \n    prototype: SVGImageElement; \n    new(): SVGImageElement; \n} \n \ninterface SVGLength { \n    unitType: number; \n    value: number; \n    valueAsString: string; \n    valueInSpecifiedUnits: number; \n    convertToSpecifiedUnits(unitType: number): void; \n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void; \n    SVG_LENGTHTYPE_CM: number; \n    SVG_LENGTHTYPE_EMS: number; \n    SVG_LENGTHTYPE_EXS: number; \n    SVG_LENGTHTYPE_IN: number; \n    SVG_LENGTHTYPE_MM: number; \n    SVG_LENGTHTYPE_NUMBER: number; \n    SVG_LENGTHTYPE_PC: number; \n    SVG_LENGTHTYPE_PERCENTAGE: number; \n    SVG_LENGTHTYPE_PT: number; \n    SVG_LENGTHTYPE_PX: number; \n    SVG_LENGTHTYPE_UNKNOWN: number; \n} \n \ndeclare var SVGLength: { \n    prototype: SVGLength; \n    new(): SVGLength; \n    SVG_LENGTHTYPE_CM: number; \n    SVG_LENGTHTYPE_EMS: number; \n    SVG_LENGTHTYPE_EXS: number; \n    SVG_LENGTHTYPE_IN: number; \n    SVG_LENGTHTYPE_MM: number; \n    SVG_LENGTHTYPE_NUMBER: number; \n    SVG_LENGTHTYPE_PC: number; \n    SVG_LENGTHTYPE_PERCENTAGE: number; \n    SVG_LENGTHTYPE_PT: number; \n    SVG_LENGTHTYPE_PX: number; \n    SVG_LENGTHTYPE_UNKNOWN: number; \n} \n \ninterface SVGLengthList { \n    numberOfItems: number; \n    appendItem(newItem: SVGLength): SVGLength; \n    clear(): void; \n    getItem(index: number): SVGLength; \n    initialize(newItem: SVGLength): SVGLength; \n    insertItemBefore(newItem: SVGLength, index: number): SVGLength; \n    removeItem(index: number): SVGLength; \n    replaceItem(newItem: SVGLength, index: number): SVGLength; \n} \n \ndeclare var SVGLengthList: { \n    prototype: SVGLengthList; \n    new(): SVGLengthList; \n} \n \ninterface SVGLineElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired { \n    x1: SVGAnimatedLength; \n    x2: SVGAnimatedLength; \n    y1: SVGAnimatedLength; \n    y2: SVGAnimatedLength; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGLineElement: { \n    prototype: SVGLineElement; \n    new(): SVGLineElement; \n} \n \ninterface SVGLinearGradientElement extends SVGGradientElement { \n    x1: SVGAnimatedLength; \n    x2: SVGAnimatedLength; \n    y1: SVGAnimatedLength; \n    y2: SVGAnimatedLength; \n} \n \ndeclare var SVGLinearGradientElement: { \n    prototype: SVGLinearGradientElement; \n    new(): SVGLinearGradientElement; \n} \n \ninterface SVGMarkerElement extends SVGElement, SVGStylable, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox { \n    markerHeight: SVGAnimatedLength; \n    markerUnits: SVGAnimatedEnumeration; \n    markerWidth: SVGAnimatedLength; \n    orientAngle: SVGAnimatedAngle; \n    orientType: SVGAnimatedEnumeration; \n    refX: SVGAnimatedLength; \n    refY: SVGAnimatedLength; \n    setOrientToAngle(angle: SVGAngle): void; \n    setOrientToAuto(): void; \n    SVG_MARKERUNITS_STROKEWIDTH: number; \n    SVG_MARKERUNITS_UNKNOWN: number; \n    SVG_MARKERUNITS_USERSPACEONUSE: number; \n    SVG_MARKER_ORIENT_ANGLE: number; \n    SVG_MARKER_ORIENT_AUTO: number; \n    SVG_MARKER_ORIENT_UNKNOWN: number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGMarkerElement: { \n    prototype: SVGMarkerElement; \n    new(): SVGMarkerElement; \n    SVG_MARKERUNITS_STROKEWIDTH: number; \n    SVG_MARKERUNITS_UNKNOWN: number; \n    SVG_MARKERUNITS_USERSPACEONUSE: number; \n    SVG_MARKER_ORIENT_ANGLE: number; \n    SVG_MARKER_ORIENT_AUTO: number; \n    SVG_MARKER_ORIENT_UNKNOWN: number; \n} \n \ninterface SVGMaskElement extends SVGElement, SVGStylable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGUnitTypes { \n    height: SVGAnimatedLength; \n    maskContentUnits: SVGAnimatedEnumeration; \n    maskUnits: SVGAnimatedEnumeration; \n    width: SVGAnimatedLength; \n    x: SVGAnimatedLength; \n    y: SVGAnimatedLength; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGMaskElement: { \n    prototype: SVGMaskElement; \n    new(): SVGMaskElement; \n} \n \ninterface SVGMatrix { \n    a: number; \n    b: number; \n    c: number; \n    d: number; \n    e: number; \n    f: number; \n    flipX(): SVGMatrix; \n    flipY(): SVGMatrix; \n    inverse(): SVGMatrix; \n    multiply(secondMatrix: SVGMatrix): SVGMatrix; \n    rotate(angle: number): SVGMatrix; \n    rotateFromVector(x: number, y: number): SVGMatrix; \n    scale(scaleFactor: number): SVGMatrix; \n    scaleNonUniform(scaleFactorX: number, scaleFactorY: number): SVGMatrix; \n    skewX(angle: number): SVGMatrix; \n    skewY(angle: number): SVGMatrix; \n    translate(x: number, y: number): SVGMatrix; \n} \n \ndeclare var SVGMatrix: { \n    prototype: SVGMatrix; \n    new(): SVGMatrix; \n} \n \ninterface SVGMetadataElement extends SVGElement { \n} \n \ndeclare var SVGMetadataElement: { \n    prototype: SVGMetadataElement; \n    new(): SVGMetadataElement; \n} \n \ninterface SVGNumber { \n    value: number; \n} \n \ndeclare var SVGNumber: { \n    prototype: SVGNumber; \n    new(): SVGNumber; \n} \n \ninterface SVGNumberList { \n    numberOfItems: number; \n    appendItem(newItem: SVGNumber): SVGNumber; \n    clear(): void; \n    getItem(index: number): SVGNumber; \n    initialize(newItem: SVGNumber): SVGNumber; \n    insertItemBefore(newItem: SVGNumber, index: number): SVGNumber; \n    removeItem(index: number): SVGNumber; \n    replaceItem(newItem: SVGNumber, index: number): SVGNumber; \n} \n \ndeclare var SVGNumberList: { \n    prototype: SVGNumberList; \n    new(): SVGNumberList; \n} \n \ninterface SVGPathElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGAnimatedPathData { \n    createSVGPathSegArcAbs(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcAbs; \n    createSVGPathSegArcRel(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcRel; \n    createSVGPathSegClosePath(): SVGPathSegClosePath; \n    createSVGPathSegCurvetoCubicAbs(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicAbs; \n    createSVGPathSegCurvetoCubicRel(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicRel; \n    createSVGPathSegCurvetoCubicSmoothAbs(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothAbs; \n    createSVGPathSegCurvetoCubicSmoothRel(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothRel; \n    createSVGPathSegCurvetoQuadraticAbs(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticAbs; \n    createSVGPathSegCurvetoQuadraticRel(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticRel; \n    createSVGPathSegCurvetoQuadraticSmoothAbs(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothAbs; \n    createSVGPathSegCurvetoQuadraticSmoothRel(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothRel; \n    createSVGPathSegLinetoAbs(x: number, y: number): SVGPathSegLinetoAbs; \n    createSVGPathSegLinetoHorizontalAbs(x: number): SVGPathSegLinetoHorizontalAbs; \n    createSVGPathSegLinetoHorizontalRel(x: number): SVGPathSegLinetoHorizontalRel; \n    createSVGPathSegLinetoRel(x: number, y: number): SVGPathSegLinetoRel; \n    createSVGPathSegLinetoVerticalAbs(y: number): SVGPathSegLinetoVerticalAbs; \n    createSVGPathSegLinetoVerticalRel(y: number): SVGPathSegLinetoVerticalRel; \n    createSVGPathSegMovetoAbs(x: number, y: number): SVGPathSegMovetoAbs; \n    createSVGPathSegMovetoRel(x: number, y: number): SVGPathSegMovetoRel; \n    getPathSegAtLength(distance: number): number; \n    getPointAtLength(distance: number): SVGPoint; \n    getTotalLength(): number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGPathElement: { \n    prototype: SVGPathElement; \n    new(): SVGPathElement; \n} \n \ninterface SVGPathSeg { \n    pathSegType: number; \n    pathSegTypeAsLetter: string; \n    PATHSEG_ARC_ABS: number; \n    PATHSEG_ARC_REL: number; \n    PATHSEG_CLOSEPATH: number; \n    PATHSEG_CURVETO_CUBIC_ABS: number; \n    PATHSEG_CURVETO_CUBIC_REL: number; \n    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number; \n    PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number; \n    PATHSEG_CURVETO_QUADRATIC_ABS: number; \n    PATHSEG_CURVETO_QUADRATIC_REL: number; \n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number; \n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number; \n    PATHSEG_LINETO_ABS: number; \n    PATHSEG_LINETO_HORIZONTAL_ABS: number; \n    PATHSEG_LINETO_HORIZONTAL_REL: number; \n    PATHSEG_LINETO_REL: number; \n    PATHSEG_LINETO_VERTICAL_ABS: number; \n    PATHSEG_LINETO_VERTICAL_REL: number; \n    PATHSEG_MOVETO_ABS: number; \n    PATHSEG_MOVETO_REL: number; \n    PATHSEG_UNKNOWN: number; \n} \n \ndeclare var SVGPathSeg: { \n    prototype: SVGPathSeg; \n    new(): SVGPathSeg; \n    PATHSEG_ARC_ABS: number; \n    PATHSEG_ARC_REL: number; \n    PATHSEG_CLOSEPATH: number; \n    PATHSEG_CURVETO_CUBIC_ABS: number; \n    PATHSEG_CURVETO_CUBIC_REL: number; \n    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number; \n    PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number; \n    PATHSEG_CURVETO_QUADRATIC_ABS: number; \n    PATHSEG_CURVETO_QUADRATIC_REL: number; \n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number; \n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number; \n    PATHSEG_LINETO_ABS: number; \n    PATHSEG_LINETO_HORIZONTAL_ABS: number; \n    PATHSEG_LINETO_HORIZONTAL_REL: number; \n    PATHSEG_LINETO_REL: number; \n    PATHSEG_LINETO_VERTICAL_ABS: number; \n    PATHSEG_LINETO_VERTICAL_REL: number; \n    PATHSEG_MOVETO_ABS: number; \n    PATHSEG_MOVETO_REL: number; \n    PATHSEG_UNKNOWN: number; \n} \n \ninterface SVGPathSegArcAbs extends SVGPathSeg { \n    angle: number; \n    largeArcFlag: boolean; \n    r1: number; \n    r2: number; \n    sweepFlag: boolean; \n    x: number; \n    y: number; \n} \n \ndeclare var SVGPathSegArcAbs: { \n    prototype: SVGPathSegArcAbs; \n    new(): SVGPathSegArcAbs; \n} \n \ninterface SVGPathSegArcRel extends SVGPathSeg { \n    angle: number; \n    largeArcFlag: boolean; \n    r1: number; \n    r2: number; \n    sweepFlag: boolean; \n    x: number; \n    y: number; \n} \n \ndeclare var SVGPathSegArcRel: { \n    prototype: SVGPathSegArcRel; \n    new(): SVGPathSegArcRel; \n} \n \ninterface SVGPathSegClosePath extends SVGPathSeg { \n} \n \ndeclare var SVGPathSegClosePath: { \n    prototype: SVGPathSegClosePath; \n    new(): SVGPathSegClosePath; \n} \n \ninterface SVGPathSegCurvetoCubicAbs extends SVGPathSeg { \n    x: number; \n    x1: number; \n    x2: number; \n    y: number; \n    y1: number; \n    y2: number; \n} \n \ndeclare var SVGPathSegCurvetoCubicAbs: { \n    prototype: SVGPathSegCurvetoCubicAbs; \n    new(): SVGPathSegCurvetoCubicAbs; \n} \n \ninterface SVGPathSegCurvetoCubicRel extends SVGPathSeg { \n    x: number; \n    x1: number; \n    x2: number; \n    y: number; \n    y1: number; \n    y2: number; \n} \n \ndeclare var SVGPathSegCurvetoCubicRel: { \n    prototype: SVGPathSegCurvetoCubicRel; \n    new(): SVGPathSegCurvetoCubicRel; \n} \n \ninterface SVGPathSegCurvetoCubicSmoothAbs extends SVGPathSeg { \n    x: number; \n    x2: number; \n    y: number; \n    y2: number; \n} \n \ndeclare var SVGPathSegCurvetoCubicSmoothAbs: { \n    prototype: SVGPathSegCurvetoCubicSmoothAbs; \n    new(): SVGPathSegCurvetoCubicSmoothAbs; \n} \n \ninterface SVGPathSegCurvetoCubicSmoothRel extends SVGPathSeg { \n    x: number; \n    x2: number; \n    y: number; \n    y2: number; \n} \n \ndeclare var SVGPathSegCurvetoCubicSmoothRel: { \n    prototype: SVGPathSegCurvetoCubicSmoothRel; \n    new(): SVGPathSegCurvetoCubicSmoothRel; \n} \n \ninterface SVGPathSegCurvetoQuadraticAbs extends SVGPathSeg { \n    x: number; \n    x1: number; \n    y: number; \n    y1: number; \n} \n \ndeclare var SVGPathSegCurvetoQuadraticAbs: { \n    prototype: SVGPathSegCurvetoQuadraticAbs; \n    new(): SVGPathSegCurvetoQuadraticAbs; \n} \n \ninterface SVGPathSegCurvetoQuadraticRel extends SVGPathSeg { \n    x: number; \n    x1: number; \n    y: number; \n    y1: number; \n} \n \ndeclare var SVGPathSegCurvetoQuadraticRel: { \n    prototype: SVGPathSegCurvetoQuadraticRel; \n    new(): SVGPathSegCurvetoQuadraticRel; \n} \n \ninterface SVGPathSegCurvetoQuadraticSmoothAbs extends SVGPathSeg { \n    x: number; \n    y: number; \n} \n \ndeclare var SVGPathSegCurvetoQuadraticSmoothAbs: { \n    prototype: SVGPathSegCurvetoQuadraticSmoothAbs; \n    new(): SVGPathSegCurvetoQuadraticSmoothAbs; \n} \n \ninterface SVGPathSegCurvetoQuadraticSmoothRel extends SVGPathSeg { \n    x: number; \n    y: number; \n} \n \ndeclare var SVGPathSegCurvetoQuadraticSmoothRel: { \n    prototype: SVGPathSegCurvetoQuadraticSmoothRel; \n    new(): SVGPathSegCurvetoQuadraticSmoothRel; \n} \n \ninterface SVGPathSegLinetoAbs extends SVGPathSeg { \n    x: number; \n    y: number; \n} \n \ndeclare var SVGPathSegLinetoAbs: { \n    prototype: SVGPathSegLinetoAbs; \n    new(): SVGPathSegLinetoAbs; \n} \n \ninterface SVGPathSegLinetoHorizontalAbs extends SVGPathSeg { \n    x: number; \n} \n \ndeclare var SVGPathSegLinetoHorizontalAbs: { \n    prototype: SVGPathSegLinetoHorizontalAbs; \n    new(): SVGPathSegLinetoHorizontalAbs; \n} \n \ninterface SVGPathSegLinetoHorizontalRel extends SVGPathSeg { \n    x: number; \n} \n \ndeclare var SVGPathSegLinetoHorizontalRel: { \n    prototype: SVGPathSegLinetoHorizontalRel; \n    new(): SVGPathSegLinetoHorizontalRel; \n} \n \ninterface SVGPathSegLinetoRel extends SVGPathSeg { \n    x: number; \n    y: number; \n} \n \ndeclare var SVGPathSegLinetoRel: { \n    prototype: SVGPathSegLinetoRel; \n    new(): SVGPathSegLinetoRel; \n} \n \ninterface SVGPathSegLinetoVerticalAbs extends SVGPathSeg { \n    y: number; \n} \n \ndeclare var SVGPathSegLinetoVerticalAbs: { \n    prototype: SVGPathSegLinetoVerticalAbs; \n    new(): SVGPathSegLinetoVerticalAbs; \n} \n \ninterface SVGPathSegLinetoVerticalRel extends SVGPathSeg { \n    y: number; \n} \n \ndeclare var SVGPathSegLinetoVerticalRel: { \n    prototype: SVGPathSegLinetoVerticalRel; \n    new(): SVGPathSegLinetoVerticalRel; \n} \n \ninterface SVGPathSegList { \n    numberOfItems: number; \n    appendItem(newItem: SVGPathSeg): SVGPathSeg; \n    clear(): void; \n    getItem(index: number): SVGPathSeg; \n    initialize(newItem: SVGPathSeg): SVGPathSeg; \n    insertItemBefore(newItem: SVGPathSeg, index: number): SVGPathSeg; \n    removeItem(index: number): SVGPathSeg; \n    replaceItem(newItem: SVGPathSeg, index: number): SVGPathSeg; \n} \n \ndeclare var SVGPathSegList: { \n    prototype: SVGPathSegList; \n    new(): SVGPathSegList; \n} \n \ninterface SVGPathSegMovetoAbs extends SVGPathSeg { \n    x: number; \n    y: number; \n} \n \ndeclare var SVGPathSegMovetoAbs: { \n    prototype: SVGPathSegMovetoAbs; \n    new(): SVGPathSegMovetoAbs; \n} \n \ninterface SVGPathSegMovetoRel extends SVGPathSeg { \n    x: number; \n    y: number; \n} \n \ndeclare var SVGPathSegMovetoRel: { \n    prototype: SVGPathSegMovetoRel; \n    new(): SVGPathSegMovetoRel; \n} \n \ninterface SVGPatternElement extends SVGElement, SVGStylable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox, SVGURIReference, SVGUnitTypes { \n    height: SVGAnimatedLength; \n    patternContentUnits: SVGAnimatedEnumeration; \n    patternTransform: SVGAnimatedTransformList; \n    patternUnits: SVGAnimatedEnumeration; \n    width: SVGAnimatedLength; \n    x: SVGAnimatedLength; \n    y: SVGAnimatedLength; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGPatternElement: { \n    prototype: SVGPatternElement; \n    new(): SVGPatternElement; \n} \n \ninterface SVGPoint { \n    x: number; \n    y: number; \n    matrixTransform(matrix: SVGMatrix): SVGPoint; \n} \n \ndeclare var SVGPoint: { \n    prototype: SVGPoint; \n    new(): SVGPoint; \n} \n \ninterface SVGPointList { \n    numberOfItems: number; \n    appendItem(newItem: SVGPoint): SVGPoint; \n    clear(): void; \n    getItem(index: number): SVGPoint; \n    initialize(newItem: SVGPoint): SVGPoint; \n    insertItemBefore(newItem: SVGPoint, index: number): SVGPoint; \n    removeItem(index: number): SVGPoint; \n    replaceItem(newItem: SVGPoint, index: number): SVGPoint; \n} \n \ndeclare var SVGPointList: { \n    prototype: SVGPointList; \n    new(): SVGPointList; \n} \n \ninterface SVGPolygonElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGAnimatedPoints { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGPolygonElement: { \n    prototype: SVGPolygonElement; \n    new(): SVGPolygonElement; \n} \n \ninterface SVGPolylineElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGAnimatedPoints { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGPolylineElement: { \n    prototype: SVGPolylineElement; \n    new(): SVGPolylineElement; \n} \n \ninterface SVGPreserveAspectRatio { \n    align: number; \n    meetOrSlice: number; \n    SVG_MEETORSLICE_MEET: number; \n    SVG_MEETORSLICE_SLICE: number; \n    SVG_MEETORSLICE_UNKNOWN: number; \n    SVG_PRESERVEASPECTRATIO_NONE: number; \n    SVG_PRESERVEASPECTRATIO_UNKNOWN: number; \n    SVG_PRESERVEASPECTRATIO_XMAXYMAX: number; \n    SVG_PRESERVEASPECTRATIO_XMAXYMID: number; \n    SVG_PRESERVEASPECTRATIO_XMAXYMIN: number; \n    SVG_PRESERVEASPECTRATIO_XMIDYMAX: number; \n    SVG_PRESERVEASPECTRATIO_XMIDYMID: number; \n    SVG_PRESERVEASPECTRATIO_XMIDYMIN: number; \n    SVG_PRESERVEASPECTRATIO_XMINYMAX: number; \n    SVG_PRESERVEASPECTRATIO_XMINYMID: number; \n    SVG_PRESERVEASPECTRATIO_XMINYMIN: number; \n} \n \ndeclare var SVGPreserveAspectRatio: { \n    prototype: SVGPreserveAspectRatio; \n    new(): SVGPreserveAspectRatio; \n    SVG_MEETORSLICE_MEET: number; \n    SVG_MEETORSLICE_SLICE: number; \n    SVG_MEETORSLICE_UNKNOWN: number; \n    SVG_PRESERVEASPECTRATIO_NONE: number; \n    SVG_PRESERVEASPECTRATIO_UNKNOWN: number; \n    SVG_PRESERVEASPECTRATIO_XMAXYMAX: number; \n    SVG_PRESERVEASPECTRATIO_XMAXYMID: number; \n    SVG_PRESERVEASPECTRATIO_XMAXYMIN: number; \n    SVG_PRESERVEASPECTRATIO_XMIDYMAX: number; \n    SVG_PRESERVEASPECTRATIO_XMIDYMID: number; \n    SVG_PRESERVEASPECTRATIO_XMIDYMIN: number; \n    SVG_PRESERVEASPECTRATIO_XMINYMAX: number; \n    SVG_PRESERVEASPECTRATIO_XMINYMID: number; \n    SVG_PRESERVEASPECTRATIO_XMINYMIN: number; \n} \n \ninterface SVGRadialGradientElement extends SVGGradientElement { \n    cx: SVGAnimatedLength; \n    cy: SVGAnimatedLength; \n    fx: SVGAnimatedLength; \n    fy: SVGAnimatedLength; \n    r: SVGAnimatedLength; \n} \n \ndeclare var SVGRadialGradientElement: { \n    prototype: SVGRadialGradientElement; \n    new(): SVGRadialGradientElement; \n} \n \ninterface SVGRect { \n    height: number; \n    width: number; \n    x: number; \n    y: number; \n} \n \ndeclare var SVGRect: { \n    prototype: SVGRect; \n    new(): SVGRect; \n} \n \ninterface SVGRectElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired { \n    height: SVGAnimatedLength; \n    rx: SVGAnimatedLength; \n    ry: SVGAnimatedLength; \n    width: SVGAnimatedLength; \n    x: SVGAnimatedLength; \n    y: SVGAnimatedLength; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGRectElement: { \n    prototype: SVGRectElement; \n    new(): SVGRectElement; \n} \n \ninterface SVGSVGElement extends SVGElement, DocumentEvent, SVGLocatable, SVGTests, SVGStylable, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox, SVGZoomAndPan { \n    contentScriptType: string; \n    contentStyleType: string; \n    currentScale: number; \n    currentTranslate: SVGPoint; \n    height: SVGAnimatedLength; \n    onabort: (ev: Event) => any; \n    onerror: (ev: Event) => any; \n    onresize: (ev: UIEvent) => any; \n    onscroll: (ev: UIEvent) => any; \n    onunload: (ev: Event) => any; \n    onzoom: (ev: SVGZoomEvent) => any; \n    pixelUnitToMillimeterX: number; \n    pixelUnitToMillimeterY: number; \n    screenPixelToMillimeterX: number; \n    screenPixelToMillimeterY: number; \n    viewport: SVGRect; \n    width: SVGAnimatedLength; \n    x: SVGAnimatedLength; \n    y: SVGAnimatedLength; \n    checkEnclosure(element: SVGElement, rect: SVGRect): boolean; \n    checkIntersection(element: SVGElement, rect: SVGRect): boolean; \n    createSVGAngle(): SVGAngle; \n    createSVGLength(): SVGLength; \n    createSVGMatrix(): SVGMatrix; \n    createSVGNumber(): SVGNumber; \n    createSVGPoint(): SVGPoint; \n    createSVGRect(): SVGRect; \n    createSVGTransform(): SVGTransform; \n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform; \n    deselectAll(): void; \n    forceRedraw(): void; \n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration; \n    getCurrentTime(): number; \n    getElementById(elementId: string): Element; \n    getEnclosureList(rect: SVGRect, referenceElement: SVGElement): NodeList; \n    getIntersectionList(rect: SVGRect, referenceElement: SVGElement): NodeList; \n    pauseAnimations(): void; \n    setCurrentTime(seconds: number): void; \n    suspendRedraw(maxWaitMilliseconds: number): number; \n    unpauseAnimations(): void; \n    unsuspendRedraw(suspendHandleID: number): void; \n    unsuspendRedrawAll(): void; \n    addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGotPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSLostPointerCapture", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "SVGAbort", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "SVGError", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "SVGUnload", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "SVGZoom", listener: (ev: SVGZoomEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ariarequest", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "command", listener: (ev: CommandEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focusin", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "focusout", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "gotpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "lostpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "resize", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchcancel", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchend", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchmove", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "touchstart", listener: (ev: TouchEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "webkitfullscreenerror", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGSVGElement: { \n    prototype: SVGSVGElement; \n    new(): SVGSVGElement; \n} \n \ninterface SVGScriptElement extends SVGElement, SVGExternalResourcesRequired, SVGURIReference { \n    type: string; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGScriptElement: { \n    prototype: SVGScriptElement; \n    new(): SVGScriptElement; \n} \n \ninterface SVGStopElement extends SVGElement, SVGStylable { \n    offset: SVGAnimatedNumber; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGStopElement: { \n    prototype: SVGStopElement; \n    new(): SVGStopElement; \n} \n \ninterface SVGStringList { \n    numberOfItems: number; \n    appendItem(newItem: string): string; \n    clear(): void; \n    getItem(index: number): string; \n    initialize(newItem: string): string; \n    insertItemBefore(newItem: string, index: number): string; \n    removeItem(index: number): string; \n    replaceItem(newItem: string, index: number): string; \n} \n \ndeclare var SVGStringList: { \n    prototype: SVGStringList; \n    new(): SVGStringList; \n} \n \ninterface SVGStyleElement extends SVGElement, SVGLangSpace { \n    media: string; \n    title: string; \n    type: string; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGStyleElement: { \n    prototype: SVGStyleElement; \n    new(): SVGStyleElement; \n} \n \ninterface SVGSwitchElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGSwitchElement: { \n    prototype: SVGSwitchElement; \n    new(): SVGSwitchElement; \n} \n \ninterface SVGSymbolElement extends SVGElement, SVGStylable, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGSymbolElement: { \n    prototype: SVGSymbolElement; \n    new(): SVGSymbolElement; \n} \n \ninterface SVGTSpanElement extends SVGTextPositioningElement { \n} \n \ndeclare var SVGTSpanElement: { \n    prototype: SVGTSpanElement; \n    new(): SVGTSpanElement; \n} \n \ninterface SVGTextContentElement extends SVGElement, SVGStylable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired { \n    lengthAdjust: SVGAnimatedEnumeration; \n    textLength: SVGAnimatedLength; \n    getCharNumAtPosition(point: SVGPoint): number; \n    getComputedTextLength(): number; \n    getEndPositionOfChar(charnum: number): SVGPoint; \n    getExtentOfChar(charnum: number): SVGRect; \n    getNumberOfChars(): number; \n    getRotationOfChar(charnum: number): number; \n    getStartPositionOfChar(charnum: number): SVGPoint; \n    getSubStringLength(charnum: number, nchars: number): number; \n    selectSubString(charnum: number, nchars: number): void; \n    LENGTHADJUST_SPACING: number; \n    LENGTHADJUST_SPACINGANDGLYPHS: number; \n    LENGTHADJUST_UNKNOWN: number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGTextContentElement: { \n    prototype: SVGTextContentElement; \n    new(): SVGTextContentElement; \n    LENGTHADJUST_SPACING: number; \n    LENGTHADJUST_SPACINGANDGLYPHS: number; \n    LENGTHADJUST_UNKNOWN: number; \n} \n \ninterface SVGTextElement extends SVGTextPositioningElement, SVGTransformable { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGTextElement: { \n    prototype: SVGTextElement; \n    new(): SVGTextElement; \n} \n \ninterface SVGTextPathElement extends SVGTextContentElement, SVGURIReference { \n    method: SVGAnimatedEnumeration; \n    spacing: SVGAnimatedEnumeration; \n    startOffset: SVGAnimatedLength; \n    TEXTPATH_METHODTYPE_ALIGN: number; \n    TEXTPATH_METHODTYPE_STRETCH: number; \n    TEXTPATH_METHODTYPE_UNKNOWN: number; \n    TEXTPATH_SPACINGTYPE_AUTO: number; \n    TEXTPATH_SPACINGTYPE_EXACT: number; \n    TEXTPATH_SPACINGTYPE_UNKNOWN: number; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGTextPathElement: { \n    prototype: SVGTextPathElement; \n    new(): SVGTextPathElement; \n    TEXTPATH_METHODTYPE_ALIGN: number; \n    TEXTPATH_METHODTYPE_STRETCH: number; \n    TEXTPATH_METHODTYPE_UNKNOWN: number; \n    TEXTPATH_SPACINGTYPE_AUTO: number; \n    TEXTPATH_SPACINGTYPE_EXACT: number; \n    TEXTPATH_SPACINGTYPE_UNKNOWN: number; \n} \n \ninterface SVGTextPositioningElement extends SVGTextContentElement { \n    dx: SVGAnimatedLengthList; \n    dy: SVGAnimatedLengthList; \n    rotate: SVGAnimatedNumberList; \n    x: SVGAnimatedLengthList; \n    y: SVGAnimatedLengthList; \n} \n \ndeclare var SVGTextPositioningElement: { \n    prototype: SVGTextPositioningElement; \n    new(): SVGTextPositioningElement; \n} \n \ninterface SVGTitleElement extends SVGElement, SVGStylable, SVGLangSpace { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGTitleElement: { \n    prototype: SVGTitleElement; \n    new(): SVGTitleElement; \n} \n \ninterface SVGTransform { \n    angle: number; \n    matrix: SVGMatrix; \n    type: number; \n    setMatrix(matrix: SVGMatrix): void; \n    setRotate(angle: number, cx: number, cy: number): void; \n    setScale(sx: number, sy: number): void; \n    setSkewX(angle: number): void; \n    setSkewY(angle: number): void; \n    setTranslate(tx: number, ty: number): void; \n    SVG_TRANSFORM_MATRIX: number; \n    SVG_TRANSFORM_ROTATE: number; \n    SVG_TRANSFORM_SCALE: number; \n    SVG_TRANSFORM_SKEWX: number; \n    SVG_TRANSFORM_SKEWY: number; \n    SVG_TRANSFORM_TRANSLATE: number; \n    SVG_TRANSFORM_UNKNOWN: number; \n} \n \ndeclare var SVGTransform: { \n    prototype: SVGTransform; \n    new(): SVGTransform; \n    SVG_TRANSFORM_MATRIX: number; \n    SVG_TRANSFORM_ROTATE: number; \n    SVG_TRANSFORM_SCALE: number; \n    SVG_TRANSFORM_SKEWX: number; \n    SVG_TRANSFORM_SKEWY: number; \n    SVG_TRANSFORM_TRANSLATE: number; \n    SVG_TRANSFORM_UNKNOWN: number; \n} \n \ninterface SVGTransformList { \n    numberOfItems: number; \n    appendItem(newItem: SVGTransform): SVGTransform; \n    clear(): void; \n    consolidate(): SVGTransform; \n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform; \n    getItem(index: number): SVGTransform; \n    initialize(newItem: SVGTransform): SVGTransform; \n    insertItemBefore(newItem: SVGTransform, index: number): SVGTransform; \n    removeItem(index: number): SVGTransform; \n    replaceItem(newItem: SVGTransform, index: number): SVGTransform; \n} \n \ndeclare var SVGTransformList: { \n    prototype: SVGTransformList; \n    new(): SVGTransformList; \n} \n \ninterface SVGUnitTypes { \n    SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number; \n    SVG_UNIT_TYPE_UNKNOWN: number; \n    SVG_UNIT_TYPE_USERSPACEONUSE: number; \n} \ndeclare var SVGUnitTypes: SVGUnitTypes; \n \ninterface SVGUseElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGURIReference { \n    animatedInstanceRoot: SVGElementInstance; \n    height: SVGAnimatedLength; \n    instanceRoot: SVGElementInstance; \n    width: SVGAnimatedLength; \n    x: SVGAnimatedLength; \n    y: SVGAnimatedLength; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGUseElement: { \n    prototype: SVGUseElement; \n    new(): SVGUseElement; \n} \n \ninterface SVGViewElement extends SVGElement, SVGExternalResourcesRequired, SVGFitToViewBox, SVGZoomAndPan { \n    viewTarget: SVGStringList; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var SVGViewElement: { \n    prototype: SVGViewElement; \n    new(): SVGViewElement; \n} \n \ninterface SVGZoomAndPan { \n    SVG_ZOOMANDPAN_DISABLE: number; \n    SVG_ZOOMANDPAN_MAGNIFY: number; \n    SVG_ZOOMANDPAN_UNKNOWN: number; \n} \ndeclare var SVGZoomAndPan: SVGZoomAndPan; \n \ninterface SVGZoomEvent extends UIEvent { \n    newScale: number; \n    newTranslate: SVGPoint; \n    previousScale: number; \n    previousTranslate: SVGPoint; \n    zoomRectScreen: SVGRect; \n} \n \ndeclare var SVGZoomEvent: { \n    prototype: SVGZoomEvent; \n    new(): SVGZoomEvent; \n} \n \ninterface Screen extends EventTarget { \n    availHeight: number; \n    availWidth: number; \n    bufferDepth: number; \n    colorDepth: number; \n    deviceXDPI: number; \n    deviceYDPI: number; \n    fontSmoothingEnabled: boolean; \n    height: number; \n    logicalXDPI: number; \n    logicalYDPI: number; \n    msOrientation: string; \n    onmsorientationchange: (ev: Event) => any; \n    pixelDepth: number; \n    systemXDPI: number; \n    systemYDPI: number; \n    width: number; \n    msLockOrientation(orientations: string | string[]): boolean; \n    msUnlockOrientation(): void; \n    addEventListener(type: "MSOrientationChange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var Screen: { \n    prototype: Screen; \n    new(): Screen; \n} \n \ninterface ScriptNotifyEvent extends Event { \n    callingUri: string; \n    value: string; \n} \n \ndeclare var ScriptNotifyEvent: { \n    prototype: ScriptNotifyEvent; \n    new(): ScriptNotifyEvent; \n} \n \ninterface ScriptProcessorNode extends AudioNode { \n    bufferSize: number; \n    onaudioprocess: (ev: AudioProcessingEvent) => any; \n    addEventListener(type: "audioprocess", listener: (ev: AudioProcessingEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var ScriptProcessorNode: { \n    prototype: ScriptProcessorNode; \n    new(): ScriptProcessorNode; \n} \n \ninterface Selection { \n    anchorNode: Node; \n    anchorOffset: number; \n    focusNode: Node; \n    focusOffset: number; \n    isCollapsed: boolean; \n    rangeCount: number; \n    type: string; \n    addRange(range: Range): void; \n    collapse(parentNode: Node, offset: number): void; \n    collapseToEnd(): void; \n    collapseToStart(): void; \n    containsNode(node: Node, partlyContained: boolean): boolean; \n    deleteFromDocument(): void; \n    empty(): void; \n    extend(newNode: Node, offset: number): void; \n    getRangeAt(index: number): Range; \n    removeAllRanges(): void; \n    removeRange(range: Range): void; \n    selectAllChildren(parentNode: Node): void; \n    setBaseAndExtent(baseNode: Node, baseOffset: number, extentNode: Node, extentOffset: number): void; \n    toString(): string; \n} \n \ndeclare var Selection: { \n    prototype: Selection; \n    new(): Selection; \n} \n \ninterface SourceBuffer extends EventTarget { \n    appendWindowEnd: number; \n    appendWindowStart: number; \n    audioTracks: AudioTrackList; \n    buffered: TimeRanges; \n    mode: string; \n    timestampOffset: number; \n    updating: boolean; \n    videoTracks: VideoTrackList; \n    abort(): void; \n    appendBuffer(data: ArrayBuffer | ArrayBufferView): void; \n    appendStream(stream: MSStream, maxSize?: number): void; \n    remove(start: number, end: number): void; \n} \n \ndeclare var SourceBuffer: { \n    prototype: SourceBuffer; \n    new(): SourceBuffer; \n} \n \ninterface SourceBufferList extends EventTarget { \n    length: number; \n    item(index: number): SourceBuffer; \n    [index: number]: SourceBuffer; \n} \n \ndeclare var SourceBufferList: { \n    prototype: SourceBufferList; \n    new(): SourceBufferList; \n} \n \ninterface StereoPannerNode extends AudioNode { \n    pan: AudioParam; \n} \n \ndeclare var StereoPannerNode: { \n    prototype: StereoPannerNode; \n    new(): StereoPannerNode; \n} \n \ninterface Storage { \n    length: number; \n    clear(): void; \n    getItem(key: string): any; \n    key(index: number): string; \n    removeItem(key: string): void; \n    setItem(key: string, data: string): void; \n    [key: string]: any; \n    [index: number]: string; \n} \n \ndeclare var Storage: { \n    prototype: Storage; \n    new(): Storage; \n} \n \ninterface StorageEvent extends Event { \n    key: string; \n    newValue: any; \n    oldValue: any; \n    storageArea: Storage; \n    url: string; \n    initStorageEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, keyArg: string, oldValueArg: any, newValueArg: any, urlArg: string, storageAreaArg: Storage): void; \n} \n \ndeclare var StorageEvent: { \n    prototype: StorageEvent; \n    new(): StorageEvent; \n} \n \ninterface StyleMedia { \n    type: string; \n    matchMedium(mediaquery: string): boolean; \n} \n \ndeclare var StyleMedia: { \n    prototype: StyleMedia; \n    new(): StyleMedia; \n} \n \ninterface StyleSheet { \n    disabled: boolean; \n    href: string; \n    media: MediaList; \n    ownerNode: Node; \n    parentStyleSheet: StyleSheet; \n    title: string; \n    type: string; \n} \n \ndeclare var StyleSheet: { \n    prototype: StyleSheet; \n    new(): StyleSheet; \n} \n \ninterface StyleSheetList { \n    length: number; \n    item(index?: number): StyleSheet; \n    [index: number]: StyleSheet; \n} \n \ndeclare var StyleSheetList: { \n    prototype: StyleSheetList; \n    new(): StyleSheetList; \n} \n \ninterface StyleSheetPageList { \n    length: number; \n    item(index: number): CSSPageRule; \n    [index: number]: CSSPageRule; \n} \n \ndeclare var StyleSheetPageList: { \n    prototype: StyleSheetPageList; \n    new(): StyleSheetPageList; \n} \n \ninterface SubtleCrypto { \n    decrypt(algorithm: string | Algorithm, key: CryptoKey, data: ArrayBufferView): any; \n    deriveBits(algorithm: string | Algorithm, baseKey: CryptoKey, length: number): any; \n    deriveKey(algorithm: string | Algorithm, baseKey: CryptoKey, derivedKeyType: string | Algorithm, extractable: boolean, keyUsages: string[]): any; \n    digest(algorithm: string | Algorithm, data: ArrayBufferView): any; \n    encrypt(algorithm: string | Algorithm, key: CryptoKey, data: ArrayBufferView): any; \n    exportKey(format: string, key: CryptoKey): any; \n    generateKey(algorithm: string | Algorithm, extractable: boolean, keyUsages: string[]): any; \n    importKey(format: string, keyData: ArrayBufferView, algorithm: string | Algorithm, extractable: boolean, keyUsages: string[]): any; \n    sign(algorithm: string | Algorithm, key: CryptoKey, data: ArrayBufferView): any; \n    unwrapKey(format: string, wrappedKey: ArrayBufferView, unwrappingKey: CryptoKey, unwrapAlgorithm: string | Algorithm, unwrappedKeyAlgorithm: string | Algorithm, extractable: boolean, keyUsages: string[]): any; \n    verify(algorithm: string | Algorithm, key: CryptoKey, signature: ArrayBufferView, data: ArrayBufferView): any; \n    wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: string | Algorithm): any; \n} \n \ndeclare var SubtleCrypto: { \n    prototype: SubtleCrypto; \n    new(): SubtleCrypto; \n} \n \ninterface Text extends CharacterData { \n    wholeText: string; \n    replaceWholeText(content: string): Text; \n    splitText(offset: number): Text; \n} \n \ndeclare var Text: { \n    prototype: Text; \n    new(): Text; \n} \n \ninterface TextEvent extends UIEvent { \n    data: string; \n    inputMethod: number; \n    locale: string; \n    initTextEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, inputMethod: number, locale: string): void; \n    DOM_INPUT_METHOD_DROP: number; \n    DOM_INPUT_METHOD_HANDWRITING: number; \n    DOM_INPUT_METHOD_IME: number; \n    DOM_INPUT_METHOD_KEYBOARD: number; \n    DOM_INPUT_METHOD_MULTIMODAL: number; \n    DOM_INPUT_METHOD_OPTION: number; \n    DOM_INPUT_METHOD_PASTE: number; \n    DOM_INPUT_METHOD_SCRIPT: number; \n    DOM_INPUT_METHOD_UNKNOWN: number; \n    DOM_INPUT_METHOD_VOICE: number; \n} \n \ndeclare var TextEvent: { \n    prototype: TextEvent; \n    new(): TextEvent; \n    DOM_INPUT_METHOD_DROP: number; \n    DOM_INPUT_METHOD_HANDWRITING: number; \n    DOM_INPUT_METHOD_IME: number; \n    DOM_INPUT_METHOD_KEYBOARD: number; \n    DOM_INPUT_METHOD_MULTIMODAL: number; \n    DOM_INPUT_METHOD_OPTION: number; \n    DOM_INPUT_METHOD_PASTE: number; \n    DOM_INPUT_METHOD_SCRIPT: number; \n    DOM_INPUT_METHOD_UNKNOWN: number; \n    DOM_INPUT_METHOD_VOICE: number; \n} \n \ninterface TextMetrics { \n    width: number; \n} \n \ndeclare var TextMetrics: { \n    prototype: TextMetrics; \n    new(): TextMetrics; \n} \n \ninterface TextRange { \n    boundingHeight: number; \n    boundingLeft: number; \n    boundingTop: number; \n    boundingWidth: number; \n    htmlText: string; \n    offsetLeft: number; \n    offsetTop: number; \n    text: string; \n    collapse(start?: boolean): void; \n    compareEndPoints(how: string, sourceRange: TextRange): number; \n    duplicate(): TextRange; \n    execCommand(cmdID: string, showUI?: boolean, value?: any): boolean; \n    execCommandShowHelp(cmdID: string): boolean; \n    expand(Unit: string): boolean; \n    findText(string: string, count?: number, flags?: number): boolean; \n    getBookmark(): string; \n    getBoundingClientRect(): ClientRect; \n    getClientRects(): ClientRectList; \n    inRange(range: TextRange): boolean; \n    isEqual(range: TextRange): boolean; \n    move(unit: string, count?: number): number; \n    moveEnd(unit: string, count?: number): number; \n    moveStart(unit: string, count?: number): number; \n    moveToBookmark(bookmark: string): boolean; \n    moveToElementText(element: Element): void; \n    moveToPoint(x: number, y: number): void; \n    parentElement(): Element; \n    pasteHTML(html: string): void; \n    queryCommandEnabled(cmdID: string): boolean; \n    queryCommandIndeterm(cmdID: string): boolean; \n    queryCommandState(cmdID: string): boolean; \n    queryCommandSupported(cmdID: string): boolean; \n    queryCommandText(cmdID: string): string; \n    queryCommandValue(cmdID: string): any; \n    scrollIntoView(fStart?: boolean): void; \n    select(): void; \n    setEndPoint(how: string, SourceRange: TextRange): void; \n} \n \ndeclare var TextRange: { \n    prototype: TextRange; \n    new(): TextRange; \n} \n \ninterface TextRangeCollection { \n    length: number; \n    item(index: number): TextRange; \n    [index: number]: TextRange; \n} \n \ndeclare var TextRangeCollection: { \n    prototype: TextRangeCollection; \n    new(): TextRangeCollection; \n} \n \ninterface TextTrack extends EventTarget { \n    activeCues: TextTrackCueList; \n    cues: TextTrackCueList; \n    inBandMetadataTrackDispatchType: string; \n    kind: string; \n    label: string; \n    language: string; \n    mode: any; \n    oncuechange: (ev: Event) => any; \n    onerror: (ev: Event) => any; \n    onload: (ev: Event) => any; \n    readyState: number; \n    addCue(cue: TextTrackCue): void; \n    removeCue(cue: TextTrackCue): void; \n    DISABLED: number; \n    ERROR: number; \n    HIDDEN: number; \n    LOADED: number; \n    LOADING: number; \n    NONE: number; \n    SHOWING: number; \n    addEventListener(type: "cuechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var TextTrack: { \n    prototype: TextTrack; \n    new(): TextTrack; \n    DISABLED: number; \n    ERROR: number; \n    HIDDEN: number; \n    LOADED: number; \n    LOADING: number; \n    NONE: number; \n    SHOWING: number; \n} \n \ninterface TextTrackCue extends EventTarget { \n    endTime: number; \n    id: string; \n    onenter: (ev: Event) => any; \n    onexit: (ev: Event) => any; \n    pauseOnExit: boolean; \n    startTime: number; \n    text: string; \n    track: TextTrack; \n    getCueAsHTML(): DocumentFragment; \n    addEventListener(type: "enter", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "exit", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var TextTrackCue: { \n    prototype: TextTrackCue; \n    new(startTime: number, endTime: number, text: string): TextTrackCue; \n} \n \ninterface TextTrackCueList { \n    length: number; \n    getCueById(id: string): TextTrackCue; \n    item(index: number): TextTrackCue; \n    [index: number]: TextTrackCue; \n} \n \ndeclare var TextTrackCueList: { \n    prototype: TextTrackCueList; \n    new(): TextTrackCueList; \n} \n \ninterface TextTrackList extends EventTarget { \n    length: number; \n    onaddtrack: (ev: TrackEvent) => any; \n    item(index: number): TextTrack; \n    addEventListener(type: "addtrack", listener: (ev: TrackEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n    [index: number]: TextTrack; \n} \n \ndeclare var TextTrackList: { \n    prototype: TextTrackList; \n    new(): TextTrackList; \n} \n \ninterface TimeRanges { \n    length: number; \n    end(index: number): number; \n    start(index: number): number; \n} \n \ndeclare var TimeRanges: { \n    prototype: TimeRanges; \n    new(): TimeRanges; \n} \n \ninterface Touch { \n    clientX: number; \n    clientY: number; \n    identifier: number; \n    pageX: number; \n    pageY: number; \n    screenX: number; \n    screenY: number; \n    target: EventTarget; \n} \n \ndeclare var Touch: { \n    prototype: Touch; \n    new(): Touch; \n} \n \ninterface TouchEvent extends UIEvent { \n    altKey: boolean; \n    changedTouches: TouchList; \n    ctrlKey: boolean; \n    metaKey: boolean; \n    shiftKey: boolean; \n    targetTouches: TouchList; \n    touches: TouchList; \n} \n \ndeclare var TouchEvent: { \n    prototype: TouchEvent; \n    new(): TouchEvent; \n} \n \ninterface TouchList { \n    length: number; \n    item(index: number): Touch; \n    [index: number]: Touch; \n} \n \ndeclare var TouchList: { \n    prototype: TouchList; \n    new(): TouchList; \n} \n \ninterface TrackEvent extends Event { \n    track: any; \n} \n \ndeclare var TrackEvent: { \n    prototype: TrackEvent; \n    new(): TrackEvent; \n} \n \ninterface TransitionEvent extends Event { \n    elapsedTime: number; \n    propertyName: string; \n    initTransitionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, propertyNameArg: string, elapsedTimeArg: number): void; \n} \n \ndeclare var TransitionEvent: { \n    prototype: TransitionEvent; \n    new(): TransitionEvent; \n} \n \ninterface TreeWalker { \n    currentNode: Node; \n    expandEntityReferences: boolean; \n    filter: NodeFilter; \n    root: Node; \n    whatToShow: number; \n    firstChild(): Node; \n    lastChild(): Node; \n    nextNode(): Node; \n    nextSibling(): Node; \n    parentNode(): Node; \n    previousNode(): Node; \n    previousSibling(): Node; \n} \n \ndeclare var TreeWalker: { \n    prototype: TreeWalker; \n    new(): TreeWalker; \n} \n \ninterface UIEvent extends Event { \n    detail: number; \n    view: Window; \n    initUIEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number): void; \n} \n \ndeclare var UIEvent: { \n    prototype: UIEvent; \n    new(type: string, eventInitDict?: UIEventInit): UIEvent; \n} \n \ninterface URL { \n    createObjectURL(object: any, options?: ObjectURLOptions): string; \n    revokeObjectURL(url: string): void; \n} \ndeclare var URL: URL; \n \ninterface UnviewableContentIdentifiedEvent extends NavigationEventWithReferrer { \n    mediaType: string; \n} \n \ndeclare var UnviewableContentIdentifiedEvent: { \n    prototype: UnviewableContentIdentifiedEvent; \n    new(): UnviewableContentIdentifiedEvent; \n} \n \ninterface ValidityState { \n    badInput: boolean; \n    customError: boolean; \n    patternMismatch: boolean; \n    rangeOverflow: boolean; \n    rangeUnderflow: boolean; \n    stepMismatch: boolean; \n    tooLong: boolean; \n    typeMismatch: boolean; \n    valid: boolean; \n    valueMissing: boolean; \n} \n \ndeclare var ValidityState: { \n    prototype: ValidityState; \n    new(): ValidityState; \n} \n \ninterface VideoPlaybackQuality { \n    corruptedVideoFrames: number; \n    creationTime: number; \n    droppedVideoFrames: number; \n    totalFrameDelay: number; \n    totalVideoFrames: number; \n} \n \ndeclare var VideoPlaybackQuality: { \n    prototype: VideoPlaybackQuality; \n    new(): VideoPlaybackQuality; \n} \n \ninterface VideoTrack { \n    id: string; \n    kind: string; \n    label: string; \n    language: string; \n    selected: boolean; \n    sourceBuffer: SourceBuffer; \n} \n \ndeclare var VideoTrack: { \n    prototype: VideoTrack; \n    new(): VideoTrack; \n} \n \ninterface VideoTrackList extends EventTarget { \n    length: number; \n    onaddtrack: (ev: TrackEvent) => any; \n    onchange: (ev: Event) => any; \n    onremovetrack: (ev: TrackEvent) => any; \n    selectedIndex: number; \n    getTrackById(id: string): VideoTrack; \n    item(index: number): VideoTrack; \n    addEventListener(type: "addtrack", listener: (ev: TrackEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "removetrack", listener: (ev: TrackEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n    [index: number]: VideoTrack; \n} \n \ndeclare var VideoTrackList: { \n    prototype: VideoTrackList; \n    new(): VideoTrackList; \n} \n \ninterface WEBGL_compressed_texture_s3tc { \n    COMPRESSED_RGBA_S3TC_DXT1_EXT: number; \n    COMPRESSED_RGBA_S3TC_DXT3_EXT: number; \n    COMPRESSED_RGBA_S3TC_DXT5_EXT: number; \n    COMPRESSED_RGB_S3TC_DXT1_EXT: number; \n} \n \ndeclare var WEBGL_compressed_texture_s3tc: { \n    prototype: WEBGL_compressed_texture_s3tc; \n    new(): WEBGL_compressed_texture_s3tc; \n    COMPRESSED_RGBA_S3TC_DXT1_EXT: number; \n    COMPRESSED_RGBA_S3TC_DXT3_EXT: number; \n    COMPRESSED_RGBA_S3TC_DXT5_EXT: number; \n    COMPRESSED_RGB_S3TC_DXT1_EXT: number; \n} \n \ninterface WEBGL_debug_renderer_info { \n    UNMASKED_RENDERER_WEBGL: number; \n    UNMASKED_VENDOR_WEBGL: number; \n} \n \ndeclare var WEBGL_debug_renderer_info: { \n    prototype: WEBGL_debug_renderer_info; \n    new(): WEBGL_debug_renderer_info; \n    UNMASKED_RENDERER_WEBGL: number; \n    UNMASKED_VENDOR_WEBGL: number; \n} \n \ninterface WEBGL_depth_texture { \n    UNSIGNED_INT_24_8_WEBGL: number; \n} \n \ndeclare var WEBGL_depth_texture: { \n    prototype: WEBGL_depth_texture; \n    new(): WEBGL_depth_texture; \n    UNSIGNED_INT_24_8_WEBGL: number; \n} \n \ninterface WaveShaperNode extends AudioNode { \n    curve: any; \n    oversample: string; \n} \n \ndeclare var WaveShaperNode: { \n    prototype: WaveShaperNode; \n    new(): WaveShaperNode; \n} \n \ninterface WebGLActiveInfo { \n    name: string; \n    size: number; \n    type: number; \n} \n \ndeclare var WebGLActiveInfo: { \n    prototype: WebGLActiveInfo; \n    new(): WebGLActiveInfo; \n} \n \ninterface WebGLBuffer extends WebGLObject { \n} \n \ndeclare var WebGLBuffer: { \n    prototype: WebGLBuffer; \n    new(): WebGLBuffer; \n} \n \ninterface WebGLContextEvent extends Event { \n    statusMessage: string; \n} \n \ndeclare var WebGLContextEvent: { \n    prototype: WebGLContextEvent; \n    new(): WebGLContextEvent; \n} \n \ninterface WebGLFramebuffer extends WebGLObject { \n} \n \ndeclare var WebGLFramebuffer: { \n    prototype: WebGLFramebuffer; \n    new(): WebGLFramebuffer; \n} \n \ninterface WebGLObject { \n} \n \ndeclare var WebGLObject: { \n    prototype: WebGLObject; \n    new(): WebGLObject; \n} \n \ninterface WebGLProgram extends WebGLObject { \n} \n \ndeclare var WebGLProgram: { \n    prototype: WebGLProgram; \n    new(): WebGLProgram; \n} \n \ninterface WebGLRenderbuffer extends WebGLObject { \n} \n \ndeclare var WebGLRenderbuffer: { \n    prototype: WebGLRenderbuffer; \n    new(): WebGLRenderbuffer; \n} \n \ninterface WebGLRenderingContext { \n    canvas: HTMLCanvasElement; \n    drawingBufferHeight: number; \n    drawingBufferWidth: number; \n    activeTexture(texture: number): void; \n    attachShader(program: WebGLProgram, shader: WebGLShader): void; \n    bindAttribLocation(program: WebGLProgram, index: number, name: string): void; \n    bindBuffer(target: number, buffer: WebGLBuffer): void; \n    bindFramebuffer(target: number, framebuffer: WebGLFramebuffer): void; \n    bindRenderbuffer(target: number, renderbuffer: WebGLRenderbuffer): void; \n    bindTexture(target: number, texture: WebGLTexture): void; \n    blendColor(red: number, green: number, blue: number, alpha: number): void; \n    blendEquation(mode: number): void; \n    blendEquationSeparate(modeRGB: number, modeAlpha: number): void; \n    blendFunc(sfactor: number, dfactor: number): void; \n    blendFuncSeparate(srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void; \n    bufferData(target: number, size: number | ArrayBufferView | ArrayBuffer, usage: number): void; \n    bufferSubData(target: number, offset: number, data: ArrayBufferView | ArrayBuffer): void; \n    checkFramebufferStatus(target: number): number; \n    clear(mask: number): void; \n    clearColor(red: number, green: number, blue: number, alpha: number): void; \n    clearDepth(depth: number): void; \n    clearStencil(s: number): void; \n    colorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): void; \n    compileShader(shader: WebGLShader): void; \n    compressedTexImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, data: ArrayBufferView): void; \n    compressedTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, data: ArrayBufferView): void; \n    copyTexImage2D(target: number, level: number, internalformat: number, x: number, y: number, width: number, height: number, border: number): void; \n    copyTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number): void; \n    createBuffer(): WebGLBuffer; \n    createFramebuffer(): WebGLFramebuffer; \n    createProgram(): WebGLProgram; \n    createRenderbuffer(): WebGLRenderbuffer; \n    createShader(type: number): WebGLShader; \n    createTexture(): WebGLTexture; \n    cullFace(mode: number): void; \n    deleteBuffer(buffer: WebGLBuffer): void; \n    deleteFramebuffer(framebuffer: WebGLFramebuffer): void; \n    deleteProgram(program: WebGLProgram): void; \n    deleteRenderbuffer(renderbuffer: WebGLRenderbuffer): void; \n    deleteShader(shader: WebGLShader): void; \n    deleteTexture(texture: WebGLTexture): void; \n    depthFunc(func: number): void; \n    depthMask(flag: boolean): void; \n    depthRange(zNear: number, zFar: number): void; \n    detachShader(program: WebGLProgram, shader: WebGLShader): void; \n    disable(cap: number): void; \n    disableVertexAttribArray(index: number): void; \n    drawArrays(mode: number, first: number, count: number): void; \n    drawElements(mode: number, count: number, type: number, offset: number): void; \n    enable(cap: number): void; \n    enableVertexAttribArray(index: number): void; \n    finish(): void; \n    flush(): void; \n    framebufferRenderbuffer(target: number, attachment: number, renderbuffertarget: number, renderbuffer: WebGLRenderbuffer): void; \n    framebufferTexture2D(target: number, attachment: number, textarget: number, texture: WebGLTexture, level: number): void; \n    frontFace(mode: number): void; \n    generateMipmap(target: number): void; \n    getActiveAttrib(program: WebGLProgram, index: number): WebGLActiveInfo; \n    getActiveUniform(program: WebGLProgram, index: number): WebGLActiveInfo; \n    getAttachedShaders(program: WebGLProgram): WebGLShader[]; \n    getAttribLocation(program: WebGLProgram, name: string): number; \n    getBufferParameter(target: number, pname: number): any; \n    getContextAttributes(): WebGLContextAttributes; \n    getError(): number; \n    getExtension(name: string): any; \n    getFramebufferAttachmentParameter(target: number, attachment: number, pname: number): any; \n    getParameter(pname: number): any; \n    getProgramInfoLog(program: WebGLProgram): string; \n    getProgramParameter(program: WebGLProgram, pname: number): any; \n    getRenderbufferParameter(target: number, pname: number): any; \n    getShaderInfoLog(shader: WebGLShader): string; \n    getShaderParameter(shader: WebGLShader, pname: number): any; \n    getShaderPrecisionFormat(shadertype: number, precisiontype: number): WebGLShaderPrecisionFormat; \n    getShaderSource(shader: WebGLShader): string; \n    getSupportedExtensions(): string[]; \n    getTexParameter(target: number, pname: number): any; \n    getUniform(program: WebGLProgram, location: WebGLUniformLocation): any; \n    getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation; \n    getVertexAttrib(index: number, pname: number): any; \n    getVertexAttribOffset(index: number, pname: number): number; \n    hint(target: number, mode: number): void; \n    isBuffer(buffer: WebGLBuffer): boolean; \n    isContextLost(): boolean; \n    isEnabled(cap: number): boolean; \n    isFramebuffer(framebuffer: WebGLFramebuffer): boolean; \n    isProgram(program: WebGLProgram): boolean; \n    isRenderbuffer(renderbuffer: WebGLRenderbuffer): boolean; \n    isShader(shader: WebGLShader): boolean; \n    isTexture(texture: WebGLTexture): boolean; \n    lineWidth(width: number): void; \n    linkProgram(program: WebGLProgram): void; \n    pixelStorei(pname: number, param: number): void; \n    polygonOffset(factor: number, units: number): void; \n    readPixels(x: number, y: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void; \n    renderbufferStorage(target: number, internalformat: number, width: number, height: number): void; \n    sampleCoverage(value: number, invert: boolean): void; \n    scissor(x: number, y: number, width: number, height: number): void; \n    shaderSource(shader: WebGLShader, source: string): void; \n    stencilFunc(func: number, ref: number, mask: number): void; \n    stencilFuncSeparate(face: number, func: number, ref: number, mask: number): void; \n    stencilMask(mask: number): void; \n    stencilMaskSeparate(face: number, mask: number): void; \n    stencilOp(fail: number, zfail: number, zpass: number): void; \n    stencilOpSeparate(face: number, fail: number, zfail: number, zpass: number): void; \n    texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: ArrayBufferView): void; \n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, image: HTMLImageElement): void; \n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, canvas: HTMLCanvasElement): void; \n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, video: HTMLVideoElement): void; \n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, pixels: ImageData): void; \n    texParameterf(target: number, pname: number, param: number): void; \n    texParameteri(target: number, pname: number, param: number): void; \n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void; \n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, image: HTMLImageElement): void; \n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, canvas: HTMLCanvasElement): void; \n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, video: HTMLVideoElement): void; \n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, pixels: ImageData): void; \n    uniform1f(location: WebGLUniformLocation, x: number): void; \n    uniform1fv(location: WebGLUniformLocation, v: any): void; \n    uniform1i(location: WebGLUniformLocation, x: number): void; \n    uniform1iv(location: WebGLUniformLocation, v: Int32Array): void; \n    uniform2f(location: WebGLUniformLocation, x: number, y: number): void; \n    uniform2fv(location: WebGLUniformLocation, v: any): void; \n    uniform2i(location: WebGLUniformLocation, x: number, y: number): void; \n    uniform2iv(location: WebGLUniformLocation, v: Int32Array): void; \n    uniform3f(location: WebGLUniformLocation, x: number, y: number, z: number): void; \n    uniform3fv(location: WebGLUniformLocation, v: any): void; \n    uniform3i(location: WebGLUniformLocation, x: number, y: number, z: number): void; \n    uniform3iv(location: WebGLUniformLocation, v: Int32Array): void; \n    uniform4f(location: WebGLUniformLocation, x: number, y: number, z: number, w: number): void; \n    uniform4fv(location: WebGLUniformLocation, v: any): void; \n    uniform4i(location: WebGLUniformLocation, x: number, y: number, z: number, w: number): void; \n    uniform4iv(location: WebGLUniformLocation, v: Int32Array): void; \n    uniformMatrix2fv(location: WebGLUniformLocation, transpose: boolean, value: any): void; \n    uniformMatrix3fv(location: WebGLUniformLocation, transpose: boolean, value: any): void; \n    uniformMatrix4fv(location: WebGLUniformLocation, transpose: boolean, value: any): void; \n    useProgram(program: WebGLProgram): void; \n    validateProgram(program: WebGLProgram): void; \n    vertexAttrib1f(indx: number, x: number): void; \n    vertexAttrib1fv(indx: number, values: any): void; \n    vertexAttrib2f(indx: number, x: number, y: number): void; \n    vertexAttrib2fv(indx: number, values: any): void; \n    vertexAttrib3f(indx: number, x: number, y: number, z: number): void; \n    vertexAttrib3fv(indx: number, values: any): void; \n    vertexAttrib4f(indx: number, x: number, y: number, z: number, w: number): void; \n    vertexAttrib4fv(indx: number, values: any): void; \n    vertexAttribPointer(indx: number, size: number, type: number, normalized: boolean, stride: number, offset: number): void; \n    viewport(x: number, y: number, width: number, height: number): void; \n    ACTIVE_ATTRIBUTES: number; \n    ACTIVE_TEXTURE: number; \n    ACTIVE_UNIFORMS: number; \n    ALIASED_LINE_WIDTH_RANGE: number; \n    ALIASED_POINT_SIZE_RANGE: number; \n    ALPHA: number; \n    ALPHA_BITS: number; \n    ALWAYS: number; \n    ARRAY_BUFFER: number; \n    ARRAY_BUFFER_BINDING: number; \n    ATTACHED_SHADERS: number; \n    BACK: number; \n    BLEND: number; \n    BLEND_COLOR: number; \n    BLEND_DST_ALPHA: number; \n    BLEND_DST_RGB: number; \n    BLEND_EQUATION: number; \n    BLEND_EQUATION_ALPHA: number; \n    BLEND_EQUATION_RGB: number; \n    BLEND_SRC_ALPHA: number; \n    BLEND_SRC_RGB: number; \n    BLUE_BITS: number; \n    BOOL: number; \n    BOOL_VEC2: number; \n    BOOL_VEC3: number; \n    BOOL_VEC4: number; \n    BROWSER_DEFAULT_WEBGL: number; \n    BUFFER_SIZE: number; \n    BUFFER_USAGE: number; \n    BYTE: number; \n    CCW: number; \n    CLAMP_TO_EDGE: number; \n    COLOR_ATTACHMENT0: number; \n    COLOR_BUFFER_BIT: number; \n    COLOR_CLEAR_VALUE: number; \n    COLOR_WRITEMASK: number; \n    COMPILE_STATUS: number; \n    COMPRESSED_TEXTURE_FORMATS: number; \n    CONSTANT_ALPHA: number; \n    CONSTANT_COLOR: number; \n    CONTEXT_LOST_WEBGL: number; \n    CULL_FACE: number; \n    CULL_FACE_MODE: number; \n    CURRENT_PROGRAM: number; \n    CURRENT_VERTEX_ATTRIB: number; \n    CW: number; \n    DECR: number; \n    DECR_WRAP: number; \n    DELETE_STATUS: number; \n    DEPTH_ATTACHMENT: number; \n    DEPTH_BITS: number; \n    DEPTH_BUFFER_BIT: number; \n    DEPTH_CLEAR_VALUE: number; \n    DEPTH_COMPONENT: number; \n    DEPTH_COMPONENT16: number; \n    DEPTH_FUNC: number; \n    DEPTH_RANGE: number; \n    DEPTH_STENCIL: number; \n    DEPTH_STENCIL_ATTACHMENT: number; \n    DEPTH_TEST: number; \n    DEPTH_WRITEMASK: number; \n    DITHER: number; \n    DONT_CARE: number; \n    DST_ALPHA: number; \n    DST_COLOR: number; \n    DYNAMIC_DRAW: number; \n    ELEMENT_ARRAY_BUFFER: number; \n    ELEMENT_ARRAY_BUFFER_BINDING: number; \n    EQUAL: number; \n    FASTEST: number; \n    FLOAT: number; \n    FLOAT_MAT2: number; \n    FLOAT_MAT3: number; \n    FLOAT_MAT4: number; \n    FLOAT_VEC2: number; \n    FLOAT_VEC3: number; \n    FLOAT_VEC4: number; \n    FRAGMENT_SHADER: number; \n    FRAMEBUFFER: number; \n    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number; \n    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number; \n    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number; \n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number; \n    FRAMEBUFFER_BINDING: number; \n    FRAMEBUFFER_COMPLETE: number; \n    FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number; \n    FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number; \n    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number; \n    FRAMEBUFFER_UNSUPPORTED: number; \n    FRONT: number; \n    FRONT_AND_BACK: number; \n    FRONT_FACE: number; \n    FUNC_ADD: number; \n    FUNC_REVERSE_SUBTRACT: number; \n    FUNC_SUBTRACT: number; \n    GENERATE_MIPMAP_HINT: number; \n    GEQUAL: number; \n    GREATER: number; \n    GREEN_BITS: number; \n    HIGH_FLOAT: number; \n    HIGH_INT: number; \n    IMPLEMENTATION_COLOR_READ_FORMAT: number; \n    IMPLEMENTATION_COLOR_READ_TYPE: number; \n    INCR: number; \n    INCR_WRAP: number; \n    INT: number; \n    INT_VEC2: number; \n    INT_VEC3: number; \n    INT_VEC4: number; \n    INVALID_ENUM: number; \n    INVALID_FRAMEBUFFER_OPERATION: number; \n    INVALID_OPERATION: number; \n    INVALID_VALUE: number; \n    INVERT: number; \n    KEEP: number; \n    LEQUAL: number; \n    LESS: number; \n    LINEAR: number; \n    LINEAR_MIPMAP_LINEAR: number; \n    LINEAR_MIPMAP_NEAREST: number; \n    LINES: number; \n    LINE_LOOP: number; \n    LINE_STRIP: number; \n    LINE_WIDTH: number; \n    LINK_STATUS: number; \n    LOW_FLOAT: number; \n    LOW_INT: number; \n    LUMINANCE: number; \n    LUMINANCE_ALPHA: number; \n    MAX_COMBINED_TEXTURE_IMAGE_UNITS: number; \n    MAX_CUBE_MAP_TEXTURE_SIZE: number; \n    MAX_FRAGMENT_UNIFORM_VECTORS: number; \n    MAX_RENDERBUFFER_SIZE: number; \n    MAX_TEXTURE_IMAGE_UNITS: number; \n    MAX_TEXTURE_SIZE: number; \n    MAX_VARYING_VECTORS: number; \n    MAX_VERTEX_ATTRIBS: number; \n    MAX_VERTEX_TEXTURE_IMAGE_UNITS: number; \n    MAX_VERTEX_UNIFORM_VECTORS: number; \n    MAX_VIEWPORT_DIMS: number; \n    MEDIUM_FLOAT: number; \n    MEDIUM_INT: number; \n    MIRRORED_REPEAT: number; \n    NEAREST: number; \n    NEAREST_MIPMAP_LINEAR: number; \n    NEAREST_MIPMAP_NEAREST: number; \n    NEVER: number; \n    NICEST: number; \n    NONE: number; \n    NOTEQUAL: number; \n    NO_ERROR: number; \n    ONE: number; \n    ONE_MINUS_CONSTANT_ALPHA: number; \n    ONE_MINUS_CONSTANT_COLOR: number; \n    ONE_MINUS_DST_ALPHA: number; \n    ONE_MINUS_DST_COLOR: number; \n    ONE_MINUS_SRC_ALPHA: number; \n    ONE_MINUS_SRC_COLOR: number; \n    OUT_OF_MEMORY: number; \n    PACK_ALIGNMENT: number; \n    POINTS: number; \n    POLYGON_OFFSET_FACTOR: number; \n    POLYGON_OFFSET_FILL: number; \n    POLYGON_OFFSET_UNITS: number; \n    RED_BITS: number; \n    RENDERBUFFER: number; \n    RENDERBUFFER_ALPHA_SIZE: number; \n    RENDERBUFFER_BINDING: number; \n    RENDERBUFFER_BLUE_SIZE: number; \n    RENDERBUFFER_DEPTH_SIZE: number; \n    RENDERBUFFER_GREEN_SIZE: number; \n    RENDERBUFFER_HEIGHT: number; \n    RENDERBUFFER_INTERNAL_FORMAT: number; \n    RENDERBUFFER_RED_SIZE: number; \n    RENDERBUFFER_STENCIL_SIZE: number; \n    RENDERBUFFER_WIDTH: number; \n    RENDERER: number; \n    REPEAT: number; \n    REPLACE: number; \n    RGB: number; \n    RGB565: number; \n    RGB5_A1: number; \n    RGBA: number; \n    RGBA4: number; \n    SAMPLER_2D: number; \n    SAMPLER_CUBE: number; \n    SAMPLES: number; \n    SAMPLE_ALPHA_TO_COVERAGE: number; \n    SAMPLE_BUFFERS: number; \n    SAMPLE_COVERAGE: number; \n    SAMPLE_COVERAGE_INVERT: number; \n    SAMPLE_COVERAGE_VALUE: number; \n    SCISSOR_BOX: number; \n    SCISSOR_TEST: number; \n    SHADER_TYPE: number; \n    SHADING_LANGUAGE_VERSION: number; \n    SHORT: number; \n    SRC_ALPHA: number; \n    SRC_ALPHA_SATURATE: number; \n    SRC_COLOR: number; \n    STATIC_DRAW: number; \n    STENCIL_ATTACHMENT: number; \n    STENCIL_BACK_FAIL: number; \n    STENCIL_BACK_FUNC: number; \n    STENCIL_BACK_PASS_DEPTH_FAIL: number; \n    STENCIL_BACK_PASS_DEPTH_PASS: number; \n    STENCIL_BACK_REF: number; \n    STENCIL_BACK_VALUE_MASK: number; \n    STENCIL_BACK_WRITEMASK: number; \n    STENCIL_BITS: number; \n    STENCIL_BUFFER_BIT: number; \n    STENCIL_CLEAR_VALUE: number; \n    STENCIL_FAIL: number; \n    STENCIL_FUNC: number; \n    STENCIL_INDEX: number; \n    STENCIL_INDEX8: number; \n    STENCIL_PASS_DEPTH_FAIL: number; \n    STENCIL_PASS_DEPTH_PASS: number; \n    STENCIL_REF: number; \n    STENCIL_TEST: number; \n    STENCIL_VALUE_MASK: number; \n    STENCIL_WRITEMASK: number; \n    STREAM_DRAW: number; \n    SUBPIXEL_BITS: number; \n    TEXTURE: number; \n    TEXTURE0: number; \n    TEXTURE1: number; \n    TEXTURE10: number; \n    TEXTURE11: number; \n    TEXTURE12: number; \n    TEXTURE13: number; \n    TEXTURE14: number; \n    TEXTURE15: number; \n    TEXTURE16: number; \n    TEXTURE17: number; \n    TEXTURE18: number; \n    TEXTURE19: number; \n    TEXTURE2: number; \n    TEXTURE20: number; \n    TEXTURE21: number; \n    TEXTURE22: number; \n    TEXTURE23: number; \n    TEXTURE24: number; \n    TEXTURE25: number; \n    TEXTURE26: number; \n    TEXTURE27: number; \n    TEXTURE28: number; \n    TEXTURE29: number; \n    TEXTURE3: number; \n    TEXTURE30: number; \n    TEXTURE31: number; \n    TEXTURE4: number; \n    TEXTURE5: number; \n    TEXTURE6: number; \n    TEXTURE7: number; \n    TEXTURE8: number; \n    TEXTURE9: number; \n    TEXTURE_2D: number; \n    TEXTURE_BINDING_2D: number; \n    TEXTURE_BINDING_CUBE_MAP: number; \n    TEXTURE_CUBE_MAP: number; \n    TEXTURE_CUBE_MAP_NEGATIVE_X: number; \n    TEXTURE_CUBE_MAP_NEGATIVE_Y: number; \n    TEXTURE_CUBE_MAP_NEGATIVE_Z: number; \n    TEXTURE_CUBE_MAP_POSITIVE_X: number; \n    TEXTURE_CUBE_MAP_POSITIVE_Y: number; \n    TEXTURE_CUBE_MAP_POSITIVE_Z: number; \n    TEXTURE_MAG_FILTER: number; \n    TEXTURE_MIN_FILTER: number; \n    TEXTURE_WRAP_S: number; \n    TEXTURE_WRAP_T: number; \n    TRIANGLES: number; \n    TRIANGLE_FAN: number; \n    TRIANGLE_STRIP: number; \n    UNPACK_ALIGNMENT: number; \n    UNPACK_COLORSPACE_CONVERSION_WEBGL: number; \n    UNPACK_FLIP_Y_WEBGL: number; \n    UNPACK_PREMULTIPLY_ALPHA_WEBGL: number; \n    UNSIGNED_BYTE: number; \n    UNSIGNED_INT: number; \n    UNSIGNED_SHORT: number; \n    UNSIGNED_SHORT_4_4_4_4: number; \n    UNSIGNED_SHORT_5_5_5_1: number; \n    UNSIGNED_SHORT_5_6_5: number; \n    VALIDATE_STATUS: number; \n    VENDOR: number; \n    VERSION: number; \n    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number; \n    VERTEX_ATTRIB_ARRAY_ENABLED: number; \n    VERTEX_ATTRIB_ARRAY_NORMALIZED: number; \n    VERTEX_ATTRIB_ARRAY_POINTER: number; \n    VERTEX_ATTRIB_ARRAY_SIZE: number; \n    VERTEX_ATTRIB_ARRAY_STRIDE: number; \n    VERTEX_ATTRIB_ARRAY_TYPE: number; \n    VERTEX_SHADER: number; \n    VIEWPORT: number; \n    ZERO: number; \n} \n \ndeclare var WebGLRenderingContext: { \n    prototype: WebGLRenderingContext; \n    new(): WebGLRenderingContext; \n    ACTIVE_ATTRIBUTES: number; \n    ACTIVE_TEXTURE: number; \n    ACTIVE_UNIFORMS: number; \n    ALIASED_LINE_WIDTH_RANGE: number; \n    ALIASED_POINT_SIZE_RANGE: number; \n    ALPHA: number; \n    ALPHA_BITS: number; \n    ALWAYS: number; \n    ARRAY_BUFFER: number; \n    ARRAY_BUFFER_BINDING: number; \n    ATTACHED_SHADERS: number; \n    BACK: number; \n    BLEND: number; \n    BLEND_COLOR: number; \n    BLEND_DST_ALPHA: number; \n    BLEND_DST_RGB: number; \n    BLEND_EQUATION: number; \n    BLEND_EQUATION_ALPHA: number; \n    BLEND_EQUATION_RGB: number; \n    BLEND_SRC_ALPHA: number; \n    BLEND_SRC_RGB: number; \n    BLUE_BITS: number; \n    BOOL: number; \n    BOOL_VEC2: number; \n    BOOL_VEC3: number; \n    BOOL_VEC4: number; \n    BROWSER_DEFAULT_WEBGL: number; \n    BUFFER_SIZE: number; \n    BUFFER_USAGE: number; \n    BYTE: number; \n    CCW: number; \n    CLAMP_TO_EDGE: number; \n    COLOR_ATTACHMENT0: number; \n    COLOR_BUFFER_BIT: number; \n    COLOR_CLEAR_VALUE: number; \n    COLOR_WRITEMASK: number; \n    COMPILE_STATUS: number; \n    COMPRESSED_TEXTURE_FORMATS: number; \n    CONSTANT_ALPHA: number; \n    CONSTANT_COLOR: number; \n    CONTEXT_LOST_WEBGL: number; \n    CULL_FACE: number; \n    CULL_FACE_MODE: number; \n    CURRENT_PROGRAM: number; \n    CURRENT_VERTEX_ATTRIB: number; \n    CW: number; \n    DECR: number; \n    DECR_WRAP: number; \n    DELETE_STATUS: number; \n    DEPTH_ATTACHMENT: number; \n    DEPTH_BITS: number; \n    DEPTH_BUFFER_BIT: number; \n    DEPTH_CLEAR_VALUE: number; \n    DEPTH_COMPONENT: number; \n    DEPTH_COMPONENT16: number; \n    DEPTH_FUNC: number; \n    DEPTH_RANGE: number; \n    DEPTH_STENCIL: number; \n    DEPTH_STENCIL_ATTACHMENT: number; \n    DEPTH_TEST: number; \n    DEPTH_WRITEMASK: number; \n    DITHER: number; \n    DONT_CARE: number; \n    DST_ALPHA: number; \n    DST_COLOR: number; \n    DYNAMIC_DRAW: number; \n    ELEMENT_ARRAY_BUFFER: number; \n    ELEMENT_ARRAY_BUFFER_BINDING: number; \n    EQUAL: number; \n    FASTEST: number; \n    FLOAT: number; \n    FLOAT_MAT2: number; \n    FLOAT_MAT3: number; \n    FLOAT_MAT4: number; \n    FLOAT_VEC2: number; \n    FLOAT_VEC3: number; \n    FLOAT_VEC4: number; \n    FRAGMENT_SHADER: number; \n    FRAMEBUFFER: number; \n    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number; \n    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number; \n    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number; \n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number; \n    FRAMEBUFFER_BINDING: number; \n    FRAMEBUFFER_COMPLETE: number; \n    FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number; \n    FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number; \n    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number; \n    FRAMEBUFFER_UNSUPPORTED: number; \n    FRONT: number; \n    FRONT_AND_BACK: number; \n    FRONT_FACE: number; \n    FUNC_ADD: number; \n    FUNC_REVERSE_SUBTRACT: number; \n    FUNC_SUBTRACT: number; \n    GENERATE_MIPMAP_HINT: number; \n    GEQUAL: number; \n    GREATER: number; \n    GREEN_BITS: number; \n    HIGH_FLOAT: number; \n    HIGH_INT: number; \n    IMPLEMENTATION_COLOR_READ_FORMAT: number; \n    IMPLEMENTATION_COLOR_READ_TYPE: number; \n    INCR: number; \n    INCR_WRAP: number; \n    INT: number; \n    INT_VEC2: number; \n    INT_VEC3: number; \n    INT_VEC4: number; \n    INVALID_ENUM: number; \n    INVALID_FRAMEBUFFER_OPERATION: number; \n    INVALID_OPERATION: number; \n    INVALID_VALUE: number; \n    INVERT: number; \n    KEEP: number; \n    LEQUAL: number; \n    LESS: number; \n    LINEAR: number; \n    LINEAR_MIPMAP_LINEAR: number; \n    LINEAR_MIPMAP_NEAREST: number; \n    LINES: number; \n    LINE_LOOP: number; \n    LINE_STRIP: number; \n    LINE_WIDTH: number; \n    LINK_STATUS: number; \n    LOW_FLOAT: number; \n    LOW_INT: number; \n    LUMINANCE: number; \n    LUMINANCE_ALPHA: number; \n    MAX_COMBINED_TEXTURE_IMAGE_UNITS: number; \n    MAX_CUBE_MAP_TEXTURE_SIZE: number; \n    MAX_FRAGMENT_UNIFORM_VECTORS: number; \n    MAX_RENDERBUFFER_SIZE: number; \n    MAX_TEXTURE_IMAGE_UNITS: number; \n    MAX_TEXTURE_SIZE: number; \n    MAX_VARYING_VECTORS: number; \n    MAX_VERTEX_ATTRIBS: number; \n    MAX_VERTEX_TEXTURE_IMAGE_UNITS: number; \n    MAX_VERTEX_UNIFORM_VECTORS: number; \n    MAX_VIEWPORT_DIMS: number; \n    MEDIUM_FLOAT: number; \n    MEDIUM_INT: number; \n    MIRRORED_REPEAT: number; \n    NEAREST: number; \n    NEAREST_MIPMAP_LINEAR: number; \n    NEAREST_MIPMAP_NEAREST: number; \n    NEVER: number; \n    NICEST: number; \n    NONE: number; \n    NOTEQUAL: number; \n    NO_ERROR: number; \n    ONE: number; \n    ONE_MINUS_CONSTANT_ALPHA: number; \n    ONE_MINUS_CONSTANT_COLOR: number; \n    ONE_MINUS_DST_ALPHA: number; \n    ONE_MINUS_DST_COLOR: number; \n    ONE_MINUS_SRC_ALPHA: number; \n    ONE_MINUS_SRC_COLOR: number; \n    OUT_OF_MEMORY: number; \n    PACK_ALIGNMENT: number; \n    POINTS: number; \n    POLYGON_OFFSET_FACTOR: number; \n    POLYGON_OFFSET_FILL: number; \n    POLYGON_OFFSET_UNITS: number; \n    RED_BITS: number; \n    RENDERBUFFER: number; \n    RENDERBUFFER_ALPHA_SIZE: number; \n    RENDERBUFFER_BINDING: number; \n    RENDERBUFFER_BLUE_SIZE: number; \n    RENDERBUFFER_DEPTH_SIZE: number; \n    RENDERBUFFER_GREEN_SIZE: number; \n    RENDERBUFFER_HEIGHT: number; \n    RENDERBUFFER_INTERNAL_FORMAT: number; \n    RENDERBUFFER_RED_SIZE: number; \n    RENDERBUFFER_STENCIL_SIZE: number; \n    RENDERBUFFER_WIDTH: number; \n    RENDERER: number; \n    REPEAT: number; \n    REPLACE: number; \n    RGB: number; \n    RGB565: number; \n    RGB5_A1: number; \n    RGBA: number; \n    RGBA4: number; \n    SAMPLER_2D: number; \n    SAMPLER_CUBE: number; \n    SAMPLES: number; \n    SAMPLE_ALPHA_TO_COVERAGE: number; \n    SAMPLE_BUFFERS: number; \n    SAMPLE_COVERAGE: number; \n    SAMPLE_COVERAGE_INVERT: number; \n    SAMPLE_COVERAGE_VALUE: number; \n    SCISSOR_BOX: number; \n    SCISSOR_TEST: number; \n    SHADER_TYPE: number; \n    SHADING_LANGUAGE_VERSION: number; \n    SHORT: number; \n    SRC_ALPHA: number; \n    SRC_ALPHA_SATURATE: number; \n    SRC_COLOR: number; \n    STATIC_DRAW: number; \n    STENCIL_ATTACHMENT: number; \n    STENCIL_BACK_FAIL: number; \n    STENCIL_BACK_FUNC: number; \n    STENCIL_BACK_PASS_DEPTH_FAIL: number; \n    STENCIL_BACK_PASS_DEPTH_PASS: number; \n    STENCIL_BACK_REF: number; \n    STENCIL_BACK_VALUE_MASK: number; \n    STENCIL_BACK_WRITEMASK: number; \n    STENCIL_BITS: number; \n    STENCIL_BUFFER_BIT: number; \n    STENCIL_CLEAR_VALUE: number; \n    STENCIL_FAIL: number; \n    STENCIL_FUNC: number; \n    STENCIL_INDEX: number; \n    STENCIL_INDEX8: number; \n    STENCIL_PASS_DEPTH_FAIL: number; \n    STENCIL_PASS_DEPTH_PASS: number; \n    STENCIL_REF: number; \n    STENCIL_TEST: number; \n    STENCIL_VALUE_MASK: number; \n    STENCIL_WRITEMASK: number; \n    STREAM_DRAW: number; \n    SUBPIXEL_BITS: number; \n    TEXTURE: number; \n    TEXTURE0: number; \n    TEXTURE1: number; \n    TEXTURE10: number; \n    TEXTURE11: number; \n    TEXTURE12: number; \n    TEXTURE13: number; \n    TEXTURE14: number; \n    TEXTURE15: number; \n    TEXTURE16: number; \n    TEXTURE17: number; \n    TEXTURE18: number; \n    TEXTURE19: number; \n    TEXTURE2: number; \n    TEXTURE20: number; \n    TEXTURE21: number; \n    TEXTURE22: number; \n    TEXTURE23: number; \n    TEXTURE24: number; \n    TEXTURE25: number; \n    TEXTURE26: number; \n    TEXTURE27: number; \n    TEXTURE28: number; \n    TEXTURE29: number; \n    TEXTURE3: number; \n    TEXTURE30: number; \n    TEXTURE31: number; \n    TEXTURE4: number; \n    TEXTURE5: number; \n    TEXTURE6: number; \n    TEXTURE7: number; \n    TEXTURE8: number; \n    TEXTURE9: number; \n    TEXTURE_2D: number; \n    TEXTURE_BINDING_2D: number; \n    TEXTURE_BINDING_CUBE_MAP: number; \n    TEXTURE_CUBE_MAP: number; \n    TEXTURE_CUBE_MAP_NEGATIVE_X: number; \n    TEXTURE_CUBE_MAP_NEGATIVE_Y: number; \n    TEXTURE_CUBE_MAP_NEGATIVE_Z: number; \n    TEXTURE_CUBE_MAP_POSITIVE_X: number; \n    TEXTURE_CUBE_MAP_POSITIVE_Y: number; \n    TEXTURE_CUBE_MAP_POSITIVE_Z: number; \n    TEXTURE_MAG_FILTER: number; \n    TEXTURE_MIN_FILTER: number; \n    TEXTURE_WRAP_S: number; \n    TEXTURE_WRAP_T: number; \n    TRIANGLES: number; \n    TRIANGLE_FAN: number; \n    TRIANGLE_STRIP: number; \n    UNPACK_ALIGNMENT: number; \n    UNPACK_COLORSPACE_CONVERSION_WEBGL: number; \n    UNPACK_FLIP_Y_WEBGL: number; \n    UNPACK_PREMULTIPLY_ALPHA_WEBGL: number; \n    UNSIGNED_BYTE: number; \n    UNSIGNED_INT: number; \n    UNSIGNED_SHORT: number; \n    UNSIGNED_SHORT_4_4_4_4: number; \n    UNSIGNED_SHORT_5_5_5_1: number; \n    UNSIGNED_SHORT_5_6_5: number; \n    VALIDATE_STATUS: number; \n    VENDOR: number; \n    VERSION: number; \n    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number; \n    VERTEX_ATTRIB_ARRAY_ENABLED: number; \n    VERTEX_ATTRIB_ARRAY_NORMALIZED: number; \n    VERTEX_ATTRIB_ARRAY_POINTER: number; \n    VERTEX_ATTRIB_ARRAY_SIZE: number; \n    VERTEX_ATTRIB_ARRAY_STRIDE: number; \n    VERTEX_ATTRIB_ARRAY_TYPE: number; \n    VERTEX_SHADER: number; \n    VIEWPORT: number; \n    ZERO: number; \n} \n \ninterface WebGLShader extends WebGLObject { \n} \n \ndeclare var WebGLShader: { \n    prototype: WebGLShader; \n    new(): WebGLShader; \n} \n \ninterface WebGLShaderPrecisionFormat { \n    precision: number; \n    rangeMax: number; \n    rangeMin: number; \n} \n \ndeclare var WebGLShaderPrecisionFormat: { \n    prototype: WebGLShaderPrecisionFormat; \n    new(): WebGLShaderPrecisionFormat; \n} \n \ninterface WebGLTexture extends WebGLObject { \n} \n \ndeclare var WebGLTexture: { \n    prototype: WebGLTexture; \n    new(): WebGLTexture; \n} \n \ninterface WebGLUniformLocation { \n} \n \ndeclare var WebGLUniformLocation: { \n    prototype: WebGLUniformLocation; \n    new(): WebGLUniformLocation; \n} \n \ninterface WebKitCSSMatrix { \n    a: number; \n    b: number; \n    c: number; \n    d: number; \n    e: number; \n    f: number; \n    m11: number; \n    m12: number; \n    m13: number; \n    m14: number; \n    m21: number; \n    m22: number; \n    m23: number; \n    m24: number; \n    m31: number; \n    m32: number; \n    m33: number; \n    m34: number; \n    m41: number; \n    m42: number; \n    m43: number; \n    m44: number; \n    inverse(): WebKitCSSMatrix; \n    multiply(secondMatrix: WebKitCSSMatrix): WebKitCSSMatrix; \n    rotate(angleX: number, angleY?: number, angleZ?: number): WebKitCSSMatrix; \n    rotateAxisAngle(x: number, y: number, z: number, angle: number): WebKitCSSMatrix; \n    scale(scaleX: number, scaleY?: number, scaleZ?: number): WebKitCSSMatrix; \n    setMatrixValue(value: string): void; \n    skewX(angle: number): WebKitCSSMatrix; \n    skewY(angle: number): WebKitCSSMatrix; \n    toString(): string; \n    translate(x: number, y: number, z?: number): WebKitCSSMatrix; \n} \n \ndeclare var WebKitCSSMatrix: { \n    prototype: WebKitCSSMatrix; \n    new(text?: string): WebKitCSSMatrix; \n} \n \ninterface WebKitPoint { \n    x: number; \n    y: number; \n} \n \ndeclare var WebKitPoint: { \n    prototype: WebKitPoint; \n    new(x?: number, y?: number): WebKitPoint; \n} \n \ninterface WebSocket extends EventTarget { \n    binaryType: string; \n    bufferedAmount: number; \n    extensions: string; \n    onclose: (ev: CloseEvent) => any; \n    onerror: (ev: Event) => any; \n    onmessage: (ev: MessageEvent) => any; \n    onopen: (ev: Event) => any; \n    protocol: string; \n    readyState: number; \n    url: string; \n    close(code?: number, reason?: string): void; \n    send(data: any): void; \n    CLOSED: number; \n    CLOSING: number; \n    CONNECTING: number; \n    OPEN: number; \n    addEventListener(type: "close", listener: (ev: CloseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "message", listener: (ev: MessageEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "open", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var WebSocket: { \n    prototype: WebSocket; \n    new(url: string, protocols?: string | string[]): WebSocket; \n    CLOSED: number; \n    CLOSING: number; \n    CONNECTING: number; \n    OPEN: number; \n} \n \ninterface WheelEvent extends MouseEvent { \n    deltaMode: number; \n    deltaX: number; \n    deltaY: number; \n    deltaZ: number; \n    getCurrentPoint(element: Element): void; \n    initWheelEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, deltaXArg: number, deltaYArg: number, deltaZArg: number, deltaMode: number): void; \n    DOM_DELTA_LINE: number; \n    DOM_DELTA_PAGE: number; \n    DOM_DELTA_PIXEL: number; \n} \n \ndeclare var WheelEvent: { \n    prototype: WheelEvent; \n    new(typeArg: string, eventInitDict?: WheelEventInit): WheelEvent; \n    DOM_DELTA_LINE: number; \n    DOM_DELTA_PAGE: number; \n    DOM_DELTA_PIXEL: number; \n} \n \ninterface Window extends EventTarget, WindowTimers, WindowSessionStorage, WindowLocalStorage, WindowConsole, GlobalEventHandlers, IDBEnvironment, WindowBase64 { \n    animationStartTime: number; \n    applicationCache: ApplicationCache; \n    clientInformation: Navigator; \n    closed: boolean; \n    crypto: Crypto; \n    defaultStatus: string; \n    devicePixelRatio: number; \n    doNotTrack: string; \n    document: Document; \n    event: Event; \n    external: External; \n    frameElement: Element; \n    frames: Window; \n    history: History; \n    innerHeight: number; \n    innerWidth: number; \n    length: number; \n    location: Location; \n    locationbar: BarProp; \n    menubar: BarProp; \n    msAnimationStartTime: number; \n    msTemplatePrinter: MSTemplatePrinter; \n    name: string; \n    navigator: Navigator; \n    offscreenBuffering: string | boolean; \n    onabort: (ev: Event) => any; \n    onafterprint: (ev: Event) => any; \n    onbeforeprint: (ev: Event) => any; \n    onbeforeunload: (ev: BeforeUnloadEvent) => any; \n    onblur: (ev: FocusEvent) => any; \n    oncanplay: (ev: Event) => any; \n    oncanplaythrough: (ev: Event) => any; \n    onchange: (ev: Event) => any; \n    onclick: (ev: MouseEvent) => any; \n    oncompassneedscalibration: (ev: Event) => any; \n    oncontextmenu: (ev: PointerEvent) => any; \n    ondblclick: (ev: MouseEvent) => any; \n    ondevicemotion: (ev: DeviceMotionEvent) => any; \n    ondeviceorientation: (ev: DeviceOrientationEvent) => any; \n    ondrag: (ev: DragEvent) => any; \n    ondragend: (ev: DragEvent) => any; \n    ondragenter: (ev: DragEvent) => any; \n    ondragleave: (ev: DragEvent) => any; \n    ondragover: (ev: DragEvent) => any; \n    ondragstart: (ev: DragEvent) => any; \n    ondrop: (ev: DragEvent) => any; \n    ondurationchange: (ev: Event) => any; \n    onemptied: (ev: Event) => any; \n    onended: (ev: Event) => any; \n    onerror: ErrorEventHandler; \n    onfocus: (ev: FocusEvent) => any; \n    onhashchange: (ev: HashChangeEvent) => any; \n    oninput: (ev: Event) => any; \n    onkeydown: (ev: KeyboardEvent) => any; \n    onkeypress: (ev: KeyboardEvent) => any; \n    onkeyup: (ev: KeyboardEvent) => any; \n    onload: (ev: Event) => any; \n    onloadeddata: (ev: Event) => any; \n    onloadedmetadata: (ev: Event) => any; \n    onloadstart: (ev: Event) => any; \n    onmessage: (ev: MessageEvent) => any; \n    onmousedown: (ev: MouseEvent) => any; \n    onmouseenter: (ev: MouseEvent) => any; \n    onmouseleave: (ev: MouseEvent) => any; \n    onmousemove: (ev: MouseEvent) => any; \n    onmouseout: (ev: MouseEvent) => any; \n    onmouseover: (ev: MouseEvent) => any; \n    onmouseup: (ev: MouseEvent) => any; \n    onmousewheel: (ev: MouseWheelEvent) => any; \n    onmsgesturechange: (ev: MSGestureEvent) => any; \n    onmsgesturedoubletap: (ev: MSGestureEvent) => any; \n    onmsgestureend: (ev: MSGestureEvent) => any; \n    onmsgesturehold: (ev: MSGestureEvent) => any; \n    onmsgesturestart: (ev: MSGestureEvent) => any; \n    onmsgesturetap: (ev: MSGestureEvent) => any; \n    onmsinertiastart: (ev: MSGestureEvent) => any; \n    onmspointercancel: (ev: MSPointerEvent) => any; \n    onmspointerdown: (ev: MSPointerEvent) => any; \n    onmspointerenter: (ev: MSPointerEvent) => any; \n    onmspointerleave: (ev: MSPointerEvent) => any; \n    onmspointermove: (ev: MSPointerEvent) => any; \n    onmspointerout: (ev: MSPointerEvent) => any; \n    onmspointerover: (ev: MSPointerEvent) => any; \n    onmspointerup: (ev: MSPointerEvent) => any; \n    onoffline: (ev: Event) => any; \n    ononline: (ev: Event) => any; \n    onorientationchange: (ev: Event) => any; \n    onpagehide: (ev: PageTransitionEvent) => any; \n    onpageshow: (ev: PageTransitionEvent) => any; \n    onpause: (ev: Event) => any; \n    onplay: (ev: Event) => any; \n    onplaying: (ev: Event) => any; \n    onpopstate: (ev: PopStateEvent) => any; \n    onprogress: (ev: ProgressEvent) => any; \n    onratechange: (ev: Event) => any; \n    onreadystatechange: (ev: ProgressEvent) => any; \n    onreset: (ev: Event) => any; \n    onresize: (ev: UIEvent) => any; \n    onscroll: (ev: UIEvent) => any; \n    onseeked: (ev: Event) => any; \n    onseeking: (ev: Event) => any; \n    onselect: (ev: UIEvent) => any; \n    onstalled: (ev: Event) => any; \n    onstorage: (ev: StorageEvent) => any; \n    onsubmit: (ev: Event) => any; \n    onsuspend: (ev: Event) => any; \n    ontimeupdate: (ev: Event) => any; \n    ontouchcancel: any; \n    ontouchend: any; \n    ontouchmove: any; \n    ontouchstart: any; \n    onunload: (ev: Event) => any; \n    onvolumechange: (ev: Event) => any; \n    onwaiting: (ev: Event) => any; \n    opener: Window; \n    orientation: string | number; \n    outerHeight: number; \n    outerWidth: number; \n    pageXOffset: number; \n    pageYOffset: number; \n    parent: Window; \n    performance: Performance; \n    personalbar: BarProp; \n    screen: Screen; \n    screenLeft: number; \n    screenTop: number; \n    screenX: number; \n    screenY: number; \n    scrollX: number; \n    scrollY: number; \n    scrollbars: BarProp; \n    self: Window; \n    status: string; \n    statusbar: BarProp; \n    styleMedia: StyleMedia; \n    toolbar: BarProp; \n    top: Window; \n    window: Window; \n    URL: URL; \n    alert(message?: any): void; \n    blur(): void; \n    cancelAnimationFrame(handle: number): void; \n    captureEvents(): void; \n    close(): void; \n    confirm(message?: string): boolean; \n    focus(): void; \n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration; \n    getMatchedCSSRules(elt: Element, pseudoElt?: string): CSSRuleList; \n    getSelection(): Selection; \n    matchMedia(mediaQuery: string): MediaQueryList; \n    moveBy(x?: number, y?: number): void; \n    moveTo(x?: number, y?: number): void; \n    msCancelRequestAnimationFrame(handle: number): void; \n    msMatchMedia(mediaQuery: string): MediaQueryList; \n    msRequestAnimationFrame(callback: FrameRequestCallback): number; \n    msWriteProfilerMark(profilerMarkName: string): void; \n    open(url?: string, target?: string, features?: string, replace?: boolean): any; \n    postMessage(message: any, targetOrigin: string, ports?: any): void; \n    print(): void; \n    prompt(message?: string, _default?: string): string; \n    releaseEvents(): void; \n    requestAnimationFrame(callback: FrameRequestCallback): number; \n    resizeBy(x?: number, y?: number): void; \n    resizeTo(x?: number, y?: number): void; \n    scroll(x?: number, y?: number): void; \n    scrollBy(x?: number, y?: number): void; \n    scrollTo(x?: number, y?: number): void; \n    webkitConvertPointFromNodeToPage(node: Node, pt: WebKitPoint): WebKitPoint; \n    webkitConvertPointFromPageToNode(node: Node, pt: WebKitPoint): WebKitPoint; \n    addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "afterprint", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeprint", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "beforeunload", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "compassneedscalibration", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "contextmenu", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "devicemotion", listener: (ev: DeviceMotionEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "deviceorientation", listener: (ev: DeviceOrientationEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "hashchange", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "message", listener: (ev: MessageEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseenter", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseleave", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "offline", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "online", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "orientationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pagehide", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pageshow", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "popstate", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "readystatechange", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "resize", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "storage", listener: (ev: StorageEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "unload", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n    [index: number]: Window; \n} \n \ndeclare var Window: { \n    prototype: Window; \n    new(): Window; \n} \n \ninterface Worker extends EventTarget, AbstractWorker { \n    onmessage: (ev: MessageEvent) => any; \n    postMessage(message: any, ports?: any): void; \n    terminate(): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "message", listener: (ev: MessageEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var Worker: { \n    prototype: Worker; \n    new(stringUrl: string): Worker; \n} \n \ninterface XMLDocument extends Document { \n} \n \ndeclare var XMLDocument: { \n    prototype: XMLDocument; \n    new(): XMLDocument; \n} \n \ninterface XMLHttpRequest extends EventTarget, XMLHttpRequestEventTarget { \n    msCaching: string; \n    onreadystatechange: (ev: ProgressEvent) => any; \n    readyState: number; \n    response: any; \n    responseBody: any; \n    responseText: string; \n    responseType: string; \n    responseXML: any; \n    status: number; \n    statusText: string; \n    timeout: number; \n    upload: XMLHttpRequestUpload; \n    withCredentials: boolean; \n    abort(): void; \n    getAllResponseHeaders(): string; \n    getResponseHeader(header: string): string; \n    msCachingEnabled(): boolean; \n    open(method: string, url: string, async?: boolean, user?: string, password?: string): void; \n    overrideMimeType(mime: string): void; \n    send(data?: Document): void; \n    send(data?: string): void; \n    send(data?: any): void; \n    setRequestHeader(header: string, value: string): void; \n    DONE: number; \n    HEADERS_RECEIVED: number; \n    LOADING: number; \n    OPENED: number; \n    UNSENT: number; \n    addEventListener(type: "abort", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadend", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "readystatechange", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "timeout", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var XMLHttpRequest: { \n    prototype: XMLHttpRequest; \n    new(): XMLHttpRequest; \n    DONE: number; \n    HEADERS_RECEIVED: number; \n    LOADING: number; \n    OPENED: number; \n    UNSENT: number; \n    create(): XMLHttpRequest; \n} \n \ninterface XMLHttpRequestUpload extends EventTarget, XMLHttpRequestEventTarget { \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ndeclare var XMLHttpRequestUpload: { \n    prototype: XMLHttpRequestUpload; \n    new(): XMLHttpRequestUpload; \n} \n \ninterface XMLSerializer { \n    serializeToString(target: Node): string; \n} \n \ndeclare var XMLSerializer: { \n    prototype: XMLSerializer; \n    new(): XMLSerializer; \n} \n \ninterface XPathEvaluator { \n    createExpression(expression: string, resolver: XPathNSResolver): XPathExpression; \n    createNSResolver(nodeResolver?: Node): XPathNSResolver; \n    evaluate(expression: string, contextNode: Node, resolver: XPathNSResolver, type: number, result: XPathResult): XPathResult; \n} \n \ndeclare var XPathEvaluator: { \n    prototype: XPathEvaluator; \n    new(): XPathEvaluator; \n} \n \ninterface XPathExpression { \n    evaluate(contextNode: Node, type: number, result: XPathResult): XPathExpression; \n} \n \ndeclare var XPathExpression: { \n    prototype: XPathExpression; \n    new(): XPathExpression; \n} \n \ninterface XPathNSResolver { \n    lookupNamespaceURI(prefix: string): string; \n} \n \ndeclare var XPathNSResolver: { \n    prototype: XPathNSResolver; \n    new(): XPathNSResolver; \n} \n \ninterface XPathResult { \n    booleanValue: boolean; \n    invalidIteratorState: boolean; \n    numberValue: number; \n    resultType: number; \n    singleNodeValue: Node; \n    snapshotLength: number; \n    stringValue: string; \n    iterateNext(): Node; \n    snapshotItem(index: number): Node; \n    ANY_TYPE: number; \n    ANY_UNORDERED_NODE_TYPE: number; \n    BOOLEAN_TYPE: number; \n    FIRST_ORDERED_NODE_TYPE: number; \n    NUMBER_TYPE: number; \n    ORDERED_NODE_ITERATOR_TYPE: number; \n    ORDERED_NODE_SNAPSHOT_TYPE: number; \n    STRING_TYPE: number; \n    UNORDERED_NODE_ITERATOR_TYPE: number; \n    UNORDERED_NODE_SNAPSHOT_TYPE: number; \n} \n \ndeclare var XPathResult: { \n    prototype: XPathResult; \n    new(): XPathResult; \n    ANY_TYPE: number; \n    ANY_UNORDERED_NODE_TYPE: number; \n    BOOLEAN_TYPE: number; \n    FIRST_ORDERED_NODE_TYPE: number; \n    NUMBER_TYPE: number; \n    ORDERED_NODE_ITERATOR_TYPE: number; \n    ORDERED_NODE_SNAPSHOT_TYPE: number; \n    STRING_TYPE: number; \n    UNORDERED_NODE_ITERATOR_TYPE: number; \n    UNORDERED_NODE_SNAPSHOT_TYPE: number; \n} \n \ninterface XSLTProcessor { \n    clearParameters(): void; \n    getParameter(namespaceURI: string, localName: string): any; \n    importStylesheet(style: Node): void; \n    removeParameter(namespaceURI: string, localName: string): void; \n    reset(): void; \n    setParameter(namespaceURI: string, localName: string, value: any): void; \n    transformToDocument(source: Node): Document; \n    transformToFragment(source: Node, document: Document): DocumentFragment; \n} \n \ndeclare var XSLTProcessor: { \n    prototype: XSLTProcessor; \n    new(): XSLTProcessor; \n} \n \ninterface AbstractWorker { \n    onerror: (ev: Event) => any; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ninterface ChildNode { \n    remove(): void; \n} \n \ninterface DOML2DeprecatedColorProperty { \n    color: string; \n} \n \ninterface DOML2DeprecatedSizeProperty { \n    size: number; \n} \n \ninterface DocumentEvent { \n    createEvent(eventInterface:"AnimationEvent"): AnimationEvent; \n    createEvent(eventInterface:"AriaRequestEvent"): AriaRequestEvent; \n    createEvent(eventInterface:"AudioProcessingEvent"): AudioProcessingEvent; \n    createEvent(eventInterface:"BeforeUnloadEvent"): BeforeUnloadEvent; \n    createEvent(eventInterface:"ClipboardEvent"): ClipboardEvent; \n    createEvent(eventInterface:"CloseEvent"): CloseEvent; \n    createEvent(eventInterface:"CommandEvent"): CommandEvent; \n    createEvent(eventInterface:"CompositionEvent"): CompositionEvent; \n    createEvent(eventInterface:"CustomEvent"): CustomEvent; \n    createEvent(eventInterface:"DeviceMotionEvent"): DeviceMotionEvent; \n    createEvent(eventInterface:"DeviceOrientationEvent"): DeviceOrientationEvent; \n    createEvent(eventInterface:"DragEvent"): DragEvent; \n    createEvent(eventInterface:"ErrorEvent"): ErrorEvent; \n    createEvent(eventInterface:"Event"): Event; \n    createEvent(eventInterface:"Events"): Event; \n    createEvent(eventInterface:"FocusEvent"): FocusEvent; \n    createEvent(eventInterface:"GamepadEvent"): GamepadEvent; \n    createEvent(eventInterface:"HashChangeEvent"): HashChangeEvent; \n    createEvent(eventInterface:"IDBVersionChangeEvent"): IDBVersionChangeEvent; \n    createEvent(eventInterface:"KeyboardEvent"): KeyboardEvent; \n    createEvent(eventInterface:"LongRunningScriptDetectedEvent"): LongRunningScriptDetectedEvent; \n    createEvent(eventInterface:"MSGestureEvent"): MSGestureEvent; \n    createEvent(eventInterface:"MSManipulationEvent"): MSManipulationEvent; \n    createEvent(eventInterface:"MSMediaKeyMessageEvent"): MSMediaKeyMessageEvent; \n    createEvent(eventInterface:"MSMediaKeyNeededEvent"): MSMediaKeyNeededEvent; \n    createEvent(eventInterface:"MSPointerEvent"): MSPointerEvent; \n    createEvent(eventInterface:"MSSiteModeEvent"): MSSiteModeEvent; \n    createEvent(eventInterface:"MessageEvent"): MessageEvent; \n    createEvent(eventInterface:"MouseEvent"): MouseEvent; \n    createEvent(eventInterface:"MouseEvents"): MouseEvent; \n    createEvent(eventInterface:"MouseWheelEvent"): MouseWheelEvent; \n    createEvent(eventInterface:"MutationEvent"): MutationEvent; \n    createEvent(eventInterface:"MutationEvents"): MutationEvent; \n    createEvent(eventInterface:"NavigationCompletedEvent"): NavigationCompletedEvent; \n    createEvent(eventInterface:"NavigationEvent"): NavigationEvent; \n    createEvent(eventInterface:"NavigationEventWithReferrer"): NavigationEventWithReferrer; \n    createEvent(eventInterface:"OfflineAudioCompletionEvent"): OfflineAudioCompletionEvent; \n    createEvent(eventInterface:"PageTransitionEvent"): PageTransitionEvent; \n    createEvent(eventInterface:"PermissionRequestedEvent"): PermissionRequestedEvent; \n    createEvent(eventInterface:"PointerEvent"): PointerEvent; \n    createEvent(eventInterface:"PopStateEvent"): PopStateEvent; \n    createEvent(eventInterface:"ProgressEvent"): ProgressEvent; \n    createEvent(eventInterface:"SVGZoomEvent"): SVGZoomEvent; \n    createEvent(eventInterface:"SVGZoomEvents"): SVGZoomEvent; \n    createEvent(eventInterface:"ScriptNotifyEvent"): ScriptNotifyEvent; \n    createEvent(eventInterface:"StorageEvent"): StorageEvent; \n    createEvent(eventInterface:"TextEvent"): TextEvent; \n    createEvent(eventInterface:"TouchEvent"): TouchEvent; \n    createEvent(eventInterface:"TrackEvent"): TrackEvent; \n    createEvent(eventInterface:"TransitionEvent"): TransitionEvent; \n    createEvent(eventInterface:"UIEvent"): UIEvent; \n    createEvent(eventInterface:"UIEvents"): UIEvent; \n    createEvent(eventInterface:"UnviewableContentIdentifiedEvent"): UnviewableContentIdentifiedEvent; \n    createEvent(eventInterface:"WebGLContextEvent"): WebGLContextEvent; \n    createEvent(eventInterface:"WheelEvent"): WheelEvent; \n    createEvent(eventInterface: string): Event; \n} \n \ninterface ElementTraversal { \n    childElementCount: number; \n    firstElementChild: Element; \n    lastElementChild: Element; \n    nextElementSibling: Element; \n    previousElementSibling: Element; \n} \n \ninterface GetSVGDocument { \n    getSVGDocument(): Document; \n} \n \ninterface GlobalEventHandlers { \n    onpointercancel: (ev: PointerEvent) => any; \n    onpointerdown: (ev: PointerEvent) => any; \n    onpointerenter: (ev: PointerEvent) => any; \n    onpointerleave: (ev: PointerEvent) => any; \n    onpointermove: (ev: PointerEvent) => any; \n    onpointerout: (ev: PointerEvent) => any; \n    onpointerover: (ev: PointerEvent) => any; \n    onpointerup: (ev: PointerEvent) => any; \n    onwheel: (ev: WheelEvent) => any; \n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ninterface HTMLTableAlignment { \n    /** \n      * Sets or retrieves a value that you can use to implement your own ch functionality for the object. \n      */ \n    ch: string; \n    /** \n      * Sets or retrieves a value that you can use to implement your own chOff functionality for the object. \n      */ \n    chOff: string; \n    /** \n      * Sets or retrieves how text and other content are vertically aligned within the object that contains them. \n      */ \n    vAlign: string; \n} \n \ninterface IDBEnvironment { \n    indexedDB: IDBFactory; \n    msIndexedDB: IDBFactory; \n} \n \ninterface LinkStyle { \n    sheet: StyleSheet; \n} \n \ninterface MSBaseReader { \n    onabort: (ev: Event) => any; \n    onerror: (ev: Event) => any; \n    onload: (ev: Event) => any; \n    onloadend: (ev: ProgressEvent) => any; \n    onloadstart: (ev: Event) => any; \n    onprogress: (ev: ProgressEvent) => any; \n    readyState: number; \n    result: any; \n    abort(): void; \n    DONE: number; \n    EMPTY: number; \n    LOADING: number; \n    addEventListener(type: "abort", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadend", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \ninterface MSFileSaver { \n    msSaveBlob(blob: any, defaultName?: string): boolean; \n    msSaveOrOpenBlob(blob: any, defaultName?: string): boolean; \n} \n \ninterface MSNavigatorDoNotTrack { \n    confirmSiteSpecificTrackingException(args: ConfirmSiteSpecificExceptionsInformation): boolean; \n    confirmWebWideTrackingException(args: ExceptionInformation): boolean; \n    removeSiteSpecificTrackingException(args: ExceptionInformation): void; \n    removeWebWideTrackingException(args: ExceptionInformation): void; \n    storeSiteSpecificTrackingException(args: StoreSiteSpecificExceptionsInformation): void; \n    storeWebWideTrackingException(args: StoreExceptionsInformation): void; \n} \n \ninterface NavigatorContentUtils { \n} \n \ninterface NavigatorGeolocation { \n    geolocation: Geolocation; \n} \n \ninterface NavigatorID { \n    appName: string; \n    appVersion: string; \n    platform: string; \n    product: string; \n    productSub: string; \n    userAgent: string; \n    vendor: string; \n    vendorSub: string; \n} \n \ninterface NavigatorOnLine { \n    onLine: boolean; \n} \n \ninterface NavigatorStorageUtils { \n} \n \ninterface NodeSelector { \n    querySelector(selectors: string): Element; \n    querySelectorAll(selectors: string): NodeListOf<Element>; \n} \n \ninterface RandomSource { \n    getRandomValues(array: ArrayBufferView): ArrayBufferView; \n} \n \ninterface SVGAnimatedPathData { \n    pathSegList: SVGPathSegList; \n} \n \ninterface SVGAnimatedPoints { \n    animatedPoints: SVGPointList; \n    points: SVGPointList; \n} \n \ninterface SVGExternalResourcesRequired { \n    externalResourcesRequired: SVGAnimatedBoolean; \n} \n \ninterface SVGFilterPrimitiveStandardAttributes extends SVGStylable { \n    height: SVGAnimatedLength; \n    result: SVGAnimatedString; \n    width: SVGAnimatedLength; \n    x: SVGAnimatedLength; \n    y: SVGAnimatedLength; \n} \n \ninterface SVGFitToViewBox { \n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio; \n    viewBox: SVGAnimatedRect; \n} \n \ninterface SVGLangSpace { \n    xmllang: string; \n    xmlspace: string; \n} \n \ninterface SVGLocatable { \n    farthestViewportElement: SVGElement; \n    nearestViewportElement: SVGElement; \n    getBBox(): SVGRect; \n    getCTM(): SVGMatrix; \n    getScreenCTM(): SVGMatrix; \n    getTransformToElement(element: SVGElement): SVGMatrix; \n} \n \ninterface SVGStylable { \n    className: any; \n    style: CSSStyleDeclaration; \n} \n \ninterface SVGTests { \n    requiredExtensions: SVGStringList; \n    requiredFeatures: SVGStringList; \n    systemLanguage: SVGStringList; \n    hasExtension(extension: string): boolean; \n} \n \ninterface SVGTransformable extends SVGLocatable { \n    transform: SVGAnimatedTransformList; \n} \n \ninterface SVGURIReference { \n    href: SVGAnimatedString; \n} \n \ninterface WindowBase64 { \n    atob(encodedString: string): string; \n    btoa(rawString: string): string; \n} \n \ninterface WindowConsole { \n    console: Console; \n} \n \ninterface WindowLocalStorage { \n    localStorage: Storage; \n} \n \ninterface WindowSessionStorage { \n    sessionStorage: Storage; \n} \n \ninterface WindowTimers extends Object, WindowTimersExtension { \n    clearInterval(handle: number): void; \n    clearTimeout(handle: number): void; \n    setInterval(handler: any, timeout?: any, ...args: any[]): number; \n    setTimeout(handler: any, timeout?: any, ...args: any[]): number; \n} \n \ninterface WindowTimersExtension { \n    clearImmediate(handle: number): void; \n    msClearImmediate(handle: number): void; \n    msSetImmediate(expression: any, ...args: any[]): number; \n    setImmediate(expression: any, ...args: any[]): number; \n} \n \ninterface XMLHttpRequestEventTarget { \n    onabort: (ev: Event) => any; \n    onerror: (ev: Event) => any; \n    onload: (ev: Event) => any; \n    onloadend: (ev: ProgressEvent) => any; \n    onloadstart: (ev: Event) => any; \n    onprogress: (ev: ProgressEvent) => any; \n    ontimeout: (ev: ProgressEvent) => any; \n    addEventListener(type: "abort", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadend", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: "timeout", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n} \n \n \ninterface NodeListOf<TNode extends Node> extends NodeList { \n    length: number; \n    item(index: number): TNode; \n    [index: number]: TNode; \n} \n \ninterface BlobPropertyBag { \n    type?: string; \n    endings?: string; \n} \n \ninterface FilePropertyBag { \n    type?: string; \n    lastModified?: number; \n} \n \ninterface EventListenerObject { \n    handleEvent(evt: Event): void; \n} \n \ndeclare type EventListenerOrEventListenerObject = EventListener | EventListenerObject; \n \ninterface MessageEventInit extends EventInit { \n    data?: any; \n    origin?: string; \n    lastEventId?: string; \n    channel?: string; \n    source?: any; \n    ports?: MessagePort[]; \n} \n \ninterface ProgressEventInit extends EventInit { \n    lengthComputable?: boolean; \n    loaded?: number; \n    total?: number; \n} \n \ninterface ErrorEventHandler { \n    (message: string, filename?: string, lineno?: number, colno?: number, error?:Error): void; \n} \ninterface PositionCallback { \n    (position: Position): void; \n} \ninterface PositionErrorCallback { \n    (error: PositionError): void; \n} \ninterface MediaQueryListListener { \n    (mql: MediaQueryList): void; \n} \ninterface MSLaunchUriCallback { \n    (): void; \n} \ninterface FrameRequestCallback { \n    (time: number): void; \n} \ninterface MSUnsafeFunctionCallback { \n    (): any; \n} \ninterface MSExecAtPriorityFunctionCallback { \n    (...args: any[]): any; \n} \ninterface MutationCallback { \n    (mutations: MutationRecord[], observer: MutationObserver): void; \n} \ninterface DecodeSuccessCallback { \n    (decodedData: AudioBuffer): void; \n} \ninterface DecodeErrorCallback { \n    (): void; \n} \ninterface FunctionStringCallback { \n    (data: string): void; \n} \ndeclare var Audio: {new(src?: string): HTMLAudioElement; }; \ndeclare var Image: {new(width?: number, height?: number): HTMLImageElement; }; \ndeclare var Option: {new(text?: string, value?: string, defaultSelected?: boolean, selected?: boolean): HTMLOptionElement; }; \ndeclare var animationStartTime: number; \ndeclare var applicationCache: ApplicationCache; \ndeclare var clientInformation: Navigator; \ndeclare var closed: boolean; \ndeclare var crypto: Crypto; \ndeclare var defaultStatus: string; \ndeclare var devicePixelRatio: number; \ndeclare var doNotTrack: string; \ndeclare var document: Document; \ndeclare var event: Event; \ndeclare var external: External; \ndeclare var frameElement: Element; \ndeclare var frames: Window; \ndeclare var history: History; \ndeclare var innerHeight: number; \ndeclare var innerWidth: number; \ndeclare var length: number; \ndeclare var location: Location; \ndeclare var locationbar: BarProp; \ndeclare var menubar: BarProp; \ndeclare var msAnimationStartTime: number; \ndeclare var msTemplatePrinter: MSTemplatePrinter; \ndeclare var name: string; \ndeclare var navigator: Navigator; \ndeclare var offscreenBuffering: string | boolean; \ndeclare var onabort: (ev: Event) => any; \ndeclare var onafterprint: (ev: Event) => any; \ndeclare var onbeforeprint: (ev: Event) => any; \ndeclare var onbeforeunload: (ev: BeforeUnloadEvent) => any; \ndeclare var onblur: (ev: FocusEvent) => any; \ndeclare var oncanplay: (ev: Event) => any; \ndeclare var oncanplaythrough: (ev: Event) => any; \ndeclare var onchange: (ev: Event) => any; \ndeclare var onclick: (ev: MouseEvent) => any; \ndeclare var oncompassneedscalibration: (ev: Event) => any; \ndeclare var oncontextmenu: (ev: PointerEvent) => any; \ndeclare var ondblclick: (ev: MouseEvent) => any; \ndeclare var ondevicemotion: (ev: DeviceMotionEvent) => any; \ndeclare var ondeviceorientation: (ev: DeviceOrientationEvent) => any; \ndeclare var ondrag: (ev: DragEvent) => any; \ndeclare var ondragend: (ev: DragEvent) => any; \ndeclare var ondragenter: (ev: DragEvent) => any; \ndeclare var ondragleave: (ev: DragEvent) => any; \ndeclare var ondragover: (ev: DragEvent) => any; \ndeclare var ondragstart: (ev: DragEvent) => any; \ndeclare var ondrop: (ev: DragEvent) => any; \ndeclare var ondurationchange: (ev: Event) => any; \ndeclare var onemptied: (ev: Event) => any; \ndeclare var onended: (ev: Event) => any; \ndeclare var onerror: ErrorEventHandler; \ndeclare var onfocus: (ev: FocusEvent) => any; \ndeclare var onhashchange: (ev: HashChangeEvent) => any; \ndeclare var oninput: (ev: Event) => any; \ndeclare var onkeydown: (ev: KeyboardEvent) => any; \ndeclare var onkeypress: (ev: KeyboardEvent) => any; \ndeclare var onkeyup: (ev: KeyboardEvent) => any; \ndeclare var onload: (ev: Event) => any; \ndeclare var onloadeddata: (ev: Event) => any; \ndeclare var onloadedmetadata: (ev: Event) => any; \ndeclare var onloadstart: (ev: Event) => any; \ndeclare var onmessage: (ev: MessageEvent) => any; \ndeclare var onmousedown: (ev: MouseEvent) => any; \ndeclare var onmouseenter: (ev: MouseEvent) => any; \ndeclare var onmouseleave: (ev: MouseEvent) => any; \ndeclare var onmousemove: (ev: MouseEvent) => any; \ndeclare var onmouseout: (ev: MouseEvent) => any; \ndeclare var onmouseover: (ev: MouseEvent) => any; \ndeclare var onmouseup: (ev: MouseEvent) => any; \ndeclare var onmousewheel: (ev: MouseWheelEvent) => any; \ndeclare var onmsgesturechange: (ev: MSGestureEvent) => any; \ndeclare var onmsgesturedoubletap: (ev: MSGestureEvent) => any; \ndeclare var onmsgestureend: (ev: MSGestureEvent) => any; \ndeclare var onmsgesturehold: (ev: MSGestureEvent) => any; \ndeclare var onmsgesturestart: (ev: MSGestureEvent) => any; \ndeclare var onmsgesturetap: (ev: MSGestureEvent) => any; \ndeclare var onmsinertiastart: (ev: MSGestureEvent) => any; \ndeclare var onmspointercancel: (ev: MSPointerEvent) => any; \ndeclare var onmspointerdown: (ev: MSPointerEvent) => any; \ndeclare var onmspointerenter: (ev: MSPointerEvent) => any; \ndeclare var onmspointerleave: (ev: MSPointerEvent) => any; \ndeclare var onmspointermove: (ev: MSPointerEvent) => any; \ndeclare var onmspointerout: (ev: MSPointerEvent) => any; \ndeclare var onmspointerover: (ev: MSPointerEvent) => any; \ndeclare var onmspointerup: (ev: MSPointerEvent) => any; \ndeclare var onoffline: (ev: Event) => any; \ndeclare var ononline: (ev: Event) => any; \ndeclare var onorientationchange: (ev: Event) => any; \ndeclare var onpagehide: (ev: PageTransitionEvent) => any; \ndeclare var onpageshow: (ev: PageTransitionEvent) => any; \ndeclare var onpause: (ev: Event) => any; \ndeclare var onplay: (ev: Event) => any; \ndeclare var onplaying: (ev: Event) => any; \ndeclare var onpopstate: (ev: PopStateEvent) => any; \ndeclare var onprogress: (ev: ProgressEvent) => any; \ndeclare var onratechange: (ev: Event) => any; \ndeclare var onreadystatechange: (ev: ProgressEvent) => any; \ndeclare var onreset: (ev: Event) => any; \ndeclare var onresize: (ev: UIEvent) => any; \ndeclare var onscroll: (ev: UIEvent) => any; \ndeclare var onseeked: (ev: Event) => any; \ndeclare var onseeking: (ev: Event) => any; \ndeclare var onselect: (ev: UIEvent) => any; \ndeclare var onstalled: (ev: Event) => any; \ndeclare var onstorage: (ev: StorageEvent) => any; \ndeclare var onsubmit: (ev: Event) => any; \ndeclare var onsuspend: (ev: Event) => any; \ndeclare var ontimeupdate: (ev: Event) => any; \ndeclare var ontouchcancel: any; \ndeclare var ontouchend: any; \ndeclare var ontouchmove: any; \ndeclare var ontouchstart: any; \ndeclare var onunload: (ev: Event) => any; \ndeclare var onvolumechange: (ev: Event) => any; \ndeclare var onwaiting: (ev: Event) => any; \ndeclare var opener: Window; \ndeclare var orientation: string | number; \ndeclare var outerHeight: number; \ndeclare var outerWidth: number; \ndeclare var pageXOffset: number; \ndeclare var pageYOffset: number; \ndeclare var parent: Window; \ndeclare var performance: Performance; \ndeclare var personalbar: BarProp; \ndeclare var screen: Screen; \ndeclare var screenLeft: number; \ndeclare var screenTop: number; \ndeclare var screenX: number; \ndeclare var screenY: number; \ndeclare var scrollX: number; \ndeclare var scrollY: number; \ndeclare var scrollbars: BarProp; \ndeclare var self: Window; \ndeclare var status: string; \ndeclare var statusbar: BarProp; \ndeclare var styleMedia: StyleMedia; \ndeclare var toolbar: BarProp; \ndeclare var top: Window; \ndeclare var window: Window; \ndeclare var URL: URL; \ndeclare function alert(message?: any): void; \ndeclare function blur(): void; \ndeclare function cancelAnimationFrame(handle: number): void; \ndeclare function captureEvents(): void; \ndeclare function close(): void; \ndeclare function confirm(message?: string): boolean; \ndeclare function focus(): void; \ndeclare function getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration; \ndeclare function getMatchedCSSRules(elt: Element, pseudoElt?: string): CSSRuleList; \ndeclare function getSelection(): Selection; \ndeclare function matchMedia(mediaQuery: string): MediaQueryList; \ndeclare function moveBy(x?: number, y?: number): void; \ndeclare function moveTo(x?: number, y?: number): void; \ndeclare function msCancelRequestAnimationFrame(handle: number): void; \ndeclare function msMatchMedia(mediaQuery: string): MediaQueryList; \ndeclare function msRequestAnimationFrame(callback: FrameRequestCallback): number; \ndeclare function msWriteProfilerMark(profilerMarkName: string): void; \ndeclare function open(url?: string, target?: string, features?: string, replace?: boolean): any; \ndeclare function postMessage(message: any, targetOrigin: string, ports?: any): void; \ndeclare function print(): void; \ndeclare function prompt(message?: string, _default?: string): string; \ndeclare function releaseEvents(): void; \ndeclare function requestAnimationFrame(callback: FrameRequestCallback): number; \ndeclare function resizeBy(x?: number, y?: number): void; \ndeclare function resizeTo(x?: number, y?: number): void; \ndeclare function scroll(x?: number, y?: number): void; \ndeclare function scrollBy(x?: number, y?: number): void; \ndeclare function scrollTo(x?: number, y?: number): void; \ndeclare function webkitConvertPointFromNodeToPage(node: Node, pt: WebKitPoint): WebKitPoint; \ndeclare function webkitConvertPointFromPageToNode(node: Node, pt: WebKitPoint): WebKitPoint; \ndeclare function toString(): string; \ndeclare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \ndeclare function dispatchEvent(evt: Event): boolean; \ndeclare function removeEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \ndeclare function clearInterval(handle: number): void; \ndeclare function clearTimeout(handle: number): void; \ndeclare function setInterval(handler: any, timeout?: any, ...args: any[]): number; \ndeclare function setTimeout(handler: any, timeout?: any, ...args: any[]): number; \ndeclare function clearImmediate(handle: number): void; \ndeclare function msClearImmediate(handle: number): void; \ndeclare function msSetImmediate(expression: any, ...args: any[]): number; \ndeclare function setImmediate(expression: any, ...args: any[]): number; \ndeclare var sessionStorage: Storage; \ndeclare var localStorage: Storage; \ndeclare var console: Console; \ndeclare var onpointercancel: (ev: PointerEvent) => any; \ndeclare var onpointerdown: (ev: PointerEvent) => any; \ndeclare var onpointerenter: (ev: PointerEvent) => any; \ndeclare var onpointerleave: (ev: PointerEvent) => any; \ndeclare var onpointermove: (ev: PointerEvent) => any; \ndeclare var onpointerout: (ev: PointerEvent) => any; \ndeclare var onpointerover: (ev: PointerEvent) => any; \ndeclare var onpointerup: (ev: PointerEvent) => any; \ndeclare var onwheel: (ev: WheelEvent) => any; \ndeclare var indexedDB: IDBFactory; \ndeclare var msIndexedDB: IDBFactory; \ndeclare function atob(encodedString: string): string; \ndeclare function btoa(rawString: string): string; \ndeclare function addEventListener(type: "MSGestureChange", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSGestureDoubleTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSGestureEnd", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSGestureHold", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSGestureStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSGestureTap", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSInertiaStart", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSPointerCancel", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSPointerDown", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSPointerEnter", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSPointerLeave", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSPointerMove", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSPointerOut", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSPointerOver", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "MSPointerUp", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "afterprint", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "beforeprint", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "beforeunload", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "compassneedscalibration", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "contextmenu", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "devicemotion", listener: (ev: DeviceMotionEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "deviceorientation", listener: (ev: DeviceOrientationEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "hashchange", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "message", listener: (ev: MessageEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "mouseenter", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "mouseleave", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "offline", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "online", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "orientationchange", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "pagehide", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "pageshow", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "popstate", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "readystatechange", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "resize", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "storage", listener: (ev: StorageEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "unload", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: "wheel", listener: (ev: WheelEvent) => any, useCapture?: boolean): void; \ndeclare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void; \n///////////////////////////// \n/// WorkerGlobalScope APIs  \n///////////////////////////// \n// These are only available in a Web Worker  \ndeclare function importScripts(...urls: string[]): void; \n \n \n///////////////////////////// \n/// Windows Script Host APIS \n///////////////////////////// \n \n \ninterface ActiveXObject { \n    new (s: string): any; \n} \ndeclare var ActiveXObject: ActiveXObject; \n \ninterface ITextWriter { \n    Write(s: string): void; \n    WriteLine(s: string): void; \n    Close(): void; \n} \n \ninterface TextStreamBase { \n    /** \n     * The column number of the current character position in an input stream. \n     */ \n    Column: number; \n \n    /** \n     * The current line number in an input stream. \n     */ \n    Line: number; \n \n    /** \n     * Closes a text stream. \n     * It is not necessary to close standard streams; they close automatically when the process ends. If  \n     * you close a standard stream, be aware that any other pointers to that standard stream become invalid. \n     */ \n    Close(): void; \n} \n \ninterface TextStreamWriter extends TextStreamBase { \n    /** \n     * Sends a string to an output stream. \n     */ \n    Write(s: string): void; \n \n    /** \n     * Sends a specified number of blank lines (newline characters) to an output stream. \n     */ \n    WriteBlankLines(intLines: number): void; \n \n    /** \n     * Sends a string followed by a newline character to an output stream. \n     */ \n    WriteLine(s: string): void; \n} \n \ninterface TextStreamReader extends TextStreamBase { \n    /** \n     * Returns a specified number of characters from an input stream, starting at the current pointer position. \n     * Does not return until the ENTER key is pressed. \n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode. \n     */ \n    Read(characters: number): string; \n \n    /** \n     * Returns all characters from an input stream. \n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode. \n     */ \n    ReadAll(): string; \n \n    /** \n     * Returns an entire line from an input stream. \n     * Although this method extracts the newline character, it does not add it to the returned string. \n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode. \n     */ \n    ReadLine(): string; \n \n    /** \n     * Skips a specified number of characters when reading from an input text stream. \n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode. \n     * @param characters Positive number of characters to skip forward. (Backward skipping is not supported.) \n     */ \n    Skip(characters: number): void; \n \n    /** \n     * Skips the next line when reading from an input text stream. \n     * Can only be used on a stream in reading mode, not writing or appending mode. \n     */ \n    SkipLine(): void; \n \n    /** \n     * Indicates whether the stream pointer position is at the end of a line. \n     */ \n    AtEndOfLine: boolean; \n \n    /** \n     * Indicates whether the stream pointer position is at the end of a stream. \n     */ \n    AtEndOfStream: boolean; \n} \n \ndeclare var WScript: { \n    /** \n    * Outputs text to either a message box (under WScript.exe) or the command console window followed by \n    * a newline (under CScript.exe). \n    */ \n    Echo(s: any): void; \n \n    /** \n     * Exposes the write-only error output stream for the current script. \n     * Can be accessed only while using CScript.exe. \n     */ \n    StdErr: TextStreamWriter; \n \n    /** \n     * Exposes the write-only output stream for the current script. \n     * Can be accessed only while using CScript.exe. \n     */ \n    StdOut: TextStreamWriter; \n    Arguments: { length: number; Item(n: number): string; }; \n \n    /** \n     *  The full path of the currently running script. \n     */ \n    ScriptFullName: string; \n \n    /** \n     * Forces the script to stop immediately, with an optional exit code. \n     */ \n    Quit(exitCode?: number): number; \n \n    /** \n     * The Windows Script Host build version number. \n     */ \n    BuildVersion: number; \n \n    /** \n     * Fully qualified path of the host executable. \n     */ \n    FullName: string; \n \n    /** \n     * Gets/sets the script mode - interactive(true) or batch(false). \n     */ \n    Interactive: boolean; \n \n    /** \n     * The name of the host executable (WScript.exe or CScript.exe). \n     */ \n    Name: string; \n \n    /** \n     * Path of the directory containing the host executable. \n     */ \n    Path: string; \n \n    /** \n     * The filename of the currently running script. \n     */ \n    ScriptName: string; \n \n    /** \n     * Exposes the read-only input stream for the current script. \n     * Can be accessed only while using CScript.exe. \n     */ \n    StdIn: TextStreamReader; \n \n    /** \n     * Windows Script Host version \n     */ \n    Version: string; \n \n    /** \n     * Connects a COM object\'s event sources to functions named with a given prefix, in the form prefix_event. \n     */ \n    ConnectObject(objEventSource: any, strPrefix: string): void; \n \n    /** \n     * Creates a COM object. \n     * @param strProgiID \n     * @param strPrefix Function names in the form prefix_event will be bound to this object\'s COM events. \n     */ \n    CreateObject(strProgID: string, strPrefix?: string): any; \n \n    /** \n     * Disconnects a COM object from its event sources. \n     */ \n    DisconnectObject(obj: any): void; \n \n    /** \n     * Retrieves an existing object with the specified ProgID from memory, or creates a new one from a file. \n     * @param strPathname Fully qualified path to the file containing the object persisted to disk. \n     *                       For objects in memory, pass a zero-length string. \n     * @param strProgID \n     * @param strPrefix Function names in the form prefix_event will be bound to this object\'s COM events. \n     */ \n    GetObject(strPathname: string, strProgID?: string, strPrefix?: string): any; \n \n    /** \n     * Suspends script execution for a specified length of time, then continues execution. \n     * @param intTime Interval (in milliseconds) to suspend script execution. \n     */ \n    Sleep(intTime: number): void; \n}; \n \n/** \n * Allows enumerating over a COM collection, which may not have indexed item access. \n */ \ninterface Enumerator<T> { \n    /** \n     * Returns true if the current item is the last one in the collection, or the collection is empty, \n     * or the current item is undefined. \n     */ \n    atEnd(): boolean; \n \n    /** \n     * Returns the current item in the collection \n     */ \n    item(): T; \n \n    /** \n     * Resets the current item in the collection to the first item. If there are no items in the collection, \n     * the current item is set to undefined. \n     */ \n    moveFirst(): void; \n \n    /** \n     * Moves the current item to the next item in the collection. If the enumerator is at the end of \n     * the collection or the collection is empty, the current item is set to undefined. \n     */ \n    moveNext(): void; \n} \n \ninterface EnumeratorConstructor { \n    new <T>(collection: any): Enumerator<T>; \n    new (collection: any): Enumerator<any>; \n} \n \ndeclare var Enumerator: EnumeratorConstructor; \n \n/** \n * Enables reading from a COM safe array, which might have an alternate lower bound, or multiple dimensions. \n */ \ninterface VBArray<T> { \n    /** \n     * Returns the number of dimensions (1-based). \n     */ \n    dimensions(): number; \n \n    /** \n     * Takes an index for each dimension in the array, and returns the item at the corresponding location. \n     */ \n    getItem(dimension1Index: number, ...dimensionNIndexes: number[]): T; \n \n    /** \n     * Returns the smallest available index for a given dimension. \n     * @param dimension 1-based dimension (defaults to 1) \n     */ \n    lbound(dimension?: number): number; \n \n    /** \n     * Returns the largest available index for a given dimension. \n     * @param dimension 1-based dimension (defaults to 1) \n     */ \n    ubound(dimension?: number): number; \n \n    /** \n     * Returns a Javascript array with all the elements in the VBArray. If there are multiple dimensions, \n     * each successive dimension is appended to the end of the array. \n     * Example: [[1,2,3],[4,5,6]] becomes [1,2,3,4,5,6] \n     */ \n    toArray(): T[]; \n} \n \ninterface VBArrayConstructor { \n    new <T>(safeArray: any): VBArray<T>; \n    new (safeArray: any): VBArray<any>; \n} \n \ndeclare var VBArray: VBArrayConstructor; \n';
	    return {
	        args: [],
	        newLine: '\\n',
	        useCaseSensitiveFileNames: false,
	        write: function(s) {
	            java.lang.System.out.println(s);
	        },
	        readFile: function(fileName) {
	            return files[fileName];
	        },
	        writeFile: function(fileName, data) {
	            files[fileName] = data;
	        },
	        resolvePath: function(path) {
	            return '/foo';
	        },
	        fileExists: function(path) { return false; },
	        directoryExists: function(path) { return false; },
	        createDirectory: function(directoryName) { },
	        getExecutingFilePath: function() {
	            return 'foo';
	        },
	        getCurrentDirectory: function() {
	            return '';
	        },
	        readDirectory: function() { },
	        exit: function(exitCode) { }
	    }
	})();


/***/ }
/******/ ]);