plugins {
    id 'groovy'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.2'
    id 'com.moowork.node' version '0.10'
    id 'nebula.provided-base' version '2.2.2'
}

group = 'com.craigburke'
version = '0.1.1'

sourceCompatibility = 1.7

repositories {
    mavenLocal()
    jcenter()
}

node {
    download = true
}

ext {
    npmDependencies = ['typescript', 'webpack']

    tscPath = 'node_modules/typescript/lib/'
    tscFile = file("${tscPath}/tsc.js")
    updatedTscFile = file("${tscPath}/tsc.tmp.js")
    tscDestination = file('src/main/resources/tsc.js')
}

task('installCompilerDependencies', type: NpmTask) {
    args = ['install'] + npmDependencies
}

task('processCompiler', dependsOn: 'installCompilerDependencies') {
    doLast {
        String libDTs = file("${tscPath}/lib.d.ts").text
            .replaceAll("'", "\\\\'")
            .replaceAll("\r\n", " \\\\n")

        // Copy files
        copy {
            from 'js'
            into tscPath
        }

        // Update sys-shim
        File sysShim = file("${tscPath}/sys-shim.js")
        sysShim.text = sysShim.text.replace('// Add Files', "files['lib.d.ts'] = '${libDTs}';")

        String updatedJs = "ts.sys = require('./sys-shim');"
        updatedTscFile.text = tscFile.text.replaceFirst(/(?ms)ts\.sys.*\}\)\(\);/, updatedJs)
    }
}

task('installCompiler', dependsOn: 'processCompiler', type: NodeTask) {
    script = file('node_modules/webpack/bin/webpack.js')
    args = [updatedTscFile.path, '--output-library', 'ts', '--optimize-minimize', tscDestination.path]
    doFirst {
        String compileFunction = """ \
            module.exports.compile = function(name, data, options) {
                ts.sys.writeFile(name, data);
                options.push(name);
                ts.executeCommandLine(options);
                var jsFileName = name.substring(0, name.length - 2) + 'js';
                return ts.sys.readFile(jsFileName);
            };
            module.exports.addReferenceFile = function(name, data) {
                ts.sys.writeFile(name, data);
            };
        """

        updatedTscFile.text =  updatedTscFile.text.replace('ts.executeCommandLine(ts.sys.args);', compileFunction)
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

bintray {
    user = project.hasProperty('bintrayUsername') ? project.bintrayUsername : ''
    key = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : ''
    publications = ['maven']

    pkg {
        repo = 'asset-pipeline'
        userOrg = 'craigburke'
        name = 'typescript-asset-pipeline'
        licenses = ['Apache-2.0']
    }

}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId 'typescript-asset-pipeline'
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'typescript-asset-pipeline'
                    description "TypeScript extension for the Asset Pipeline Library"
                    url 'https://github.com/craigburke/typescript-asset-pipeline'
                    scm {
                        url 'https://github.com/craigburke/typescript-asset-pipeline'
                        connection 'scm:https://github.com/craigburke/typescript-asset-pipeline.git'
                        developerConnection 'scm:https://github.com/craigburke/typescript-asset-pipeline.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'craigburke'
                            name 'Craig Burke'
                            email 'craig@craigburke.com'
                        }
                    }
                }
            }
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

dependencies {
    provided 'com.bertramlabs.plugins:asset-pipeline-core:2.0.12'
    compile 'com.craigburke.asset:javascript-core:0.2.1'
    compile 'org.codehaus.groovy:groovy-all:2.4.4'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
}